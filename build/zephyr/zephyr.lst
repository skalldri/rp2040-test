
zephyr.elf:     file format elf32-littlearm


Disassembly of section rom_start:

00000000 <_vector_table>:
   0:	90 20 00 20 3d 47 00 00 97 9e 00 00 d5 46 00 00     . . =G.......F..
  10:	d5 46 00 00 d5 46 00 00 d5 46 00 00 00 00 00 00     .F...F...F......
	...
  2c:	b9 39 00 00 d5 46 00 00 00 00 00 00 71 39 00 00     .9...F......q9..
  3c:	71 49 00 00                                         qI..

00000040 <_irq_vector_table>:
  40:	89 3a 00 00 89 3a 00 00 89 3a 00 00 89 3a 00 00     .:...:...:...:..
  50:	89 3a 00 00 89 3a 00 00 89 3a 00 00 89 3a 00 00     .:...:...:...:..
  60:	89 3a 00 00 89 3a 00 00 89 3a 00 00 89 3a 00 00     .:...:...:...:..
  70:	89 3a 00 00 89 3a 00 00 89 3a 00 00 89 3a 00 00     .:...:...:...:..
  80:	89 3a 00 00 89 3a 00 00 89 3a 00 00 89 3a 00 00     .:...:...:...:..
  90:	89 3a 00 00 89 3a 00 00 89 3a 00 00 89 3a 00 00     .:...:...:...:..
  a0:	89 3a 00 00 89 3a 00 00 89 3a 00 00 89 3a 00 00     .:...:...:...:..
  b0:	89 3a 00 00 89 3a 00 00 89 3a 00 00 89 3a 00 00     .:...:...:...:..
  c0:	89 3a 00 00 89 3a 00 00 89 3a 00 00 89 3a 00 00     .:...:...:...:..
  d0:	89 3a 00 00 89 3a 00 00 89 3a 00 00 89 3a 00 00     .:...:...:...:..
  e0:	89 3a 00 00 89 3a 00 00 89 3a 00 00                 .:...:...:..

Disassembly of section text:

000000ec <__aeabi_uldivmod>:
      ec:	b953      	cbnz	r3, 104 <CONFIG_FLASH_SIZE+0x4>
      ee:	b94a      	cbnz	r2, 104 <CONFIG_FLASH_SIZE+0x4>
      f0:	2900      	cmp	r1, #0
      f2:	bf08      	it	eq
      f4:	2800      	cmpeq	r0, #0
      f6:	bf1c      	itt	ne
      f8:	f04f 31ff 	movne.w	r1, #4294967295
      fc:	f04f 30ff 	movne.w	r0, #4294967295
     100:	f000 b80c 	b.w	11c <__aeabi_idiv0>
     104:	f1ad 0c08 	sub.w	ip, sp, #8
     108:	e96d ce04 	strd	ip, lr, [sp, #-16]!
     10c:	f000 f808 	bl	120 <__udivmoddi4>
     110:	f8dd e004 	ldr.w	lr, [sp, #4]
     114:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
     118:	b004      	add	sp, #16
     11a:	4770      	bx	lr

0000011c <__aeabi_idiv0>:
     11c:	4770      	bx	lr
     11e:	bf00      	nop

00000120 <__udivmoddi4>:
     120:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     124:	4607      	mov	r7, r0
     126:	468c      	mov	ip, r1
     128:	4608      	mov	r0, r1
     12a:	4615      	mov	r5, r2
     12c:	463c      	mov	r4, r7
     12e:	4619      	mov	r1, r3
     130:	9e09      	ldr	r6, [sp, #36]	; 0x24
     132:	2b00      	cmp	r3, #0
     134:	f040 80c6 	bne.w	2c4 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x157>
     138:	4282      	cmp	r2, r0
     13a:	fab2 f782 	clz	r7, r2
     13e:	d946      	bls.n	1ce <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x61>
     140:	b14f      	cbz	r7, 156 <__udivmoddi4+0x36>
     142:	f1c7 0e20 	rsb	lr, r7, #32
     146:	fa24 fe0e 	lsr.w	lr, r4, lr
     14a:	fa00 f307 	lsl.w	r3, r0, r7
     14e:	40bd      	lsls	r5, r7
     150:	ea4e 0c03 	orr.w	ip, lr, r3
     154:	40bc      	lsls	r4, r7
     156:	ea4f 4815 	mov.w	r8, r5, lsr #16
     15a:	fbbc f9f8 	udiv	r9, ip, r8
     15e:	fa1f fe85 	uxth.w	lr, r5
     162:	fb08 c319 	mls	r3, r8, r9, ip
     166:	fb09 fa0e 	mul.w	sl, r9, lr
     16a:	0c22      	lsrs	r2, r4, #16
     16c:	ea42 4303 	orr.w	r3, r2, r3, lsl #16
     170:	459a      	cmp	sl, r3
     172:	d928      	bls.n	1c6 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x59>
     174:	18eb      	adds	r3, r5, r3
     176:	f109 30ff 	add.w	r0, r9, #4294967295
     17a:	d204      	bcs.n	186 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x19>
     17c:	459a      	cmp	sl, r3
     17e:	d902      	bls.n	186 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x19>
     180:	f1a9 0002 	sub.w	r0, r9, #2
     184:	442b      	add	r3, r5
     186:	eba3 030a 	sub.w	r3, r3, sl
     18a:	fbb3 f2f8 	udiv	r2, r3, r8
     18e:	fb08 3312 	mls	r3, r8, r2, r3
     192:	fb02 fe0e 	mul.w	lr, r2, lr
     196:	b2a4      	uxth	r4, r4
     198:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
     19c:	45a6      	cmp	lr, r4
     19e:	d914      	bls.n	1ca <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x5d>
     1a0:	192c      	adds	r4, r5, r4
     1a2:	f102 33ff 	add.w	r3, r2, #4294967295
     1a6:	d203      	bcs.n	1b0 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x43>
     1a8:	45a6      	cmp	lr, r4
     1aa:	d901      	bls.n	1b0 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x43>
     1ac:	1e93      	subs	r3, r2, #2
     1ae:	442c      	add	r4, r5
     1b0:	eba4 040e 	sub.w	r4, r4, lr
     1b4:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
     1b8:	b11e      	cbz	r6, 1c2 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x55>
     1ba:	2300      	movs	r3, #0
     1bc:	40fc      	lsrs	r4, r7
     1be:	6034      	str	r4, [r6, #0]
     1c0:	6073      	str	r3, [r6, #4]
     1c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
     1c6:	4648      	mov	r0, r9
     1c8:	e7dd      	b.n	186 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x19>
     1ca:	4613      	mov	r3, r2
     1cc:	e7f0      	b.n	1b0 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x43>
     1ce:	b902      	cbnz	r2, 1d2 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x65>
     1d0:	deff      	udf	#255	; 0xff
     1d2:	bb87      	cbnz	r7, 236 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0xc9>
     1d4:	2101      	movs	r1, #1
     1d6:	1a83      	subs	r3, r0, r2
     1d8:	ea4f 4e15 	mov.w	lr, r5, lsr #16
     1dc:	fbb3 fcfe 	udiv	ip, r3, lr
     1e0:	b2aa      	uxth	r2, r5
     1e2:	fb0e 331c 	mls	r3, lr, ip, r3
     1e6:	fb0c f802 	mul.w	r8, ip, r2
     1ea:	0c20      	lsrs	r0, r4, #16
     1ec:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
     1f0:	4598      	cmp	r8, r3
     1f2:	d963      	bls.n	2bc <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x14f>
     1f4:	18eb      	adds	r3, r5, r3
     1f6:	f10c 30ff 	add.w	r0, ip, #4294967295
     1fa:	d204      	bcs.n	206 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x99>
     1fc:	4598      	cmp	r8, r3
     1fe:	d902      	bls.n	206 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x99>
     200:	f1ac 0002 	sub.w	r0, ip, #2
     204:	442b      	add	r3, r5
     206:	eba3 0308 	sub.w	r3, r3, r8
     20a:	fbb3 fcfe 	udiv	ip, r3, lr
     20e:	fb0e 331c 	mls	r3, lr, ip, r3
     212:	fb0c f202 	mul.w	r2, ip, r2
     216:	b2a4      	uxth	r4, r4
     218:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
     21c:	42a2      	cmp	r2, r4
     21e:	d94f      	bls.n	2c0 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x153>
     220:	192c      	adds	r4, r5, r4
     222:	f10c 33ff 	add.w	r3, ip, #4294967295
     226:	d204      	bcs.n	232 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0xc5>
     228:	42a2      	cmp	r2, r4
     22a:	d902      	bls.n	232 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0xc5>
     22c:	f1ac 0302 	sub.w	r3, ip, #2
     230:	442c      	add	r4, r5
     232:	1aa4      	subs	r4, r4, r2
     234:	e7be      	b.n	1b4 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x47>
     236:	f1c7 0c20 	rsb	ip, r7, #32
     23a:	40bd      	lsls	r5, r7
     23c:	fa20 f80c 	lsr.w	r8, r0, ip
     240:	fa00 f307 	lsl.w	r3, r0, r7
     244:	fa24 fc0c 	lsr.w	ip, r4, ip
     248:	ea4f 4e15 	mov.w	lr, r5, lsr #16
     24c:	ea4c 0203 	orr.w	r2, ip, r3
     250:	fbb8 fcfe 	udiv	ip, r8, lr
     254:	b2ab      	uxth	r3, r5
     256:	fb0e 801c 	mls	r0, lr, ip, r8
     25a:	fb0c f903 	mul.w	r9, ip, r3
     25e:	0c11      	lsrs	r1, r2, #16
     260:	ea41 4000 	orr.w	r0, r1, r0, lsl #16
     264:	4581      	cmp	r9, r0
     266:	fa04 f407 	lsl.w	r4, r4, r7
     26a:	d923      	bls.n	2b4 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x147>
     26c:	1828      	adds	r0, r5, r0
     26e:	f10c 31ff 	add.w	r1, ip, #4294967295
     272:	d204      	bcs.n	27e <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x111>
     274:	4581      	cmp	r9, r0
     276:	d902      	bls.n	27e <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x111>
     278:	f1ac 0102 	sub.w	r1, ip, #2
     27c:	4428      	add	r0, r5
     27e:	eba0 0009 	sub.w	r0, r0, r9
     282:	fbb0 fcfe 	udiv	ip, r0, lr
     286:	fb0e 001c 	mls	r0, lr, ip, r0
     28a:	fb0c f803 	mul.w	r8, ip, r3
     28e:	b292      	uxth	r2, r2
     290:	ea42 4300 	orr.w	r3, r2, r0, lsl #16
     294:	4598      	cmp	r8, r3
     296:	d90f      	bls.n	2b8 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x14b>
     298:	18eb      	adds	r3, r5, r3
     29a:	f10c 32ff 	add.w	r2, ip, #4294967295
     29e:	d204      	bcs.n	2aa <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x13d>
     2a0:	4598      	cmp	r8, r3
     2a2:	d902      	bls.n	2aa <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x13d>
     2a4:	f1ac 0202 	sub.w	r2, ip, #2
     2a8:	442b      	add	r3, r5
     2aa:	eba3 0308 	sub.w	r3, r3, r8
     2ae:	ea42 4101 	orr.w	r1, r2, r1, lsl #16
     2b2:	e791      	b.n	1d8 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x6b>
     2b4:	4661      	mov	r1, ip
     2b6:	e7e2      	b.n	27e <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x111>
     2b8:	4662      	mov	r2, ip
     2ba:	e7f6      	b.n	2aa <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x13d>
     2bc:	4660      	mov	r0, ip
     2be:	e7a2      	b.n	206 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x99>
     2c0:	4663      	mov	r3, ip
     2c2:	e7b6      	b.n	232 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0xc5>
     2c4:	4283      	cmp	r3, r0
     2c6:	d905      	bls.n	2d4 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x167>
     2c8:	b10e      	cbz	r6, 2ce <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x161>
     2ca:	e9c6 7000 	strd	r7, r0, [r6]
     2ce:	2100      	movs	r1, #0
     2d0:	4608      	mov	r0, r1
     2d2:	e776      	b.n	1c2 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x55>
     2d4:	fab3 f183 	clz	r1, r3
     2d8:	b981      	cbnz	r1, 2fc <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x18f>
     2da:	4283      	cmp	r3, r0
     2dc:	d301      	bcc.n	2e2 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x175>
     2de:	42ba      	cmp	r2, r7
     2e0:	d80a      	bhi.n	2f8 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x18b>
     2e2:	1abc      	subs	r4, r7, r2
     2e4:	eb60 0303 	sbc.w	r3, r0, r3
     2e8:	2001      	movs	r0, #1
     2ea:	469c      	mov	ip, r3
     2ec:	2e00      	cmp	r6, #0
     2ee:	d068      	beq.n	3c2 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x255>
     2f0:	e9c6 4c00 	strd	r4, ip, [r6]
     2f4:	2100      	movs	r1, #0
     2f6:	e764      	b.n	1c2 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x55>
     2f8:	4608      	mov	r0, r1
     2fa:	e7f7      	b.n	2ec <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x17f>
     2fc:	f1c1 0c20 	rsb	ip, r1, #32
     300:	408b      	lsls	r3, r1
     302:	fa22 f40c 	lsr.w	r4, r2, ip
     306:	431c      	orrs	r4, r3
     308:	fa20 fb0c 	lsr.w	fp, r0, ip
     30c:	ea4f 4914 	mov.w	r9, r4, lsr #16
     310:	fbbb f8f9 	udiv	r8, fp, r9
     314:	fa1f fe84 	uxth.w	lr, r4
     318:	fb09 bb18 	mls	fp, r9, r8, fp
     31c:	fb08 fa0e 	mul.w	sl, r8, lr
     320:	fa02 f501 	lsl.w	r5, r2, r1
     324:	fa00 f301 	lsl.w	r3, r0, r1
     328:	fa27 f20c 	lsr.w	r2, r7, ip
     32c:	4313      	orrs	r3, r2
     32e:	0c1a      	lsrs	r2, r3, #16
     330:	ea42 420b 	orr.w	r2, r2, fp, lsl #16
     334:	4592      	cmp	sl, r2
     336:	fa07 f701 	lsl.w	r7, r7, r1
     33a:	d93e      	bls.n	3ba <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x24d>
     33c:	18a2      	adds	r2, r4, r2
     33e:	f108 30ff 	add.w	r0, r8, #4294967295
     342:	d204      	bcs.n	34e <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x1e1>
     344:	4592      	cmp	sl, r2
     346:	d902      	bls.n	34e <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x1e1>
     348:	f1a8 0002 	sub.w	r0, r8, #2
     34c:	4422      	add	r2, r4
     34e:	eba2 020a 	sub.w	r2, r2, sl
     352:	fbb2 f8f9 	udiv	r8, r2, r9
     356:	fb09 2218 	mls	r2, r9, r8, r2
     35a:	fb08 fe0e 	mul.w	lr, r8, lr
     35e:	b29b      	uxth	r3, r3
     360:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
     364:	4596      	cmp	lr, r2
     366:	d92a      	bls.n	3be <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x251>
     368:	18a2      	adds	r2, r4, r2
     36a:	f108 33ff 	add.w	r3, r8, #4294967295
     36e:	d204      	bcs.n	37a <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x20d>
     370:	4596      	cmp	lr, r2
     372:	d902      	bls.n	37a <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x20d>
     374:	f1a8 0302 	sub.w	r3, r8, #2
     378:	4422      	add	r2, r4
     37a:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
     37e:	fba0 9305 	umull	r9, r3, r0, r5
     382:	eba2 020e 	sub.w	r2, r2, lr
     386:	429a      	cmp	r2, r3
     388:	46ce      	mov	lr, r9
     38a:	4698      	mov	r8, r3
     38c:	d302      	bcc.n	394 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x227>
     38e:	d106      	bne.n	39e <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x231>
     390:	454f      	cmp	r7, r9
     392:	d204      	bcs.n	39e <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x231>
     394:	ebb9 0e05 	subs.w	lr, r9, r5
     398:	eb63 0804 	sbc.w	r8, r3, r4
     39c:	3801      	subs	r0, #1
     39e:	b186      	cbz	r6, 3c2 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x255>
     3a0:	ebb7 030e 	subs.w	r3, r7, lr
     3a4:	eb62 0708 	sbc.w	r7, r2, r8
     3a8:	fa07 fc0c 	lsl.w	ip, r7, ip
     3ac:	40cb      	lsrs	r3, r1
     3ae:	ea4c 0303 	orr.w	r3, ip, r3
     3b2:	40cf      	lsrs	r7, r1
     3b4:	e9c6 3700 	strd	r3, r7, [r6]
     3b8:	e79c      	b.n	2f4 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x187>
     3ba:	4640      	mov	r0, r8
     3bc:	e7c7      	b.n	34e <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x1e1>
     3be:	4643      	mov	r3, r8
     3c0:	e7db      	b.n	37a <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x20d>
     3c2:	4631      	mov	r1, r6
     3c4:	e6fd      	b.n	1c2 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x55>
	...

000003c8 <k_ms_to_ticks_ceil64>:
 * Rounds up to the next highest output unit.
 *
 * @return The converted time value
 */
static TIME_CONSTEXPR inline uint64_t k_ms_to_ticks_ceil64(uint64_t t)
{
     3c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     3cc:	b0bd      	sub	sp, #244	; 0xf4
     3ce:	af00      	add	r7, sp, #0
     3d0:	e9c7 0130 	strd	r0, r1, [r7, #192]	; 0xc0
     3d4:	e9d7 2330 	ldrd	r2, r3, [r7, #192]	; 0xc0
     3d8:	e9c7 233a 	strd	r2, r3, [r7, #232]	; 0xe8
     3dc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
     3e0:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
     3e4:	2364      	movs	r3, #100	; 0x64
     3e6:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
     3ea:	2301      	movs	r3, #1
     3ec:	f887 30df 	strb.w	r3, [r7, #223]	; 0xdf
     3f0:	2300      	movs	r3, #0
     3f2:	f887 30de 	strb.w	r3, [r7, #222]	; 0xde
     3f6:	2301      	movs	r3, #1
     3f8:	f887 30dd 	strb.w	r3, [r7, #221]	; 0xdd
     3fc:	2300      	movs	r3, #0
     3fe:	f887 30dc 	strb.w	r3, [r7, #220]	; 0xdc
		(to_hz > from_hz) && ((to_hz % from_hz) == 0U);
     402:	f897 30df 	ldrb.w	r3, [r7, #223]	; 0xdf
     406:	2b00      	cmp	r3, #0
     408:	d014      	beq.n	434 <CONFIG_LOG_BUFFER_SIZE+0x34>
	bool mul_ratio = const_hz &&
     40a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
     40e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
     412:	429a      	cmp	r2, r3
     414:	d20e      	bcs.n	434 <CONFIG_LOG_BUFFER_SIZE+0x34>
		(to_hz > from_hz) && ((to_hz % from_hz) == 0U);
     416:	f8d7 10e0 	ldr.w	r1, [r7, #224]	; 0xe0
     41a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
     41e:	fbb1 f2f3 	udiv	r2, r1, r3
     422:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
     426:	fb02 f303 	mul.w	r3, r2, r3
     42a:	1acb      	subs	r3, r1, r3
     42c:	2b00      	cmp	r3, #0
     42e:	d101      	bne.n	434 <CONFIG_LOG_BUFFER_SIZE+0x34>
     430:	2301      	movs	r3, #1
     432:	e000      	b.n	436 <CONFIG_LOG_BUFFER_SIZE+0x36>
     434:	2300      	movs	r3, #0
	bool mul_ratio = const_hz &&
     436:	f887 30db 	strb.w	r3, [r7, #219]	; 0xdb
		(from_hz > to_hz) && ((from_hz % to_hz) == 0U);
     43a:	f897 30df 	ldrb.w	r3, [r7, #223]	; 0xdf
     43e:	2b00      	cmp	r3, #0
     440:	d014      	beq.n	46c <CONFIG_LOG_BUFFER_SIZE+0x6c>
	bool div_ratio = const_hz &&
     442:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
     446:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
     44a:	429a      	cmp	r2, r3
     44c:	d90e      	bls.n	46c <CONFIG_LOG_BUFFER_SIZE+0x6c>
		(from_hz > to_hz) && ((from_hz % to_hz) == 0U);
     44e:	f8d7 10e4 	ldr.w	r1, [r7, #228]	; 0xe4
     452:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
     456:	fbb1 f2f3 	udiv	r2, r1, r3
     45a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
     45e:	fb02 f303 	mul.w	r3, r2, r3
     462:	1acb      	subs	r3, r1, r3
     464:	2b00      	cmp	r3, #0
     466:	d101      	bne.n	46c <CONFIG_LOG_BUFFER_SIZE+0x6c>
     468:	2301      	movs	r3, #1
     46a:	e000      	b.n	46e <CONFIG_LOG_BUFFER_SIZE+0x6e>
     46c:	2300      	movs	r3, #0
	bool div_ratio = const_hz &&
     46e:	f887 30da 	strb.w	r3, [r7, #218]	; 0xda
	if (from_hz == to_hz) {
     472:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
     476:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
     47a:	429a      	cmp	r2, r3
     47c:	d10c      	bne.n	498 <CONFIG_LOG_BUFFER_SIZE+0x98>
		return result32 ? ((uint32_t)t) : t;
     47e:	f897 30de 	ldrb.w	r3, [r7, #222]	; 0xde
     482:	2b00      	cmp	r3, #0
     484:	d005      	beq.n	492 <CONFIG_LOG_BUFFER_SIZE+0x92>
     486:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
     48a:	2200      	movs	r2, #0
     48c:	461c      	mov	r4, r3
     48e:	4615      	mov	r5, r2
     490:	e1de      	b.n	850 <CONFIG_ISR_STACK_SIZE+0x50>
     492:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
     496:	e1db      	b.n	850 <CONFIG_ISR_STACK_SIZE+0x50>
	uint64_t off = 0;
     498:	f04f 0200 	mov.w	r2, #0
     49c:	f04f 0300 	mov.w	r3, #0
     4a0:	e9c7 2334 	strd	r2, r3, [r7, #208]	; 0xd0
	if (!mul_ratio) {
     4a4:	f897 30db 	ldrb.w	r3, [r7, #219]	; 0xdb
     4a8:	f083 0301 	eor.w	r3, r3, #1
     4ac:	b2db      	uxtb	r3, r3
     4ae:	2b00      	cmp	r3, #0
     4b0:	d02a      	beq.n	508 <CONFIG_LOG_BUFFER_SIZE+0x108>
		uint32_t rdivisor = div_ratio ? (from_hz / to_hz) : from_hz;
     4b2:	f897 30da 	ldrb.w	r3, [r7, #218]	; 0xda
     4b6:	2b00      	cmp	r3, #0
     4b8:	d006      	beq.n	4c8 <CONFIG_LOG_BUFFER_SIZE+0xc8>
     4ba:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
     4be:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
     4c2:	fbb2 f3f3 	udiv	r3, r2, r3
     4c6:	e001      	b.n	4cc <CONFIG_LOG_BUFFER_SIZE+0xcc>
     4c8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
     4cc:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
		if (round_up) {
     4d0:	f897 30dd 	ldrb.w	r3, [r7, #221]	; 0xdd
     4d4:	2b00      	cmp	r3, #0
     4d6:	d009      	beq.n	4ec <CONFIG_LOG_BUFFER_SIZE+0xec>
			off = rdivisor - 1U;
     4d8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
     4dc:	3b01      	subs	r3, #1
     4de:	2200      	movs	r2, #0
     4e0:	613b      	str	r3, [r7, #16]
     4e2:	617a      	str	r2, [r7, #20]
     4e4:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
     4e8:	e9c7 2334 	strd	r2, r3, [r7, #208]	; 0xd0
		if (round_off) {
     4ec:	f897 30dc 	ldrb.w	r3, [r7, #220]	; 0xdc
     4f0:	2b00      	cmp	r3, #0
     4f2:	d009      	beq.n	508 <CONFIG_LOG_BUFFER_SIZE+0x108>
			off = rdivisor / 2U;
     4f4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
     4f8:	085b      	lsrs	r3, r3, #1
     4fa:	2200      	movs	r2, #0
     4fc:	60bb      	str	r3, [r7, #8]
     4fe:	60fa      	str	r2, [r7, #12]
     500:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
     504:	e9c7 2334 	strd	r2, r3, [r7, #208]	; 0xd0
	if (div_ratio) {
     508:	f897 30da 	ldrb.w	r3, [r7, #218]	; 0xda
     50c:	2b00      	cmp	r3, #0
     50e:	d038      	beq.n	582 <CONFIG_LOG_BUFFER_SIZE+0x182>
		t += off;
     510:	e9d7 013a 	ldrd	r0, r1, [r7, #232]	; 0xe8
     514:	e9d7 2334 	ldrd	r2, r3, [r7, #208]	; 0xd0
     518:	1886      	adds	r6, r0, r2
     51a:	603e      	str	r6, [r7, #0]
     51c:	eb41 0303 	adc.w	r3, r1, r3
     520:	607b      	str	r3, [r7, #4]
     522:	e9d7 2300 	ldrd	r2, r3, [r7]
     526:	e9c7 233a 	strd	r2, r3, [r7, #232]	; 0xe8
		if (result32 && (t < BIT64(32))) {
     52a:	f897 30de 	ldrb.w	r3, [r7, #222]	; 0xde
     52e:	2b00      	cmp	r3, #0
     530:	d011      	beq.n	556 <CONFIG_LOG_BUFFER_SIZE+0x156>
     532:	e9d7 233a 	ldrd	r2, r3, [r7, #232]	; 0xe8
     536:	2b01      	cmp	r3, #1
     538:	d20d      	bcs.n	556 <CONFIG_LOG_BUFFER_SIZE+0x156>
			return ((uint32_t)t) / (from_hz / to_hz);
     53a:	f8d7 20e8 	ldr.w	r2, [r7, #232]	; 0xe8
     53e:	f8d7 10e4 	ldr.w	r1, [r7, #228]	; 0xe4
     542:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
     546:	fbb1 f3f3 	udiv	r3, r1, r3
     54a:	fbb2 f3f3 	udiv	r3, r2, r3
     54e:	2200      	movs	r2, #0
     550:	461c      	mov	r4, r3
     552:	4615      	mov	r5, r2
     554:	e17c      	b.n	850 <CONFIG_ISR_STACK_SIZE+0x50>
			return t / ((uint64_t)from_hz / to_hz);
     556:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
     55a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
     55e:	fbb2 f3f3 	udiv	r3, r2, r3
     562:	2200      	movs	r2, #0
     564:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
     568:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
     56c:	e9d7 2326 	ldrd	r2, r3, [r7, #152]	; 0x98
     570:	e9d7 013a 	ldrd	r0, r1, [r7, #232]	; 0xe8
     574:	f7ff fdba 	bl	ec <__aeabi_uldivmod>
     578:	4602      	mov	r2, r0
     57a:	460b      	mov	r3, r1
     57c:	4614      	mov	r4, r2
     57e:	461d      	mov	r5, r3
     580:	e166      	b.n	850 <CONFIG_ISR_STACK_SIZE+0x50>
	} else if (mul_ratio) {
     582:	f897 30db 	ldrb.w	r3, [r7, #219]	; 0xdb
     586:	2b00      	cmp	r3, #0
     588:	d031      	beq.n	5ee <CONFIG_LOG_BUFFER_SIZE+0x1ee>
		if (result32) {
     58a:	f897 30de 	ldrb.w	r3, [r7, #222]	; 0xde
     58e:	2b00      	cmp	r3, #0
     590:	d00d      	beq.n	5ae <CONFIG_LOG_BUFFER_SIZE+0x1ae>
			return ((uint32_t)t) * (to_hz / from_hz);
     592:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
     596:	f8d7 10e0 	ldr.w	r1, [r7, #224]	; 0xe0
     59a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
     59e:	fbb1 f2f2 	udiv	r2, r1, r2
     5a2:	fb02 f303 	mul.w	r3, r2, r3
     5a6:	2200      	movs	r2, #0
     5a8:	461c      	mov	r4, r3
     5aa:	4615      	mov	r5, r2
     5ac:	e150      	b.n	850 <CONFIG_ISR_STACK_SIZE+0x50>
			return t * ((uint64_t)to_hz / from_hz);
     5ae:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
     5b2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
     5b6:	fbb2 f3f3 	udiv	r3, r2, r3
     5ba:	2200      	movs	r2, #0
     5bc:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
     5c0:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
     5c4:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
     5c8:	e9d7 8924 	ldrd	r8, r9, [r7, #144]	; 0x90
     5cc:	464a      	mov	r2, r9
     5ce:	fb02 f203 	mul.w	r2, r2, r3
     5d2:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
     5d6:	4641      	mov	r1, r8
     5d8:	fb01 f303 	mul.w	r3, r1, r3
     5dc:	4413      	add	r3, r2
     5de:	f8d7 20e8 	ldr.w	r2, [r7, #232]	; 0xe8
     5e2:	4641      	mov	r1, r8
     5e4:	fba2 4501 	umull	r4, r5, r2, r1
     5e8:	442b      	add	r3, r5
     5ea:	461d      	mov	r5, r3
     5ec:	e130      	b.n	850 <CONFIG_ISR_STACK_SIZE+0x50>
		if (result32) {
     5ee:	f897 30de 	ldrb.w	r3, [r7, #222]	; 0xde
     5f2:	2b00      	cmp	r3, #0
     5f4:	d035      	beq.n	662 <CONFIG_LOG_BUFFER_SIZE+0x262>
			return (uint32_t)((t * to_hz + off) / from_hz);
     5f6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
     5fa:	2200      	movs	r2, #0
     5fc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
     600:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
     604:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
     608:	e9d7 ab22 	ldrd	sl, fp, [r7, #136]	; 0x88
     60c:	465a      	mov	r2, fp
     60e:	fb02 f203 	mul.w	r2, r2, r3
     612:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
     616:	4651      	mov	r1, sl
     618:	fb01 f303 	mul.w	r3, r1, r3
     61c:	4413      	add	r3, r2
     61e:	f8d7 20e8 	ldr.w	r2, [r7, #232]	; 0xe8
     622:	4651      	mov	r1, sl
     624:	fba2 8901 	umull	r8, r9, r2, r1
     628:	444b      	add	r3, r9
     62a:	4699      	mov	r9, r3
     62c:	e9d7 2334 	ldrd	r2, r3, [r7, #208]	; 0xd0
     630:	eb18 0102 	adds.w	r1, r8, r2
     634:	f8c7 1080 	str.w	r1, [r7, #128]	; 0x80
     638:	eb49 0303 	adc.w	r3, r9, r3
     63c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
     640:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
     644:	2200      	movs	r2, #0
     646:	67bb      	str	r3, [r7, #120]	; 0x78
     648:	67fa      	str	r2, [r7, #124]	; 0x7c
     64a:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
     64e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
     652:	f7ff fd4b 	bl	ec <__aeabi_uldivmod>
     656:	4602      	mov	r2, r0
     658:	460b      	mov	r3, r1
     65a:	2300      	movs	r3, #0
     65c:	4614      	mov	r4, r2
     65e:	461d      	mov	r5, r3
     660:	e0f6      	b.n	850 <CONFIG_ISR_STACK_SIZE+0x50>
		} else if (const_hz && Z_TMCVT_USE_FAST_ALGO(from_hz, to_hz)) {
     662:	f897 30df 	ldrb.w	r3, [r7, #223]	; 0xdf
     666:	2b00      	cmp	r3, #0
     668:	f000 8082 	beq.w	770 <CONFIG_LOG_BUFFER_SIZE+0x370>
     66c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
     670:	2200      	movs	r2, #0
     672:	673b      	str	r3, [r7, #112]	; 0x70
     674:	677a      	str	r2, [r7, #116]	; 0x74
     676:	4b7a      	ldr	r3, [pc, #488]	; (860 <CONFIG_ISR_STACK_SIZE+0x60>)
     678:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
     67c:	464a      	mov	r2, r9
     67e:	fb03 f202 	mul.w	r2, r3, r2
     682:	2300      	movs	r3, #0
     684:	4641      	mov	r1, r8
     686:	fb01 f303 	mul.w	r3, r1, r3
     68a:	441a      	add	r2, r3
     68c:	4b74      	ldr	r3, [pc, #464]	; (860 <CONFIG_ISR_STACK_SIZE+0x60>)
     68e:	4641      	mov	r1, r8
     690:	fba1 ab03 	umull	sl, fp, r1, r3
     694:	eb02 030b 	add.w	r3, r2, fp
     698:	469b      	mov	fp, r3
     69a:	f1ba 0302 	subs.w	r3, sl, #2
     69e:	66bb      	str	r3, [r7, #104]	; 0x68
     6a0:	f14b 0300 	adc.w	r3, fp, #0
     6a4:	66fb      	str	r3, [r7, #108]	; 0x6c
     6a6:	f04f 32ff 	mov.w	r2, #4294967295
     6aa:	f04f 0300 	mov.w	r3, #0
     6ae:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
     6b2:	f7ff fd1b 	bl	ec <__aeabi_uldivmod>
     6b6:	4602      	mov	r2, r0
     6b8:	460b      	mov	r3, r1
     6ba:	4610      	mov	r0, r2
     6bc:	4619      	mov	r1, r3
     6be:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
     6c2:	2200      	movs	r2, #0
     6c4:	663b      	str	r3, [r7, #96]	; 0x60
     6c6:	667a      	str	r2, [r7, #100]	; 0x64
     6c8:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
     6cc:	4643      	mov	r3, r8
     6ce:	fb03 f201 	mul.w	r2, r3, r1
     6d2:	464b      	mov	r3, r9
     6d4:	fb00 f303 	mul.w	r3, r0, r3
     6d8:	4413      	add	r3, r2
     6da:	4642      	mov	r2, r8
     6dc:	fba0 2102 	umull	r2, r1, r0, r2
     6e0:	f8c7 10bc 	str.w	r1, [r7, #188]	; 0xbc
     6e4:	f8c7 20b8 	str.w	r2, [r7, #184]	; 0xb8
     6e8:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
     6ec:	4413      	add	r3, r2
     6ee:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
     6f2:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
     6f6:	2b01      	cmp	r3, #1
     6f8:	d23a      	bcs.n	770 <CONFIG_LOG_BUFFER_SIZE+0x370>
			return ((t * to_hz + off) / from_hz);
     6fa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
     6fe:	2200      	movs	r2, #0
     700:	65bb      	str	r3, [r7, #88]	; 0x58
     702:	65fa      	str	r2, [r7, #92]	; 0x5c
     704:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
     708:	e9d7 4516 	ldrd	r4, r5, [r7, #88]	; 0x58
     70c:	462a      	mov	r2, r5
     70e:	fb02 f203 	mul.w	r2, r2, r3
     712:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
     716:	4621      	mov	r1, r4
     718:	fb01 f303 	mul.w	r3, r1, r3
     71c:	4413      	add	r3, r2
     71e:	f8d7 20e8 	ldr.w	r2, [r7, #232]	; 0xe8
     722:	4621      	mov	r1, r4
     724:	fba2 2101 	umull	r2, r1, r2, r1
     728:	f8c7 10b4 	str.w	r1, [r7, #180]	; 0xb4
     72c:	f8c7 20b0 	str.w	r2, [r7, #176]	; 0xb0
     730:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
     734:	4413      	add	r3, r2
     736:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
     73a:	e9d7 2334 	ldrd	r2, r3, [r7, #208]	; 0xd0
     73e:	e9d7 452c 	ldrd	r4, r5, [r7, #176]	; 0xb0
     742:	4621      	mov	r1, r4
     744:	1889      	adds	r1, r1, r2
     746:	6539      	str	r1, [r7, #80]	; 0x50
     748:	4629      	mov	r1, r5
     74a:	eb43 0101 	adc.w	r1, r3, r1
     74e:	6579      	str	r1, [r7, #84]	; 0x54
     750:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
     754:	2200      	movs	r2, #0
     756:	64bb      	str	r3, [r7, #72]	; 0x48
     758:	64fa      	str	r2, [r7, #76]	; 0x4c
     75a:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
     75e:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
     762:	f7ff fcc3 	bl	ec <__aeabi_uldivmod>
     766:	4602      	mov	r2, r0
     768:	460b      	mov	r3, r1
     76a:	4614      	mov	r4, r2
     76c:	461d      	mov	r5, r3
     76e:	e06f      	b.n	850 <CONFIG_ISR_STACK_SIZE+0x50>
			return (t / from_hz) * to_hz + ((t % from_hz) * to_hz + off) / from_hz;
     770:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
     774:	2200      	movs	r2, #0
     776:	643b      	str	r3, [r7, #64]	; 0x40
     778:	647a      	str	r2, [r7, #68]	; 0x44
     77a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
     77e:	e9d7 013a 	ldrd	r0, r1, [r7, #232]	; 0xe8
     782:	f7ff fcb3 	bl	ec <__aeabi_uldivmod>
     786:	4602      	mov	r2, r0
     788:	460b      	mov	r3, r1
     78a:	4610      	mov	r0, r2
     78c:	4619      	mov	r1, r3
     78e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
     792:	2200      	movs	r2, #0
     794:	63bb      	str	r3, [r7, #56]	; 0x38
     796:	63fa      	str	r2, [r7, #60]	; 0x3c
     798:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
     79c:	4643      	mov	r3, r8
     79e:	fb03 f201 	mul.w	r2, r3, r1
     7a2:	464b      	mov	r3, r9
     7a4:	fb00 f303 	mul.w	r3, r0, r3
     7a8:	4413      	add	r3, r2
     7aa:	4642      	mov	r2, r8
     7ac:	fba0 2102 	umull	r2, r1, r0, r2
     7b0:	f8c7 10ac 	str.w	r1, [r7, #172]	; 0xac
     7b4:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
     7b8:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
     7bc:	4413      	add	r3, r2
     7be:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
     7c2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
     7c6:	2200      	movs	r2, #0
     7c8:	633b      	str	r3, [r7, #48]	; 0x30
     7ca:	637a      	str	r2, [r7, #52]	; 0x34
     7cc:	e9d7 013a 	ldrd	r0, r1, [r7, #232]	; 0xe8
     7d0:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
     7d4:	f7ff fc8a 	bl	ec <__aeabi_uldivmod>
     7d8:	4610      	mov	r0, r2
     7da:	4619      	mov	r1, r3
     7dc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
     7e0:	2200      	movs	r2, #0
     7e2:	62bb      	str	r3, [r7, #40]	; 0x28
     7e4:	62fa      	str	r2, [r7, #44]	; 0x2c
     7e6:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
     7ea:	4643      	mov	r3, r8
     7ec:	fb03 f201 	mul.w	r2, r3, r1
     7f0:	464b      	mov	r3, r9
     7f2:	fb00 f303 	mul.w	r3, r0, r3
     7f6:	4413      	add	r3, r2
     7f8:	4642      	mov	r2, r8
     7fa:	fba0 2102 	umull	r2, r1, r0, r2
     7fe:	f8c7 10a4 	str.w	r1, [r7, #164]	; 0xa4
     802:	f8c7 20a0 	str.w	r2, [r7, #160]	; 0xa0
     806:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
     80a:	4413      	add	r3, r2
     80c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
     810:	e9d7 2334 	ldrd	r2, r3, [r7, #208]	; 0xd0
     814:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
     818:	4641      	mov	r1, r8
     81a:	1889      	adds	r1, r1, r2
     81c:	6239      	str	r1, [r7, #32]
     81e:	4649      	mov	r1, r9
     820:	eb43 0101 	adc.w	r1, r3, r1
     824:	6279      	str	r1, [r7, #36]	; 0x24
     826:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
     82a:	2200      	movs	r2, #0
     82c:	61bb      	str	r3, [r7, #24]
     82e:	61fa      	str	r2, [r7, #28]
     830:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
     834:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
     838:	f7ff fc58 	bl	ec <__aeabi_uldivmod>
     83c:	4602      	mov	r2, r0
     83e:	460b      	mov	r3, r1
     840:	e9d7 892a 	ldrd	r8, r9, [r7, #168]	; 0xa8
     844:	4641      	mov	r1, r8
     846:	188c      	adds	r4, r1, r2
     848:	4649      	mov	r1, r9
     84a:	eb43 0101 	adc.w	r1, r3, r1
     84e:	460d      	mov	r5, r1
	/* Generated.  Do not edit.  See above. */
	return z_tmcvt(t, Z_HZ_ms, Z_HZ_ticks, true, false, true, false);
     850:	4622      	mov	r2, r4
     852:	462b      	mov	r3, r5
}
     854:	4610      	mov	r0, r2
     856:	4619      	mov	r1, r3
     858:	37f4      	adds	r7, #244	; 0xf4
     85a:	46bd      	mov	sp, r7
     85c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
     860:	01e13380 	.word	0x01e13380

00000864 <main>:
    6,
    0,
    0
);

int main() {
     864:	b580      	push	{r7, lr}
     866:	b08a      	sub	sp, #40	; 0x28
     868:	af04      	add	r7, sp, #16

    while(true) {
        LOG_INF("Hello world!");
     86a:	f007 fd7d 	bl	8368 <k_is_user_context>
     86e:	4603      	mov	r3, r0
     870:	74fb      	strb	r3, [r7, #19]
     872:	2300      	movs	r3, #0
     874:	60bb      	str	r3, [r7, #8]
     876:	4b0b      	ldr	r3, [pc, #44]	; (8a4 <main+0x40>)
     878:	681b      	ldr	r3, [r3, #0]
     87a:	617b      	str	r3, [r7, #20]
     87c:	4b0a      	ldr	r3, [pc, #40]	; (8a8 <main+0x44>)
     87e:	9302      	str	r3, [sp, #8]
     880:	2300      	movs	r3, #0
     882:	9301      	str	r3, [sp, #4]
     884:	2300      	movs	r3, #0
     886:	9300      	str	r3, [sp, #0]
     888:	2300      	movs	r3, #0
     88a:	2203      	movs	r2, #3
     88c:	6979      	ldr	r1, [r7, #20]
     88e:	2000      	movs	r0, #0
     890:	f007 fd98 	bl	83c4 <z_log_msg2_runtime_create>
     894:	2300      	movs	r3, #0
     896:	60fb      	str	r3, [r7, #12]
        k_msleep(10000);
     898:	f242 7010 	movw	r0, #10000	; 0x2710
     89c:	f007 fd6b 	bl	8376 <k_msleep>
    }
     8a0:	e7e3      	b.n	86a <main+0x6>
     8a2:	bf00      	nop
     8a4:	20000000 	.word	0x20000000
     8a8:	0000b808 	.word	0x0000b808

000008ac <_Z19second_thread_entryPvS_S_>:

    return 0;
}

void second_thread_entry(void* a, void* b, void* c) {
     8ac:	b580      	push	{r7, lr}
     8ae:	b08e      	sub	sp, #56	; 0x38
     8b0:	af04      	add	r7, sp, #16
     8b2:	60f8      	str	r0, [r7, #12]
     8b4:	60b9      	str	r1, [r7, #8]
     8b6:	607a      	str	r2, [r7, #4]
    while(true) {
        LOG_INF("Hello world from thread 2!");
     8b8:	f007 fd56 	bl	8368 <k_is_user_context>
     8bc:	4603      	mov	r3, r0
     8be:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
     8c2:	2300      	movs	r3, #0
     8c4:	61bb      	str	r3, [r7, #24]
     8c6:	4b0b      	ldr	r3, [pc, #44]	; (8f4 <_Z19second_thread_entryPvS_S_+0x48>)
     8c8:	681b      	ldr	r3, [r3, #0]
     8ca:	627b      	str	r3, [r7, #36]	; 0x24
     8cc:	4b0a      	ldr	r3, [pc, #40]	; (8f8 <_Z19second_thread_entryPvS_S_+0x4c>)
     8ce:	9302      	str	r3, [sp, #8]
     8d0:	2300      	movs	r3, #0
     8d2:	9301      	str	r3, [sp, #4]
     8d4:	2300      	movs	r3, #0
     8d6:	9300      	str	r3, [sp, #0]
     8d8:	2300      	movs	r3, #0
     8da:	2203      	movs	r2, #3
     8dc:	6a79      	ldr	r1, [r7, #36]	; 0x24
     8de:	2000      	movs	r0, #0
     8e0:	f007 fd70 	bl	83c4 <z_log_msg2_runtime_create>
     8e4:	2300      	movs	r3, #0
     8e6:	61fb      	str	r3, [r7, #28]
        k_msleep(10000);
     8e8:	f242 7010 	movw	r0, #10000	; 0x2710
     8ec:	f007 fd43 	bl	8376 <k_msleep>
    }
     8f0:	e7e2      	b.n	8b8 <_Z19second_thread_entryPvS_S_+0xc>
     8f2:	bf00      	nop
     8f4:	20000000 	.word	0x20000000
     8f8:	0000b818 	.word	0x0000b818

000008fc <linker_is_in_rodata>:
 * @param addr Address.
 *
 * @return True if address identified within read only section.
 */
static inline bool linker_is_in_rodata(const void *addr)
{
     8fc:	b480      	push	{r7}
     8fe:	b083      	sub	sp, #12
     900:	af00      	add	r7, sp, #0
     902:	6078      	str	r0, [r7, #4]
#else
	#define RO_START 0
	#define RO_END 0
#endif

	return (((const char *)addr >= (const char *)RO_START) &&
     904:	687b      	ldr	r3, [r7, #4]
     906:	4a09      	ldr	r2, [pc, #36]	; (92c <linker_is_in_rodata+0x30>)
     908:	4293      	cmp	r3, r2
     90a:	d305      	bcc.n	918 <linker_is_in_rodata+0x1c>
     90c:	687b      	ldr	r3, [r7, #4]
     90e:	4a08      	ldr	r2, [pc, #32]	; (930 <linker_is_in_rodata+0x34>)
     910:	4293      	cmp	r3, r2
     912:	d201      	bcs.n	918 <linker_is_in_rodata+0x1c>
     914:	2301      	movs	r3, #1
     916:	e000      	b.n	91a <linker_is_in_rodata+0x1e>
     918:	2300      	movs	r3, #0
     91a:	f003 0301 	and.w	r3, r3, #1
     91e:	b2db      	uxtb	r3, r3
		((const char *)addr < (const char *)RO_END));

	#undef RO_START
	#undef RO_END
}
     920:	4618      	mov	r0, r3
     922:	370c      	adds	r7, #12
     924:	46bd      	mov	sp, r7
     926:	bc80      	pop	{r7}
     928:	4770      	bx	lr
     92a:	bf00      	nop
     92c:	0000b5bc 	.word	0x0000b5bc
     930:	0000c088 	.word	0x0000c088

00000934 <cbvprintf_package>:
	return cb(str, strl, ctx);
}

int cbvprintf_package(void *packaged, size_t len, uint32_t flags,
		      const char *fmt, va_list ap)
{
     934:	b580      	push	{r7, lr}
     936:	b09c      	sub	sp, #112	; 0x70
     938:	af00      	add	r7, sp, #0
     93a:	60f8      	str	r0, [r7, #12]
     93c:	60b9      	str	r1, [r7, #8]
     93e:	607a      	str	r2, [r7, #4]
     940:	603b      	str	r3, [r7, #0]
#define STR_POS_MASK BIT_MASK(7)

/* Buffer offset abstraction for better code clarity. */
#define BUF_OFFSET ((uintptr_t)buf - (uintptr_t)buf0)

	uint8_t *buf0 = packaged;  /* buffer start (may be NULL) */
     942:	68fb      	ldr	r3, [r7, #12]
     944:	647b      	str	r3, [r7, #68]	; 0x44
	uint8_t *buf = buf0;       /* current buffer position */
     946:	6c7b      	ldr	r3, [r7, #68]	; 0x44
     948:	66fb      	str	r3, [r7, #108]	; 0x6c
	unsigned int size;         /* current argument's size */
	unsigned int align;        /* current argument's required alignment */
	uint8_t str_ptr_pos[16];   /* string pointer positions */
	unsigned int s_idx = 0;    /* index into str_ptr_pos[] */
     94a:	2300      	movs	r3, #0
     94c:	663b      	str	r3, [r7, #96]	; 0x60
	unsigned int s_rw_cnt = 0; /* number of rw strings */
     94e:	2300      	movs	r3, #0
     950:	65fb      	str	r3, [r7, #92]	; 0x5c
	unsigned int s_ro_cnt = 0; /* number of ro strings */
     952:	2300      	movs	r3, #0
     954:	65bb      	str	r3, [r7, #88]	; 0x58
	unsigned int i;
	const char *s;
	bool parsing = false;
     956:	2300      	movs	r3, #0
     958:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
	/* Flag indicates that rw strings are stored as array with positions,
	 * instead of appending them to the package.
	 */
	bool rws_pos_en = !!(flags & CBPRINTF_PACKAGE_ADD_RW_STR_POS);
     95c:	687b      	ldr	r3, [r7, #4]
     95e:	f003 0304 	and.w	r3, r3, #4
     962:	2b00      	cmp	r3, #0
     964:	bf14      	ite	ne
     966:	2301      	movne	r3, #1
     968:	2300      	moveq	r3, #0
     96a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
	/* Get number of first read only strings present in the string.
	 * There is always at least 1 (fmt) but flags can indicate more, e.g
	 * fixed prefix appended to all strings.
	 */
	int fros_cnt = 1 + Z_CBPRINTF_PACKAGE_FIRST_RO_STR_CNT_GET(flags);
     96e:	687b      	ldr	r3, [r7, #4]
     970:	08db      	lsrs	r3, r3, #3
     972:	f003 0307 	and.w	r3, r3, #7
     976:	3301      	adds	r3, #1
     978:	64bb      	str	r3, [r7, #72]	; 0x48

	/* Buffer must be aligned at least to size of a pointer. */
	if ((uintptr_t)packaged % sizeof(void *)) {
     97a:	68fb      	ldr	r3, [r7, #12]
     97c:	f003 0303 	and.w	r3, r3, #3
     980:	2b00      	cmp	r3, #0
     982:	d002      	beq.n	98a <cbvprintf_package+0x56>
		return -EFAULT;
     984:	f06f 030d 	mvn.w	r3, #13
     988:	e32d      	b.n	fe6 <cbvprintf_package+0x6b2>
	 *
	 * Given the next value to store is the format string pointer
	 * which is guaranteed to be at least 4 bytes, we just reserve
	 * a pointer size for the above to preserve alignment.
	 */
	buf += sizeof(char *);
     98a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
     98c:	3304      	adds	r3, #4
     98e:	66fb      	str	r3, [r7, #108]	; 0x6c
	 * When buf0 is NULL we don't store anything.
	 * Instead we count the needed space to store the data.
	 * In this case, incoming len argument indicates the anticipated
	 * buffer "misalignment" offset.
	 */
	if (buf0 == NULL) {
     990:	6c7b      	ldr	r3, [r7, #68]	; 0x44
     992:	2b00      	cmp	r3, #0
     994:	d10b      	bne.n	9ae <cbvprintf_package+0x7a>
		buf += len % CBPRINTF_PACKAGE_ALIGNMENT;
     996:	68bb      	ldr	r3, [r7, #8]
     998:	f003 0307 	and.w	r3, r3, #7
     99c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
     99e:	4413      	add	r3, r2
     9a0:	66fb      	str	r3, [r7, #108]	; 0x6c
		 * the total as this won't be part of the buffer. To avoid
		 * going negative with an unsigned variable, we add an offset
		 * (CBPRINTF_PACKAGE_ALIGNMENT) that will be removed before
		 * returning.
		 */
		len = CBPRINTF_PACKAGE_ALIGNMENT - (len % CBPRINTF_PACKAGE_ALIGNMENT);
     9a2:	68bb      	ldr	r3, [r7, #8]
     9a4:	f003 0307 	and.w	r3, r3, #7
     9a8:	f1c3 0308 	rsb	r3, r3, #8
     9ac:	60bb      	str	r3, [r7, #8]

	/*
	 * Otherwise we must ensure we can store at least
	 * the pointer to the format string itself.
	 */
	if (buf0 != NULL && BUF_OFFSET + sizeof(char *) > len) {
     9ae:	6c7b      	ldr	r3, [r7, #68]	; 0x44
     9b0:	2b00      	cmp	r3, #0
     9b2:	d009      	beq.n	9c8 <cbvprintf_package+0x94>
     9b4:	6efa      	ldr	r2, [r7, #108]	; 0x6c
     9b6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
     9b8:	1ad3      	subs	r3, r2, r3
     9ba:	3304      	adds	r3, #4
     9bc:	68ba      	ldr	r2, [r7, #8]
     9be:	429a      	cmp	r2, r3
     9c0:	d202      	bcs.n	9c8 <cbvprintf_package+0x94>
		return -ENOSPC;
     9c2:	f06f 031b 	mvn.w	r3, #27
     9c6:	e30e      	b.n	fe6 <cbvprintf_package+0x6b2>
	 * Here we branch directly into the code processing strings
	 * which is in the middle of the following while() loop. That's the
	 * reason for the post-decrement on fmt as it will be incremented
	 * prior to the next (actually first) round of that loop.
	 */
	s = fmt--;
     9c8:	683b      	ldr	r3, [r7, #0]
     9ca:	1e5a      	subs	r2, r3, #1
     9cc:	603a      	str	r2, [r7, #0]
     9ce:	653b      	str	r3, [r7, #80]	; 0x50
	align = VA_STACK_ALIGN(char *);
     9d0:	2304      	movs	r3, #4
     9d2:	667b      	str	r3, [r7, #100]	; 0x64
	size = sizeof(char *);
     9d4:	2304      	movs	r3, #4
     9d6:	66bb      	str	r3, [r7, #104]	; 0x68
	goto process_string;
     9d8:	e17b      	b.n	cd2 <cbvprintf_package+0x39e>

	/* Scan the format string */
	while (*++fmt != '\0') {
		if (!parsing) {
     9da:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
     9de:	f083 0301 	eor.w	r3, r3, #1
     9e2:	b2db      	uxtb	r3, r3
     9e4:	2b00      	cmp	r3, #0
     9e6:	d00c      	beq.n	a02 <cbvprintf_package+0xce>
			if (*fmt == '%') {
     9e8:	683b      	ldr	r3, [r7, #0]
     9ea:	781b      	ldrb	r3, [r3, #0]
     9ec:	2b25      	cmp	r3, #37	; 0x25
     9ee:	f040 8230 	bne.w	e52 <cbvprintf_package+0x51e>
				parsing = true;
     9f2:	2301      	movs	r3, #1
     9f4:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
				align = VA_STACK_ALIGN(int);
     9f8:	2304      	movs	r3, #4
     9fa:	667b      	str	r3, [r7, #100]	; 0x64
				size = sizeof(int);
     9fc:	2304      	movs	r3, #4
     9fe:	66bb      	str	r3, [r7, #104]	; 0x68
			}
			continue;
     a00:	e227      	b.n	e52 <cbvprintf_package+0x51e>
		}
		switch (*fmt) {
     a02:	683b      	ldr	r3, [r7, #0]
     a04:	781b      	ldrb	r3, [r3, #0]
     a06:	3b20      	subs	r3, #32
     a08:	2b5a      	cmp	r3, #90	; 0x5a
     a0a:	f200 813d 	bhi.w	c88 <cbvprintf_package+0x354>
     a0e:	a201      	add	r2, pc, #4	; (adr r2, a14 <cbvprintf_package+0xe0>)
     a10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
     a14:	00000e53 	.word	0x00000e53
     a18:	00000c89 	.word	0x00000c89
     a1c:	00000c89 	.word	0x00000c89
     a20:	00000e53 	.word	0x00000e53
     a24:	00000c89 	.word	0x00000c89
     a28:	00000b81 	.word	0x00000b81
     a2c:	00000c89 	.word	0x00000c89
     a30:	00000c89 	.word	0x00000c89
     a34:	00000c89 	.word	0x00000c89
     a38:	00000c89 	.word	0x00000c89
     a3c:	00000c91 	.word	0x00000c91
     a40:	00000e53 	.word	0x00000e53
     a44:	00000c89 	.word	0x00000c89
     a48:	00000e53 	.word	0x00000e53
     a4c:	00000e53 	.word	0x00000e53
     a50:	00000c89 	.word	0x00000c89
     a54:	00000e53 	.word	0x00000e53
     a58:	00000e53 	.word	0x00000e53
     a5c:	00000e53 	.word	0x00000e53
     a60:	00000e53 	.word	0x00000e53
     a64:	00000e53 	.word	0x00000e53
     a68:	00000e53 	.word	0x00000e53
     a6c:	00000e53 	.word	0x00000e53
     a70:	00000e53 	.word	0x00000e53
     a74:	00000e53 	.word	0x00000e53
     a78:	00000e53 	.word	0x00000e53
     a7c:	00000c89 	.word	0x00000c89
     a80:	00000c89 	.word	0x00000c89
     a84:	00000c89 	.word	0x00000c89
     a88:	00000c89 	.word	0x00000c89
     a8c:	00000c89 	.word	0x00000c89
     a90:	00000c89 	.word	0x00000c89
     a94:	00000c89 	.word	0x00000c89
     a98:	00000be5 	.word	0x00000be5
     a9c:	00000c89 	.word	0x00000c89
     aa0:	00000c89 	.word	0x00000c89
     aa4:	00000c89 	.word	0x00000c89
     aa8:	00000be5 	.word	0x00000be5
     aac:	00000be5 	.word	0x00000be5
     ab0:	00000be5 	.word	0x00000be5
     ab4:	00000c89 	.word	0x00000c89
     ab8:	00000c89 	.word	0x00000c89
     abc:	00000c89 	.word	0x00000c89
     ac0:	00000c89 	.word	0x00000c89
     ac4:	00000e53 	.word	0x00000e53
     ac8:	00000c89 	.word	0x00000c89
     acc:	00000c89 	.word	0x00000c89
     ad0:	00000c89 	.word	0x00000c89
     ad4:	00000c89 	.word	0x00000c89
     ad8:	00000c89 	.word	0x00000c89
     adc:	00000c89 	.word	0x00000c89
     ae0:	00000c89 	.word	0x00000c89
     ae4:	00000c89 	.word	0x00000c89
     ae8:	00000c89 	.word	0x00000c89
     aec:	00000c89 	.word	0x00000c89
     af0:	00000c89 	.word	0x00000c89
     af4:	00000ba7 	.word	0x00000ba7
     af8:	00000c89 	.word	0x00000c89
     afc:	00000c89 	.word	0x00000c89
     b00:	00000c89 	.word	0x00000c89
     b04:	00000c89 	.word	0x00000c89
     b08:	00000c89 	.word	0x00000c89
     b0c:	00000c89 	.word	0x00000c89
     b10:	00000c89 	.word	0x00000c89
     b14:	00000c89 	.word	0x00000c89
     b18:	00000be5 	.word	0x00000be5
     b1c:	00000c89 	.word	0x00000c89
     b20:	00000ba7 	.word	0x00000ba7
     b24:	00000ba7 	.word	0x00000ba7
     b28:	00000be5 	.word	0x00000be5
     b2c:	00000be5 	.word	0x00000be5
     b30:	00000be5 	.word	0x00000be5
     b34:	00000e53 	.word	0x00000e53
     b38:	00000ba7 	.word	0x00000ba7
     b3c:	00000b89 	.word	0x00000b89
     b40:	00000c89 	.word	0x00000c89
     b44:	00000e53 	.word	0x00000e53
     b48:	00000c89 	.word	0x00000c89
     b4c:	00000bd5 	.word	0x00000bd5
     b50:	00000ba7 	.word	0x00000ba7
     b54:	00000bd5 	.word	0x00000bd5
     b58:	00000c89 	.word	0x00000c89
     b5c:	00000c89 	.word	0x00000c89
     b60:	00000bd5 	.word	0x00000bd5
     b64:	00000b9d 	.word	0x00000b9d
     b68:	00000ba7 	.word	0x00000ba7
     b6c:	00000c89 	.word	0x00000c89
     b70:	00000c89 	.word	0x00000c89
     b74:	00000ba7 	.word	0x00000ba7
     b78:	00000c89 	.word	0x00000c89
     b7c:	00000b93 	.word	0x00000b93
		case '%':
			parsing = false;
     b80:	2300      	movs	r3, #0
     b82:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
			continue;
     b86:	e164      	b.n	e52 <cbvprintf_package+0x51e>

		case '*':
			break;

		case 'j':
			align = VA_STACK_ALIGN(intmax_t);
     b88:	2308      	movs	r3, #8
     b8a:	667b      	str	r3, [r7, #100]	; 0x64
			size = sizeof(intmax_t);
     b8c:	2308      	movs	r3, #8
     b8e:	66bb      	str	r3, [r7, #104]	; 0x68
			continue;
     b90:	e15f      	b.n	e52 <cbvprintf_package+0x51e>

		case 'z':
			align = VA_STACK_ALIGN(size_t);
     b92:	2304      	movs	r3, #4
     b94:	667b      	str	r3, [r7, #100]	; 0x64
			size = sizeof(size_t);
     b96:	2304      	movs	r3, #4
     b98:	66bb      	str	r3, [r7, #104]	; 0x68
			continue;
     b9a:	e15a      	b.n	e52 <cbvprintf_package+0x51e>

		case 't':
			align = VA_STACK_ALIGN(ptrdiff_t);
     b9c:	2304      	movs	r3, #4
     b9e:	667b      	str	r3, [r7, #100]	; 0x64
			size = sizeof(ptrdiff_t);
     ba0:	2304      	movs	r3, #4
     ba2:	66bb      	str	r3, [r7, #104]	; 0x68
			continue;
     ba4:	e155      	b.n	e52 <cbvprintf_package+0x51e>
		case 'i':
		case 'o':
		case 'u':
		case 'x':
		case 'X':
			if (fmt[-1] == 'l') {
     ba6:	683b      	ldr	r3, [r7, #0]
     ba8:	3b01      	subs	r3, #1
     baa:	781b      	ldrb	r3, [r3, #0]
     bac:	2b6c      	cmp	r3, #108	; 0x6c
     bae:	d10d      	bne.n	bcc <cbvprintf_package+0x298>
				if (fmt[-2] == 'l') {
     bb0:	683b      	ldr	r3, [r7, #0]
     bb2:	3b02      	subs	r3, #2
     bb4:	781b      	ldrb	r3, [r3, #0]
     bb6:	2b6c      	cmp	r3, #108	; 0x6c
     bb8:	d104      	bne.n	bc4 <cbvprintf_package+0x290>
					align = VA_STACK_ALIGN(long long);
     bba:	2308      	movs	r3, #8
     bbc:	667b      	str	r3, [r7, #100]	; 0x64
					size = sizeof(long long);
     bbe:	2308      	movs	r3, #8
     bc0:	66bb      	str	r3, [r7, #104]	; 0x68
     bc2:	e003      	b.n	bcc <cbvprintf_package+0x298>
				} else {
					align = VA_STACK_ALIGN(long);
     bc4:	2304      	movs	r3, #4
     bc6:	667b      	str	r3, [r7, #100]	; 0x64
					size = sizeof(long);
     bc8:	2304      	movs	r3, #4
     bca:	66bb      	str	r3, [r7, #104]	; 0x68
				}
			}
			parsing = false;
     bcc:	2300      	movs	r3, #0
     bce:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
			break;
     bd2:	e05e      	b.n	c92 <cbvprintf_package+0x35e>

		case 's':
		case 'p':
		case 'n':
			align = VA_STACK_ALIGN(void *);
     bd4:	2304      	movs	r3, #4
     bd6:	667b      	str	r3, [r7, #100]	; 0x64
			size = sizeof(void *);
     bd8:	2304      	movs	r3, #4
     bda:	66bb      	str	r3, [r7, #104]	; 0x68
			parsing = false;
     bdc:	2300      	movs	r3, #0
     bde:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
			break;
     be2:	e056      	b.n	c92 <cbvprintf_package+0x35e>
			 * Handle floats separately as they may be
			 * held in a different register set.
			 */
			union { double d; long double ld; } v;

			if (fmt[-1] == 'L') {
     be4:	683b      	ldr	r3, [r7, #0]
     be6:	3b01      	subs	r3, #1
     be8:	781b      	ldrb	r3, [r3, #0]
     bea:	2b4c      	cmp	r3, #76	; 0x4c
     bec:	d10f      	bne.n	c0e <cbvprintf_package+0x2da>
				v.ld = va_arg(ap, long double);
     bee:	6fbb      	ldr	r3, [r7, #120]	; 0x78
     bf0:	3307      	adds	r3, #7
     bf2:	f023 0307 	bic.w	r3, r3, #7
     bf6:	f103 0208 	add.w	r2, r3, #8
     bfa:	67ba      	str	r2, [r7, #120]	; 0x78
     bfc:	e9d3 2300 	ldrd	r2, r3, [r3]
     c00:	e9c7 2306 	strd	r2, r3, [r7, #24]
				align = VA_STACK_ALIGN(long double);
     c04:	2308      	movs	r3, #8
     c06:	667b      	str	r3, [r7, #100]	; 0x64
				size = sizeof(long double);
     c08:	2308      	movs	r3, #8
     c0a:	66bb      	str	r3, [r7, #104]	; 0x68
     c0c:	e00e      	b.n	c2c <cbvprintf_package+0x2f8>
			} else {
				v.d = va_arg(ap, double);
     c0e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
     c10:	3307      	adds	r3, #7
     c12:	f023 0307 	bic.w	r3, r3, #7
     c16:	f103 0208 	add.w	r2, r3, #8
     c1a:	67ba      	str	r2, [r7, #120]	; 0x78
     c1c:	e9d3 2300 	ldrd	r2, r3, [r3]
     c20:	e9c7 2306 	strd	r2, r3, [r7, #24]
				align = VA_STACK_ALIGN(double);
     c24:	2308      	movs	r3, #8
     c26:	667b      	str	r3, [r7, #100]	; 0x64
				size = sizeof(double);
     c28:	2308      	movs	r3, #8
     c2a:	66bb      	str	r3, [r7, #104]	; 0x68
			}
			/* align destination buffer location */
			buf = (void *) ROUND_UP(buf, align);
     c2c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
     c2e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
     c30:	4413      	add	r3, r2
     c32:	1e5a      	subs	r2, r3, #1
     c34:	6e7b      	ldr	r3, [r7, #100]	; 0x64
     c36:	425b      	negs	r3, r3
     c38:	4013      	ands	r3, r2
     c3a:	66fb      	str	r3, [r7, #108]	; 0x6c
			if (buf0 != NULL) {
     c3c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
     c3e:	2b00      	cmp	r3, #0
     c40:	d01a      	beq.n	c78 <cbvprintf_package+0x344>
				/* make sure it fits */
				if (BUF_OFFSET + size > len) {
     c42:	6efa      	ldr	r2, [r7, #108]	; 0x6c
     c44:	6c7b      	ldr	r3, [r7, #68]	; 0x44
     c46:	1ad2      	subs	r2, r2, r3
     c48:	6ebb      	ldr	r3, [r7, #104]	; 0x68
     c4a:	4413      	add	r3, r2
     c4c:	68ba      	ldr	r2, [r7, #8]
     c4e:	429a      	cmp	r2, r3
     c50:	d202      	bcs.n	c58 <cbvprintf_package+0x324>
					return -ENOSPC;
     c52:	f06f 031b 	mvn.w	r3, #27
     c56:	e1c6      	b.n	fe6 <cbvprintf_package+0x6b2>
				}
				if (Z_CBPRINTF_VA_STACK_LL_DBL_MEMCPY) {
					memcpy(buf, &v, size);
				} else if (fmt[-1] == 'L') {
     c58:	683b      	ldr	r3, [r7, #0]
     c5a:	3b01      	subs	r3, #1
     c5c:	781b      	ldrb	r3, [r3, #0]
     c5e:	2b4c      	cmp	r3, #76	; 0x4c
     c60:	d105      	bne.n	c6e <cbvprintf_package+0x33a>
					*(long double *)buf = v.ld;
     c62:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
     c66:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
     c68:	e9c1 2300 	strd	r2, r3, [r1]
     c6c:	e004      	b.n	c78 <cbvprintf_package+0x344>
				} else {
					*(double *)buf = v.d;
     c6e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
     c72:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
     c74:	e9c1 2300 	strd	r2, r3, [r1]
				}
			}
			buf += size;
     c78:	6efa      	ldr	r2, [r7, #108]	; 0x6c
     c7a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
     c7c:	4413      	add	r3, r2
     c7e:	66fb      	str	r3, [r7, #108]	; 0x6c
			parsing = false;
     c80:	2300      	movs	r3, #0
     c82:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
     c86:	e0e4      	b.n	e52 <cbvprintf_package+0x51e>
			continue;
		}

		default:
			parsing = false;
     c88:	2300      	movs	r3, #0
     c8a:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
			continue;
     c8e:	e0e0      	b.n	e52 <cbvprintf_package+0x51e>
			break;
     c90:	bf00      	nop
		}

		/* align destination buffer location */
		buf = (void *) ROUND_UP(buf, align);
     c92:	6efa      	ldr	r2, [r7, #108]	; 0x6c
     c94:	6e7b      	ldr	r3, [r7, #100]	; 0x64
     c96:	4413      	add	r3, r2
     c98:	1e5a      	subs	r2, r3, #1
     c9a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
     c9c:	425b      	negs	r3, r3
     c9e:	4013      	ands	r3, r2
     ca0:	66fb      	str	r3, [r7, #108]	; 0x6c

		/* make sure the data fits */
		if (buf0 != NULL && BUF_OFFSET + size > len) {
     ca2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
     ca4:	2b00      	cmp	r3, #0
     ca6:	d00a      	beq.n	cbe <cbvprintf_package+0x38a>
     ca8:	6efa      	ldr	r2, [r7, #108]	; 0x6c
     caa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
     cac:	1ad2      	subs	r2, r2, r3
     cae:	6ebb      	ldr	r3, [r7, #104]	; 0x68
     cb0:	4413      	add	r3, r2
     cb2:	68ba      	ldr	r2, [r7, #8]
     cb4:	429a      	cmp	r2, r3
     cb6:	d202      	bcs.n	cbe <cbvprintf_package+0x38a>
			return -ENOSPC;
     cb8:	f06f 031b 	mvn.w	r3, #27
     cbc:	e193      	b.n	fe6 <cbvprintf_package+0x6b2>
		}

		/* copy va_list data over to our buffer */
		if (*fmt == 's') {
     cbe:	683b      	ldr	r3, [r7, #0]
     cc0:	781b      	ldrb	r3, [r3, #0]
     cc2:	2b73      	cmp	r3, #115	; 0x73
     cc4:	f040 8084 	bne.w	dd0 <cbvprintf_package+0x49c>
			s = va_arg(ap, char *);
     cc8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
     cca:	1d1a      	adds	r2, r3, #4
     ccc:	67ba      	str	r2, [r7, #120]	; 0x78
     cce:	681b      	ldr	r3, [r3, #0]
     cd0:	653b      	str	r3, [r7, #80]	; 0x50
process_string:
			if (buf0 != NULL) {
     cd2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
     cd4:	2b00      	cmp	r3, #0
     cd6:	d002      	beq.n	cde <cbvprintf_package+0x3aa>
				*(const char **)buf = s;
     cd8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
     cda:	6d3a      	ldr	r2, [r7, #80]	; 0x50
     cdc:	601a      	str	r2, [r3, #0]
			}

			bool is_ro = (fros_cnt-- > 0) ? true : ptr_in_rodata(s);
     cde:	6cbb      	ldr	r3, [r7, #72]	; 0x48
     ce0:	1e5a      	subs	r2, r3, #1
     ce2:	64ba      	str	r2, [r7, #72]	; 0x48
     ce4:	2b00      	cmp	r3, #0
     ce6:	dc05      	bgt.n	cf4 <cbvprintf_package+0x3c0>
     ce8:	6d38      	ldr	r0, [r7, #80]	; 0x50
     cea:	f007 fba4 	bl	8436 <ptr_in_rodata>
     cee:	4603      	mov	r3, r0
     cf0:	2b00      	cmp	r3, #0
     cf2:	d001      	beq.n	cf8 <cbvprintf_package+0x3c4>
     cf4:	2301      	movs	r3, #1
     cf6:	e000      	b.n	cfa <cbvprintf_package+0x3c6>
     cf8:	2300      	movs	r3, #0
     cfa:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
			bool do_ro = !!(flags & CBPRINTF_PACKAGE_ADD_RO_STR_POS);
     cfe:	687b      	ldr	r3, [r7, #4]
     d00:	f003 0302 	and.w	r3, r3, #2
     d04:	2b00      	cmp	r3, #0
     d06:	bf14      	ite	ne
     d08:	2301      	movne	r3, #1
     d0a:	2300      	moveq	r3, #0
     d0c:	f887 3041 	strb.w	r3, [r7, #65]	; 0x41

			if (is_ro && !do_ro) {
     d10:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
     d14:	2b00      	cmp	r3, #0
     d16:	d006      	beq.n	d26 <cbvprintf_package+0x3f2>
     d18:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
     d1c:	f083 0301 	eor.w	r3, r3, #1
     d20:	b2db      	uxtb	r3, r3
     d22:	2b00      	cmp	r3, #0
     d24:	d150      	bne.n	dc8 <cbvprintf_package+0x494>
				/* nothing to do */
			} else {
				uint32_t s_ptr_idx = BUF_OFFSET / sizeof(int);
     d26:	6efa      	ldr	r2, [r7, #108]	; 0x6c
     d28:	6c7b      	ldr	r3, [r7, #68]	; 0x44
     d2a:	1ad3      	subs	r3, r2, r3
     d2c:	089b      	lsrs	r3, r3, #2
     d2e:	63fb      	str	r3, [r7, #60]	; 0x3c
				 * In the do_ro case we must consider
				 * room for possible STR_POS_RO_FLAG.
				 * Otherwise the index range is 8 bits
				 * and any overflow is caught later.
				 */
				if (do_ro && s_ptr_idx > STR_POS_MASK) {
     d30:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
     d34:	2b00      	cmp	r3, #0
     d36:	d005      	beq.n	d44 <cbvprintf_package+0x410>
     d38:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
     d3a:	2b7f      	cmp	r3, #127	; 0x7f
     d3c:	d902      	bls.n	d44 <cbvprintf_package+0x410>
					__ASSERT(false, "String with too many arguments");
					return -EINVAL;
     d3e:	f06f 0315 	mvn.w	r3, #21
     d42:	e150      	b.n	fe6 <cbvprintf_package+0x6b2>
				}

				if (s_idx >= ARRAY_SIZE(str_ptr_pos)) {
     d44:	6e3b      	ldr	r3, [r7, #96]	; 0x60
     d46:	2b0f      	cmp	r3, #15
     d48:	d902      	bls.n	d50 <cbvprintf_package+0x41c>
					__ASSERT(false, "str_ptr_pos[] too small");
					return -EINVAL;
     d4a:	f06f 0315 	mvn.w	r3, #21
     d4e:	e14a      	b.n	fe6 <cbvprintf_package+0x6b2>
				}

				if (buf0 != NULL) {
     d50:	6c7b      	ldr	r3, [r7, #68]	; 0x44
     d52:	2b00      	cmp	r3, #0
     d54:	d021      	beq.n	d9a <cbvprintf_package+0x466>
					/*
					 * Remember string pointer location.
					 * We will append non-ro strings later.
					 */
					str_ptr_pos[s_idx] = s_ptr_idx;
     d56:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
     d58:	b2d9      	uxtb	r1, r3
     d5a:	f107 0220 	add.w	r2, r7, #32
     d5e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
     d60:	4413      	add	r3, r2
     d62:	460a      	mov	r2, r1
     d64:	701a      	strb	r2, [r3, #0]
					if (is_ro) {
     d66:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
     d6a:	2b00      	cmp	r3, #0
     d6c:	d011      	beq.n	d92 <cbvprintf_package+0x45e>
						/* flag read-only string. */
						str_ptr_pos[s_idx] |= STR_POS_RO_FLAG;
     d6e:	f107 0220 	add.w	r2, r7, #32
     d72:	6e3b      	ldr	r3, [r7, #96]	; 0x60
     d74:	4413      	add	r3, r2
     d76:	781b      	ldrb	r3, [r3, #0]
     d78:	f063 037f 	orn	r3, r3, #127	; 0x7f
     d7c:	b2d9      	uxtb	r1, r3
     d7e:	f107 0220 	add.w	r2, r7, #32
     d82:	6e3b      	ldr	r3, [r7, #96]	; 0x60
     d84:	4413      	add	r3, r2
     d86:	460a      	mov	r2, r1
     d88:	701a      	strb	r2, [r3, #0]
						s_ro_cnt++;
     d8a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
     d8c:	3301      	adds	r3, #1
     d8e:	65bb      	str	r3, [r7, #88]	; 0x58
     d90:	e017      	b.n	dc2 <cbvprintf_package+0x48e>
					} else {
						s_rw_cnt++;
     d92:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
     d94:	3301      	adds	r3, #1
     d96:	65fb      	str	r3, [r7, #92]	; 0x5c
     d98:	e013      	b.n	dc2 <cbvprintf_package+0x48e>
					}
				} else if (is_ro || rws_pos_en) {
     d9a:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
     d9e:	2b00      	cmp	r3, #0
     da0:	d103      	bne.n	daa <cbvprintf_package+0x476>
     da2:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
     da6:	2b00      	cmp	r3, #0
     da8:	d003      	beq.n	db2 <cbvprintf_package+0x47e>
					/*
					 * Add only pointer position prefix
					 * when counting strings.
					 */
					len += 1;
     daa:	68bb      	ldr	r3, [r7, #8]
     dac:	3301      	adds	r3, #1
     dae:	60bb      	str	r3, [r7, #8]
     db0:	e007      	b.n	dc2 <cbvprintf_package+0x48e>
				} else {
					/*
					 * Add the string length, the final '\0'
					 * and size of the pointer position prefix.
					 */
					len += strlen(s) + 1 + 1;
     db2:	6d38      	ldr	r0, [r7, #80]	; 0x50
     db4:	f009 f913 	bl	9fde <strlen>
     db8:	4603      	mov	r3, r0
     dba:	3302      	adds	r3, #2
     dbc:	68ba      	ldr	r2, [r7, #8]
     dbe:	4413      	add	r3, r2
     dc0:	60bb      	str	r3, [r7, #8]
				}

				s_idx++;
     dc2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
     dc4:	3301      	adds	r3, #1
     dc6:	663b      	str	r3, [r7, #96]	; 0x60
			}
			buf += sizeof(char *);
     dc8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
     dca:	3304      	adds	r3, #4
     dcc:	66fb      	str	r3, [r7, #108]	; 0x6c
     dce:	e040      	b.n	e52 <cbvprintf_package+0x51e>
		} else if (size == sizeof(int)) {
     dd0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
     dd2:	2b04      	cmp	r3, #4
     dd4:	d10e      	bne.n	df4 <cbvprintf_package+0x4c0>
			int v = va_arg(ap, int);
     dd6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
     dd8:	1d1a      	adds	r2, r3, #4
     dda:	67ba      	str	r2, [r7, #120]	; 0x78
     ddc:	681b      	ldr	r3, [r3, #0]
     dde:	633b      	str	r3, [r7, #48]	; 0x30

			if (buf0 != NULL) {
     de0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
     de2:	2b00      	cmp	r3, #0
     de4:	d002      	beq.n	dec <cbvprintf_package+0x4b8>
				*(int *)buf = v;
     de6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
     de8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
     dea:	601a      	str	r2, [r3, #0]
			}
			buf += sizeof(int);
     dec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
     dee:	3304      	adds	r3, #4
     df0:	66fb      	str	r3, [r7, #108]	; 0x6c
     df2:	e02e      	b.n	e52 <cbvprintf_package+0x51e>
		} else if (size == sizeof(long)) {
     df4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
     df6:	2b04      	cmp	r3, #4
     df8:	d10e      	bne.n	e18 <cbvprintf_package+0x4e4>
			long v = va_arg(ap, long);
     dfa:	6fbb      	ldr	r3, [r7, #120]	; 0x78
     dfc:	1d1a      	adds	r2, r3, #4
     dfe:	67ba      	str	r2, [r7, #120]	; 0x78
     e00:	681b      	ldr	r3, [r3, #0]
     e02:	637b      	str	r3, [r7, #52]	; 0x34

			if (buf0 != NULL) {
     e04:	6c7b      	ldr	r3, [r7, #68]	; 0x44
     e06:	2b00      	cmp	r3, #0
     e08:	d002      	beq.n	e10 <cbvprintf_package+0x4dc>
				*(long *)buf = v;
     e0a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
     e0c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
     e0e:	601a      	str	r2, [r3, #0]
			}
			buf += sizeof(long);
     e10:	6efb      	ldr	r3, [r7, #108]	; 0x6c
     e12:	3304      	adds	r3, #4
     e14:	66fb      	str	r3, [r7, #108]	; 0x6c
     e16:	e01c      	b.n	e52 <cbvprintf_package+0x51e>
		} else if (size == sizeof(long long)) {
     e18:	6ebb      	ldr	r3, [r7, #104]	; 0x68
     e1a:	2b08      	cmp	r3, #8
     e1c:	d116      	bne.n	e4c <cbvprintf_package+0x518>
			long long v = va_arg(ap, long long);
     e1e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
     e20:	3307      	adds	r3, #7
     e22:	f023 0307 	bic.w	r3, r3, #7
     e26:	f103 0208 	add.w	r2, r3, #8
     e2a:	67ba      	str	r2, [r7, #120]	; 0x78
     e2c:	e9d3 2300 	ldrd	r2, r3, [r3]
     e30:	e9c7 2304 	strd	r2, r3, [r7, #16]

			if (buf0 != NULL) {
     e34:	6c7b      	ldr	r3, [r7, #68]	; 0x44
     e36:	2b00      	cmp	r3, #0
     e38:	d004      	beq.n	e44 <cbvprintf_package+0x510>
				if (Z_CBPRINTF_VA_STACK_LL_DBL_MEMCPY) {
					memcpy(buf, &v, sizeof(long long));
				} else {
					*(long long *)buf = v;
     e3a:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
     e3e:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
     e40:	e9c1 2300 	strd	r2, r3, [r1]
				}
			}
			buf += sizeof(long long);
     e44:	6efb      	ldr	r3, [r7, #108]	; 0x6c
     e46:	3308      	adds	r3, #8
     e48:	66fb      	str	r3, [r7, #108]	; 0x6c
     e4a:	e002      	b.n	e52 <cbvprintf_package+0x51e>
		} else {
			__ASSERT(false, "unexpected size %u", size);
			return -EINVAL;
     e4c:	f06f 0315 	mvn.w	r3, #21
     e50:	e0c9      	b.n	fe6 <cbvprintf_package+0x6b2>
	while (*++fmt != '\0') {
     e52:	683b      	ldr	r3, [r7, #0]
     e54:	3301      	adds	r3, #1
     e56:	603b      	str	r3, [r7, #0]
     e58:	683b      	ldr	r3, [r7, #0]
     e5a:	781b      	ldrb	r3, [r3, #0]
     e5c:	2b00      	cmp	r3, #0
     e5e:	f47f adbc 	bne.w	9da <cbvprintf_package+0xa6>
	 * We remember the size of the argument list as a multiple of
	 * sizeof(int) and limit it to a 8-bit field. That means 1020 bytes
	 * worth of va_list, or about 127 arguments on a 64-bit system
	 * (twice that on 32-bit systems). That ought to be good enough.
	 */
	if (BUF_OFFSET / sizeof(int) > 255) {
     e62:	6efa      	ldr	r2, [r7, #108]	; 0x6c
     e64:	6c7b      	ldr	r3, [r7, #68]	; 0x44
     e66:	1ad3      	subs	r3, r2, r3
     e68:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
     e6c:	d302      	bcc.n	e74 <cbvprintf_package+0x540>
		__ASSERT(false, "too many format args");
		return -EINVAL;
     e6e:	f06f 0315 	mvn.w	r3, #21
     e72:	e0b8      	b.n	fe6 <cbvprintf_package+0x6b2>

	/*
	 * If all we wanted was to count required buffer size
	 * then we have it now.
	 */
	if (buf0 == NULL) {
     e74:	6c7b      	ldr	r3, [r7, #68]	; 0x44
     e76:	2b00      	cmp	r3, #0
     e78:	d106      	bne.n	e88 <cbvprintf_package+0x554>
		return BUF_OFFSET + len - CBPRINTF_PACKAGE_ALIGNMENT;
     e7a:	6efa      	ldr	r2, [r7, #108]	; 0x6c
     e7c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
     e7e:	1ad2      	subs	r2, r2, r3
     e80:	68bb      	ldr	r3, [r7, #8]
     e82:	4413      	add	r3, r2
     e84:	3b08      	subs	r3, #8
     e86:	e0ae      	b.n	fe6 <cbvprintf_package+0x6b2>
	}

	/* Clear our buffer header. We made room for it initially. */
	*(char **)buf0 = NULL;
     e88:	6c7b      	ldr	r3, [r7, #68]	; 0x44
     e8a:	2200      	movs	r2, #0
     e8c:	601a      	str	r2, [r3, #0]

	/* Record end of argument list. */
	buf0[0] = BUF_OFFSET / sizeof(int);
     e8e:	6efa      	ldr	r2, [r7, #108]	; 0x6c
     e90:	6c7b      	ldr	r3, [r7, #68]	; 0x44
     e92:	1ad3      	subs	r3, r2, r3
     e94:	089b      	lsrs	r3, r3, #2
     e96:	b2da      	uxtb	r2, r3
     e98:	6c7b      	ldr	r3, [r7, #68]	; 0x44
     e9a:	701a      	strb	r2, [r3, #0]

	if (rws_pos_en) {
     e9c:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
     ea0:	2b00      	cmp	r3, #0
     ea2:	d009      	beq.n	eb8 <cbvprintf_package+0x584>
		/* Strings are appended, update location counter. */
		buf0[1] = 0;
     ea4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
     ea6:	3301      	adds	r3, #1
     ea8:	2200      	movs	r2, #0
     eaa:	701a      	strb	r2, [r3, #0]
		buf0[3] = s_rw_cnt;
     eac:	6c7b      	ldr	r3, [r7, #68]	; 0x44
     eae:	3303      	adds	r3, #3
     eb0:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
     eb2:	b2d2      	uxtb	r2, r2
     eb4:	701a      	strb	r2, [r3, #0]
     eb6:	e008      	b.n	eca <cbvprintf_package+0x596>
	} else {
		/* Strings are appended, update append counter. */
		buf0[1] = s_rw_cnt;
     eb8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
     eba:	3301      	adds	r3, #1
     ebc:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
     ebe:	b2d2      	uxtb	r2, r2
     ec0:	701a      	strb	r2, [r3, #0]
		buf0[3] = 0;
     ec2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
     ec4:	3303      	adds	r3, #3
     ec6:	2200      	movs	r2, #0
     ec8:	701a      	strb	r2, [r3, #0]
	}

	buf0[2] = s_ro_cnt;
     eca:	6c7b      	ldr	r3, [r7, #68]	; 0x44
     ecc:	3302      	adds	r3, #2
     ece:	6dba      	ldr	r2, [r7, #88]	; 0x58
     ed0:	b2d2      	uxtb	r2, r2
     ed2:	701a      	strb	r2, [r3, #0]

	/* Store strings pointer locations of read only strings. */
	if (s_ro_cnt) {
     ed4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
     ed6:	2b00      	cmp	r3, #0
     ed8:	d02c      	beq.n	f34 <cbvprintf_package+0x600>
		for (i = 0; i < s_idx; i++) {
     eda:	2300      	movs	r3, #0
     edc:	657b      	str	r3, [r7, #84]	; 0x54
     ede:	e025      	b.n	f2c <cbvprintf_package+0x5f8>
			if (!(str_ptr_pos[i] & STR_POS_RO_FLAG)) {
     ee0:	f107 0220 	add.w	r2, r7, #32
     ee4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
     ee6:	4413      	add	r3, r2
     ee8:	781b      	ldrb	r3, [r3, #0]
     eea:	b25b      	sxtb	r3, r3
     eec:	2b00      	cmp	r3, #0
     eee:	da19      	bge.n	f24 <cbvprintf_package+0x5f0>
				continue;
			}

			uint8_t pos = str_ptr_pos[i] & STR_POS_MASK;
     ef0:	f107 0220 	add.w	r2, r7, #32
     ef4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
     ef6:	4413      	add	r3, r2
     ef8:	781b      	ldrb	r3, [r3, #0]
     efa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
     efe:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b

			/* make sure it fits */
			if (BUF_OFFSET + 1 > len) {
     f02:	6efa      	ldr	r2, [r7, #108]	; 0x6c
     f04:	6c7b      	ldr	r3, [r7, #68]	; 0x44
     f06:	1ad3      	subs	r3, r2, r3
     f08:	3301      	adds	r3, #1
     f0a:	68ba      	ldr	r2, [r7, #8]
     f0c:	429a      	cmp	r2, r3
     f0e:	d202      	bcs.n	f16 <cbvprintf_package+0x5e2>
				return -ENOSPC;
     f10:	f06f 031b 	mvn.w	r3, #27
     f14:	e067      	b.n	fe6 <cbvprintf_package+0x6b2>
			}
			/* store the pointer position prefix */
			*buf++ = pos;
     f16:	6efb      	ldr	r3, [r7, #108]	; 0x6c
     f18:	1c5a      	adds	r2, r3, #1
     f1a:	66fa      	str	r2, [r7, #108]	; 0x6c
     f1c:	f897 203b 	ldrb.w	r2, [r7, #59]	; 0x3b
     f20:	701a      	strb	r2, [r3, #0]
     f22:	e000      	b.n	f26 <cbvprintf_package+0x5f2>
				continue;
     f24:	bf00      	nop
		for (i = 0; i < s_idx; i++) {
     f26:	6d7b      	ldr	r3, [r7, #84]	; 0x54
     f28:	3301      	adds	r3, #1
     f2a:	657b      	str	r3, [r7, #84]	; 0x54
     f2c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
     f2e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
     f30:	429a      	cmp	r2, r3
     f32:	d3d5      	bcc.n	ee0 <cbvprintf_package+0x5ac>
		}
	}

	/* Store strings prefixed by their pointer location. */
	for (i = 0; i < s_idx; i++) {
     f34:	2300      	movs	r3, #0
     f36:	657b      	str	r3, [r7, #84]	; 0x54
     f38:	e04e      	b.n	fd8 <cbvprintf_package+0x6a4>
		/* Process only RW strings. */
		if (s_ro_cnt && str_ptr_pos[i] & STR_POS_RO_FLAG) {
     f3a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
     f3c:	2b00      	cmp	r3, #0
     f3e:	d007      	beq.n	f50 <cbvprintf_package+0x61c>
     f40:	f107 0220 	add.w	r2, r7, #32
     f44:	6d7b      	ldr	r3, [r7, #84]	; 0x54
     f46:	4413      	add	r3, r2
     f48:	781b      	ldrb	r3, [r3, #0]
     f4a:	b25b      	sxtb	r3, r3
     f4c:	2b00      	cmp	r3, #0
     f4e:	db3f      	blt.n	fd0 <cbvprintf_package+0x69c>
			continue;
		}

		if (rws_pos_en) {
     f50:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
     f54:	2b00      	cmp	r3, #0
     f56:	d002      	beq.n	f5e <cbvprintf_package+0x62a>
			size = 0;
     f58:	2300      	movs	r3, #0
     f5a:	66bb      	str	r3, [r7, #104]	; 0x68
     f5c:	e019      	b.n	f92 <cbvprintf_package+0x65e>
		} else {
			/* retrieve the string pointer */
			s = *(char **)(buf0 + str_ptr_pos[i] * sizeof(int));
     f5e:	f107 0220 	add.w	r2, r7, #32
     f62:	6d7b      	ldr	r3, [r7, #84]	; 0x54
     f64:	4413      	add	r3, r2
     f66:	781b      	ldrb	r3, [r3, #0]
     f68:	009b      	lsls	r3, r3, #2
     f6a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
     f6c:	4413      	add	r3, r2
     f6e:	681b      	ldr	r3, [r3, #0]
     f70:	653b      	str	r3, [r7, #80]	; 0x50
			/* clear the in-buffer pointer (less entropy if compressed) */
			*(char **)(buf0 + str_ptr_pos[i] * sizeof(int)) = NULL;
     f72:	f107 0220 	add.w	r2, r7, #32
     f76:	6d7b      	ldr	r3, [r7, #84]	; 0x54
     f78:	4413      	add	r3, r2
     f7a:	781b      	ldrb	r3, [r3, #0]
     f7c:	009b      	lsls	r3, r3, #2
     f7e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
     f80:	4413      	add	r3, r2
     f82:	2200      	movs	r2, #0
     f84:	601a      	str	r2, [r3, #0]
			/* find the string length including terminating '\0' */
			size = strlen(s) + 1;
     f86:	6d38      	ldr	r0, [r7, #80]	; 0x50
     f88:	f009 f829 	bl	9fde <strlen>
     f8c:	4603      	mov	r3, r0
     f8e:	3301      	adds	r3, #1
     f90:	66bb      	str	r3, [r7, #104]	; 0x68
		}

		/* make sure it fits */
		if (BUF_OFFSET + 1 + size > len) {
     f92:	6efa      	ldr	r2, [r7, #108]	; 0x6c
     f94:	6c7b      	ldr	r3, [r7, #68]	; 0x44
     f96:	1ad2      	subs	r2, r2, r3
     f98:	6ebb      	ldr	r3, [r7, #104]	; 0x68
     f9a:	4413      	add	r3, r2
     f9c:	3301      	adds	r3, #1
     f9e:	68ba      	ldr	r2, [r7, #8]
     fa0:	429a      	cmp	r2, r3
     fa2:	d202      	bcs.n	faa <cbvprintf_package+0x676>
			return -ENOSPC;
     fa4:	f06f 031b 	mvn.w	r3, #27
     fa8:	e01d      	b.n	fe6 <cbvprintf_package+0x6b2>
		}
		/* store the pointer position prefix */
		*buf++ = str_ptr_pos[i];
     faa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
     fac:	1c5a      	adds	r2, r3, #1
     fae:	66fa      	str	r2, [r7, #108]	; 0x6c
     fb0:	f107 0120 	add.w	r1, r7, #32
     fb4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
     fb6:	440a      	add	r2, r1
     fb8:	7812      	ldrb	r2, [r2, #0]
     fba:	701a      	strb	r2, [r3, #0]
		/* copy the string with its terminating '\0' */
		memcpy(buf, s, size);
     fbc:	6eba      	ldr	r2, [r7, #104]	; 0x68
     fbe:	6d39      	ldr	r1, [r7, #80]	; 0x50
     fc0:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
     fc2:	f009 f83f 	bl	a044 <memcpy>
		buf += size;
     fc6:	6efa      	ldr	r2, [r7, #108]	; 0x6c
     fc8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
     fca:	4413      	add	r3, r2
     fcc:	66fb      	str	r3, [r7, #108]	; 0x6c
     fce:	e000      	b.n	fd2 <cbvprintf_package+0x69e>
			continue;
     fd0:	bf00      	nop
	for (i = 0; i < s_idx; i++) {
     fd2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
     fd4:	3301      	adds	r3, #1
     fd6:	657b      	str	r3, [r7, #84]	; 0x54
     fd8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
     fda:	6e3b      	ldr	r3, [r7, #96]	; 0x60
     fdc:	429a      	cmp	r2, r3
     fde:	d3ac      	bcc.n	f3a <cbvprintf_package+0x606>
	/*
	 * TODO: remove pointers for appended strings since they're useless.
	 * TODO: explore leveraging same mechanism to remove alignment padding
	 */

	return BUF_OFFSET;
     fe0:	6efa      	ldr	r2, [r7, #108]	; 0x6c
     fe2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
     fe4:	1ad3      	subs	r3, r2, r3

#undef BUF_OFFSET
#undef STR_POS_RO_FLAG
#undef STR_POS_MASK
}
     fe6:	4618      	mov	r0, r3
     fe8:	3770      	adds	r7, #112	; 0x70
     fea:	46bd      	mov	sp, r7
     fec:	bd80      	pop	{r7, pc}
     fee:	bf00      	nop

00000ff0 <__printk_hook_install>:
 * To be called by the platform's console driver at init time. Installs a
 * routine that outputs one ASCII character at a time.
 * @param fn putc routine to install
 */
void __printk_hook_install(int (*fn)(int))
{
     ff0:	b480      	push	{r7}
     ff2:	b083      	sub	sp, #12
     ff4:	af00      	add	r7, sp, #0
     ff6:	6078      	str	r0, [r7, #4]
	_char_out = fn;
     ff8:	4a03      	ldr	r2, [pc, #12]	; (1008 <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0x8>)
     ffa:	687b      	ldr	r3, [r7, #4]
     ffc:	6013      	str	r3, [r2, #0]
}
     ffe:	bf00      	nop
    1000:	370c      	adds	r7, #12
    1002:	46bd      	mov	sp, r7
    1004:	bc80      	pop	{r7}
    1006:	4770      	bx	lr
    1008:	20000004 	.word	0x20000004

0000100c <char_out>:
struct out_context {
	int count;
};

static int char_out(int c, void *ctx_p)
{
    100c:	b580      	push	{r7, lr}
    100e:	b084      	sub	sp, #16
    1010:	af00      	add	r7, sp, #0
    1012:	6078      	str	r0, [r7, #4]
    1014:	6039      	str	r1, [r7, #0]
	struct out_context *ctx = ctx_p;
    1016:	683b      	ldr	r3, [r7, #0]
    1018:	60fb      	str	r3, [r7, #12]

	ctx->count++;
    101a:	68fb      	ldr	r3, [r7, #12]
    101c:	681b      	ldr	r3, [r3, #0]
    101e:	1c5a      	adds	r2, r3, #1
    1020:	68fb      	ldr	r3, [r7, #12]
    1022:	601a      	str	r2, [r3, #0]
	return _char_out(c);
    1024:	4b04      	ldr	r3, [pc, #16]	; (1038 <char_out+0x2c>)
    1026:	681b      	ldr	r3, [r3, #0]
    1028:	6878      	ldr	r0, [r7, #4]
    102a:	4798      	blx	r3
    102c:	4603      	mov	r3, r0
}
    102e:	4618      	mov	r0, r3
    1030:	3710      	adds	r7, #16
    1032:	46bd      	mov	sp, r7
    1034:	bd80      	pop	{r7, pc}
    1036:	bf00      	nop
    1038:	20000004 	.word	0x20000004

0000103c <vprintk>:

void vprintk(const char *fmt, va_list ap)
{
    103c:	b580      	push	{r7, lr}
    103e:	b086      	sub	sp, #24
    1040:	af00      	add	r7, sp, #0
    1042:	6078      	str	r0, [r7, #4]
    1044:	6039      	str	r1, [r7, #0]
	if (IS_ENABLED(CONFIG_LOG_PRINTK)) {
		z_log_vprintk(fmt, ap);
		return;
	}

	if (k_is_user_context()) {
    1046:	f007 fa6f 	bl	8528 <k_is_user_context>
    104a:	4603      	mov	r3, r0
    104c:	2b00      	cmp	r3, #0
    104e:	d014      	beq.n	107a <vprintk+0x3e>
		struct buf_out_context ctx = { 0 };
    1050:	f107 0310 	add.w	r3, r7, #16
    1054:	2200      	movs	r2, #0
    1056:	601a      	str	r2, [r3, #0]
    1058:	605a      	str	r2, [r3, #4]

		cbvprintf(buf_char_out, &ctx, fmt, ap);
    105a:	f107 0110 	add.w	r1, r7, #16
    105e:	683b      	ldr	r3, [r7, #0]
    1060:	687a      	ldr	r2, [r7, #4]
    1062:	480c      	ldr	r0, [pc, #48]	; (1094 <vprintk+0x58>)
    1064:	f000 faf6 	bl	1654 <cbvprintf>

		if (ctx.buf_count) {
    1068:	697b      	ldr	r3, [r7, #20]
    106a:	2b00      	cmp	r3, #0
    106c:	d00e      	beq.n	108c <vprintk+0x50>
			buf_flush(&ctx);
    106e:	f107 0310 	add.w	r3, r7, #16
    1072:	4618      	mov	r0, r3
    1074:	f007 fa76 	bl	8564 <buf_flush>
    1078:	e008      	b.n	108c <vprintk+0x50>
		}
	} else {
		struct out_context ctx = { 0 };
    107a:	2300      	movs	r3, #0
    107c:	60fb      	str	r3, [r7, #12]
#ifdef CONFIG_PRINTK_SYNC
		k_spinlock_key_t key = k_spin_lock(&lock);
#endif

		cbvprintf(char_out, &ctx, fmt, ap);
    107e:	f107 010c 	add.w	r1, r7, #12
    1082:	683b      	ldr	r3, [r7, #0]
    1084:	687a      	ldr	r2, [r7, #4]
    1086:	4804      	ldr	r0, [pc, #16]	; (1098 <vprintk+0x5c>)
    1088:	f000 fae4 	bl	1654 <cbvprintf>

#ifdef CONFIG_PRINTK_SYNC
		k_spin_unlock(&lock, key);
#endif
	}
}
    108c:	3718      	adds	r7, #24
    108e:	46bd      	mov	sp, r7
    1090:	bd80      	pop	{r7, pc}
    1092:	bf00      	nop
    1094:	0000858d 	.word	0x0000858d
    1098:	0000100d 	.word	0x0000100d

0000109c <z_impl_k_str_out>:

void z_impl_k_str_out(char *c, size_t n)
{
    109c:	b580      	push	{r7, lr}
    109e:	b084      	sub	sp, #16
    10a0:	af00      	add	r7, sp, #0
    10a2:	6078      	str	r0, [r7, #4]
    10a4:	6039      	str	r1, [r7, #0]
	size_t i;
#ifdef CONFIG_PRINTK_SYNC
	k_spinlock_key_t key = k_spin_lock(&lock);
#endif

	for (i = 0; i < n; i++) {
    10a6:	2300      	movs	r3, #0
    10a8:	60fb      	str	r3, [r7, #12]
    10aa:	e00a      	b.n	10c2 <z_impl_k_str_out+0x26>
		_char_out(c[i]);
    10ac:	4b09      	ldr	r3, [pc, #36]	; (10d4 <z_impl_k_str_out+0x38>)
    10ae:	681b      	ldr	r3, [r3, #0]
    10b0:	6879      	ldr	r1, [r7, #4]
    10b2:	68fa      	ldr	r2, [r7, #12]
    10b4:	440a      	add	r2, r1
    10b6:	7812      	ldrb	r2, [r2, #0]
    10b8:	4610      	mov	r0, r2
    10ba:	4798      	blx	r3
	for (i = 0; i < n; i++) {
    10bc:	68fb      	ldr	r3, [r7, #12]
    10be:	3301      	adds	r3, #1
    10c0:	60fb      	str	r3, [r7, #12]
    10c2:	68fa      	ldr	r2, [r7, #12]
    10c4:	683b      	ldr	r3, [r7, #0]
    10c6:	429a      	cmp	r2, r3
    10c8:	d3f0      	bcc.n	10ac <z_impl_k_str_out+0x10>
	}

#ifdef CONFIG_PRINTK_SYNC
	k_spin_unlock(&lock, key);
#endif
}
    10ca:	bf00      	nop
    10cc:	bf00      	nop
    10ce:	3710      	adds	r7, #16
    10d0:	46bd      	mov	sp, r7
    10d2:	bd80      	pop	{r7, pc}
    10d4:	20000004 	.word	0x20000004

000010d8 <vsnprintk>:

	return ret;
}

int vsnprintk(char *str, size_t size, const char *fmt, va_list ap)
{
    10d8:	b580      	push	{r7, lr}
    10da:	b088      	sub	sp, #32
    10dc:	af00      	add	r7, sp, #0
    10de:	60f8      	str	r0, [r7, #12]
    10e0:	60b9      	str	r1, [r7, #8]
    10e2:	607a      	str	r2, [r7, #4]
    10e4:	603b      	str	r3, [r7, #0]
	struct str_context ctx = { str, size, 0 };
    10e6:	68fb      	ldr	r3, [r7, #12]
    10e8:	617b      	str	r3, [r7, #20]
    10ea:	68bb      	ldr	r3, [r7, #8]
    10ec:	61bb      	str	r3, [r7, #24]
    10ee:	2300      	movs	r3, #0
    10f0:	61fb      	str	r3, [r7, #28]

	cbvprintf(str_out, &ctx, fmt, ap);
    10f2:	f107 0114 	add.w	r1, r7, #20
    10f6:	683b      	ldr	r3, [r7, #0]
    10f8:	687a      	ldr	r2, [r7, #4]
    10fa:	4809      	ldr	r0, [pc, #36]	; (1120 <vsnprintk+0x48>)
    10fc:	f000 faaa 	bl	1654 <cbvprintf>

	if (ctx.count < ctx.max) {
    1100:	69fa      	ldr	r2, [r7, #28]
    1102:	69bb      	ldr	r3, [r7, #24]
    1104:	429a      	cmp	r2, r3
    1106:	da05      	bge.n	1114 <vsnprintk+0x3c>
		str[ctx.count] = '\0';
    1108:	69fb      	ldr	r3, [r7, #28]
    110a:	461a      	mov	r2, r3
    110c:	68fb      	ldr	r3, [r7, #12]
    110e:	4413      	add	r3, r2
    1110:	2200      	movs	r2, #0
    1112:	701a      	strb	r2, [r3, #0]
	}

	return ctx.count;
    1114:	69fb      	ldr	r3, [r7, #28]
}
    1116:	4618      	mov	r0, r3
    1118:	3720      	adds	r7, #32
    111a:	46bd      	mov	sp, r7
    111c:	bd80      	pop	{r7, pc}
    111e:	bf00      	nop
    1120:	000085f7 	.word	0x000085f7

00001124 <extract_flags>:
 *
 * @return a pointer the first character that follows the flags.
 */
static inline const char *extract_flags(struct conversion *conv,
					const char *sp)
{
    1124:	b480      	push	{r7}
    1126:	b085      	sub	sp, #20
    1128:	af00      	add	r7, sp, #0
    112a:	6078      	str	r0, [r7, #4]
    112c:	6039      	str	r1, [r7, #0]
	bool loop = true;
    112e:	2301      	movs	r3, #1
    1130:	73fb      	strb	r3, [r7, #15]

	do {
		switch (*sp) {
    1132:	683b      	ldr	r3, [r7, #0]
    1134:	781b      	ldrb	r3, [r3, #0]
    1136:	3b20      	subs	r3, #32
    1138:	2b10      	cmp	r3, #16
    113a:	d843      	bhi.n	11c4 <extract_flags+0xa0>
    113c:	a201      	add	r2, pc, #4	; (adr r2, 1144 <extract_flags+0x20>)
    113e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    1142:	bf00      	nop
    1144:	000011a1 	.word	0x000011a1
    1148:	000011c5 	.word	0x000011c5
    114c:	000011c5 	.word	0x000011c5
    1150:	000011ad 	.word	0x000011ad
    1154:	000011c5 	.word	0x000011c5
    1158:	000011c5 	.word	0x000011c5
    115c:	000011c5 	.word	0x000011c5
    1160:	000011c5 	.word	0x000011c5
    1164:	000011c5 	.word	0x000011c5
    1168:	000011c5 	.word	0x000011c5
    116c:	000011c5 	.word	0x000011c5
    1170:	00001195 	.word	0x00001195
    1174:	000011c5 	.word	0x000011c5
    1178:	00001189 	.word	0x00001189
    117c:	000011c5 	.word	0x000011c5
    1180:	000011c5 	.word	0x000011c5
    1184:	000011b9 	.word	0x000011b9
		case '-':
			conv->flag_dash = true;
    1188:	687a      	ldr	r2, [r7, #4]
    118a:	7813      	ldrb	r3, [r2, #0]
    118c:	f043 0304 	orr.w	r3, r3, #4
    1190:	7013      	strb	r3, [r2, #0]
			break;
    1192:	e019      	b.n	11c8 <extract_flags+0xa4>
		case '+':
			conv->flag_plus = true;
    1194:	687a      	ldr	r2, [r7, #4]
    1196:	7813      	ldrb	r3, [r2, #0]
    1198:	f043 0308 	orr.w	r3, r3, #8
    119c:	7013      	strb	r3, [r2, #0]
			break;
    119e:	e013      	b.n	11c8 <extract_flags+0xa4>
		case ' ':
			conv->flag_space = true;
    11a0:	687a      	ldr	r2, [r7, #4]
    11a2:	7813      	ldrb	r3, [r2, #0]
    11a4:	f043 0310 	orr.w	r3, r3, #16
    11a8:	7013      	strb	r3, [r2, #0]
			break;
    11aa:	e00d      	b.n	11c8 <extract_flags+0xa4>
		case '#':
			conv->flag_hash = true;
    11ac:	687a      	ldr	r2, [r7, #4]
    11ae:	7813      	ldrb	r3, [r2, #0]
    11b0:	f043 0320 	orr.w	r3, r3, #32
    11b4:	7013      	strb	r3, [r2, #0]
			break;
    11b6:	e007      	b.n	11c8 <extract_flags+0xa4>
		case '0':
			conv->flag_zero = true;
    11b8:	687a      	ldr	r2, [r7, #4]
    11ba:	7813      	ldrb	r3, [r2, #0]
    11bc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    11c0:	7013      	strb	r3, [r2, #0]
			break;
    11c2:	e001      	b.n	11c8 <extract_flags+0xa4>
		default:
			loop = false;
    11c4:	2300      	movs	r3, #0
    11c6:	73fb      	strb	r3, [r7, #15]
		}
		if (loop) {
    11c8:	7bfb      	ldrb	r3, [r7, #15]
    11ca:	2b00      	cmp	r3, #0
    11cc:	d002      	beq.n	11d4 <extract_flags+0xb0>
			++sp;
    11ce:	683b      	ldr	r3, [r7, #0]
    11d0:	3301      	adds	r3, #1
    11d2:	603b      	str	r3, [r7, #0]
		}
	} while (loop);
    11d4:	7bfb      	ldrb	r3, [r7, #15]
    11d6:	2b00      	cmp	r3, #0
    11d8:	d1ab      	bne.n	1132 <extract_flags+0xe>

	/* zero && dash => !zero */
	if (conv->flag_zero && conv->flag_dash) {
    11da:	687b      	ldr	r3, [r7, #4]
    11dc:	781b      	ldrb	r3, [r3, #0]
    11de:	f003 0340 	and.w	r3, r3, #64	; 0x40
    11e2:	b2db      	uxtb	r3, r3
    11e4:	2b00      	cmp	r3, #0
    11e6:	d00b      	beq.n	1200 <extract_flags+0xdc>
    11e8:	687b      	ldr	r3, [r7, #4]
    11ea:	781b      	ldrb	r3, [r3, #0]
    11ec:	f003 0304 	and.w	r3, r3, #4
    11f0:	b2db      	uxtb	r3, r3
    11f2:	2b00      	cmp	r3, #0
    11f4:	d004      	beq.n	1200 <extract_flags+0xdc>
		conv->flag_zero = false;
    11f6:	687a      	ldr	r2, [r7, #4]
    11f8:	7813      	ldrb	r3, [r2, #0]
    11fa:	f36f 1386 	bfc	r3, #6, #1
    11fe:	7013      	strb	r3, [r2, #0]
	}

	/* space && plus => !plus, handled in emitter code */

	return sp;
    1200:	683b      	ldr	r3, [r7, #0]
}
    1202:	4618      	mov	r0, r3
    1204:	3714      	adds	r7, #20
    1206:	46bd      	mov	sp, r7
    1208:	bc80      	pop	{r7}
    120a:	4770      	bx	lr

0000120c <extract_length>:
 *
 * @return a pointer the first character that follows the precision.
 */
static inline const char *extract_length(struct conversion *conv,
					 const char *sp)
{
    120c:	b480      	push	{r7}
    120e:	b083      	sub	sp, #12
    1210:	af00      	add	r7, sp, #0
    1212:	6078      	str	r0, [r7, #4]
    1214:	6039      	str	r1, [r7, #0]
	switch (*sp) {
    1216:	683b      	ldr	r3, [r7, #0]
    1218:	781b      	ldrb	r3, [r3, #0]
    121a:	3b4c      	subs	r3, #76	; 0x4c
    121c:	2b2e      	cmp	r3, #46	; 0x2e
    121e:	f200 80be 	bhi.w	139e <extract_length+0x192>
    1222:	a201      	add	r2, pc, #4	; (adr r2, 1228 <extract_length+0x1c>)
    1224:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    1228:	00001381 	.word	0x00001381
    122c:	0000139f 	.word	0x0000139f
    1230:	0000139f 	.word	0x0000139f
    1234:	0000139f 	.word	0x0000139f
    1238:	0000139f 	.word	0x0000139f
    123c:	0000139f 	.word	0x0000139f
    1240:	0000139f 	.word	0x0000139f
    1244:	0000139f 	.word	0x0000139f
    1248:	0000139f 	.word	0x0000139f
    124c:	0000139f 	.word	0x0000139f
    1250:	0000139f 	.word	0x0000139f
    1254:	0000139f 	.word	0x0000139f
    1258:	0000139f 	.word	0x0000139f
    125c:	0000139f 	.word	0x0000139f
    1260:	0000139f 	.word	0x0000139f
    1264:	0000139f 	.word	0x0000139f
    1268:	0000139f 	.word	0x0000139f
    126c:	0000139f 	.word	0x0000139f
    1270:	0000139f 	.word	0x0000139f
    1274:	0000139f 	.word	0x0000139f
    1278:	0000139f 	.word	0x0000139f
    127c:	0000139f 	.word	0x0000139f
    1280:	0000139f 	.word	0x0000139f
    1284:	0000139f 	.word	0x0000139f
    1288:	0000139f 	.word	0x0000139f
    128c:	0000139f 	.word	0x0000139f
    1290:	0000139f 	.word	0x0000139f
    1294:	0000139f 	.word	0x0000139f
    1298:	000012e5 	.word	0x000012e5
    129c:	0000139f 	.word	0x0000139f
    12a0:	00001345 	.word	0x00001345
    12a4:	0000139f 	.word	0x0000139f
    12a8:	00001315 	.word	0x00001315
    12ac:	0000139f 	.word	0x0000139f
    12b0:	0000139f 	.word	0x0000139f
    12b4:	0000139f 	.word	0x0000139f
    12b8:	0000139f 	.word	0x0000139f
    12bc:	0000139f 	.word	0x0000139f
    12c0:	0000139f 	.word	0x0000139f
    12c4:	0000139f 	.word	0x0000139f
    12c8:	0000136d 	.word	0x0000136d
    12cc:	0000139f 	.word	0x0000139f
    12d0:	0000139f 	.word	0x0000139f
    12d4:	0000139f 	.word	0x0000139f
    12d8:	0000139f 	.word	0x0000139f
    12dc:	0000139f 	.word	0x0000139f
    12e0:	00001359 	.word	0x00001359
	case 'h':
		if (*++sp == 'h') {
    12e4:	683b      	ldr	r3, [r7, #0]
    12e6:	3301      	adds	r3, #1
    12e8:	603b      	str	r3, [r7, #0]
    12ea:	683b      	ldr	r3, [r7, #0]
    12ec:	781b      	ldrb	r3, [r3, #0]
    12ee:	2b68      	cmp	r3, #104	; 0x68
    12f0:	d109      	bne.n	1306 <extract_length+0xfa>
			conv->length_mod = LENGTH_HH;
    12f2:	687a      	ldr	r2, [r7, #4]
    12f4:	7853      	ldrb	r3, [r2, #1]
    12f6:	2101      	movs	r1, #1
    12f8:	f361 03c6 	bfi	r3, r1, #3, #4
    12fc:	7053      	strb	r3, [r2, #1]
			++sp;
    12fe:	683b      	ldr	r3, [r7, #0]
    1300:	3301      	adds	r3, #1
    1302:	603b      	str	r3, [r7, #0]
		} else {
			conv->length_mod = LENGTH_H;
		}
		break;
    1304:	e051      	b.n	13aa <extract_length+0x19e>
			conv->length_mod = LENGTH_H;
    1306:	687a      	ldr	r2, [r7, #4]
    1308:	7853      	ldrb	r3, [r2, #1]
    130a:	2102      	movs	r1, #2
    130c:	f361 03c6 	bfi	r3, r1, #3, #4
    1310:	7053      	strb	r3, [r2, #1]
		break;
    1312:	e04a      	b.n	13aa <extract_length+0x19e>
	case 'l':
		if (*++sp == 'l') {
    1314:	683b      	ldr	r3, [r7, #0]
    1316:	3301      	adds	r3, #1
    1318:	603b      	str	r3, [r7, #0]
    131a:	683b      	ldr	r3, [r7, #0]
    131c:	781b      	ldrb	r3, [r3, #0]
    131e:	2b6c      	cmp	r3, #108	; 0x6c
    1320:	d109      	bne.n	1336 <extract_length+0x12a>
			conv->length_mod = LENGTH_LL;
    1322:	687a      	ldr	r2, [r7, #4]
    1324:	7853      	ldrb	r3, [r2, #1]
    1326:	2104      	movs	r1, #4
    1328:	f361 03c6 	bfi	r3, r1, #3, #4
    132c:	7053      	strb	r3, [r2, #1]
			++sp;
    132e:	683b      	ldr	r3, [r7, #0]
    1330:	3301      	adds	r3, #1
    1332:	603b      	str	r3, [r7, #0]
		} else {
			conv->length_mod = LENGTH_L;
		}
		break;
    1334:	e039      	b.n	13aa <extract_length+0x19e>
			conv->length_mod = LENGTH_L;
    1336:	687a      	ldr	r2, [r7, #4]
    1338:	7853      	ldrb	r3, [r2, #1]
    133a:	2103      	movs	r1, #3
    133c:	f361 03c6 	bfi	r3, r1, #3, #4
    1340:	7053      	strb	r3, [r2, #1]
		break;
    1342:	e032      	b.n	13aa <extract_length+0x19e>
	case 'j':
		conv->length_mod = LENGTH_J;
    1344:	687a      	ldr	r2, [r7, #4]
    1346:	7853      	ldrb	r3, [r2, #1]
    1348:	2105      	movs	r1, #5
    134a:	f361 03c6 	bfi	r3, r1, #3, #4
    134e:	7053      	strb	r3, [r2, #1]
		++sp;
    1350:	683b      	ldr	r3, [r7, #0]
    1352:	3301      	adds	r3, #1
    1354:	603b      	str	r3, [r7, #0]
		break;
    1356:	e028      	b.n	13aa <extract_length+0x19e>
	case 'z':
		conv->length_mod = LENGTH_Z;
    1358:	687a      	ldr	r2, [r7, #4]
    135a:	7853      	ldrb	r3, [r2, #1]
    135c:	2106      	movs	r1, #6
    135e:	f361 03c6 	bfi	r3, r1, #3, #4
    1362:	7053      	strb	r3, [r2, #1]
		++sp;
    1364:	683b      	ldr	r3, [r7, #0]
    1366:	3301      	adds	r3, #1
    1368:	603b      	str	r3, [r7, #0]
		break;
    136a:	e01e      	b.n	13aa <extract_length+0x19e>
	case 't':
		conv->length_mod = LENGTH_T;
    136c:	687a      	ldr	r2, [r7, #4]
    136e:	7853      	ldrb	r3, [r2, #1]
    1370:	2107      	movs	r1, #7
    1372:	f361 03c6 	bfi	r3, r1, #3, #4
    1376:	7053      	strb	r3, [r2, #1]
		++sp;
    1378:	683b      	ldr	r3, [r7, #0]
    137a:	3301      	adds	r3, #1
    137c:	603b      	str	r3, [r7, #0]
		break;
    137e:	e014      	b.n	13aa <extract_length+0x19e>
	case 'L':
		conv->length_mod = LENGTH_UPPER_L;
    1380:	687a      	ldr	r2, [r7, #4]
    1382:	7853      	ldrb	r3, [r2, #1]
    1384:	2108      	movs	r1, #8
    1386:	f361 03c6 	bfi	r3, r1, #3, #4
    138a:	7053      	strb	r3, [r2, #1]
		++sp;
    138c:	683b      	ldr	r3, [r7, #0]
    138e:	3301      	adds	r3, #1
    1390:	603b      	str	r3, [r7, #0]

		/* We recognize and consume these, but can't format
		 * them.
		 */
		conv->unsupported = true;
    1392:	687a      	ldr	r2, [r7, #4]
    1394:	7813      	ldrb	r3, [r2, #0]
    1396:	f043 0302 	orr.w	r3, r3, #2
    139a:	7013      	strb	r3, [r2, #0]
		break;
    139c:	e005      	b.n	13aa <extract_length+0x19e>
	default:
		conv->length_mod = LENGTH_NONE;
    139e:	687a      	ldr	r2, [r7, #4]
    13a0:	7853      	ldrb	r3, [r2, #1]
    13a2:	f36f 03c6 	bfc	r3, #3, #4
    13a6:	7053      	strb	r3, [r2, #1]
		break;
    13a8:	bf00      	nop
	}
	return sp;
    13aa:	683b      	ldr	r3, [r7, #0]
}
    13ac:	4618      	mov	r0, r3
    13ae:	370c      	adds	r7, #12
    13b0:	46bd      	mov	sp, r7
    13b2:	bc80      	pop	{r7}
    13b4:	4770      	bx	lr
    13b6:	bf00      	nop

000013b8 <extract_specifier>:
 *
 * @return a pointer the first character that follows the specifier.
 */
static inline const char *extract_specifier(struct conversion *conv,
					    const char *sp)
{
    13b8:	b480      	push	{r7}
    13ba:	b085      	sub	sp, #20
    13bc:	af00      	add	r7, sp, #0
    13be:	6078      	str	r0, [r7, #4]
    13c0:	6039      	str	r1, [r7, #0]
	bool unsupported = false;
    13c2:	2300      	movs	r3, #0
    13c4:	73fb      	strb	r3, [r7, #15]

	conv->specifier = *sp++;
    13c6:	683b      	ldr	r3, [r7, #0]
    13c8:	1c5a      	adds	r2, r3, #1
    13ca:	603a      	str	r2, [r7, #0]
    13cc:	781a      	ldrb	r2, [r3, #0]
    13ce:	687b      	ldr	r3, [r7, #4]
    13d0:	70da      	strb	r2, [r3, #3]

	switch (conv->specifier) {
    13d2:	687b      	ldr	r3, [r7, #4]
    13d4:	78db      	ldrb	r3, [r3, #3]
    13d6:	3b41      	subs	r3, #65	; 0x41
    13d8:	2b37      	cmp	r3, #55	; 0x37
    13da:	f200 80c4 	bhi.w	1566 <extract_specifier+0x1ae>
    13de:	a201      	add	r2, pc, #4	; (adr r2, 13e4 <extract_specifier+0x2c>)
    13e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    13e4:	00001515 	.word	0x00001515
    13e8:	00001567 	.word	0x00001567
    13ec:	00001567 	.word	0x00001567
    13f0:	00001567 	.word	0x00001567
    13f4:	00001515 	.word	0x00001515
    13f8:	00001515 	.word	0x00001515
    13fc:	00001515 	.word	0x00001515
    1400:	00001567 	.word	0x00001567
    1404:	00001567 	.word	0x00001567
    1408:	00001567 	.word	0x00001567
    140c:	00001567 	.word	0x00001567
    1410:	00001567 	.word	0x00001567
    1414:	00001567 	.word	0x00001567
    1418:	00001567 	.word	0x00001567
    141c:	00001567 	.word	0x00001567
    1420:	00001567 	.word	0x00001567
    1424:	00001567 	.word	0x00001567
    1428:	00001567 	.word	0x00001567
    142c:	00001567 	.word	0x00001567
    1430:	00001567 	.word	0x00001567
    1434:	00001567 	.word	0x00001567
    1438:	00001567 	.word	0x00001567
    143c:	00001567 	.word	0x00001567
    1440:	000014d3 	.word	0x000014d3
    1444:	00001567 	.word	0x00001567
    1448:	00001567 	.word	0x00001567
    144c:	00001567 	.word	0x00001567
    1450:	00001567 	.word	0x00001567
    1454:	00001567 	.word	0x00001567
    1458:	00001567 	.word	0x00001567
    145c:	00001567 	.word	0x00001567
    1460:	00001567 	.word	0x00001567
    1464:	00001515 	.word	0x00001515
    1468:	00001567 	.word	0x00001567
    146c:	000014d3 	.word	0x000014d3
    1470:	000014c5 	.word	0x000014c5
    1474:	00001515 	.word	0x00001515
    1478:	00001515 	.word	0x00001515
    147c:	00001515 	.word	0x00001515
    1480:	00001567 	.word	0x00001567
    1484:	000014c5 	.word	0x000014c5
    1488:	00001567 	.word	0x00001567
    148c:	00001567 	.word	0x00001567
    1490:	00001567 	.word	0x00001567
    1494:	00001567 	.word	0x00001567
    1498:	00001527 	.word	0x00001527
    149c:	000014d3 	.word	0x000014d3
    14a0:	00001547 	.word	0x00001547
    14a4:	00001567 	.word	0x00001567
    14a8:	00001567 	.word	0x00001567
    14ac:	00001547 	.word	0x00001547
    14b0:	00001567 	.word	0x00001567
    14b4:	000014d3 	.word	0x000014d3
    14b8:	00001567 	.word	0x00001567
    14bc:	00001567 	.word	0x00001567
    14c0:	000014d3 	.word	0x000014d3
	case SINT_CONV_CASES:
		conv->specifier_cat = SPECIFIER_SINT;
    14c4:	687a      	ldr	r2, [r7, #4]
    14c6:	7893      	ldrb	r3, [r2, #2]
    14c8:	2101      	movs	r1, #1
    14ca:	f361 0302 	bfi	r3, r1, #0, #3
    14ce:	7093      	strb	r3, [r2, #2]
		goto int_conv;
    14d0:	e005      	b.n	14de <extract_specifier+0x126>
	case UINT_CONV_CASES:
		conv->specifier_cat = SPECIFIER_UINT;
    14d2:	687a      	ldr	r2, [r7, #4]
    14d4:	7893      	ldrb	r3, [r2, #2]
    14d6:	2102      	movs	r1, #2
    14d8:	f361 0302 	bfi	r3, r1, #0, #3
    14dc:	7093      	strb	r3, [r2, #2]
int_conv:
		/* L length specifier not acceptable */
		if (conv->length_mod == LENGTH_UPPER_L) {
    14de:	687b      	ldr	r3, [r7, #4]
    14e0:	785b      	ldrb	r3, [r3, #1]
    14e2:	f003 0378 	and.w	r3, r3, #120	; 0x78
    14e6:	b2db      	uxtb	r3, r3
    14e8:	2b40      	cmp	r3, #64	; 0x40
    14ea:	d104      	bne.n	14f6 <extract_specifier+0x13e>
			conv->invalid = true;
    14ec:	687a      	ldr	r2, [r7, #4]
    14ee:	7813      	ldrb	r3, [r2, #0]
    14f0:	f043 0301 	orr.w	r3, r3, #1
    14f4:	7013      	strb	r3, [r2, #0]
		}

		/* For c LENGTH_NONE and LENGTH_L would be ok,
		 * but we don't support formatting wide characters.
		 */
		if (conv->specifier == 'c') {
    14f6:	687b      	ldr	r3, [r7, #4]
    14f8:	78db      	ldrb	r3, [r3, #3]
    14fa:	2b63      	cmp	r3, #99	; 0x63
    14fc:	d139      	bne.n	1572 <extract_specifier+0x1ba>
			unsupported = (conv->length_mod != LENGTH_NONE);
    14fe:	687b      	ldr	r3, [r7, #4]
    1500:	785b      	ldrb	r3, [r3, #1]
    1502:	f003 0378 	and.w	r3, r3, #120	; 0x78
    1506:	b2db      	uxtb	r3, r3
    1508:	2b00      	cmp	r3, #0
    150a:	bf14      	ite	ne
    150c:	2301      	movne	r3, #1
    150e:	2300      	moveq	r3, #0
    1510:	73fb      	strb	r3, [r7, #15]
				break;
			}
		} else {
			;
		}
		break;
    1512:	e02e      	b.n	1572 <extract_specifier+0x1ba>

	case FP_CONV_CASES:
		conv->specifier_cat = SPECIFIER_FP;
    1514:	687a      	ldr	r2, [r7, #4]
    1516:	7893      	ldrb	r3, [r2, #2]
    1518:	2104      	movs	r1, #4
    151a:	f361 0302 	bfi	r3, r1, #0, #3
    151e:	7093      	strb	r3, [r2, #2]

		/* Don't support if disabled */
		if (!IS_ENABLED(CONFIG_CBPRINTF_FP_SUPPORT)) {
			unsupported = true;
    1520:	2301      	movs	r3, #1
    1522:	73fb      	strb	r3, [r7, #15]
			break;
    1524:	e02a      	b.n	157c <extract_specifier+0x1c4>

		break;

		/* PTR cases are distinct */
	case 'n':
		conv->specifier_cat = SPECIFIER_PTR;
    1526:	687a      	ldr	r2, [r7, #4]
    1528:	7893      	ldrb	r3, [r2, #2]
    152a:	2103      	movs	r1, #3
    152c:	f361 0302 	bfi	r3, r1, #0, #3
    1530:	7093      	strb	r3, [r2, #2]
		/* Anything except L */
		if (conv->length_mod == LENGTH_UPPER_L) {
    1532:	687b      	ldr	r3, [r7, #4]
    1534:	785b      	ldrb	r3, [r3, #1]
    1536:	f003 0378 	and.w	r3, r3, #120	; 0x78
    153a:	b2db      	uxtb	r3, r3
    153c:	2b40      	cmp	r3, #64	; 0x40
    153e:	d11a      	bne.n	1576 <extract_specifier+0x1be>
			unsupported = true;
    1540:	2301      	movs	r3, #1
    1542:	73fb      	strb	r3, [r7, #15]
		}
		break;
    1544:	e017      	b.n	1576 <extract_specifier+0x1be>

	case 's':
	case 'p':
		conv->specifier_cat = SPECIFIER_PTR;
    1546:	687a      	ldr	r2, [r7, #4]
    1548:	7893      	ldrb	r3, [r2, #2]
    154a:	2103      	movs	r1, #3
    154c:	f361 0302 	bfi	r3, r1, #0, #3
    1550:	7093      	strb	r3, [r2, #2]
		/* p: only LENGTH_NONE
		 *
		 * s: LENGTH_NONE or LENGTH_L but wide
		 * characters not supported.
		 */
		if (conv->length_mod != LENGTH_NONE) {
    1552:	687b      	ldr	r3, [r7, #4]
    1554:	785b      	ldrb	r3, [r3, #1]
    1556:	f003 0378 	and.w	r3, r3, #120	; 0x78
    155a:	b2db      	uxtb	r3, r3
    155c:	2b00      	cmp	r3, #0
    155e:	d00c      	beq.n	157a <extract_specifier+0x1c2>
			unsupported = true;
    1560:	2301      	movs	r3, #1
    1562:	73fb      	strb	r3, [r7, #15]
		}
		break;
    1564:	e009      	b.n	157a <extract_specifier+0x1c2>

	default:
		conv->invalid = true;
    1566:	687a      	ldr	r2, [r7, #4]
    1568:	7813      	ldrb	r3, [r2, #0]
    156a:	f043 0301 	orr.w	r3, r3, #1
    156e:	7013      	strb	r3, [r2, #0]
		break;
    1570:	e004      	b.n	157c <extract_specifier+0x1c4>
		break;
    1572:	bf00      	nop
    1574:	e002      	b.n	157c <extract_specifier+0x1c4>
		break;
    1576:	bf00      	nop
    1578:	e000      	b.n	157c <extract_specifier+0x1c4>
		break;
    157a:	bf00      	nop
	}

	conv->unsupported |= unsupported;
    157c:	687b      	ldr	r3, [r7, #4]
    157e:	781b      	ldrb	r3, [r3, #0]
    1580:	f3c3 0340 	ubfx	r3, r3, #1, #1
    1584:	b2da      	uxtb	r2, r3
    1586:	7bfb      	ldrb	r3, [r7, #15]
    1588:	4313      	orrs	r3, r2
    158a:	b2db      	uxtb	r3, r3
    158c:	2b00      	cmp	r3, #0
    158e:	bf14      	ite	ne
    1590:	2301      	movne	r3, #1
    1592:	2300      	moveq	r3, #0
    1594:	b2d9      	uxtb	r1, r3
    1596:	687a      	ldr	r2, [r7, #4]
    1598:	7813      	ldrb	r3, [r2, #0]
    159a:	f361 0341 	bfi	r3, r1, #1, #1
    159e:	7013      	strb	r3, [r2, #0]

	return sp;
    15a0:	683b      	ldr	r3, [r7, #0]
}
    15a2:	4618      	mov	r0, r3
    15a4:	3714      	adds	r7, #20
    15a6:	46bd      	mov	sp, r7
    15a8:	bc80      	pop	{r7}
    15aa:	4770      	bx	lr

000015ac <store_count>:
 * @param count the count to be stored.
 */
static inline void store_count(const struct conversion *conv,
			       void *dp,
			       int count)
{
    15ac:	e92d 03b0 	stmdb	sp!, {r4, r5, r7, r8, r9}
    15b0:	b085      	sub	sp, #20
    15b2:	af00      	add	r7, sp, #0
    15b4:	60f8      	str	r0, [r7, #12]
    15b6:	60b9      	str	r1, [r7, #8]
    15b8:	607a      	str	r2, [r7, #4]
	switch ((enum length_mod_enum)conv->length_mod) {
    15ba:	68fb      	ldr	r3, [r7, #12]
    15bc:	785b      	ldrb	r3, [r3, #1]
    15be:	f3c3 03c3 	ubfx	r3, r3, #3, #4
    15c2:	b2db      	uxtb	r3, r3
    15c4:	2b07      	cmp	r3, #7
    15c6:	d83d      	bhi.n	1644 <store_count+0x98>
    15c8:	a201      	add	r2, pc, #4	; (adr r2, 15d0 <store_count+0x24>)
    15ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    15ce:	bf00      	nop
    15d0:	000015f1 	.word	0x000015f1
    15d4:	000015f9 	.word	0x000015f9
    15d8:	00001603 	.word	0x00001603
    15dc:	0000160d 	.word	0x0000160d
    15e0:	00001615 	.word	0x00001615
    15e4:	00001625 	.word	0x00001625
    15e8:	00001635 	.word	0x00001635
    15ec:	0000163d 	.word	0x0000163d
	case LENGTH_NONE:
		*(int *)dp = count;
    15f0:	68bb      	ldr	r3, [r7, #8]
    15f2:	687a      	ldr	r2, [r7, #4]
    15f4:	601a      	str	r2, [r3, #0]
		break;
    15f6:	e026      	b.n	1646 <store_count+0x9a>
	case LENGTH_HH:
		*(signed char *)dp = (signed char)count;
    15f8:	687b      	ldr	r3, [r7, #4]
    15fa:	b25a      	sxtb	r2, r3
    15fc:	68bb      	ldr	r3, [r7, #8]
    15fe:	701a      	strb	r2, [r3, #0]
		break;
    1600:	e021      	b.n	1646 <store_count+0x9a>
	case LENGTH_H:
		*(short *)dp = (short)count;
    1602:	687b      	ldr	r3, [r7, #4]
    1604:	b21a      	sxth	r2, r3
    1606:	68bb      	ldr	r3, [r7, #8]
    1608:	801a      	strh	r2, [r3, #0]
		break;
    160a:	e01c      	b.n	1646 <store_count+0x9a>
	case LENGTH_L:
		*(long *)dp = (long)count;
    160c:	68bb      	ldr	r3, [r7, #8]
    160e:	687a      	ldr	r2, [r7, #4]
    1610:	601a      	str	r2, [r3, #0]
		break;
    1612:	e018      	b.n	1646 <store_count+0x9a>
	case LENGTH_LL:
		*(long long *)dp = (long long)count;
    1614:	687b      	ldr	r3, [r7, #4]
    1616:	17da      	asrs	r2, r3, #31
    1618:	4698      	mov	r8, r3
    161a:	4691      	mov	r9, r2
    161c:	68bb      	ldr	r3, [r7, #8]
    161e:	e9c3 8900 	strd	r8, r9, [r3]
		break;
    1622:	e010      	b.n	1646 <store_count+0x9a>
	case LENGTH_J:
		*(intmax_t *)dp = (intmax_t)count;
    1624:	687b      	ldr	r3, [r7, #4]
    1626:	17da      	asrs	r2, r3, #31
    1628:	461c      	mov	r4, r3
    162a:	4615      	mov	r5, r2
    162c:	68bb      	ldr	r3, [r7, #8]
    162e:	e9c3 4500 	strd	r4, r5, [r3]
		break;
    1632:	e008      	b.n	1646 <store_count+0x9a>
	case LENGTH_Z:
		*(size_t *)dp = (size_t)count;
    1634:	687a      	ldr	r2, [r7, #4]
    1636:	68bb      	ldr	r3, [r7, #8]
    1638:	601a      	str	r2, [r3, #0]
		break;
    163a:	e004      	b.n	1646 <store_count+0x9a>
	case LENGTH_T:
		*(ptrdiff_t *)dp = (ptrdiff_t)count;
    163c:	68bb      	ldr	r3, [r7, #8]
    163e:	687a      	ldr	r2, [r7, #4]
    1640:	601a      	str	r2, [r3, #0]
		break;
    1642:	e000      	b.n	1646 <store_count+0x9a>
	default:
		/* Add an empty default with break, this is a defensive programming.
		 * Static analysis tool won't raise a violation if default is empty,
		 * but has that comment.
		 */
		break;
    1644:	bf00      	nop
	}
}
    1646:	bf00      	nop
    1648:	3714      	adds	r7, #20
    164a:	46bd      	mov	sp, r7
    164c:	e8bd 03b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9}
    1650:	4770      	bx	lr
    1652:	bf00      	nop

00001654 <cbvprintf>:

	return (int)count;
}

int cbvprintf(cbprintf_cb out, void *ctx, const char *fp, va_list ap)
{
    1654:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
    1658:	b0c4      	sub	sp, #272	; 0x110
    165a:	af02      	add	r7, sp, #8
    165c:	65f8      	str	r0, [r7, #92]	; 0x5c
    165e:	65b9      	str	r1, [r7, #88]	; 0x58
    1660:	657a      	str	r2, [r7, #84]	; 0x54
    1662:	653b      	str	r3, [r7, #80]	; 0x50
	char buf[CONVERTED_BUFLEN];
	size_t count = 0;
    1664:	2300      	movs	r3, #0
    1666:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
		return rc; \
	} \
	count += rc; \
} while (false)

	while (*fp != 0) {
    166a:	f000 bd18 	b.w	209e <cbvprintf+0xa4a>
		if (*fp != '%') {
    166e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    1670:	781b      	ldrb	r3, [r3, #0]
    1672:	2b25      	cmp	r3, #37	; 0x25
    1674:	d019      	beq.n	16aa <cbvprintf+0x56>
			OUTC(*fp++);
    1676:	6d7a      	ldr	r2, [r7, #84]	; 0x54
    1678:	1c53      	adds	r3, r2, #1
    167a:	657b      	str	r3, [r7, #84]	; 0x54
    167c:	7813      	ldrb	r3, [r2, #0]
    167e:	461a      	mov	r2, r3
    1680:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
    1682:	6db9      	ldr	r1, [r7, #88]	; 0x58
    1684:	4610      	mov	r0, r2
    1686:	4798      	blx	r3
    1688:	f8c7 0098 	str.w	r0, [r7, #152]	; 0x98
    168c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
    1690:	2b00      	cmp	r3, #0
    1692:	da03      	bge.n	169c <cbvprintf+0x48>
    1694:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
    1698:	f000 bd08 	b.w	20ac <cbvprintf+0xa58>
    169c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
    16a0:	3301      	adds	r3, #1
    16a2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
			continue;
    16a6:	f000 bcfa 	b.w	209e <cbvprintf+0xa4a>
		 * mitigate LLVM code generation bug.
		 */
		struct {
			union argument_value value;
			struct conversion conv;
		} state = {
    16aa:	f107 0268 	add.w	r2, r7, #104	; 0x68
    16ae:	2300      	movs	r3, #0
    16b0:	6013      	str	r3, [r2, #0]
    16b2:	6053      	str	r3, [r2, #4]
    16b4:	6093      	str	r3, [r2, #8]
    16b6:	60d3      	str	r3, [r2, #12]
    16b8:	6113      	str	r3, [r2, #16]
    16ba:	6153      	str	r3, [r2, #20]
			.value = {
				.uint = 0,
			},
		};
		struct conversion *const conv = &state.conv;
    16bc:	f107 0368 	add.w	r3, r7, #104	; 0x68
    16c0:	3308      	adds	r3, #8
    16c2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
		union argument_value *const value = &state.value;
    16c6:	f107 0368 	add.w	r3, r7, #104	; 0x68
    16ca:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
		const char *sp = fp;
    16ce:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    16d0:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
		int width = -1;
    16d4:	f04f 33ff 	mov.w	r3, #4294967295
    16d8:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
		int precision = -1;
    16dc:	f04f 33ff 	mov.w	r3, #4294967295
    16e0:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
		const char *bps = NULL;
    16e4:	2300      	movs	r3, #0
    16e6:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
		const char *bpe = buf + sizeof(buf);
    16ea:	f107 0380 	add.w	r3, r7, #128	; 0x80
    16ee:	3316      	adds	r3, #22
    16f0:	667b      	str	r3, [r7, #100]	; 0x64
		char sign = 0;
    16f2:	2300      	movs	r3, #0
    16f4:	f887 3063 	strb.w	r3, [r7, #99]	; 0x63

		fp = extract_conversion(conv, sp);
    16f8:	f8d7 10dc 	ldr.w	r1, [r7, #220]	; 0xdc
    16fc:	f8d7 00e4 	ldr.w	r0, [r7, #228]	; 0xe4
    1700:	f007 f8e3 	bl	88ca <extract_conversion>
    1704:	6578      	str	r0, [r7, #84]	; 0x54

		/* If dynamic width is specified, process it,
		 * otherwise set width if present.
		 */
		if (conv->width_star) {
    1706:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
    170a:	785b      	ldrb	r3, [r3, #1]
    170c:	f003 0301 	and.w	r3, r3, #1
    1710:	b2db      	uxtb	r3, r3
    1712:	2b00      	cmp	r3, #0
    1714:	d015      	beq.n	1742 <cbvprintf+0xee>
			width = va_arg(ap, int);
    1716:	6d3a      	ldr	r2, [r7, #80]	; 0x50
    1718:	1d13      	adds	r3, r2, #4
    171a:	653b      	str	r3, [r7, #80]	; 0x50
    171c:	6813      	ldr	r3, [r2, #0]
    171e:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0

			if (width < 0) {
    1722:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
    1726:	2b00      	cmp	r3, #0
    1728:	da18      	bge.n	175c <cbvprintf+0x108>
				conv->flag_dash = true;
    172a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
    172e:	7813      	ldrb	r3, [r2, #0]
    1730:	f043 0304 	orr.w	r3, r3, #4
    1734:	7013      	strb	r3, [r2, #0]
				width = -width;
    1736:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
    173a:	425b      	negs	r3, r3
    173c:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    1740:	e00c      	b.n	175c <cbvprintf+0x108>
			}
		} else if (conv->width_present) {
    1742:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
    1746:	781b      	ldrb	r3, [r3, #0]
    1748:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
    174c:	b2db      	uxtb	r3, r3
    174e:	2b00      	cmp	r3, #0
    1750:	d004      	beq.n	175c <cbvprintf+0x108>
			width = conv->width_value;
    1752:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
    1756:	685b      	ldr	r3, [r3, #4]
    1758:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0

		/* If dynamic precision is specified, process it, otherwise
		 * set precision if present.  For floating point where
		 * precision is not present use 6.
		 */
		if (conv->prec_star) {
    175c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
    1760:	785b      	ldrb	r3, [r3, #1]
    1762:	f003 0304 	and.w	r3, r3, #4
    1766:	b2db      	uxtb	r3, r3
    1768:	2b00      	cmp	r3, #0
    176a:	d015      	beq.n	1798 <cbvprintf+0x144>
			int arg = va_arg(ap, int);
    176c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
    176e:	1d13      	adds	r3, r2, #4
    1770:	653b      	str	r3, [r7, #80]	; 0x50
    1772:	6813      	ldr	r3, [r2, #0]
    1774:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8

			if (arg < 0) {
    1778:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
    177c:	2b00      	cmp	r3, #0
    177e:	da06      	bge.n	178e <cbvprintf+0x13a>
				conv->prec_present = false;
    1780:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
    1784:	7853      	ldrb	r3, [r2, #1]
    1786:	f36f 0341 	bfc	r3, #1, #1
    178a:	7053      	strb	r3, [r2, #1]
    178c:	e011      	b.n	17b2 <cbvprintf+0x15e>
			} else {
				precision = arg;
    178e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
    1792:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    1796:	e00c      	b.n	17b2 <cbvprintf+0x15e>
			}
		} else if (conv->prec_present) {
    1798:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
    179c:	785b      	ldrb	r3, [r3, #1]
    179e:	f003 0302 	and.w	r3, r3, #2
    17a2:	b2db      	uxtb	r3, r3
    17a4:	2b00      	cmp	r3, #0
    17a6:	d004      	beq.n	17b2 <cbvprintf+0x15e>
			precision = conv->prec_value;
    17a8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
    17ac:	689b      	ldr	r3, [r3, #8]
    17ae:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
		}

		/* Reuse width and precision memory in conv for value
		 * padding counts.
		 */
		conv->pad0_value = 0;
    17b2:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
    17b6:	2300      	movs	r3, #0
    17b8:	6053      	str	r3, [r2, #4]
		conv->pad0_pre_exp = 0;
    17ba:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
    17be:	2300      	movs	r3, #0
    17c0:	6093      	str	r3, [r2, #8]
		 * This can't be extracted to a helper function because
		 * passing a pointer to va_list doesn't work on x86_64.  See
		 * https://stackoverflow.com/a/8048892.
		 */
		enum specifier_cat_enum specifier_cat
			= (enum specifier_cat_enum)conv->specifier_cat;
    17c2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
    17c6:	789b      	ldrb	r3, [r3, #2]
    17c8:	f3c3 0302 	ubfx	r3, r3, #0, #3
    17cc:	b2db      	uxtb	r3, r3
		enum specifier_cat_enum specifier_cat
    17ce:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
		enum length_mod_enum length_mod
			= (enum length_mod_enum)conv->length_mod;
    17d2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
    17d6:	785b      	ldrb	r3, [r3, #1]
    17d8:	f3c3 03c3 	ubfx	r3, r3, #3, #4
    17dc:	b2db      	uxtb	r3, r3
		enum length_mod_enum length_mod
    17de:	f887 30d6 	strb.w	r3, [r7, #214]	; 0xd6
		/* Extract the value based on the argument category and length.
		 *
		 * Note that the length modifier doesn't affect the value of a
		 * pointer argument.
		 */
		if (specifier_cat == SPECIFIER_SINT) {
    17e2:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
    17e6:	2b01      	cmp	r3, #1
    17e8:	d17f      	bne.n	18ea <cbvprintf+0x296>
			switch (length_mod) {
    17ea:	f897 30d6 	ldrb.w	r3, [r7, #214]	; 0xd6
    17ee:	3b03      	subs	r3, #3
    17f0:	2b04      	cmp	r3, #4
    17f2:	d80d      	bhi.n	1810 <cbvprintf+0x1bc>
    17f4:	a201      	add	r2, pc, #4	; (adr r2, 17fc <cbvprintf+0x1a8>)
    17f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    17fa:	bf00      	nop
    17fc:	0000182d 	.word	0x0000182d
    1800:	00001849 	.word	0x00001849
    1804:	00001865 	.word	0x00001865
    1808:	00001881 	.word	0x00001881
    180c:	00001881 	.word	0x00001881
			default:
			case LENGTH_NONE:
			case LENGTH_HH:
			case LENGTH_H:
				value->sint = va_arg(ap, int);
    1810:	6d3a      	ldr	r2, [r7, #80]	; 0x50
    1812:	1d13      	adds	r3, r2, #4
    1814:	653b      	str	r3, [r7, #80]	; 0x50
    1816:	6813      	ldr	r3, [r2, #0]
    1818:	17da      	asrs	r2, r3, #31
    181a:	64bb      	str	r3, [r7, #72]	; 0x48
    181c:	64fa      	str	r2, [r7, #76]	; 0x4c
    181e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
    1822:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
    1826:	e9c3 1200 	strd	r1, r2, [r3]
				break;
    182a:	e035      	b.n	1898 <cbvprintf+0x244>
				if (WCHAR_IS_SIGNED
				    && (conv->specifier == 'c')) {
					value->sint = (wchar_t)va_arg(ap,
							      WINT_TYPE);
				} else {
					value->sint = va_arg(ap, long);
    182c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
    182e:	1d13      	adds	r3, r2, #4
    1830:	653b      	str	r3, [r7, #80]	; 0x50
    1832:	6813      	ldr	r3, [r2, #0]
    1834:	17da      	asrs	r2, r3, #31
    1836:	643b      	str	r3, [r7, #64]	; 0x40
    1838:	647a      	str	r2, [r7, #68]	; 0x44
    183a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
    183e:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
    1842:	e9c3 1200 	strd	r1, r2, [r3]
				}
				break;
    1846:	e027      	b.n	1898 <cbvprintf+0x244>
			case LENGTH_LL:
				value->sint =
					(sint_value_type)va_arg(ap, long long);
    1848:	6d3b      	ldr	r3, [r7, #80]	; 0x50
    184a:	3307      	adds	r3, #7
    184c:	f023 0207 	bic.w	r2, r3, #7
    1850:	f102 0308 	add.w	r3, r2, #8
    1854:	653b      	str	r3, [r7, #80]	; 0x50
    1856:	e9d2 0100 	ldrd	r0, r1, [r2]
				value->sint =
    185a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
    185e:	e9c3 0100 	strd	r0, r1, [r3]
				break;
    1862:	e019      	b.n	1898 <cbvprintf+0x244>
			case LENGTH_J:
				value->sint =
					(sint_value_type)va_arg(ap, intmax_t);
    1864:	6d3b      	ldr	r3, [r7, #80]	; 0x50
    1866:	3307      	adds	r3, #7
    1868:	f023 0207 	bic.w	r2, r3, #7
    186c:	f102 0308 	add.w	r3, r2, #8
    1870:	653b      	str	r3, [r7, #80]	; 0x50
    1872:	e9d2 0100 	ldrd	r0, r1, [r2]
				value->sint =
    1876:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
    187a:	e9c3 0100 	strd	r0, r1, [r3]
				break;
    187e:	e00b      	b.n	1898 <cbvprintf+0x244>
				 * unsigned and signed equivalents of each
				 * other.  This can be checked in a platform
				 * test.
				 */
				value->sint =
					(sint_value_type)va_arg(ap, ptrdiff_t);
    1880:	6d3a      	ldr	r2, [r7, #80]	; 0x50
    1882:	1d13      	adds	r3, r2, #4
    1884:	653b      	str	r3, [r7, #80]	; 0x50
    1886:	6813      	ldr	r3, [r2, #0]
    1888:	17da      	asrs	r2, r3, #31
    188a:	4698      	mov	r8, r3
    188c:	4691      	mov	r9, r2
				value->sint =
    188e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
    1892:	e9c3 8900 	strd	r8, r9, [r3]
				break;
    1896:	bf00      	nop
			}
			if (length_mod == LENGTH_HH) {
    1898:	f897 30d6 	ldrb.w	r3, [r7, #214]	; 0xd6
    189c:	2b01      	cmp	r3, #1
    189e:	d10f      	bne.n	18c0 <cbvprintf+0x26c>
				value->sint = (char)value->sint;
    18a0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
    18a4:	e9d3 2300 	ldrd	r2, r3, [r3]
    18a8:	b2d3      	uxtb	r3, r2
    18aa:	b2db      	uxtb	r3, r3
    18ac:	2200      	movs	r2, #0
    18ae:	63bb      	str	r3, [r7, #56]	; 0x38
    18b0:	63fa      	str	r2, [r7, #60]	; 0x3c
    18b2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
    18b6:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
    18ba:	e9c3 1200 	strd	r1, r2, [r3]
    18be:	e0d9      	b.n	1a74 <cbvprintf+0x420>
			} else if (length_mod == LENGTH_H) {
    18c0:	f897 30d6 	ldrb.w	r3, [r7, #214]	; 0xd6
    18c4:	2b02      	cmp	r3, #2
    18c6:	f040 80d5 	bne.w	1a74 <cbvprintf+0x420>
				value->sint = (short)value->sint;
    18ca:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
    18ce:	e9d3 2300 	ldrd	r2, r3, [r3]
    18d2:	b213      	sxth	r3, r2
    18d4:	b21b      	sxth	r3, r3
    18d6:	17da      	asrs	r2, r3, #31
    18d8:	633b      	str	r3, [r7, #48]	; 0x30
    18da:	637a      	str	r2, [r7, #52]	; 0x34
    18dc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
    18e0:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
    18e4:	e9c3 1200 	strd	r1, r2, [r3]
    18e8:	e0c4      	b.n	1a74 <cbvprintf+0x420>
			}
		} else if (specifier_cat == SPECIFIER_UINT) {
    18ea:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
    18ee:	2b02      	cmp	r3, #2
    18f0:	f040 8091 	bne.w	1a16 <cbvprintf+0x3c2>
			switch (length_mod) {
    18f4:	f897 30d6 	ldrb.w	r3, [r7, #214]	; 0xd6
    18f8:	3b03      	subs	r3, #3
    18fa:	2b04      	cmp	r3, #4
    18fc:	d80c      	bhi.n	1918 <cbvprintf+0x2c4>
    18fe:	a201      	add	r2, pc, #4	; (adr r2, 1904 <cbvprintf+0x2b0>)
    1900:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    1904:	00001935 	.word	0x00001935
    1908:	00001977 	.word	0x00001977
    190c:	00001993 	.word	0x00001993
    1910:	000019af 	.word	0x000019af
    1914:	000019af 	.word	0x000019af
			default:
			case LENGTH_NONE:
			case LENGTH_HH:
			case LENGTH_H:
				value->uint = va_arg(ap, unsigned int);
    1918:	6d3a      	ldr	r2, [r7, #80]	; 0x50
    191a:	1d13      	adds	r3, r2, #4
    191c:	653b      	str	r3, [r7, #80]	; 0x50
    191e:	6813      	ldr	r3, [r2, #0]
    1920:	2200      	movs	r2, #0
    1922:	62bb      	str	r3, [r7, #40]	; 0x28
    1924:	62fa      	str	r2, [r7, #44]	; 0x2c
    1926:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
    192a:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
    192e:	e9c3 1200 	strd	r1, r2, [r3]
				break;
    1932:	e048      	b.n	19c6 <cbvprintf+0x372>
			case LENGTH_L:
				if ((!WCHAR_IS_SIGNED)
				    && (conv->specifier == 'c')) {
    1934:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
    1938:	78db      	ldrb	r3, [r3, #3]
				if ((!WCHAR_IS_SIGNED)
    193a:	2b63      	cmp	r3, #99	; 0x63
    193c:	d10d      	bne.n	195a <cbvprintf+0x306>
					value->uint = (wchar_t)va_arg(ap,
    193e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
    1940:	1d13      	adds	r3, r2, #4
    1942:	653b      	str	r3, [r7, #80]	; 0x50
    1944:	6813      	ldr	r3, [r2, #0]
    1946:	2200      	movs	r2, #0
    1948:	623b      	str	r3, [r7, #32]
    194a:	627a      	str	r2, [r7, #36]	; 0x24
    194c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
    1950:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
    1954:	e9c3 1200 	strd	r1, r2, [r3]
							      WINT_TYPE);
				} else {
					value->uint = va_arg(ap, unsigned long);
				}
				break;
    1958:	e035      	b.n	19c6 <cbvprintf+0x372>
					value->uint = va_arg(ap, unsigned long);
    195a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
    195c:	1d13      	adds	r3, r2, #4
    195e:	653b      	str	r3, [r7, #80]	; 0x50
    1960:	6813      	ldr	r3, [r2, #0]
    1962:	2200      	movs	r2, #0
    1964:	61bb      	str	r3, [r7, #24]
    1966:	61fa      	str	r2, [r7, #28]
    1968:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
    196c:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
    1970:	e9c3 1200 	strd	r1, r2, [r3]
				break;
    1974:	e027      	b.n	19c6 <cbvprintf+0x372>
			case LENGTH_LL:
				value->uint =
					(uint_value_type)va_arg(ap,
    1976:	6d3b      	ldr	r3, [r7, #80]	; 0x50
    1978:	3307      	adds	r3, #7
    197a:	f023 0207 	bic.w	r2, r3, #7
    197e:	f102 0308 	add.w	r3, r2, #8
    1982:	653b      	str	r3, [r7, #80]	; 0x50
    1984:	e9d2 0100 	ldrd	r0, r1, [r2]
				value->uint =
    1988:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
    198c:	e9c3 0100 	strd	r0, r1, [r3]
						unsigned long long);
				break;
    1990:	e019      	b.n	19c6 <cbvprintf+0x372>
			case LENGTH_J:
				value->uint =
					(uint_value_type)va_arg(ap,
    1992:	6d3b      	ldr	r3, [r7, #80]	; 0x50
    1994:	3307      	adds	r3, #7
    1996:	f023 0207 	bic.w	r2, r3, #7
    199a:	f102 0308 	add.w	r3, r2, #8
    199e:	653b      	str	r3, [r7, #80]	; 0x50
    19a0:	e9d2 0100 	ldrd	r0, r1, [r2]
				value->uint =
    19a4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
    19a8:	e9c3 0100 	strd	r0, r1, [r3]
								uintmax_t);
				break;
    19ac:	e00b      	b.n	19c6 <cbvprintf+0x372>
			case LENGTH_Z:		/* size_t */
			case LENGTH_T:		/* ptrdiff_t */
				value->uint =
					(uint_value_type)va_arg(ap, size_t);
    19ae:	6d3a      	ldr	r2, [r7, #80]	; 0x50
    19b0:	1d13      	adds	r3, r2, #4
    19b2:	653b      	str	r3, [r7, #80]	; 0x50
    19b4:	6813      	ldr	r3, [r2, #0]
    19b6:	2200      	movs	r2, #0
    19b8:	469a      	mov	sl, r3
    19ba:	4693      	mov	fp, r2
				value->uint =
    19bc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
    19c0:	e9c3 ab00 	strd	sl, fp, [r3]
				break;
    19c4:	bf00      	nop
			}
			if (length_mod == LENGTH_HH) {
    19c6:	f897 30d6 	ldrb.w	r3, [r7, #214]	; 0xd6
    19ca:	2b01      	cmp	r3, #1
    19cc:	d10f      	bne.n	19ee <cbvprintf+0x39a>
				value->uint = (unsigned char)value->uint;
    19ce:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
    19d2:	e9d3 2300 	ldrd	r2, r3, [r3]
    19d6:	b2d3      	uxtb	r3, r2
    19d8:	b2db      	uxtb	r3, r3
    19da:	2200      	movs	r2, #0
    19dc:	613b      	str	r3, [r7, #16]
    19de:	617a      	str	r2, [r7, #20]
    19e0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
    19e4:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
    19e8:	e9c3 1200 	strd	r1, r2, [r3]
    19ec:	e042      	b.n	1a74 <cbvprintf+0x420>
			} else if (length_mod == LENGTH_H) {
    19ee:	f897 30d6 	ldrb.w	r3, [r7, #214]	; 0xd6
    19f2:	2b02      	cmp	r3, #2
    19f4:	d13e      	bne.n	1a74 <cbvprintf+0x420>
				value->uint = (unsigned short)value->uint;
    19f6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
    19fa:	e9d3 2300 	ldrd	r2, r3, [r3]
    19fe:	b293      	uxth	r3, r2
    1a00:	b29b      	uxth	r3, r3
    1a02:	2200      	movs	r2, #0
    1a04:	60bb      	str	r3, [r7, #8]
    1a06:	60fa      	str	r2, [r7, #12]
    1a08:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
    1a0c:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
    1a10:	e9c3 1200 	strd	r1, r2, [r3]
    1a14:	e02e      	b.n	1a74 <cbvprintf+0x420>
			}
		} else if (specifier_cat == SPECIFIER_FP) {
    1a16:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
    1a1a:	2b04      	cmp	r3, #4
    1a1c:	d11f      	bne.n	1a5e <cbvprintf+0x40a>
			if (length_mod == LENGTH_UPPER_L) {
    1a1e:	f897 30d6 	ldrb.w	r3, [r7, #214]	; 0xd6
    1a22:	2b08      	cmp	r3, #8
    1a24:	d10d      	bne.n	1a42 <cbvprintf+0x3ee>
				value->ldbl = va_arg(ap, long double);
    1a26:	6d3b      	ldr	r3, [r7, #80]	; 0x50
    1a28:	3307      	adds	r3, #7
    1a2a:	f023 0207 	bic.w	r2, r3, #7
    1a2e:	f102 0308 	add.w	r3, r2, #8
    1a32:	653b      	str	r3, [r7, #80]	; 0x50
    1a34:	e9d2 0100 	ldrd	r0, r1, [r2]
    1a38:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
    1a3c:	e9c3 0100 	strd	r0, r1, [r3]
    1a40:	e018      	b.n	1a74 <cbvprintf+0x420>
			} else {
				value->dbl = va_arg(ap, double);
    1a42:	6d3b      	ldr	r3, [r7, #80]	; 0x50
    1a44:	3307      	adds	r3, #7
    1a46:	f023 0207 	bic.w	r2, r3, #7
    1a4a:	f102 0308 	add.w	r3, r2, #8
    1a4e:	653b      	str	r3, [r7, #80]	; 0x50
    1a50:	e9d2 0100 	ldrd	r0, r1, [r2]
    1a54:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
    1a58:	e9c3 0100 	strd	r0, r1, [r3]
    1a5c:	e00a      	b.n	1a74 <cbvprintf+0x420>
			}
		} else if (specifier_cat == SPECIFIER_PTR) {
    1a5e:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
    1a62:	2b03      	cmp	r3, #3
    1a64:	d106      	bne.n	1a74 <cbvprintf+0x420>
			value->ptr = va_arg(ap, void *);
    1a66:	6d3a      	ldr	r2, [r7, #80]	; 0x50
    1a68:	1d13      	adds	r3, r2, #4
    1a6a:	653b      	str	r3, [r7, #80]	; 0x50
    1a6c:	6812      	ldr	r2, [r2, #0]
    1a6e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
    1a72:	601a      	str	r2, [r3, #0]
		/* We've now consumed all arguments related to this
		 * specification.  If the conversion is invalid, or is
		 * something we don't support, then output the original
		 * specification and move on.
		 */
		if (conv->invalid || conv->unsupported) {
    1a74:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
    1a78:	781b      	ldrb	r3, [r3, #0]
    1a7a:	f003 0301 	and.w	r3, r3, #1
    1a7e:	b2db      	uxtb	r3, r3
    1a80:	2b00      	cmp	r3, #0
    1a82:	d107      	bne.n	1a94 <cbvprintf+0x440>
    1a84:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
    1a88:	781b      	ldrb	r3, [r3, #0]
    1a8a:	f003 0302 	and.w	r3, r3, #2
    1a8e:	b2db      	uxtb	r3, r3
    1a90:	2b00      	cmp	r3, #0
    1a92:	d017      	beq.n	1ac4 <cbvprintf+0x470>
			OUTS(sp, fp);
    1a94:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    1a96:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
    1a9a:	6db9      	ldr	r1, [r7, #88]	; 0x58
    1a9c:	6df8      	ldr	r0, [r7, #92]	; 0x5c
    1a9e:	f006 ffdc 	bl	8a5a <outs>
    1aa2:	f8c7 009c 	str.w	r0, [r7, #156]	; 0x9c
    1aa6:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
    1aaa:	2b00      	cmp	r3, #0
    1aac:	da02      	bge.n	1ab4 <cbvprintf+0x460>
    1aae:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
    1ab2:	e2fb      	b.n	20ac <cbvprintf+0xa58>
    1ab4:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
    1ab8:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
    1abc:	4413      	add	r3, r2
    1abe:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
			continue;
    1ac2:	e2ec      	b.n	209e <cbvprintf+0xa4a>
		}

		/* Do formatting, either into the buffer or
		 * referencing external data.
		 */
		switch (conv->specifier) {
    1ac4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
    1ac8:	78db      	ldrb	r3, [r3, #3]
    1aca:	3b25      	subs	r3, #37	; 0x25
    1acc:	2b53      	cmp	r3, #83	; 0x53
    1ace:	f200 818e 	bhi.w	1dee <cbvprintf+0x79a>
    1ad2:	a201      	add	r2, pc, #4	; (adr r2, 1ad8 <cbvprintf+0x484>)
    1ad4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    1ad8:	00001c29 	.word	0x00001c29
    1adc:	00001def 	.word	0x00001def
    1ae0:	00001def 	.word	0x00001def
    1ae4:	00001def 	.word	0x00001def
    1ae8:	00001def 	.word	0x00001def
    1aec:	00001def 	.word	0x00001def
    1af0:	00001def 	.word	0x00001def
    1af4:	00001def 	.word	0x00001def
    1af8:	00001def 	.word	0x00001def
    1afc:	00001def 	.word	0x00001def
    1b00:	00001def 	.word	0x00001def
    1b04:	00001def 	.word	0x00001def
    1b08:	00001def 	.word	0x00001def
    1b0c:	00001def 	.word	0x00001def
    1b10:	00001def 	.word	0x00001def
    1b14:	00001def 	.word	0x00001def
    1b18:	00001def 	.word	0x00001def
    1b1c:	00001def 	.word	0x00001def
    1b20:	00001def 	.word	0x00001def
    1b24:	00001def 	.word	0x00001def
    1b28:	00001def 	.word	0x00001def
    1b2c:	00001def 	.word	0x00001def
    1b30:	00001def 	.word	0x00001def
    1b34:	00001def 	.word	0x00001def
    1b38:	00001def 	.word	0x00001def
    1b3c:	00001def 	.word	0x00001def
    1b40:	00001def 	.word	0x00001def
    1b44:	00001def 	.word	0x00001def
    1b48:	00001def 	.word	0x00001def
    1b4c:	00001def 	.word	0x00001def
    1b50:	00001def 	.word	0x00001def
    1b54:	00001def 	.word	0x00001def
    1b58:	00001def 	.word	0x00001def
    1b5c:	00001def 	.word	0x00001def
    1b60:	00001def 	.word	0x00001def
    1b64:	00001def 	.word	0x00001def
    1b68:	00001def 	.word	0x00001def
    1b6c:	00001def 	.word	0x00001def
    1b70:	00001def 	.word	0x00001def
    1b74:	00001def 	.word	0x00001def
    1b78:	00001def 	.word	0x00001def
    1b7c:	00001def 	.word	0x00001def
    1b80:	00001def 	.word	0x00001def
    1b84:	00001def 	.word	0x00001def
    1b88:	00001def 	.word	0x00001def
    1b8c:	00001def 	.word	0x00001def
    1b90:	00001def 	.word	0x00001def
    1b94:	00001def 	.word	0x00001def
    1b98:	00001def 	.word	0x00001def
    1b9c:	00001def 	.word	0x00001def
    1ba0:	00001def 	.word	0x00001def
    1ba4:	00001d25 	.word	0x00001d25
    1ba8:	00001def 	.word	0x00001def
    1bac:	00001def 	.word	0x00001def
    1bb0:	00001def 	.word	0x00001def
    1bb4:	00001def 	.word	0x00001def
    1bb8:	00001def 	.word	0x00001def
    1bbc:	00001def 	.word	0x00001def
    1bc0:	00001def 	.word	0x00001def
    1bc4:	00001def 	.word	0x00001def
    1bc8:	00001def 	.word	0x00001def
    1bcc:	00001def 	.word	0x00001def
    1bd0:	00001c97 	.word	0x00001c97
    1bd4:	00001cb7 	.word	0x00001cb7
    1bd8:	00001def 	.word	0x00001def
    1bdc:	00001def 	.word	0x00001def
    1be0:	00001def 	.word	0x00001def
    1be4:	00001def 	.word	0x00001def
    1be8:	00001cb7 	.word	0x00001cb7
    1bec:	00001def 	.word	0x00001def
    1bf0:	00001def 	.word	0x00001def
    1bf4:	00001def 	.word	0x00001def
    1bf8:	00001def 	.word	0x00001def
    1bfc:	00001dd9 	.word	0x00001dd9
    1c00:	00001d25 	.word	0x00001d25
    1c04:	00001d81 	.word	0x00001d81
    1c08:	00001def 	.word	0x00001def
    1c0c:	00001def 	.word	0x00001def
    1c10:	00001c4f 	.word	0x00001c4f
    1c14:	00001def 	.word	0x00001def
    1c18:	00001d25 	.word	0x00001d25
    1c1c:	00001def 	.word	0x00001def
    1c20:	00001def 	.word	0x00001def
    1c24:	00001d25 	.word	0x00001d25
		case '%':
			OUTC('%');
    1c28:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
    1c2a:	6db9      	ldr	r1, [r7, #88]	; 0x58
    1c2c:	2025      	movs	r0, #37	; 0x25
    1c2e:	4798      	blx	r3
    1c30:	f8c7 00c0 	str.w	r0, [r7, #192]	; 0xc0
    1c34:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
    1c38:	2b00      	cmp	r3, #0
    1c3a:	da02      	bge.n	1c42 <cbvprintf+0x5ee>
    1c3c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
    1c40:	e234      	b.n	20ac <cbvprintf+0xa58>
    1c42:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
    1c46:	3301      	adds	r3, #1
    1c48:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
			break;
    1c4c:	e0d2      	b.n	1df4 <cbvprintf+0x7a0>
		case 's': {
			bps = (const char *)value->ptr;
    1c4e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
    1c52:	681b      	ldr	r3, [r3, #0]
    1c54:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8

			size_t len;

			if (precision >= 0) {
    1c58:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
    1c5c:	2b00      	cmp	r3, #0
    1c5e:	db09      	blt.n	1c74 <cbvprintf+0x620>
				len = strnlen(bps, precision);
    1c60:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
    1c64:	4619      	mov	r1, r3
    1c66:	f8d7 00f8 	ldr.w	r0, [r7, #248]	; 0xf8
    1c6a:	f008 f9cf 	bl	a00c <strnlen>
    1c6e:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
    1c72:	e005      	b.n	1c80 <cbvprintf+0x62c>
			} else {
				len = strlen(bps);
    1c74:	f8d7 00f8 	ldr.w	r0, [r7, #248]	; 0xf8
    1c78:	f008 f9b1 	bl	9fde <strlen>
    1c7c:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
			}

			bpe = bps + len;
    1c80:	f8d7 20f8 	ldr.w	r2, [r7, #248]	; 0xf8
    1c84:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
    1c88:	4413      	add	r3, r2
    1c8a:	667b      	str	r3, [r7, #100]	; 0x64
			precision = -1;
    1c8c:	f04f 33ff 	mov.w	r3, #4294967295
    1c90:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec

			break;
    1c94:	e0ae      	b.n	1df4 <cbvprintf+0x7a0>
		}
		case 'c':
			bps = buf;
    1c96:	f107 0380 	add.w	r3, r7, #128	; 0x80
    1c9a:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
			buf[0] = CHAR_IS_SIGNED ? value->sint : value->uint;
    1c9e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
    1ca2:	e9d3 2300 	ldrd	r2, r3, [r3]
    1ca6:	b2d3      	uxtb	r3, r2
    1ca8:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
			bpe = buf + 1;
    1cac:	f107 0380 	add.w	r3, r7, #128	; 0x80
    1cb0:	3301      	adds	r3, #1
    1cb2:	667b      	str	r3, [r7, #100]	; 0x64
			break;
    1cb4:	e09e      	b.n	1df4 <cbvprintf+0x7a0>
		case 'd':
		case 'i':
			if (conv->flag_plus) {
    1cb6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
    1cba:	781b      	ldrb	r3, [r3, #0]
    1cbc:	f003 0308 	and.w	r3, r3, #8
    1cc0:	b2db      	uxtb	r3, r3
    1cc2:	2b00      	cmp	r3, #0
    1cc4:	d003      	beq.n	1cce <cbvprintf+0x67a>
				sign = '+';
    1cc6:	232b      	movs	r3, #43	; 0x2b
    1cc8:	f887 3063 	strb.w	r3, [r7, #99]	; 0x63
    1ccc:	e00a      	b.n	1ce4 <cbvprintf+0x690>
			} else if (conv->flag_space) {
    1cce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
    1cd2:	781b      	ldrb	r3, [r3, #0]
    1cd4:	f003 0310 	and.w	r3, r3, #16
    1cd8:	b2db      	uxtb	r3, r3
    1cda:	2b00      	cmp	r3, #0
    1cdc:	d002      	beq.n	1ce4 <cbvprintf+0x690>
				sign = ' ';
    1cde:	2320      	movs	r3, #32
    1ce0:	f887 3063 	strb.w	r3, [r7, #99]	; 0x63

			/* sint/uint overlay in the union, and so
			 * can't appear in read and write operations
			 * in the same statement.
			 */
			sint = value->sint;
    1ce4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
    1ce8:	e9d3 2300 	ldrd	r2, r3, [r3]
    1cec:	e9c7 2332 	strd	r2, r3, [r7, #200]	; 0xc8
			if (sint < 0) {
    1cf0:	e9d7 2332 	ldrd	r2, r3, [r7, #200]	; 0xc8
    1cf4:	2b00      	cmp	r3, #0
    1cf6:	da0f      	bge.n	1d18 <cbvprintf+0x6c4>
				sign = '-';
    1cf8:	232d      	movs	r3, #45	; 0x2d
    1cfa:	f887 3063 	strb.w	r3, [r7, #99]	; 0x63
				value->uint = (uint_value_type)-sint;
    1cfe:	e9d7 2332 	ldrd	r2, r3, [r7, #200]	; 0xc8
    1d02:	2100      	movs	r1, #0
    1d04:	4254      	negs	r4, r2
    1d06:	eb61 0503 	sbc.w	r5, r1, r3
    1d0a:	4620      	mov	r0, r4
    1d0c:	4629      	mov	r1, r5
    1d0e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
    1d12:	e9c3 0100 	strd	r0, r1, [r3]
    1d16:	e005      	b.n	1d24 <cbvprintf+0x6d0>
			} else {
				value->uint = (uint_value_type)sint;
    1d18:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
    1d1c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
    1d20:	e9c3 0100 	strd	r0, r1, [r3]
			__fallthrough;
		case 'o':
		case 'u':
		case 'x':
		case 'X':
			bps = encode_uint(value->uint, conv, buf, bpe);
    1d24:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
    1d28:	e9d3 0100 	ldrd	r0, r1, [r3]
    1d2c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
    1d2e:	f107 0280 	add.w	r2, r7, #128	; 0x80
    1d32:	9300      	str	r3, [sp, #0]
    1d34:	4613      	mov	r3, r2
    1d36:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
    1d3a:	f006 fe1a 	bl	8972 <encode_uint>
    1d3e:	f8c7 00f8 	str.w	r0, [r7, #248]	; 0xf8
			/* Update pad0 values based on precision and converted
			 * length.  Note that a non-empty sign is not in the
			 * converted sequence, but it does not affect the
			 * padding size.
			 */
			if (precision >= 0) {
    1d42:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
    1d46:	2b00      	cmp	r3, #0
    1d48:	db53      	blt.n	1df2 <cbvprintf+0x79e>
				size_t len = bpe - bps;
    1d4a:	6e7a      	ldr	r2, [r7, #100]	; 0x64
    1d4c:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
    1d50:	1ad3      	subs	r3, r2, r3
    1d52:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4

				/* Zero-padding flag is ignored for integer
				 * conversions with precision.
				 */
				conv->flag_zero = false;
    1d56:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
    1d5a:	7813      	ldrb	r3, [r2, #0]
    1d5c:	f36f 1386 	bfc	r3, #6, #1
    1d60:	7013      	strb	r3, [r2, #0]

				/* Set pad0_value to satisfy precision */
				if (len < (size_t)precision) {
    1d62:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
    1d66:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
    1d6a:	4293      	cmp	r3, r2
    1d6c:	d241      	bcs.n	1df2 <cbvprintf+0x79e>
					conv->pad0_value = precision - (int)len;
    1d6e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
    1d72:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
    1d76:	1a9a      	subs	r2, r3, r2
    1d78:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
    1d7c:	605a      	str	r2, [r3, #4]
				}
			}

			break;
    1d7e:	e038      	b.n	1df2 <cbvprintf+0x79e>
		case 'p':
			/* Implementation-defined: null is "(nil)", non-null
			 * has 0x prefix followed by significant address hex
			 * digits, no leading zeros.
			 */
			if (value->ptr != NULL) {
    1d80:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
    1d84:	681b      	ldr	r3, [r3, #0]
    1d86:	2b00      	cmp	r3, #0
    1d88:	d01e      	beq.n	1dc8 <cbvprintf+0x774>
				bps = encode_uint((uintptr_t)value->ptr, conv,
    1d8a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
    1d8e:	681b      	ldr	r3, [r3, #0]
    1d90:	461a      	mov	r2, r3
    1d92:	2300      	movs	r3, #0
    1d94:	603a      	str	r2, [r7, #0]
    1d96:	607b      	str	r3, [r7, #4]
    1d98:	6e7b      	ldr	r3, [r7, #100]	; 0x64
    1d9a:	f107 0280 	add.w	r2, r7, #128	; 0x80
    1d9e:	9300      	str	r3, [sp, #0]
    1da0:	4613      	mov	r3, r2
    1da2:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
    1da6:	e9d7 0100 	ldrd	r0, r1, [r7]
    1daa:	f006 fde2 	bl	8972 <encode_uint>
    1dae:	f8c7 00f8 	str.w	r0, [r7, #248]	; 0xf8
						  buf, bpe);

				/* Use 0x prefix */
				conv->altform_0c = true;
    1db2:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
    1db6:	7893      	ldrb	r3, [r2, #2]
    1db8:	f043 0310 	orr.w	r3, r3, #16
    1dbc:	7093      	strb	r3, [r2, #2]
				conv->specifier = 'x';
    1dbe:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
    1dc2:	2378      	movs	r3, #120	; 0x78
    1dc4:	70d3      	strb	r3, [r2, #3]

				goto prec_int_pad0;
    1dc6:	e7bc      	b.n	1d42 <cbvprintf+0x6ee>
			}

			bps = "(nil)";
    1dc8:	4bbb      	ldr	r3, [pc, #748]	; (20b8 <cbvprintf+0xa64>)
    1dca:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
			bpe = bps + 5;
    1dce:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
    1dd2:	3305      	adds	r3, #5
    1dd4:	667b      	str	r3, [r7, #100]	; 0x64

			break;
    1dd6:	e00d      	b.n	1df4 <cbvprintf+0x7a0>
		case 'n':
			if (IS_ENABLED(CONFIG_CBPRINTF_N_SPECIFIER)) {
				store_count(conv, value->ptr, count);
    1dd8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
    1ddc:	6819      	ldr	r1, [r3, #0]
    1dde:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
    1de2:	461a      	mov	r2, r3
    1de4:	f8d7 00e4 	ldr.w	r0, [r7, #228]	; 0xe4
    1de8:	f7ff fbe0 	bl	15ac <store_count>
			}

			break;
    1dec:	e002      	b.n	1df4 <cbvprintf+0x7a0>
		default:
			/* Add an empty default with break, this is a defensive
			 * programming. Static analysis tool won't raise a violation
			 * if default is empty, but has that comment.
			 */
			break;
    1dee:	bf00      	nop
    1df0:	e000      	b.n	1df4 <cbvprintf+0x7a0>
			break;
    1df2:	bf00      	nop
		}

		/* If we don't have a converted value to emit, move
		 * on.
		 */
		if (bps == NULL) {
    1df4:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
    1df8:	2b00      	cmp	r3, #0
    1dfa:	f000 814f 	beq.w	209c <cbvprintf+0xa48>
		 *   * any exponent content from the converted value
		 * * for non-FP:
		 *   * any pad0_prefix
		 *   * the converted value
		 */
		size_t nj_len = (bpe - bps);
    1dfe:	6e7a      	ldr	r2, [r7, #100]	; 0x64
    1e00:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
    1e04:	1ad3      	subs	r3, r2, r3
    1e06:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
		int pad_len = 0;
    1e0a:	2300      	movs	r3, #0
    1e0c:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100

		if (sign != 0) {
    1e10:	f897 3063 	ldrb.w	r3, [r7, #99]	; 0x63
    1e14:	2b00      	cmp	r3, #0
    1e16:	d004      	beq.n	1e22 <cbvprintf+0x7ce>
			nj_len += 1U;
    1e18:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
    1e1c:	3301      	adds	r3, #1
    1e1e:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
		}

		if (conv->altform_0c) {
    1e22:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
    1e26:	789b      	ldrb	r3, [r3, #2]
    1e28:	f003 0310 	and.w	r3, r3, #16
    1e2c:	b2db      	uxtb	r3, r3
    1e2e:	2b00      	cmp	r3, #0
    1e30:	d005      	beq.n	1e3e <cbvprintf+0x7ea>
			nj_len += 2U;
    1e32:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
    1e36:	3302      	adds	r3, #2
    1e38:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    1e3c:	e00c      	b.n	1e58 <cbvprintf+0x804>
		} else if (conv->altform_0) {
    1e3e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
    1e42:	789b      	ldrb	r3, [r3, #2]
    1e44:	f003 0308 	and.w	r3, r3, #8
    1e48:	b2db      	uxtb	r3, r3
    1e4a:	2b00      	cmp	r3, #0
    1e4c:	d004      	beq.n	1e58 <cbvprintf+0x804>
			nj_len += 1U;
    1e4e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
    1e52:	3301      	adds	r3, #1
    1e54:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
		}

		nj_len += conv->pad0_value;
    1e58:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
    1e5c:	685b      	ldr	r3, [r3, #4]
    1e5e:	461a      	mov	r2, r3
    1e60:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
    1e64:	4413      	add	r3, r2
    1e66:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
		if (conv->pad_fp) {
    1e6a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
    1e6e:	789b      	ldrb	r3, [r3, #2]
    1e70:	f003 0340 	and.w	r3, r3, #64	; 0x40
    1e74:	b2db      	uxtb	r3, r3
    1e76:	2b00      	cmp	r3, #0
    1e78:	d008      	beq.n	1e8c <cbvprintf+0x838>
			nj_len += conv->pad0_pre_exp;
    1e7a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
    1e7e:	689b      	ldr	r3, [r3, #8]
    1e80:	461a      	mov	r2, r3
    1e82:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
    1e86:	4413      	add	r3, r2
    1e88:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
		 * result in no padding.
		 *
		 * If a non-negative padding width is present and we're doing
		 * right-justification, emit the padding now.
		 */
		if (width > 0) {
    1e8c:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
    1e90:	2b00      	cmp	r3, #0
    1e92:	dd57      	ble.n	1f44 <cbvprintf+0x8f0>
			width -= (int)nj_len;
    1e94:	f8d7 2104 	ldr.w	r2, [r7, #260]	; 0x104
    1e98:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
    1e9c:	1a9b      	subs	r3, r3, r2
    1e9e:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0

			if (!conv->flag_dash) {
    1ea2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
    1ea6:	781b      	ldrb	r3, [r3, #0]
    1ea8:	f3c3 0380 	ubfx	r3, r3, #2, #1
    1eac:	b2db      	uxtb	r3, r3
    1eae:	f083 0301 	eor.w	r3, r3, #1
    1eb2:	b2db      	uxtb	r3, r3
    1eb4:	2b00      	cmp	r3, #0
    1eb6:	d045      	beq.n	1f44 <cbvprintf+0x8f0>
				char pad = ' ';
    1eb8:	2320      	movs	r3, #32
    1eba:	f887 30ff 	strb.w	r3, [r7, #255]	; 0xff

				/* If we're zero-padding we have to emit the
				 * sign first.
				 */
				if (conv->flag_zero) {
    1ebe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
    1ec2:	781b      	ldrb	r3, [r3, #0]
    1ec4:	f003 0340 	and.w	r3, r3, #64	; 0x40
    1ec8:	b2db      	uxtb	r3, r3
    1eca:	2b00      	cmp	r3, #0
    1ecc:	d033      	beq.n	1f36 <cbvprintf+0x8e2>
					if (sign != 0) {
    1ece:	f897 3063 	ldrb.w	r3, [r7, #99]	; 0x63
    1ed2:	2b00      	cmp	r3, #0
    1ed4:	d017      	beq.n	1f06 <cbvprintf+0x8b2>
						OUTC(sign);
    1ed6:	f897 3063 	ldrb.w	r3, [r7, #99]	; 0x63
    1eda:	461a      	mov	r2, r3
    1edc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
    1ede:	6db9      	ldr	r1, [r7, #88]	; 0x58
    1ee0:	4610      	mov	r0, r2
    1ee2:	4798      	blx	r3
    1ee4:	f8c7 00bc 	str.w	r0, [r7, #188]	; 0xbc
    1ee8:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
    1eec:	2b00      	cmp	r3, #0
    1eee:	da02      	bge.n	1ef6 <cbvprintf+0x8a2>
    1ef0:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
    1ef4:	e0da      	b.n	20ac <cbvprintf+0xa58>
    1ef6:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
    1efa:	3301      	adds	r3, #1
    1efc:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
						sign = 0;
    1f00:	2300      	movs	r3, #0
    1f02:	f887 3063 	strb.w	r3, [r7, #99]	; 0x63
					}
					pad = '0';
    1f06:	2330      	movs	r3, #48	; 0x30
    1f08:	f887 30ff 	strb.w	r3, [r7, #255]	; 0xff
				}

				while (width-- > 0) {
    1f0c:	e013      	b.n	1f36 <cbvprintf+0x8e2>
					OUTC(pad);
    1f0e:	f897 20ff 	ldrb.w	r2, [r7, #255]	; 0xff
    1f12:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
    1f14:	6db9      	ldr	r1, [r7, #88]	; 0x58
    1f16:	4610      	mov	r0, r2
    1f18:	4798      	blx	r3
    1f1a:	f8c7 00b8 	str.w	r0, [r7, #184]	; 0xb8
    1f1e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
    1f22:	2b00      	cmp	r3, #0
    1f24:	da02      	bge.n	1f2c <cbvprintf+0x8d8>
    1f26:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
    1f2a:	e0bf      	b.n	20ac <cbvprintf+0xa58>
    1f2c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
    1f30:	3301      	adds	r3, #1
    1f32:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
				while (width-- > 0) {
    1f36:	f8d7 20f0 	ldr.w	r2, [r7, #240]	; 0xf0
    1f3a:	1e53      	subs	r3, r2, #1
    1f3c:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    1f40:	2a00      	cmp	r2, #0
    1f42:	dce4      	bgt.n	1f0e <cbvprintf+0x8ba>
		}

		/* If we have a sign that hasn't been emitted, now's the
		 * time....
		 */
		if (sign != 0) {
    1f44:	f897 3063 	ldrb.w	r3, [r7, #99]	; 0x63
    1f48:	2b00      	cmp	r3, #0
    1f4a:	d014      	beq.n	1f76 <cbvprintf+0x922>
			OUTC(sign);
    1f4c:	f897 3063 	ldrb.w	r3, [r7, #99]	; 0x63
    1f50:	461a      	mov	r2, r3
    1f52:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
    1f54:	6db9      	ldr	r1, [r7, #88]	; 0x58
    1f56:	4610      	mov	r0, r2
    1f58:	4798      	blx	r3
    1f5a:	f8c7 00b4 	str.w	r0, [r7, #180]	; 0xb4
    1f5e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
    1f62:	2b00      	cmp	r3, #0
    1f64:	da02      	bge.n	1f6c <cbvprintf+0x918>
    1f66:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
    1f6a:	e09f      	b.n	20ac <cbvprintf+0xa58>
    1f6c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
    1f70:	3301      	adds	r3, #1
    1f72:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
				OUTC('0');
			}

			OUTS(cp, bpe);
		} else {
			if (conv->altform_0c | conv->altform_0) {
    1f76:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
    1f7a:	789b      	ldrb	r3, [r3, #2]
    1f7c:	f3c3 1300 	ubfx	r3, r3, #4, #1
    1f80:	b2da      	uxtb	r2, r3
    1f82:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
    1f86:	789b      	ldrb	r3, [r3, #2]
    1f88:	f3c3 03c0 	ubfx	r3, r3, #3, #1
    1f8c:	b2db      	uxtb	r3, r3
    1f8e:	4313      	orrs	r3, r2
    1f90:	b2db      	uxtb	r3, r3
    1f92:	2b00      	cmp	r3, #0
    1f94:	d011      	beq.n	1fba <cbvprintf+0x966>
				OUTC('0');
    1f96:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
    1f98:	6db9      	ldr	r1, [r7, #88]	; 0x58
    1f9a:	2030      	movs	r0, #48	; 0x30
    1f9c:	4798      	blx	r3
    1f9e:	f8c7 00b0 	str.w	r0, [r7, #176]	; 0xb0
    1fa2:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
    1fa6:	2b00      	cmp	r3, #0
    1fa8:	da02      	bge.n	1fb0 <cbvprintf+0x95c>
    1faa:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
    1fae:	e07d      	b.n	20ac <cbvprintf+0xa58>
    1fb0:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
    1fb4:	3301      	adds	r3, #1
    1fb6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
			}

			if (conv->altform_0c) {
    1fba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
    1fbe:	789b      	ldrb	r3, [r3, #2]
    1fc0:	f003 0310 	and.w	r3, r3, #16
    1fc4:	b2db      	uxtb	r3, r3
    1fc6:	2b00      	cmp	r3, #0
    1fc8:	d015      	beq.n	1ff6 <cbvprintf+0x9a2>
				OUTC(conv->specifier);
    1fca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
    1fce:	78db      	ldrb	r3, [r3, #3]
    1fd0:	461a      	mov	r2, r3
    1fd2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
    1fd4:	6db9      	ldr	r1, [r7, #88]	; 0x58
    1fd6:	4610      	mov	r0, r2
    1fd8:	4798      	blx	r3
    1fda:	f8c7 00ac 	str.w	r0, [r7, #172]	; 0xac
    1fde:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
    1fe2:	2b00      	cmp	r3, #0
    1fe4:	da02      	bge.n	1fec <cbvprintf+0x998>
    1fe6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
    1fea:	e05f      	b.n	20ac <cbvprintf+0xa58>
    1fec:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
    1ff0:	3301      	adds	r3, #1
    1ff2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
			}

			pad_len = conv->pad0_value;
    1ff6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
    1ffa:	685b      	ldr	r3, [r3, #4]
    1ffc:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
			while (pad_len-- > 0) {
    2000:	e011      	b.n	2026 <cbvprintf+0x9d2>
				OUTC('0');
    2002:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
    2004:	6db9      	ldr	r1, [r7, #88]	; 0x58
    2006:	2030      	movs	r0, #48	; 0x30
    2008:	4798      	blx	r3
    200a:	f8c7 00a0 	str.w	r0, [r7, #160]	; 0xa0
    200e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
    2012:	2b00      	cmp	r3, #0
    2014:	da02      	bge.n	201c <cbvprintf+0x9c8>
    2016:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
    201a:	e047      	b.n	20ac <cbvprintf+0xa58>
    201c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
    2020:	3301      	adds	r3, #1
    2022:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
			while (pad_len-- > 0) {
    2026:	f8d7 2100 	ldr.w	r2, [r7, #256]	; 0x100
    202a:	1e53      	subs	r3, r2, #1
    202c:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
    2030:	2a00      	cmp	r2, #0
    2032:	dce6      	bgt.n	2002 <cbvprintf+0x9ae>
			}

			OUTS(bps, bpe);
    2034:	6e7b      	ldr	r3, [r7, #100]	; 0x64
    2036:	f8d7 20f8 	ldr.w	r2, [r7, #248]	; 0xf8
    203a:	6db9      	ldr	r1, [r7, #88]	; 0x58
    203c:	6df8      	ldr	r0, [r7, #92]	; 0x5c
    203e:	f006 fd0c 	bl	8a5a <outs>
    2042:	f8c7 00a8 	str.w	r0, [r7, #168]	; 0xa8
    2046:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
    204a:	2b00      	cmp	r3, #0
    204c:	da02      	bge.n	2054 <cbvprintf+0xa00>
    204e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
    2052:	e02b      	b.n	20ac <cbvprintf+0xa58>
    2054:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
    2058:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
    205c:	4413      	add	r3, r2
    205e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
		}

		/* Finish left justification */
		while (width > 0) {
    2062:	e016      	b.n	2092 <cbvprintf+0xa3e>
			OUTC(' ');
    2064:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
    2066:	6db9      	ldr	r1, [r7, #88]	; 0x58
    2068:	2020      	movs	r0, #32
    206a:	4798      	blx	r3
    206c:	f8c7 00a4 	str.w	r0, [r7, #164]	; 0xa4
    2070:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
    2074:	2b00      	cmp	r3, #0
    2076:	da02      	bge.n	207e <cbvprintf+0xa2a>
    2078:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
    207c:	e016      	b.n	20ac <cbvprintf+0xa58>
    207e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
    2082:	3301      	adds	r3, #1
    2084:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
			--width;
    2088:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
    208c:	3b01      	subs	r3, #1
    208e:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
		while (width > 0) {
    2092:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
    2096:	2b00      	cmp	r3, #0
    2098:	dce4      	bgt.n	2064 <cbvprintf+0xa10>
    209a:	e000      	b.n	209e <cbvprintf+0xa4a>
			continue;
    209c:	bf00      	nop
	while (*fp != 0) {
    209e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    20a0:	781b      	ldrb	r3, [r3, #0]
    20a2:	2b00      	cmp	r3, #0
    20a4:	f47f aae3 	bne.w	166e <cbvprintf+0x1a>
		}
	}

	return count;
    20a8:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
#undef OUTS
#undef OUTC
}
    20ac:	4618      	mov	r0, r3
    20ae:	f507 7784 	add.w	r7, r7, #264	; 0x108
    20b2:	46bd      	mov	sp, r7
    20b4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
    20b8:	0000b834 	.word	0x0000b834

000020bc <log_backend_get>:
 * @param[in] idx  Pointer to the backend instance.
 *
 * @return    Pointer to the backend instance.
 */
static inline const struct log_backend *log_backend_get(uint32_t idx)
{
    20bc:	b480      	push	{r7}
    20be:	b083      	sub	sp, #12
    20c0:	af00      	add	r7, sp, #0
    20c2:	6078      	str	r0, [r7, #4]
	return &__log_backends_start[idx];
    20c4:	687b      	ldr	r3, [r7, #4]
    20c6:	011b      	lsls	r3, r3, #4
    20c8:	4a03      	ldr	r2, [pc, #12]	; (20d8 <log_backend_get+0x1c>)
    20ca:	4413      	add	r3, r2
}
    20cc:	4618      	mov	r0, r3
    20ce:	370c      	adds	r7, #12
    20d0:	46bd      	mov	sp, r7
    20d2:	bc80      	pop	{r7}
    20d4:	4770      	bx	lr
    20d6:	bf00      	nop
    20d8:	0000b7e0 	.word	0x0000b7e0

000020dc <log_backend_count_get>:
 * @brief Get number of backends.
 *
 * @return Number of backends.
 */
static inline int log_backend_count_get(void)
{
    20dc:	b480      	push	{r7}
    20de:	af00      	add	r7, sp, #0
	return __log_backends_end - __log_backends_start;
    20e0:	4a03      	ldr	r2, [pc, #12]	; (20f0 <log_backend_count_get+0x14>)
    20e2:	4b04      	ldr	r3, [pc, #16]	; (20f4 <log_backend_count_get+0x18>)
    20e4:	1ad3      	subs	r3, r2, r3
    20e6:	111b      	asrs	r3, r3, #4
}
    20e8:	4618      	mov	r0, r3
    20ea:	46bd      	mov	sp, r7
    20ec:	bc80      	pop	{r7}
    20ee:	4770      	bx	lr
    20f0:	0000b7f0 	.word	0x0000b7f0
    20f4:	0000b7e0 	.word	0x0000b7e0

000020f8 <sys_clock_hw_cycles_per_sec>:
{
    20f8:	b480      	push	{r7}
    20fa:	af00      	add	r7, sp, #0
	return CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC;
    20fc:	4b02      	ldr	r3, [pc, #8]	; (2108 <sys_clock_hw_cycles_per_sec+0x10>)
}
    20fe:	4618      	mov	r0, r3
    2100:	46bd      	mov	sp, r7
    2102:	bc80      	pop	{r7}
    2104:	4770      	bx	lr
    2106:	bf00      	nop
    2108:	00b71b00 	.word	0x00b71b00

0000210c <k_ms_to_ticks_ceil64>:
{
    210c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    2110:	b0bd      	sub	sp, #244	; 0xf4
    2112:	af00      	add	r7, sp, #0
    2114:	e9c7 0130 	strd	r0, r1, [r7, #192]	; 0xc0
    2118:	e9d7 2330 	ldrd	r2, r3, [r7, #192]	; 0xc0
    211c:	e9c7 233a 	strd	r2, r3, [r7, #232]	; 0xe8
    2120:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
    2124:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    2128:	2364      	movs	r3, #100	; 0x64
    212a:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    212e:	2301      	movs	r3, #1
    2130:	f887 30df 	strb.w	r3, [r7, #223]	; 0xdf
    2134:	2300      	movs	r3, #0
    2136:	f887 30de 	strb.w	r3, [r7, #222]	; 0xde
    213a:	2301      	movs	r3, #1
    213c:	f887 30dd 	strb.w	r3, [r7, #221]	; 0xdd
    2140:	2300      	movs	r3, #0
    2142:	f887 30dc 	strb.w	r3, [r7, #220]	; 0xdc
		(to_hz > from_hz) && ((to_hz % from_hz) == 0U);
    2146:	f897 30df 	ldrb.w	r3, [r7, #223]	; 0xdf
    214a:	2b00      	cmp	r3, #0
    214c:	d014      	beq.n	2178 <k_ms_to_ticks_ceil64+0x6c>
	bool mul_ratio = const_hz &&
    214e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
    2152:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
    2156:	429a      	cmp	r2, r3
    2158:	d20e      	bcs.n	2178 <k_ms_to_ticks_ceil64+0x6c>
		(to_hz > from_hz) && ((to_hz % from_hz) == 0U);
    215a:	f8d7 10e0 	ldr.w	r1, [r7, #224]	; 0xe0
    215e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
    2162:	fbb1 f2f3 	udiv	r2, r1, r3
    2166:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
    216a:	fb02 f303 	mul.w	r3, r2, r3
    216e:	1acb      	subs	r3, r1, r3
    2170:	2b00      	cmp	r3, #0
    2172:	d101      	bne.n	2178 <k_ms_to_ticks_ceil64+0x6c>
    2174:	2301      	movs	r3, #1
    2176:	e000      	b.n	217a <k_ms_to_ticks_ceil64+0x6e>
    2178:	2300      	movs	r3, #0
	bool mul_ratio = const_hz &&
    217a:	f887 30db 	strb.w	r3, [r7, #219]	; 0xdb
    217e:	f897 30db 	ldrb.w	r3, [r7, #219]	; 0xdb
    2182:	f003 0301 	and.w	r3, r3, #1
    2186:	f887 30db 	strb.w	r3, [r7, #219]	; 0xdb
		(from_hz > to_hz) && ((from_hz % to_hz) == 0U);
    218a:	f897 30df 	ldrb.w	r3, [r7, #223]	; 0xdf
    218e:	2b00      	cmp	r3, #0
    2190:	d014      	beq.n	21bc <k_ms_to_ticks_ceil64+0xb0>
	bool div_ratio = const_hz &&
    2192:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
    2196:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
    219a:	429a      	cmp	r2, r3
    219c:	d90e      	bls.n	21bc <k_ms_to_ticks_ceil64+0xb0>
		(from_hz > to_hz) && ((from_hz % to_hz) == 0U);
    219e:	f8d7 10e4 	ldr.w	r1, [r7, #228]	; 0xe4
    21a2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
    21a6:	fbb1 f2f3 	udiv	r2, r1, r3
    21aa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
    21ae:	fb02 f303 	mul.w	r3, r2, r3
    21b2:	1acb      	subs	r3, r1, r3
    21b4:	2b00      	cmp	r3, #0
    21b6:	d101      	bne.n	21bc <k_ms_to_ticks_ceil64+0xb0>
    21b8:	2301      	movs	r3, #1
    21ba:	e000      	b.n	21be <k_ms_to_ticks_ceil64+0xb2>
    21bc:	2300      	movs	r3, #0
	bool div_ratio = const_hz &&
    21be:	f887 30da 	strb.w	r3, [r7, #218]	; 0xda
    21c2:	f897 30da 	ldrb.w	r3, [r7, #218]	; 0xda
    21c6:	f003 0301 	and.w	r3, r3, #1
    21ca:	f887 30da 	strb.w	r3, [r7, #218]	; 0xda
	if (from_hz == to_hz) {
    21ce:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
    21d2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
    21d6:	429a      	cmp	r2, r3
    21d8:	d10c      	bne.n	21f4 <k_ms_to_ticks_ceil64+0xe8>
		return result32 ? ((uint32_t)t) : t;
    21da:	f897 30de 	ldrb.w	r3, [r7, #222]	; 0xde
    21de:	2b00      	cmp	r3, #0
    21e0:	d005      	beq.n	21ee <k_ms_to_ticks_ceil64+0xe2>
    21e2:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
    21e6:	2200      	movs	r2, #0
    21e8:	461c      	mov	r4, r3
    21ea:	4615      	mov	r5, r2
    21ec:	e1de      	b.n	25ac <k_ms_to_ticks_ceil64+0x4a0>
    21ee:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
    21f2:	e1db      	b.n	25ac <k_ms_to_ticks_ceil64+0x4a0>
	uint64_t off = 0;
    21f4:	f04f 0200 	mov.w	r2, #0
    21f8:	f04f 0300 	mov.w	r3, #0
    21fc:	e9c7 2334 	strd	r2, r3, [r7, #208]	; 0xd0
	if (!mul_ratio) {
    2200:	f897 30db 	ldrb.w	r3, [r7, #219]	; 0xdb
    2204:	f083 0301 	eor.w	r3, r3, #1
    2208:	b2db      	uxtb	r3, r3
    220a:	2b00      	cmp	r3, #0
    220c:	d02a      	beq.n	2264 <k_ms_to_ticks_ceil64+0x158>
		uint32_t rdivisor = div_ratio ? (from_hz / to_hz) : from_hz;
    220e:	f897 30da 	ldrb.w	r3, [r7, #218]	; 0xda
    2212:	2b00      	cmp	r3, #0
    2214:	d006      	beq.n	2224 <k_ms_to_ticks_ceil64+0x118>
    2216:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
    221a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
    221e:	fbb2 f3f3 	udiv	r3, r2, r3
    2222:	e001      	b.n	2228 <k_ms_to_ticks_ceil64+0x11c>
    2224:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
    2228:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
		if (round_up) {
    222c:	f897 30dd 	ldrb.w	r3, [r7, #221]	; 0xdd
    2230:	2b00      	cmp	r3, #0
    2232:	d009      	beq.n	2248 <k_ms_to_ticks_ceil64+0x13c>
			off = rdivisor - 1U;
    2234:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
    2238:	3b01      	subs	r3, #1
    223a:	2200      	movs	r2, #0
    223c:	613b      	str	r3, [r7, #16]
    223e:	617a      	str	r2, [r7, #20]
    2240:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
    2244:	e9c7 2334 	strd	r2, r3, [r7, #208]	; 0xd0
		if (round_off) {
    2248:	f897 30dc 	ldrb.w	r3, [r7, #220]	; 0xdc
    224c:	2b00      	cmp	r3, #0
    224e:	d009      	beq.n	2264 <k_ms_to_ticks_ceil64+0x158>
			off = rdivisor / 2U;
    2250:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
    2254:	085b      	lsrs	r3, r3, #1
    2256:	2200      	movs	r2, #0
    2258:	60bb      	str	r3, [r7, #8]
    225a:	60fa      	str	r2, [r7, #12]
    225c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
    2260:	e9c7 2334 	strd	r2, r3, [r7, #208]	; 0xd0
	if (div_ratio) {
    2264:	f897 30da 	ldrb.w	r3, [r7, #218]	; 0xda
    2268:	2b00      	cmp	r3, #0
    226a:	d038      	beq.n	22de <k_ms_to_ticks_ceil64+0x1d2>
		t += off;
    226c:	e9d7 013a 	ldrd	r0, r1, [r7, #232]	; 0xe8
    2270:	e9d7 2334 	ldrd	r2, r3, [r7, #208]	; 0xd0
    2274:	1886      	adds	r6, r0, r2
    2276:	603e      	str	r6, [r7, #0]
    2278:	eb41 0303 	adc.w	r3, r1, r3
    227c:	607b      	str	r3, [r7, #4]
    227e:	e9d7 2300 	ldrd	r2, r3, [r7]
    2282:	e9c7 233a 	strd	r2, r3, [r7, #232]	; 0xe8
		if (result32 && (t < BIT64(32))) {
    2286:	f897 30de 	ldrb.w	r3, [r7, #222]	; 0xde
    228a:	2b00      	cmp	r3, #0
    228c:	d011      	beq.n	22b2 <k_ms_to_ticks_ceil64+0x1a6>
    228e:	e9d7 233a 	ldrd	r2, r3, [r7, #232]	; 0xe8
    2292:	2b01      	cmp	r3, #1
    2294:	d20d      	bcs.n	22b2 <k_ms_to_ticks_ceil64+0x1a6>
			return ((uint32_t)t) / (from_hz / to_hz);
    2296:	f8d7 20e8 	ldr.w	r2, [r7, #232]	; 0xe8
    229a:	f8d7 10e4 	ldr.w	r1, [r7, #228]	; 0xe4
    229e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
    22a2:	fbb1 f3f3 	udiv	r3, r1, r3
    22a6:	fbb2 f3f3 	udiv	r3, r2, r3
    22aa:	2200      	movs	r2, #0
    22ac:	461c      	mov	r4, r3
    22ae:	4615      	mov	r5, r2
    22b0:	e17c      	b.n	25ac <k_ms_to_ticks_ceil64+0x4a0>
			return t / ((uint64_t)from_hz / to_hz);
    22b2:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
    22b6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
    22ba:	fbb2 f3f3 	udiv	r3, r2, r3
    22be:	2200      	movs	r2, #0
    22c0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    22c4:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
    22c8:	e9d7 2326 	ldrd	r2, r3, [r7, #152]	; 0x98
    22cc:	e9d7 013a 	ldrd	r0, r1, [r7, #232]	; 0xe8
    22d0:	f7fd ff0c 	bl	ec <__aeabi_uldivmod>
    22d4:	4602      	mov	r2, r0
    22d6:	460b      	mov	r3, r1
    22d8:	4614      	mov	r4, r2
    22da:	461d      	mov	r5, r3
    22dc:	e166      	b.n	25ac <k_ms_to_ticks_ceil64+0x4a0>
	} else if (mul_ratio) {
    22de:	f897 30db 	ldrb.w	r3, [r7, #219]	; 0xdb
    22e2:	2b00      	cmp	r3, #0
    22e4:	d031      	beq.n	234a <k_ms_to_ticks_ceil64+0x23e>
		if (result32) {
    22e6:	f897 30de 	ldrb.w	r3, [r7, #222]	; 0xde
    22ea:	2b00      	cmp	r3, #0
    22ec:	d00d      	beq.n	230a <k_ms_to_ticks_ceil64+0x1fe>
			return ((uint32_t)t) * (to_hz / from_hz);
    22ee:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
    22f2:	f8d7 10e0 	ldr.w	r1, [r7, #224]	; 0xe0
    22f6:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
    22fa:	fbb1 f2f2 	udiv	r2, r1, r2
    22fe:	fb02 f303 	mul.w	r3, r2, r3
    2302:	2200      	movs	r2, #0
    2304:	461c      	mov	r4, r3
    2306:	4615      	mov	r5, r2
    2308:	e150      	b.n	25ac <k_ms_to_ticks_ceil64+0x4a0>
			return t * ((uint64_t)to_hz / from_hz);
    230a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
    230e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
    2312:	fbb2 f3f3 	udiv	r3, r2, r3
    2316:	2200      	movs	r2, #0
    2318:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    231c:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
    2320:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
    2324:	e9d7 8924 	ldrd	r8, r9, [r7, #144]	; 0x90
    2328:	464a      	mov	r2, r9
    232a:	fb02 f203 	mul.w	r2, r2, r3
    232e:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
    2332:	4641      	mov	r1, r8
    2334:	fb01 f303 	mul.w	r3, r1, r3
    2338:	4413      	add	r3, r2
    233a:	f8d7 20e8 	ldr.w	r2, [r7, #232]	; 0xe8
    233e:	4641      	mov	r1, r8
    2340:	fba2 4501 	umull	r4, r5, r2, r1
    2344:	442b      	add	r3, r5
    2346:	461d      	mov	r5, r3
    2348:	e130      	b.n	25ac <k_ms_to_ticks_ceil64+0x4a0>
		if (result32) {
    234a:	f897 30de 	ldrb.w	r3, [r7, #222]	; 0xde
    234e:	2b00      	cmp	r3, #0
    2350:	d035      	beq.n	23be <k_ms_to_ticks_ceil64+0x2b2>
			return (uint32_t)((t * to_hz + off) / from_hz);
    2352:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
    2356:	2200      	movs	r2, #0
    2358:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    235c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
    2360:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
    2364:	e9d7 ab22 	ldrd	sl, fp, [r7, #136]	; 0x88
    2368:	465a      	mov	r2, fp
    236a:	fb02 f203 	mul.w	r2, r2, r3
    236e:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
    2372:	4651      	mov	r1, sl
    2374:	fb01 f303 	mul.w	r3, r1, r3
    2378:	4413      	add	r3, r2
    237a:	f8d7 20e8 	ldr.w	r2, [r7, #232]	; 0xe8
    237e:	4651      	mov	r1, sl
    2380:	fba2 8901 	umull	r8, r9, r2, r1
    2384:	444b      	add	r3, r9
    2386:	4699      	mov	r9, r3
    2388:	e9d7 2334 	ldrd	r2, r3, [r7, #208]	; 0xd0
    238c:	eb18 0102 	adds.w	r1, r8, r2
    2390:	f8c7 1080 	str.w	r1, [r7, #128]	; 0x80
    2394:	eb49 0303 	adc.w	r3, r9, r3
    2398:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    239c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
    23a0:	2200      	movs	r2, #0
    23a2:	67bb      	str	r3, [r7, #120]	; 0x78
    23a4:	67fa      	str	r2, [r7, #124]	; 0x7c
    23a6:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
    23aa:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
    23ae:	f7fd fe9d 	bl	ec <__aeabi_uldivmod>
    23b2:	4602      	mov	r2, r0
    23b4:	460b      	mov	r3, r1
    23b6:	2300      	movs	r3, #0
    23b8:	4614      	mov	r4, r2
    23ba:	461d      	mov	r5, r3
    23bc:	e0f6      	b.n	25ac <k_ms_to_ticks_ceil64+0x4a0>
		} else if (const_hz && Z_TMCVT_USE_FAST_ALGO(from_hz, to_hz)) {
    23be:	f897 30df 	ldrb.w	r3, [r7, #223]	; 0xdf
    23c2:	2b00      	cmp	r3, #0
    23c4:	f000 8082 	beq.w	24cc <k_ms_to_ticks_ceil64+0x3c0>
    23c8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
    23cc:	2200      	movs	r2, #0
    23ce:	673b      	str	r3, [r7, #112]	; 0x70
    23d0:	677a      	str	r2, [r7, #116]	; 0x74
    23d2:	4b7a      	ldr	r3, [pc, #488]	; (25bc <k_ms_to_ticks_ceil64+0x4b0>)
    23d4:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
    23d8:	464a      	mov	r2, r9
    23da:	fb03 f202 	mul.w	r2, r3, r2
    23de:	2300      	movs	r3, #0
    23e0:	4641      	mov	r1, r8
    23e2:	fb01 f303 	mul.w	r3, r1, r3
    23e6:	441a      	add	r2, r3
    23e8:	4b74      	ldr	r3, [pc, #464]	; (25bc <k_ms_to_ticks_ceil64+0x4b0>)
    23ea:	4641      	mov	r1, r8
    23ec:	fba1 ab03 	umull	sl, fp, r1, r3
    23f0:	eb02 030b 	add.w	r3, r2, fp
    23f4:	469b      	mov	fp, r3
    23f6:	f1ba 0302 	subs.w	r3, sl, #2
    23fa:	66bb      	str	r3, [r7, #104]	; 0x68
    23fc:	f14b 0300 	adc.w	r3, fp, #0
    2400:	66fb      	str	r3, [r7, #108]	; 0x6c
    2402:	f04f 32ff 	mov.w	r2, #4294967295
    2406:	f04f 0300 	mov.w	r3, #0
    240a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
    240e:	f7fd fe6d 	bl	ec <__aeabi_uldivmod>
    2412:	4602      	mov	r2, r0
    2414:	460b      	mov	r3, r1
    2416:	4610      	mov	r0, r2
    2418:	4619      	mov	r1, r3
    241a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
    241e:	2200      	movs	r2, #0
    2420:	663b      	str	r3, [r7, #96]	; 0x60
    2422:	667a      	str	r2, [r7, #100]	; 0x64
    2424:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
    2428:	4643      	mov	r3, r8
    242a:	fb03 f201 	mul.w	r2, r3, r1
    242e:	464b      	mov	r3, r9
    2430:	fb00 f303 	mul.w	r3, r0, r3
    2434:	4413      	add	r3, r2
    2436:	4642      	mov	r2, r8
    2438:	fba0 2102 	umull	r2, r1, r0, r2
    243c:	f8c7 10bc 	str.w	r1, [r7, #188]	; 0xbc
    2440:	f8c7 20b8 	str.w	r2, [r7, #184]	; 0xb8
    2444:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
    2448:	4413      	add	r3, r2
    244a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    244e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
    2452:	2b01      	cmp	r3, #1
    2454:	d23a      	bcs.n	24cc <k_ms_to_ticks_ceil64+0x3c0>
			return ((t * to_hz + off) / from_hz);
    2456:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
    245a:	2200      	movs	r2, #0
    245c:	65bb      	str	r3, [r7, #88]	; 0x58
    245e:	65fa      	str	r2, [r7, #92]	; 0x5c
    2460:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
    2464:	e9d7 4516 	ldrd	r4, r5, [r7, #88]	; 0x58
    2468:	462a      	mov	r2, r5
    246a:	fb02 f203 	mul.w	r2, r2, r3
    246e:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
    2472:	4621      	mov	r1, r4
    2474:	fb01 f303 	mul.w	r3, r1, r3
    2478:	4413      	add	r3, r2
    247a:	f8d7 20e8 	ldr.w	r2, [r7, #232]	; 0xe8
    247e:	4621      	mov	r1, r4
    2480:	fba2 2101 	umull	r2, r1, r2, r1
    2484:	f8c7 10b4 	str.w	r1, [r7, #180]	; 0xb4
    2488:	f8c7 20b0 	str.w	r2, [r7, #176]	; 0xb0
    248c:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
    2490:	4413      	add	r3, r2
    2492:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    2496:	e9d7 2334 	ldrd	r2, r3, [r7, #208]	; 0xd0
    249a:	e9d7 452c 	ldrd	r4, r5, [r7, #176]	; 0xb0
    249e:	4621      	mov	r1, r4
    24a0:	1889      	adds	r1, r1, r2
    24a2:	6539      	str	r1, [r7, #80]	; 0x50
    24a4:	4629      	mov	r1, r5
    24a6:	eb43 0101 	adc.w	r1, r3, r1
    24aa:	6579      	str	r1, [r7, #84]	; 0x54
    24ac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
    24b0:	2200      	movs	r2, #0
    24b2:	64bb      	str	r3, [r7, #72]	; 0x48
    24b4:	64fa      	str	r2, [r7, #76]	; 0x4c
    24b6:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
    24ba:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
    24be:	f7fd fe15 	bl	ec <__aeabi_uldivmod>
    24c2:	4602      	mov	r2, r0
    24c4:	460b      	mov	r3, r1
    24c6:	4614      	mov	r4, r2
    24c8:	461d      	mov	r5, r3
    24ca:	e06f      	b.n	25ac <k_ms_to_ticks_ceil64+0x4a0>
			return (t / from_hz) * to_hz + ((t % from_hz) * to_hz + off) / from_hz;
    24cc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
    24d0:	2200      	movs	r2, #0
    24d2:	643b      	str	r3, [r7, #64]	; 0x40
    24d4:	647a      	str	r2, [r7, #68]	; 0x44
    24d6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
    24da:	e9d7 013a 	ldrd	r0, r1, [r7, #232]	; 0xe8
    24de:	f7fd fe05 	bl	ec <__aeabi_uldivmod>
    24e2:	4602      	mov	r2, r0
    24e4:	460b      	mov	r3, r1
    24e6:	4610      	mov	r0, r2
    24e8:	4619      	mov	r1, r3
    24ea:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
    24ee:	2200      	movs	r2, #0
    24f0:	63bb      	str	r3, [r7, #56]	; 0x38
    24f2:	63fa      	str	r2, [r7, #60]	; 0x3c
    24f4:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
    24f8:	4643      	mov	r3, r8
    24fa:	fb03 f201 	mul.w	r2, r3, r1
    24fe:	464b      	mov	r3, r9
    2500:	fb00 f303 	mul.w	r3, r0, r3
    2504:	4413      	add	r3, r2
    2506:	4642      	mov	r2, r8
    2508:	fba0 2102 	umull	r2, r1, r0, r2
    250c:	f8c7 10ac 	str.w	r1, [r7, #172]	; 0xac
    2510:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
    2514:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
    2518:	4413      	add	r3, r2
    251a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    251e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
    2522:	2200      	movs	r2, #0
    2524:	633b      	str	r3, [r7, #48]	; 0x30
    2526:	637a      	str	r2, [r7, #52]	; 0x34
    2528:	e9d7 013a 	ldrd	r0, r1, [r7, #232]	; 0xe8
    252c:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
    2530:	f7fd fddc 	bl	ec <__aeabi_uldivmod>
    2534:	4610      	mov	r0, r2
    2536:	4619      	mov	r1, r3
    2538:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
    253c:	2200      	movs	r2, #0
    253e:	62bb      	str	r3, [r7, #40]	; 0x28
    2540:	62fa      	str	r2, [r7, #44]	; 0x2c
    2542:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
    2546:	4643      	mov	r3, r8
    2548:	fb03 f201 	mul.w	r2, r3, r1
    254c:	464b      	mov	r3, r9
    254e:	fb00 f303 	mul.w	r3, r0, r3
    2552:	4413      	add	r3, r2
    2554:	4642      	mov	r2, r8
    2556:	fba0 2102 	umull	r2, r1, r0, r2
    255a:	f8c7 10a4 	str.w	r1, [r7, #164]	; 0xa4
    255e:	f8c7 20a0 	str.w	r2, [r7, #160]	; 0xa0
    2562:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
    2566:	4413      	add	r3, r2
    2568:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    256c:	e9d7 2334 	ldrd	r2, r3, [r7, #208]	; 0xd0
    2570:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
    2574:	4641      	mov	r1, r8
    2576:	1889      	adds	r1, r1, r2
    2578:	6239      	str	r1, [r7, #32]
    257a:	4649      	mov	r1, r9
    257c:	eb43 0101 	adc.w	r1, r3, r1
    2580:	6279      	str	r1, [r7, #36]	; 0x24
    2582:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
    2586:	2200      	movs	r2, #0
    2588:	61bb      	str	r3, [r7, #24]
    258a:	61fa      	str	r2, [r7, #28]
    258c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
    2590:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
    2594:	f7fd fdaa 	bl	ec <__aeabi_uldivmod>
    2598:	4602      	mov	r2, r0
    259a:	460b      	mov	r3, r1
    259c:	e9d7 892a 	ldrd	r8, r9, [r7, #168]	; 0xa8
    25a0:	4641      	mov	r1, r8
    25a2:	188c      	adds	r4, r1, r2
    25a4:	4649      	mov	r1, r9
    25a6:	eb43 0101 	adc.w	r1, r3, r1
    25aa:	460d      	mov	r5, r1
	return z_tmcvt(t, Z_HZ_ms, Z_HZ_ticks, true, false, true, false);
    25ac:	4622      	mov	r2, r4
    25ae:	462b      	mov	r3, r5
}
    25b0:	4610      	mov	r0, r2
    25b2:	4619      	mov	r1, r3
    25b4:	37f4      	adds	r7, #244	; 0xf4
    25b6:	46bd      	mov	sp, r7
    25b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    25bc:	01e13380 	.word	0x01e13380

000025c0 <k_ticks_to_ms_floor64>:
 * Truncates to the next lowest output unit.
 *
 * @return The converted time value
 */
static TIME_CONSTEXPR inline uint64_t k_ticks_to_ms_floor64(uint64_t t)
{
    25c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    25c4:	b0bd      	sub	sp, #244	; 0xf4
    25c6:	af00      	add	r7, sp, #0
    25c8:	e9c7 0130 	strd	r0, r1, [r7, #192]	; 0xc0
    25cc:	e9d7 2330 	ldrd	r2, r3, [r7, #192]	; 0xc0
    25d0:	e9c7 233a 	strd	r2, r3, [r7, #232]	; 0xe8
    25d4:	2364      	movs	r3, #100	; 0x64
    25d6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    25da:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
    25de:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    25e2:	2301      	movs	r3, #1
    25e4:	f887 30df 	strb.w	r3, [r7, #223]	; 0xdf
    25e8:	2300      	movs	r3, #0
    25ea:	f887 30de 	strb.w	r3, [r7, #222]	; 0xde
    25ee:	2300      	movs	r3, #0
    25f0:	f887 30dd 	strb.w	r3, [r7, #221]	; 0xdd
    25f4:	2300      	movs	r3, #0
    25f6:	f887 30dc 	strb.w	r3, [r7, #220]	; 0xdc
		(to_hz > from_hz) && ((to_hz % from_hz) == 0U);
    25fa:	f897 30df 	ldrb.w	r3, [r7, #223]	; 0xdf
    25fe:	2b00      	cmp	r3, #0
    2600:	d014      	beq.n	262c <k_ticks_to_ms_floor64+0x6c>
	bool mul_ratio = const_hz &&
    2602:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
    2606:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
    260a:	429a      	cmp	r2, r3
    260c:	d20e      	bcs.n	262c <k_ticks_to_ms_floor64+0x6c>
		(to_hz > from_hz) && ((to_hz % from_hz) == 0U);
    260e:	f8d7 10e0 	ldr.w	r1, [r7, #224]	; 0xe0
    2612:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
    2616:	fbb1 f2f3 	udiv	r2, r1, r3
    261a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
    261e:	fb02 f303 	mul.w	r3, r2, r3
    2622:	1acb      	subs	r3, r1, r3
    2624:	2b00      	cmp	r3, #0
    2626:	d101      	bne.n	262c <k_ticks_to_ms_floor64+0x6c>
    2628:	2301      	movs	r3, #1
    262a:	e000      	b.n	262e <k_ticks_to_ms_floor64+0x6e>
    262c:	2300      	movs	r3, #0
	bool mul_ratio = const_hz &&
    262e:	f887 30db 	strb.w	r3, [r7, #219]	; 0xdb
    2632:	f897 30db 	ldrb.w	r3, [r7, #219]	; 0xdb
    2636:	f003 0301 	and.w	r3, r3, #1
    263a:	f887 30db 	strb.w	r3, [r7, #219]	; 0xdb
		(from_hz > to_hz) && ((from_hz % to_hz) == 0U);
    263e:	f897 30df 	ldrb.w	r3, [r7, #223]	; 0xdf
    2642:	2b00      	cmp	r3, #0
    2644:	d014      	beq.n	2670 <k_ticks_to_ms_floor64+0xb0>
	bool div_ratio = const_hz &&
    2646:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
    264a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
    264e:	429a      	cmp	r2, r3
    2650:	d90e      	bls.n	2670 <k_ticks_to_ms_floor64+0xb0>
		(from_hz > to_hz) && ((from_hz % to_hz) == 0U);
    2652:	f8d7 10e4 	ldr.w	r1, [r7, #228]	; 0xe4
    2656:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
    265a:	fbb1 f2f3 	udiv	r2, r1, r3
    265e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
    2662:	fb02 f303 	mul.w	r3, r2, r3
    2666:	1acb      	subs	r3, r1, r3
    2668:	2b00      	cmp	r3, #0
    266a:	d101      	bne.n	2670 <k_ticks_to_ms_floor64+0xb0>
    266c:	2301      	movs	r3, #1
    266e:	e000      	b.n	2672 <k_ticks_to_ms_floor64+0xb2>
    2670:	2300      	movs	r3, #0
	bool div_ratio = const_hz &&
    2672:	f887 30da 	strb.w	r3, [r7, #218]	; 0xda
    2676:	f897 30da 	ldrb.w	r3, [r7, #218]	; 0xda
    267a:	f003 0301 	and.w	r3, r3, #1
    267e:	f887 30da 	strb.w	r3, [r7, #218]	; 0xda
	if (from_hz == to_hz) {
    2682:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
    2686:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
    268a:	429a      	cmp	r2, r3
    268c:	d10c      	bne.n	26a8 <k_ticks_to_ms_floor64+0xe8>
		return result32 ? ((uint32_t)t) : t;
    268e:	f897 30de 	ldrb.w	r3, [r7, #222]	; 0xde
    2692:	2b00      	cmp	r3, #0
    2694:	d005      	beq.n	26a2 <k_ticks_to_ms_floor64+0xe2>
    2696:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
    269a:	2200      	movs	r2, #0
    269c:	461c      	mov	r4, r3
    269e:	4615      	mov	r5, r2
    26a0:	e1de      	b.n	2a60 <k_ticks_to_ms_floor64+0x4a0>
    26a2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
    26a6:	e1db      	b.n	2a60 <k_ticks_to_ms_floor64+0x4a0>
	uint64_t off = 0;
    26a8:	f04f 0200 	mov.w	r2, #0
    26ac:	f04f 0300 	mov.w	r3, #0
    26b0:	e9c7 2334 	strd	r2, r3, [r7, #208]	; 0xd0
	if (!mul_ratio) {
    26b4:	f897 30db 	ldrb.w	r3, [r7, #219]	; 0xdb
    26b8:	f083 0301 	eor.w	r3, r3, #1
    26bc:	b2db      	uxtb	r3, r3
    26be:	2b00      	cmp	r3, #0
    26c0:	d02a      	beq.n	2718 <k_ticks_to_ms_floor64+0x158>
		uint32_t rdivisor = div_ratio ? (from_hz / to_hz) : from_hz;
    26c2:	f897 30da 	ldrb.w	r3, [r7, #218]	; 0xda
    26c6:	2b00      	cmp	r3, #0
    26c8:	d006      	beq.n	26d8 <k_ticks_to_ms_floor64+0x118>
    26ca:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
    26ce:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
    26d2:	fbb2 f3f3 	udiv	r3, r2, r3
    26d6:	e001      	b.n	26dc <k_ticks_to_ms_floor64+0x11c>
    26d8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
    26dc:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
		if (round_up) {
    26e0:	f897 30dd 	ldrb.w	r3, [r7, #221]	; 0xdd
    26e4:	2b00      	cmp	r3, #0
    26e6:	d009      	beq.n	26fc <k_ticks_to_ms_floor64+0x13c>
			off = rdivisor - 1U;
    26e8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
    26ec:	3b01      	subs	r3, #1
    26ee:	2200      	movs	r2, #0
    26f0:	613b      	str	r3, [r7, #16]
    26f2:	617a      	str	r2, [r7, #20]
    26f4:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
    26f8:	e9c7 2334 	strd	r2, r3, [r7, #208]	; 0xd0
		if (round_off) {
    26fc:	f897 30dc 	ldrb.w	r3, [r7, #220]	; 0xdc
    2700:	2b00      	cmp	r3, #0
    2702:	d009      	beq.n	2718 <k_ticks_to_ms_floor64+0x158>
			off = rdivisor / 2U;
    2704:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
    2708:	085b      	lsrs	r3, r3, #1
    270a:	2200      	movs	r2, #0
    270c:	60bb      	str	r3, [r7, #8]
    270e:	60fa      	str	r2, [r7, #12]
    2710:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
    2714:	e9c7 2334 	strd	r2, r3, [r7, #208]	; 0xd0
	if (div_ratio) {
    2718:	f897 30da 	ldrb.w	r3, [r7, #218]	; 0xda
    271c:	2b00      	cmp	r3, #0
    271e:	d038      	beq.n	2792 <k_ticks_to_ms_floor64+0x1d2>
		t += off;
    2720:	e9d7 013a 	ldrd	r0, r1, [r7, #232]	; 0xe8
    2724:	e9d7 2334 	ldrd	r2, r3, [r7, #208]	; 0xd0
    2728:	1886      	adds	r6, r0, r2
    272a:	603e      	str	r6, [r7, #0]
    272c:	eb41 0303 	adc.w	r3, r1, r3
    2730:	607b      	str	r3, [r7, #4]
    2732:	e9d7 2300 	ldrd	r2, r3, [r7]
    2736:	e9c7 233a 	strd	r2, r3, [r7, #232]	; 0xe8
		if (result32 && (t < BIT64(32))) {
    273a:	f897 30de 	ldrb.w	r3, [r7, #222]	; 0xde
    273e:	2b00      	cmp	r3, #0
    2740:	d011      	beq.n	2766 <k_ticks_to_ms_floor64+0x1a6>
    2742:	e9d7 233a 	ldrd	r2, r3, [r7, #232]	; 0xe8
    2746:	2b01      	cmp	r3, #1
    2748:	d20d      	bcs.n	2766 <k_ticks_to_ms_floor64+0x1a6>
			return ((uint32_t)t) / (from_hz / to_hz);
    274a:	f8d7 20e8 	ldr.w	r2, [r7, #232]	; 0xe8
    274e:	f8d7 10e4 	ldr.w	r1, [r7, #228]	; 0xe4
    2752:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
    2756:	fbb1 f3f3 	udiv	r3, r1, r3
    275a:	fbb2 f3f3 	udiv	r3, r2, r3
    275e:	2200      	movs	r2, #0
    2760:	461c      	mov	r4, r3
    2762:	4615      	mov	r5, r2
    2764:	e17c      	b.n	2a60 <k_ticks_to_ms_floor64+0x4a0>
			return t / ((uint64_t)from_hz / to_hz);
    2766:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
    276a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
    276e:	fbb2 f3f3 	udiv	r3, r2, r3
    2772:	2200      	movs	r2, #0
    2774:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    2778:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
    277c:	e9d7 2326 	ldrd	r2, r3, [r7, #152]	; 0x98
    2780:	e9d7 013a 	ldrd	r0, r1, [r7, #232]	; 0xe8
    2784:	f7fd fcb2 	bl	ec <__aeabi_uldivmod>
    2788:	4602      	mov	r2, r0
    278a:	460b      	mov	r3, r1
    278c:	4614      	mov	r4, r2
    278e:	461d      	mov	r5, r3
    2790:	e166      	b.n	2a60 <k_ticks_to_ms_floor64+0x4a0>
	} else if (mul_ratio) {
    2792:	f897 30db 	ldrb.w	r3, [r7, #219]	; 0xdb
    2796:	2b00      	cmp	r3, #0
    2798:	d031      	beq.n	27fe <k_ticks_to_ms_floor64+0x23e>
		if (result32) {
    279a:	f897 30de 	ldrb.w	r3, [r7, #222]	; 0xde
    279e:	2b00      	cmp	r3, #0
    27a0:	d00d      	beq.n	27be <k_ticks_to_ms_floor64+0x1fe>
			return ((uint32_t)t) * (to_hz / from_hz);
    27a2:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
    27a6:	f8d7 10e0 	ldr.w	r1, [r7, #224]	; 0xe0
    27aa:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
    27ae:	fbb1 f2f2 	udiv	r2, r1, r2
    27b2:	fb02 f303 	mul.w	r3, r2, r3
    27b6:	2200      	movs	r2, #0
    27b8:	461c      	mov	r4, r3
    27ba:	4615      	mov	r5, r2
    27bc:	e150      	b.n	2a60 <k_ticks_to_ms_floor64+0x4a0>
			return t * ((uint64_t)to_hz / from_hz);
    27be:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
    27c2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
    27c6:	fbb2 f3f3 	udiv	r3, r2, r3
    27ca:	2200      	movs	r2, #0
    27cc:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    27d0:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
    27d4:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
    27d8:	e9d7 8924 	ldrd	r8, r9, [r7, #144]	; 0x90
    27dc:	464a      	mov	r2, r9
    27de:	fb02 f203 	mul.w	r2, r2, r3
    27e2:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
    27e6:	4641      	mov	r1, r8
    27e8:	fb01 f303 	mul.w	r3, r1, r3
    27ec:	4413      	add	r3, r2
    27ee:	f8d7 20e8 	ldr.w	r2, [r7, #232]	; 0xe8
    27f2:	4641      	mov	r1, r8
    27f4:	fba2 4501 	umull	r4, r5, r2, r1
    27f8:	442b      	add	r3, r5
    27fa:	461d      	mov	r5, r3
    27fc:	e130      	b.n	2a60 <k_ticks_to_ms_floor64+0x4a0>
		if (result32) {
    27fe:	f897 30de 	ldrb.w	r3, [r7, #222]	; 0xde
    2802:	2b00      	cmp	r3, #0
    2804:	d035      	beq.n	2872 <k_ticks_to_ms_floor64+0x2b2>
			return (uint32_t)((t * to_hz + off) / from_hz);
    2806:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
    280a:	2200      	movs	r2, #0
    280c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    2810:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
    2814:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
    2818:	e9d7 ab22 	ldrd	sl, fp, [r7, #136]	; 0x88
    281c:	465a      	mov	r2, fp
    281e:	fb02 f203 	mul.w	r2, r2, r3
    2822:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
    2826:	4651      	mov	r1, sl
    2828:	fb01 f303 	mul.w	r3, r1, r3
    282c:	4413      	add	r3, r2
    282e:	f8d7 20e8 	ldr.w	r2, [r7, #232]	; 0xe8
    2832:	4651      	mov	r1, sl
    2834:	fba2 8901 	umull	r8, r9, r2, r1
    2838:	444b      	add	r3, r9
    283a:	4699      	mov	r9, r3
    283c:	e9d7 2334 	ldrd	r2, r3, [r7, #208]	; 0xd0
    2840:	eb18 0102 	adds.w	r1, r8, r2
    2844:	f8c7 1080 	str.w	r1, [r7, #128]	; 0x80
    2848:	eb49 0303 	adc.w	r3, r9, r3
    284c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    2850:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
    2854:	2200      	movs	r2, #0
    2856:	67bb      	str	r3, [r7, #120]	; 0x78
    2858:	67fa      	str	r2, [r7, #124]	; 0x7c
    285a:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
    285e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
    2862:	f7fd fc43 	bl	ec <__aeabi_uldivmod>
    2866:	4602      	mov	r2, r0
    2868:	460b      	mov	r3, r1
    286a:	2300      	movs	r3, #0
    286c:	4614      	mov	r4, r2
    286e:	461d      	mov	r5, r3
    2870:	e0f6      	b.n	2a60 <k_ticks_to_ms_floor64+0x4a0>
		} else if (const_hz && Z_TMCVT_USE_FAST_ALGO(from_hz, to_hz)) {
    2872:	f897 30df 	ldrb.w	r3, [r7, #223]	; 0xdf
    2876:	2b00      	cmp	r3, #0
    2878:	f000 8082 	beq.w	2980 <k_ticks_to_ms_floor64+0x3c0>
    287c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
    2880:	2200      	movs	r2, #0
    2882:	673b      	str	r3, [r7, #112]	; 0x70
    2884:	677a      	str	r2, [r7, #116]	; 0x74
    2886:	4b7a      	ldr	r3, [pc, #488]	; (2a70 <k_ticks_to_ms_floor64+0x4b0>)
    2888:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
    288c:	464a      	mov	r2, r9
    288e:	fb03 f202 	mul.w	r2, r3, r2
    2892:	2300      	movs	r3, #0
    2894:	4641      	mov	r1, r8
    2896:	fb01 f303 	mul.w	r3, r1, r3
    289a:	441a      	add	r2, r3
    289c:	4b74      	ldr	r3, [pc, #464]	; (2a70 <k_ticks_to_ms_floor64+0x4b0>)
    289e:	4641      	mov	r1, r8
    28a0:	fba1 ab03 	umull	sl, fp, r1, r3
    28a4:	eb02 030b 	add.w	r3, r2, fp
    28a8:	469b      	mov	fp, r3
    28aa:	f1ba 0302 	subs.w	r3, sl, #2
    28ae:	66bb      	str	r3, [r7, #104]	; 0x68
    28b0:	f14b 0300 	adc.w	r3, fp, #0
    28b4:	66fb      	str	r3, [r7, #108]	; 0x6c
    28b6:	f04f 32ff 	mov.w	r2, #4294967295
    28ba:	f04f 0300 	mov.w	r3, #0
    28be:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
    28c2:	f7fd fc13 	bl	ec <__aeabi_uldivmod>
    28c6:	4602      	mov	r2, r0
    28c8:	460b      	mov	r3, r1
    28ca:	4610      	mov	r0, r2
    28cc:	4619      	mov	r1, r3
    28ce:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
    28d2:	2200      	movs	r2, #0
    28d4:	663b      	str	r3, [r7, #96]	; 0x60
    28d6:	667a      	str	r2, [r7, #100]	; 0x64
    28d8:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
    28dc:	4643      	mov	r3, r8
    28de:	fb03 f201 	mul.w	r2, r3, r1
    28e2:	464b      	mov	r3, r9
    28e4:	fb00 f303 	mul.w	r3, r0, r3
    28e8:	4413      	add	r3, r2
    28ea:	4642      	mov	r2, r8
    28ec:	fba0 2102 	umull	r2, r1, r0, r2
    28f0:	f8c7 10bc 	str.w	r1, [r7, #188]	; 0xbc
    28f4:	f8c7 20b8 	str.w	r2, [r7, #184]	; 0xb8
    28f8:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
    28fc:	4413      	add	r3, r2
    28fe:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    2902:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
    2906:	2b01      	cmp	r3, #1
    2908:	d23a      	bcs.n	2980 <k_ticks_to_ms_floor64+0x3c0>
			return ((t * to_hz + off) / from_hz);
    290a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
    290e:	2200      	movs	r2, #0
    2910:	65bb      	str	r3, [r7, #88]	; 0x58
    2912:	65fa      	str	r2, [r7, #92]	; 0x5c
    2914:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
    2918:	e9d7 4516 	ldrd	r4, r5, [r7, #88]	; 0x58
    291c:	462a      	mov	r2, r5
    291e:	fb02 f203 	mul.w	r2, r2, r3
    2922:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
    2926:	4621      	mov	r1, r4
    2928:	fb01 f303 	mul.w	r3, r1, r3
    292c:	4413      	add	r3, r2
    292e:	f8d7 20e8 	ldr.w	r2, [r7, #232]	; 0xe8
    2932:	4621      	mov	r1, r4
    2934:	fba2 2101 	umull	r2, r1, r2, r1
    2938:	f8c7 10b4 	str.w	r1, [r7, #180]	; 0xb4
    293c:	f8c7 20b0 	str.w	r2, [r7, #176]	; 0xb0
    2940:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
    2944:	4413      	add	r3, r2
    2946:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    294a:	e9d7 2334 	ldrd	r2, r3, [r7, #208]	; 0xd0
    294e:	e9d7 452c 	ldrd	r4, r5, [r7, #176]	; 0xb0
    2952:	4621      	mov	r1, r4
    2954:	1889      	adds	r1, r1, r2
    2956:	6539      	str	r1, [r7, #80]	; 0x50
    2958:	4629      	mov	r1, r5
    295a:	eb43 0101 	adc.w	r1, r3, r1
    295e:	6579      	str	r1, [r7, #84]	; 0x54
    2960:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
    2964:	2200      	movs	r2, #0
    2966:	64bb      	str	r3, [r7, #72]	; 0x48
    2968:	64fa      	str	r2, [r7, #76]	; 0x4c
    296a:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
    296e:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
    2972:	f7fd fbbb 	bl	ec <__aeabi_uldivmod>
    2976:	4602      	mov	r2, r0
    2978:	460b      	mov	r3, r1
    297a:	4614      	mov	r4, r2
    297c:	461d      	mov	r5, r3
    297e:	e06f      	b.n	2a60 <k_ticks_to_ms_floor64+0x4a0>
			return (t / from_hz) * to_hz + ((t % from_hz) * to_hz + off) / from_hz;
    2980:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
    2984:	2200      	movs	r2, #0
    2986:	643b      	str	r3, [r7, #64]	; 0x40
    2988:	647a      	str	r2, [r7, #68]	; 0x44
    298a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
    298e:	e9d7 013a 	ldrd	r0, r1, [r7, #232]	; 0xe8
    2992:	f7fd fbab 	bl	ec <__aeabi_uldivmod>
    2996:	4602      	mov	r2, r0
    2998:	460b      	mov	r3, r1
    299a:	4610      	mov	r0, r2
    299c:	4619      	mov	r1, r3
    299e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
    29a2:	2200      	movs	r2, #0
    29a4:	63bb      	str	r3, [r7, #56]	; 0x38
    29a6:	63fa      	str	r2, [r7, #60]	; 0x3c
    29a8:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
    29ac:	4643      	mov	r3, r8
    29ae:	fb03 f201 	mul.w	r2, r3, r1
    29b2:	464b      	mov	r3, r9
    29b4:	fb00 f303 	mul.w	r3, r0, r3
    29b8:	4413      	add	r3, r2
    29ba:	4642      	mov	r2, r8
    29bc:	fba0 2102 	umull	r2, r1, r0, r2
    29c0:	f8c7 10ac 	str.w	r1, [r7, #172]	; 0xac
    29c4:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
    29c8:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
    29cc:	4413      	add	r3, r2
    29ce:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    29d2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
    29d6:	2200      	movs	r2, #0
    29d8:	633b      	str	r3, [r7, #48]	; 0x30
    29da:	637a      	str	r2, [r7, #52]	; 0x34
    29dc:	e9d7 013a 	ldrd	r0, r1, [r7, #232]	; 0xe8
    29e0:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
    29e4:	f7fd fb82 	bl	ec <__aeabi_uldivmod>
    29e8:	4610      	mov	r0, r2
    29ea:	4619      	mov	r1, r3
    29ec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
    29f0:	2200      	movs	r2, #0
    29f2:	62bb      	str	r3, [r7, #40]	; 0x28
    29f4:	62fa      	str	r2, [r7, #44]	; 0x2c
    29f6:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
    29fa:	4643      	mov	r3, r8
    29fc:	fb03 f201 	mul.w	r2, r3, r1
    2a00:	464b      	mov	r3, r9
    2a02:	fb00 f303 	mul.w	r3, r0, r3
    2a06:	4413      	add	r3, r2
    2a08:	4642      	mov	r2, r8
    2a0a:	fba0 2102 	umull	r2, r1, r0, r2
    2a0e:	f8c7 10a4 	str.w	r1, [r7, #164]	; 0xa4
    2a12:	f8c7 20a0 	str.w	r2, [r7, #160]	; 0xa0
    2a16:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
    2a1a:	4413      	add	r3, r2
    2a1c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    2a20:	e9d7 2334 	ldrd	r2, r3, [r7, #208]	; 0xd0
    2a24:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
    2a28:	4641      	mov	r1, r8
    2a2a:	1889      	adds	r1, r1, r2
    2a2c:	6239      	str	r1, [r7, #32]
    2a2e:	4649      	mov	r1, r9
    2a30:	eb43 0101 	adc.w	r1, r3, r1
    2a34:	6279      	str	r1, [r7, #36]	; 0x24
    2a36:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
    2a3a:	2200      	movs	r2, #0
    2a3c:	61bb      	str	r3, [r7, #24]
    2a3e:	61fa      	str	r2, [r7, #28]
    2a40:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
    2a44:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
    2a48:	f7fd fb50 	bl	ec <__aeabi_uldivmod>
    2a4c:	4602      	mov	r2, r0
    2a4e:	460b      	mov	r3, r1
    2a50:	e9d7 892a 	ldrd	r8, r9, [r7, #168]	; 0xa8
    2a54:	4641      	mov	r1, r8
    2a56:	188c      	adds	r4, r1, r2
    2a58:	4649      	mov	r1, r9
    2a5a:	eb43 0101 	adc.w	r1, r3, r1
    2a5e:	460d      	mov	r5, r1
	/* Generated.  Do not edit.  See above. */
	return z_tmcvt(t, Z_HZ_ticks, Z_HZ_ms, true, false, false, false);
    2a60:	4622      	mov	r2, r4
    2a62:	462b      	mov	r3, r5
}
    2a64:	4610      	mov	r0, r2
    2a66:	4619      	mov	r1, r3
    2a68:	37f4      	adds	r7, #244	; 0xf4
    2a6a:	46bd      	mov	sp, r7
    2a6c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    2a70:	01e13380 	.word	0x01e13380

00002a74 <log_format_func_t_get>:
	[LOG_OUTPUT_DICT] = IS_ENABLED(CONFIG_LOG_DICTIONARY_SUPPORT) ?
						log_dict_output_msg2_process : NULL
};

log_format_func_t log_format_func_t_get(uint32_t log_type)
{
    2a74:	b480      	push	{r7}
    2a76:	b083      	sub	sp, #12
    2a78:	af00      	add	r7, sp, #0
    2a7a:	6078      	str	r0, [r7, #4]
	return format_table[log_type];
    2a7c:	4a04      	ldr	r2, [pc, #16]	; (2a90 <log_format_func_t_get+0x1c>)
    2a7e:	687b      	ldr	r3, [r7, #4]
    2a80:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
}
    2a84:	4618      	mov	r0, r3
    2a86:	370c      	adds	r7, #12
    2a88:	46bd      	mov	sp, r7
    2a8a:	bc80      	pop	{r7}
    2a8c:	4770      	bx	lr
    2a8e:	bf00      	nop
    2a90:	0000bf9c 	.word	0x0000bf9c

00002a94 <z_log_msg_post_finalize>:
	}
#undef ERR_MSG
}

static void z_log_msg_post_finalize(void)
{
    2a94:	b580      	push	{r7, lr}
    2a96:	b088      	sub	sp, #32
    2a98:	af02      	add	r7, sp, #8
	atomic_val_t cnt = atomic_inc(&buffered_cnt);
    2a9a:	4827      	ldr	r0, [pc, #156]	; (2b38 <z_log_msg_post_finalize+0xa4>)
    2a9c:	f006 fcb0 	bl	9400 <atomic_inc>
    2aa0:	6178      	str	r0, [r7, #20]

	if (panic_mode) {
    2aa2:	4b26      	ldr	r3, [pc, #152]	; (2b3c <z_log_msg_post_finalize+0xa8>)
    2aa4:	781b      	ldrb	r3, [r3, #0]
    2aa6:	2b00      	cmp	r3, #0
    2aa8:	d016      	beq.n	2ad8 <z_log_msg_post_finalize+0x44>
		:
		: "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	unsigned int tmp;

	__asm__ volatile(
    2aaa:	f04f 0320 	mov.w	r3, #32
    2aae:	f3ef 8211 	mrs	r2, BASEPRI
    2ab2:	f383 8812 	msr	BASEPRI_MAX, r3
    2ab6:	f3bf 8f6f 	isb	sy
    2aba:	60ba      	str	r2, [r7, #8]
    2abc:	607b      	str	r3, [r7, #4]
		: "memory", "cc");
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	return key;
    2abe:	68bb      	ldr	r3, [r7, #8]
		unsigned int key = irq_lock();
    2ac0:	613b      	str	r3, [r7, #16]
		(void)log_process(false);
    2ac2:	2000      	movs	r0, #0
    2ac4:	f006 fdf1 	bl	96aa <log_process>
    2ac8:	693b      	ldr	r3, [r7, #16]
    2aca:	60fb      	str	r3, [r7, #12]
	__asm__ volatile(
		"cpsie i;"
		"isb"
		: : : "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile(
    2acc:	68fb      	ldr	r3, [r7, #12]
    2ace:	f383 8811 	msr	BASEPRI, r3
    2ad2:	f3bf 8f6f 	isb	sy
		"cpsie i;"
		: : : "memory", "cc");
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
}
    2ad6:	e02a      	b.n	2b2e <z_log_msg_post_finalize+0x9a>
		irq_unlock(key);
	} else if (proc_tid != NULL && cnt == 0) {
    2ad8:	4b19      	ldr	r3, [pc, #100]	; (2b40 <z_log_msg_post_finalize+0xac>)
    2ada:	681b      	ldr	r3, [r3, #0]
    2adc:	2b00      	cmp	r3, #0
    2ade:	d018      	beq.n	2b12 <z_log_msg_post_finalize+0x7e>
    2ae0:	697b      	ldr	r3, [r7, #20]
    2ae2:	2b00      	cmp	r3, #0
    2ae4:	d115      	bne.n	2b12 <z_log_msg_post_finalize+0x7e>
		k_timer_start(&log_process_thread_timer,
			K_MSEC(CONFIG_LOG_PROCESS_THREAD_SLEEP_MS), K_NO_WAIT);
    2ae6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
    2aea:	f04f 0100 	mov.w	r1, #0
    2aee:	f7ff fb0d 	bl	210c <k_ms_to_ticks_ceil64>
    2af2:	4602      	mov	r2, r0
    2af4:	460b      	mov	r3, r1
    2af6:	4610      	mov	r0, r2
    2af8:	4619      	mov	r1, r3
    2afa:	f04f 0200 	mov.w	r2, #0
    2afe:	f04f 0300 	mov.w	r3, #0
		k_timer_start(&log_process_thread_timer,
    2b02:	e9cd 2300 	strd	r2, r3, [sp]
    2b06:	4602      	mov	r2, r0
    2b08:	460b      	mov	r3, r1
    2b0a:	480e      	ldr	r0, [pc, #56]	; (2b44 <z_log_msg_post_finalize+0xb0>)
    2b0c:	f006 fd8b 	bl	9626 <k_timer_start>
	} else if (proc_tid != NULL && cnt == 0) {
    2b10:	e00d      	b.n	2b2e <z_log_msg_post_finalize+0x9a>
	} else if (CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD) {
		if ((cnt == CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD) &&
    2b12:	697b      	ldr	r3, [r7, #20]
    2b14:	2b0a      	cmp	r3, #10
    2b16:	d10a      	bne.n	2b2e <z_log_msg_post_finalize+0x9a>
		    (proc_tid != NULL)) {
    2b18:	4b09      	ldr	r3, [pc, #36]	; (2b40 <z_log_msg_post_finalize+0xac>)
    2b1a:	681b      	ldr	r3, [r3, #0]
		if ((cnt == CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD) &&
    2b1c:	2b00      	cmp	r3, #0
    2b1e:	d006      	beq.n	2b2e <z_log_msg_post_finalize+0x9a>
			k_timer_stop(&log_process_thread_timer);
    2b20:	4808      	ldr	r0, [pc, #32]	; (2b44 <z_log_msg_post_finalize+0xb0>)
    2b22:	f006 fd93 	bl	964c <k_timer_stop>
			k_sem_give(&log_process_thread_sem);
    2b26:	4808      	ldr	r0, [pc, #32]	; (2b48 <z_log_msg_post_finalize+0xb4>)
    2b28:	f006 fdb4 	bl	9694 <k_sem_give>
		 * timeout or when number of upcoming messages exceeds the
		 * threshold.
		 */
		;
	}
}
    2b2c:	e7ff      	b.n	2b2e <z_log_msg_post_finalize+0x9a>
    2b2e:	bf00      	nop
    2b30:	3718      	adds	r7, #24
    2b32:	46bd      	mov	sp, r7
    2b34:	bd80      	pop	{r7, pc}
    2b36:	bf00      	nop
    2b38:	200006c4 	.word	0x200006c4
    2b3c:	20000889 	.word	0x20000889
    2b40:	200006cc 	.word	0x200006cc
    2b44:	20000118 	.word	0x20000118
    2b48:	20000090 	.word	0x20000090

00002b4c <log_core_init>:
	return IS_ENABLED(CONFIG_LOG_TIMESTAMP_64BIT) ?
		k_uptime_get() : k_uptime_get_32();
}

void log_core_init(void)
{
    2b4c:	b580      	push	{r7, lr}
    2b4e:	b082      	sub	sp, #8
    2b50:	af00      	add	r7, sp, #0
	uint32_t freq;
	log_timestamp_get_t _timestamp_func;

	panic_mode = false;
    2b52:	4b11      	ldr	r3, [pc, #68]	; (2b98 <log_core_init+0x4c>)
    2b54:	2200      	movs	r2, #0
    2b56:	701a      	strb	r2, [r3, #0]
	dropped_cnt = 0;
    2b58:	4b10      	ldr	r3, [pc, #64]	; (2b9c <log_core_init+0x50>)
    2b5a:	2200      	movs	r2, #0
    2b5c:	601a      	str	r2, [r3, #0]

	/* Set default timestamp. */
	if (sys_clock_hw_cycles_per_sec() > 1000000) {
    2b5e:	f7ff facb 	bl	20f8 <sys_clock_hw_cycles_per_sec>
    2b62:	4603      	mov	r3, r0
    2b64:	4a0e      	ldr	r2, [pc, #56]	; (2ba0 <log_core_init+0x54>)
    2b66:	4293      	cmp	r3, r2
    2b68:	dd05      	ble.n	2b76 <log_core_init+0x2a>
		_timestamp_func = default_lf_get_timestamp;
    2b6a:	4b0e      	ldr	r3, [pc, #56]	; (2ba4 <log_core_init+0x58>)
    2b6c:	603b      	str	r3, [r7, #0]
		freq = 1000U;
    2b6e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
    2b72:	607b      	str	r3, [r7, #4]
    2b74:	e005      	b.n	2b82 <log_core_init+0x36>
	} else {
		_timestamp_func = default_get_timestamp;
    2b76:	4b0c      	ldr	r3, [pc, #48]	; (2ba8 <log_core_init+0x5c>)
    2b78:	603b      	str	r3, [r7, #0]
		freq = sys_clock_hw_cycles_per_sec();
    2b7a:	f7ff fabd 	bl	20f8 <sys_clock_hw_cycles_per_sec>
    2b7e:	4603      	mov	r3, r0
    2b80:	607b      	str	r3, [r7, #4]
	}

	log_set_timestamp_func(_timestamp_func, freq);
    2b82:	6879      	ldr	r1, [r7, #4]
    2b84:	6838      	ldr	r0, [r7, #0]
    2b86:	f000 f863 	bl	2c50 <log_set_timestamp_func>

	if (IS_ENABLED(CONFIG_LOG2_DEFERRED)) {
		z_log_msg2_init();
    2b8a:	f000 f937 	bl	2dfc <z_log_msg2_init>
	}

	if (IS_ENABLED(CONFIG_LOG_FRONTEND)) {
		log_frontend_init();
	}
}
    2b8e:	bf00      	nop
    2b90:	3708      	adds	r7, #8
    2b92:	46bd      	mov	sp, r7
    2b94:	bd80      	pop	{r7, pc}
    2b96:	bf00      	nop
    2b98:	20000889 	.word	0x20000889
    2b9c:	200006c8 	.word	0x200006c8
    2ba0:	000f4240 	.word	0x000f4240
    2ba4:	000096e3 	.word	0x000096e3
    2ba8:	000096d5 	.word	0x000096d5

00002bac <log_init>:

void log_init(void)
{
    2bac:	b580      	push	{r7, lr}
    2bae:	b082      	sub	sp, #8
    2bb0:	af00      	add	r7, sp, #0
	__ASSERT_NO_MSG(log_backend_count_get() < LOG_FILTERS_NUM_OF_SLOTS);
	int i;

	if (atomic_inc(&initialized) != 0) {
    2bb2:	4819      	ldr	r0, [pc, #100]	; (2c18 <log_init+0x6c>)
    2bb4:	f006 fc24 	bl	9400 <atomic_inc>
    2bb8:	4603      	mov	r3, r0
    2bba:	2b00      	cmp	r3, #0
    2bbc:	d127      	bne.n	2c0e <log_init+0x62>
		return;
	}

	/* Assign ids to backends. */
	for (i = 0; i < log_backend_count_get(); i++) {
    2bbe:	2300      	movs	r3, #0
    2bc0:	607b      	str	r3, [r7, #4]
    2bc2:	e01d      	b.n	2c00 <log_init+0x54>
		const struct log_backend *backend = log_backend_get(i);
    2bc4:	687b      	ldr	r3, [r7, #4]
    2bc6:	4618      	mov	r0, r3
    2bc8:	f7ff fa78 	bl	20bc <log_backend_get>
    2bcc:	6038      	str	r0, [r7, #0]

		if (backend->autostart) {
    2bce:	683b      	ldr	r3, [r7, #0]
    2bd0:	7b1b      	ldrb	r3, [r3, #12]
    2bd2:	2b00      	cmp	r3, #0
    2bd4:	d011      	beq.n	2bfa <log_init+0x4e>
			if (backend->api->init != NULL) {
    2bd6:	683b      	ldr	r3, [r7, #0]
    2bd8:	681b      	ldr	r3, [r3, #0]
    2bda:	699b      	ldr	r3, [r3, #24]
    2bdc:	2b00      	cmp	r3, #0
    2bde:	d004      	beq.n	2bea <log_init+0x3e>
				backend->api->init(backend);
    2be0:	683b      	ldr	r3, [r7, #0]
    2be2:	681b      	ldr	r3, [r3, #0]
    2be4:	699b      	ldr	r3, [r3, #24]
    2be6:	6838      	ldr	r0, [r7, #0]
    2be8:	4798      	blx	r3
			}

			log_backend_enable(backend,
					   backend->cb->ctx,
    2bea:	683b      	ldr	r3, [r7, #0]
    2bec:	685b      	ldr	r3, [r3, #4]
			log_backend_enable(backend,
    2bee:	681b      	ldr	r3, [r3, #0]
    2bf0:	2204      	movs	r2, #4
    2bf2:	4619      	mov	r1, r3
    2bf4:	6838      	ldr	r0, [r7, #0]
    2bf6:	f006 fe54 	bl	98a2 <log_backend_enable>
	for (i = 0; i < log_backend_count_get(); i++) {
    2bfa:	687b      	ldr	r3, [r7, #4]
    2bfc:	3301      	adds	r3, #1
    2bfe:	607b      	str	r3, [r7, #4]
    2c00:	f7ff fa6c 	bl	20dc <log_backend_count_get>
    2c04:	4602      	mov	r2, r0
    2c06:	687b      	ldr	r3, [r7, #4]
    2c08:	4293      	cmp	r3, r2
    2c0a:	dbdb      	blt.n	2bc4 <log_init+0x18>
    2c0c:	e000      	b.n	2c10 <log_init+0x64>
		return;
    2c0e:	bf00      	nop
					   CONFIG_LOG_MAX_LEVEL);
		}
	}
}
    2c10:	3708      	adds	r7, #8
    2c12:	46bd      	mov	sp, r7
    2c14:	bd80      	pop	{r7, pc}
    2c16:	bf00      	nop
    2c18:	200006c0 	.word	0x200006c0

00002c1c <thread_set>:

static void thread_set(k_tid_t process_tid)
{
    2c1c:	b580      	push	{r7, lr}
    2c1e:	b082      	sub	sp, #8
    2c20:	af00      	add	r7, sp, #0
    2c22:	6078      	str	r0, [r7, #4]
	proc_tid = process_tid;
    2c24:	4a07      	ldr	r2, [pc, #28]	; (2c44 <thread_set+0x28>)
    2c26:	687b      	ldr	r3, [r7, #4]
    2c28:	6013      	str	r3, [r2, #0]

	if (IS_ENABLED(CONFIG_LOG_MODE_IMMEDIATE)) {
		return;
	}

	if (CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD &&
    2c2a:	687b      	ldr	r3, [r7, #4]
    2c2c:	2b00      	cmp	r3, #0
    2c2e:	d006      	beq.n	2c3e <thread_set+0x22>
	    process_tid &&
	    buffered_cnt >= CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD) {
    2c30:	4b05      	ldr	r3, [pc, #20]	; (2c48 <thread_set+0x2c>)
    2c32:	681b      	ldr	r3, [r3, #0]
	    process_tid &&
    2c34:	2b09      	cmp	r3, #9
    2c36:	dd02      	ble.n	2c3e <thread_set+0x22>
		k_sem_give(&log_process_thread_sem);
    2c38:	4804      	ldr	r0, [pc, #16]	; (2c4c <thread_set+0x30>)
    2c3a:	f006 fd2b 	bl	9694 <k_sem_give>
	}
}
    2c3e:	3708      	adds	r7, #8
    2c40:	46bd      	mov	sp, r7
    2c42:	bd80      	pop	{r7, pc}
    2c44:	200006cc 	.word	0x200006cc
    2c48:	200006c4 	.word	0x200006c4
    2c4c:	20000090 	.word	0x20000090

00002c50 <log_set_timestamp_func>:
		thread_set(process_tid);
	}
}

int log_set_timestamp_func(log_timestamp_get_t timestamp_getter, uint32_t freq)
{
    2c50:	b580      	push	{r7, lr}
    2c52:	b082      	sub	sp, #8
    2c54:	af00      	add	r7, sp, #0
    2c56:	6078      	str	r0, [r7, #4]
    2c58:	6039      	str	r1, [r7, #0]
	if (timestamp_getter == NULL) {
    2c5a:	687b      	ldr	r3, [r7, #4]
    2c5c:	2b00      	cmp	r3, #0
    2c5e:	d102      	bne.n	2c66 <log_set_timestamp_func+0x16>
		return -EINVAL;
    2c60:	f06f 0315 	mvn.w	r3, #21
    2c64:	e006      	b.n	2c74 <log_set_timestamp_func+0x24>
	}

	timestamp_func = timestamp_getter;
    2c66:	4a05      	ldr	r2, [pc, #20]	; (2c7c <log_set_timestamp_func+0x2c>)
    2c68:	687b      	ldr	r3, [r7, #4]
    2c6a:	6013      	str	r3, [r2, #0]
	log_output_timestamp_freq_set(freq);
    2c6c:	6838      	ldr	r0, [r7, #0]
    2c6e:	f000 fcdf 	bl	3630 <log_output_timestamp_freq_set>

	return 0;
    2c72:	2300      	movs	r3, #0
}
    2c74:	4618      	mov	r0, r3
    2c76:	3708      	adds	r7, #8
    2c78:	46bd      	mov	sp, r7
    2c7a:	bd80      	pop	{r7, pc}
    2c7c:	20000008 	.word	0x20000008

00002c80 <z_impl_log_panic>:

void z_impl_log_panic(void)
{
    2c80:	b580      	push	{r7, lr}
    2c82:	b082      	sub	sp, #8
    2c84:	af00      	add	r7, sp, #0
	struct log_backend const *backend;

	if (panic_mode) {
    2c86:	4b17      	ldr	r3, [pc, #92]	; (2ce4 <z_impl_log_panic+0x64>)
    2c88:	781b      	ldrb	r3, [r3, #0]
    2c8a:	2b00      	cmp	r3, #0
    2c8c:	d126      	bne.n	2cdc <z_impl_log_panic+0x5c>
	}

	/* If panic happened early logger might not be initialized.
	 * Forcing initialization of the logger and auto-starting backends.
	 */
	log_init();
    2c8e:	f7ff ff8d 	bl	2bac <log_init>

	if (IS_ENABLED(CONFIG_LOG_FRONTEND)) {
		log_frontend_panic();
	}

	for (int i = 0; i < log_backend_count_get(); i++) {
    2c92:	2300      	movs	r3, #0
    2c94:	607b      	str	r3, [r7, #4]
    2c96:	e010      	b.n	2cba <z_impl_log_panic+0x3a>
		backend = log_backend_get(i);
    2c98:	687b      	ldr	r3, [r7, #4]
    2c9a:	4618      	mov	r0, r3
    2c9c:	f7ff fa0e 	bl	20bc <log_backend_get>
    2ca0:	6038      	str	r0, [r7, #0]

		if (log_backend_is_active(backend)) {
    2ca2:	6838      	ldr	r0, [r7, #0]
    2ca4:	f006 fc51 	bl	954a <log_backend_is_active>
    2ca8:	4603      	mov	r3, r0
    2caa:	2b00      	cmp	r3, #0
    2cac:	d002      	beq.n	2cb4 <z_impl_log_panic+0x34>
			log_backend_panic(backend);
    2cae:	6838      	ldr	r0, [r7, #0]
    2cb0:	f006 fc3e 	bl	9530 <log_backend_panic>
	for (int i = 0; i < log_backend_count_get(); i++) {
    2cb4:	687b      	ldr	r3, [r7, #4]
    2cb6:	3301      	adds	r3, #1
    2cb8:	607b      	str	r3, [r7, #4]
    2cba:	f7ff fa0f 	bl	20dc <log_backend_count_get>
    2cbe:	4602      	mov	r2, r0
    2cc0:	687b      	ldr	r3, [r7, #4]
    2cc2:	4293      	cmp	r3, r2
    2cc4:	dbe8      	blt.n	2c98 <z_impl_log_panic+0x18>
		}
	}

	if (!IS_ENABLED(CONFIG_LOG_MODE_IMMEDIATE)) {
		/* Flush */
		while (log_process(false) == true) {
    2cc6:	bf00      	nop
    2cc8:	2000      	movs	r0, #0
    2cca:	f006 fcee 	bl	96aa <log_process>
    2cce:	4603      	mov	r3, r0
    2cd0:	2b00      	cmp	r3, #0
    2cd2:	d1f9      	bne.n	2cc8 <z_impl_log_panic+0x48>
		}
	}

	panic_mode = true;
    2cd4:	4b03      	ldr	r3, [pc, #12]	; (2ce4 <z_impl_log_panic+0x64>)
    2cd6:	2201      	movs	r2, #1
    2cd8:	701a      	strb	r2, [r3, #0]
    2cda:	e000      	b.n	2cde <z_impl_log_panic+0x5e>
		return;
    2cdc:	bf00      	nop
}
    2cde:	3708      	adds	r7, #8
    2ce0:	46bd      	mov	sp, r7
    2ce2:	bd80      	pop	{r7, pc}
    2ce4:	20000889 	.word	0x20000889

00002ce8 <z_log_notify_backend_enabled>:

	return (log_list_head_peek(&list) != NULL);
}

void z_log_notify_backend_enabled(void)
{
    2ce8:	b580      	push	{r7, lr}
    2cea:	af00      	add	r7, sp, #0
	/* Wakeup logger thread after attaching first backend. It might be
	 * blocked with log messages pending.
	 */
	if (IS_ENABLED(CONFIG_LOG_PROCESS_THREAD) && !backend_attached) {
    2cec:	4b07      	ldr	r3, [pc, #28]	; (2d0c <z_log_notify_backend_enabled+0x24>)
    2cee:	781b      	ldrb	r3, [r3, #0]
    2cf0:	f083 0301 	eor.w	r3, r3, #1
    2cf4:	b2db      	uxtb	r3, r3
    2cf6:	2b00      	cmp	r3, #0
    2cf8:	d002      	beq.n	2d00 <z_log_notify_backend_enabled+0x18>
		k_sem_give(&log_process_thread_sem);
    2cfa:	4805      	ldr	r0, [pc, #20]	; (2d10 <z_log_notify_backend_enabled+0x28>)
    2cfc:	f006 fcca 	bl	9694 <k_sem_give>
	}

	backend_attached = true;
    2d00:	4b02      	ldr	r3, [pc, #8]	; (2d0c <z_log_notify_backend_enabled+0x24>)
    2d02:	2201      	movs	r2, #1
    2d04:	701a      	strb	r2, [r3, #0]
}
    2d06:	bf00      	nop
    2d08:	bd80      	pop	{r7, pc}
    2d0a:	bf00      	nop
    2d0c:	2000088a 	.word	0x2000088a
    2d10:	20000090 	.word	0x20000090

00002d14 <z_impl_log_process>:

bool z_impl_log_process(bool bypass)
{
    2d14:	b580      	push	{r7, lr}
    2d16:	b084      	sub	sp, #16
    2d18:	af00      	add	r7, sp, #0
    2d1a:	4603      	mov	r3, r0
    2d1c:	71fb      	strb	r3, [r7, #7]
	union log_msgs msg;

	if (!backend_attached && !bypass) {
    2d1e:	4b1c      	ldr	r3, [pc, #112]	; (2d90 <z_impl_log_process+0x7c>)
    2d20:	781b      	ldrb	r3, [r3, #0]
    2d22:	f083 0301 	eor.w	r3, r3, #1
    2d26:	b2db      	uxtb	r3, r3
    2d28:	2b00      	cmp	r3, #0
    2d2a:	d007      	beq.n	2d3c <z_impl_log_process+0x28>
    2d2c:	79fb      	ldrb	r3, [r7, #7]
    2d2e:	f083 0301 	eor.w	r3, r3, #1
    2d32:	b2db      	uxtb	r3, r3
    2d34:	2b00      	cmp	r3, #0
    2d36:	d001      	beq.n	2d3c <z_impl_log_process+0x28>
		return false;
    2d38:	2300      	movs	r3, #0
    2d3a:	e024      	b.n	2d86 <z_impl_log_process+0x72>
	}

	msg = get_msg();
    2d3c:	f006 fd4b 	bl	97d6 <get_msg>
    2d40:	4603      	mov	r3, r0
    2d42:	60fb      	str	r3, [r7, #12]
	if (msg.msg) {
    2d44:	68fb      	ldr	r3, [r7, #12]
    2d46:	2b00      	cmp	r3, #0
    2d48:	d00d      	beq.n	2d66 <z_impl_log_process+0x52>
		if (!bypass) {
    2d4a:	79fb      	ldrb	r3, [r7, #7]
    2d4c:	f083 0301 	eor.w	r3, r3, #1
    2d50:	b2db      	uxtb	r3, r3
    2d52:	2b00      	cmp	r3, #0
    2d54:	d002      	beq.n	2d5c <z_impl_log_process+0x48>
			atomic_dec(&buffered_cnt);
    2d56:	480f      	ldr	r0, [pc, #60]	; (2d94 <z_impl_log_process+0x80>)
    2d58:	f006 fb5f 	bl	941a <atomic_dec>
		}
		msg_process(msg, bypass);
    2d5c:	79fb      	ldrb	r3, [r7, #7]
    2d5e:	4619      	mov	r1, r3
    2d60:	68f8      	ldr	r0, [r7, #12]
    2d62:	f006 fcdb 	bl	971c <msg_process>
	}

	if (!bypass && z_log_dropped_pending()) {
    2d66:	79fb      	ldrb	r3, [r7, #7]
    2d68:	f083 0301 	eor.w	r3, r3, #1
    2d6c:	b2db      	uxtb	r3, r3
    2d6e:	2b00      	cmp	r3, #0
    2d70:	d006      	beq.n	2d80 <z_impl_log_process+0x6c>
    2d72:	f000 f833 	bl	2ddc <z_log_dropped_pending>
    2d76:	4603      	mov	r3, r0
    2d78:	2b00      	cmp	r3, #0
    2d7a:	d001      	beq.n	2d80 <z_impl_log_process+0x6c>
		dropped_notify();
    2d7c:	f006 fd05 	bl	978a <dropped_notify>
	}

	return next_pending();
    2d80:	f006 fd35 	bl	97ee <next_pending>
    2d84:	4603      	mov	r3, r0
}
    2d86:	4618      	mov	r0, r3
    2d88:	3710      	adds	r7, #16
    2d8a:	46bd      	mov	sp, r7
    2d8c:	bd80      	pop	{r7, pc}
    2d8e:	bf00      	nop
    2d90:	2000088a 	.word	0x2000088a
    2d94:	200006c4 	.word	0x200006c4

00002d98 <z_log_dropped>:
}
#include <syscalls/log_buffered_cnt_mrsh.c>
#endif

void z_log_dropped(bool buffered)
{
    2d98:	b580      	push	{r7, lr}
    2d9a:	b082      	sub	sp, #8
    2d9c:	af00      	add	r7, sp, #0
    2d9e:	4603      	mov	r3, r0
    2da0:	71fb      	strb	r3, [r7, #7]
	atomic_inc(&dropped_cnt);
    2da2:	4806      	ldr	r0, [pc, #24]	; (2dbc <z_log_dropped+0x24>)
    2da4:	f006 fb2c 	bl	9400 <atomic_inc>
	if (buffered) {
    2da8:	79fb      	ldrb	r3, [r7, #7]
    2daa:	2b00      	cmp	r3, #0
    2dac:	d002      	beq.n	2db4 <z_log_dropped+0x1c>
		atomic_dec(&buffered_cnt);
    2dae:	4804      	ldr	r0, [pc, #16]	; (2dc0 <z_log_dropped+0x28>)
    2db0:	f006 fb33 	bl	941a <atomic_dec>
	}
}
    2db4:	bf00      	nop
    2db6:	3708      	adds	r7, #8
    2db8:	46bd      	mov	sp, r7
    2dba:	bd80      	pop	{r7, pc}
    2dbc:	200006c8 	.word	0x200006c8
    2dc0:	200006c4 	.word	0x200006c4

00002dc4 <z_log_dropped_read_and_clear>:

uint32_t z_log_dropped_read_and_clear(void)
{
    2dc4:	b580      	push	{r7, lr}
    2dc6:	af00      	add	r7, sp, #0
	return atomic_set(&dropped_cnt, 0);
    2dc8:	2100      	movs	r1, #0
    2dca:	4803      	ldr	r0, [pc, #12]	; (2dd8 <z_log_dropped_read_and_clear+0x14>)
    2dcc:	f006 fb32 	bl	9434 <atomic_set>
    2dd0:	4603      	mov	r3, r0
}
    2dd2:	4618      	mov	r0, r3
    2dd4:	bd80      	pop	{r7, pc}
    2dd6:	bf00      	nop
    2dd8:	200006c8 	.word	0x200006c8

00002ddc <z_log_dropped_pending>:

bool z_log_dropped_pending(void)
{
    2ddc:	b480      	push	{r7}
    2dde:	af00      	add	r7, sp, #0
	return dropped_cnt > 0;
    2de0:	4b05      	ldr	r3, [pc, #20]	; (2df8 <z_log_dropped_pending+0x1c>)
    2de2:	681b      	ldr	r3, [r3, #0]
    2de4:	2b00      	cmp	r3, #0
    2de6:	bfcc      	ite	gt
    2de8:	2301      	movgt	r3, #1
    2dea:	2300      	movle	r3, #0
    2dec:	b2db      	uxtb	r3, r3
}
    2dee:	4618      	mov	r0, r3
    2df0:	46bd      	mov	sp, r7
    2df2:	bc80      	pop	{r7}
    2df4:	4770      	bx	lr
    2df6:	bf00      	nop
    2df8:	200006c8 	.word	0x200006c8

00002dfc <z_log_msg2_init>:
}
/* LCOV_EXCL_STOP */
#endif /* !defined(CONFIG_USERSPACE) */

void z_log_msg2_init(void)
{
    2dfc:	b580      	push	{r7, lr}
    2dfe:	af00      	add	r7, sp, #0
	mpsc_pbuf_init(&log_buffer, &mpsc_config);
    2e00:	4902      	ldr	r1, [pc, #8]	; (2e0c <z_log_msg2_init+0x10>)
    2e02:	4803      	ldr	r0, [pc, #12]	; (2e10 <z_log_msg2_init+0x14>)
    2e04:	f005 fe98 	bl	8b38 <mpsc_pbuf_init>
}
    2e08:	bf00      	nop
    2e0a:	bd80      	pop	{r7, pc}
    2e0c:	0000bfa8 	.word	0x0000bfa8
    2e10:	200006d0 	.word	0x200006d0

00002e14 <z_log_msg2_alloc>:

struct log_msg2 *z_log_msg2_alloc(uint32_t wlen)
{
    2e14:	b580      	push	{r7, lr}
    2e16:	b082      	sub	sp, #8
    2e18:	af00      	add	r7, sp, #0
    2e1a:	6078      	str	r0, [r7, #4]
	return (struct log_msg2 *)mpsc_pbuf_alloc(&log_buffer, wlen,
				K_MSEC(CONFIG_LOG_BLOCK_IN_THREAD_TIMEOUT_MS));
    2e1c:	f04f 0000 	mov.w	r0, #0
    2e20:	f04f 0100 	mov.w	r1, #0
    2e24:	f7ff f972 	bl	210c <k_ms_to_ticks_ceil64>
    2e28:	4602      	mov	r2, r0
    2e2a:	460b      	mov	r3, r1
	return (struct log_msg2 *)mpsc_pbuf_alloc(&log_buffer, wlen,
    2e2c:	6879      	ldr	r1, [r7, #4]
    2e2e:	4805      	ldr	r0, [pc, #20]	; (2e44 <z_log_msg2_alloc+0x30>)
    2e30:	f006 f87e 	bl	8f30 <mpsc_pbuf_alloc>
    2e34:	4601      	mov	r1, r0
    2e36:	bf00      	nop
    2e38:	460b      	mov	r3, r1
}
    2e3a:	4618      	mov	r0, r3
    2e3c:	3708      	adds	r7, #8
    2e3e:	46bd      	mov	sp, r7
    2e40:	bd80      	pop	{r7, pc}
    2e42:	bf00      	nop
    2e44:	200006d0 	.word	0x200006d0

00002e48 <z_log_msg2_commit>:

void z_log_msg2_commit(struct log_msg2 *msg)
{
    2e48:	b580      	push	{r7, lr}
    2e4a:	b084      	sub	sp, #16
    2e4c:	af00      	add	r7, sp, #0
    2e4e:	6078      	str	r0, [r7, #4]
	msg->hdr.timestamp = timestamp_func();
    2e50:	4b07      	ldr	r3, [pc, #28]	; (2e70 <z_log_msg2_commit+0x28>)
    2e52:	681b      	ldr	r3, [r3, #0]
    2e54:	4798      	blx	r3
    2e56:	4602      	mov	r2, r0
    2e58:	687b      	ldr	r3, [r7, #4]
    2e5a:	609a      	str	r2, [r3, #8]
		msg_process(msgs, false);

		return;
	}

	mpsc_pbuf_commit(&log_buffer, (union mpsc_pbuf_generic *)msg);
    2e5c:	6879      	ldr	r1, [r7, #4]
    2e5e:	4805      	ldr	r0, [pc, #20]	; (2e74 <z_log_msg2_commit+0x2c>)
    2e60:	f006 f94e 	bl	9100 <mpsc_pbuf_commit>
	z_log_msg_post_finalize();
    2e64:	f7ff fe16 	bl	2a94 <z_log_msg_post_finalize>
}
    2e68:	3710      	adds	r7, #16
    2e6a:	46bd      	mov	sp, r7
    2e6c:	bd80      	pop	{r7, pc}
    2e6e:	bf00      	nop
    2e70:	20000008 	.word	0x20000008
    2e74:	200006d0 	.word	0x200006d0

00002e78 <z_log_msg2_claim>:

union log_msg2_generic *z_log_msg2_claim(void)
{
    2e78:	b580      	push	{r7, lr}
    2e7a:	af00      	add	r7, sp, #0
	return (union log_msg2_generic *)mpsc_pbuf_claim(&log_buffer);
    2e7c:	4802      	ldr	r0, [pc, #8]	; (2e88 <z_log_msg2_claim+0x10>)
    2e7e:	f006 f97e 	bl	917e <mpsc_pbuf_claim>
    2e82:	4603      	mov	r3, r0
}
    2e84:	4618      	mov	r0, r3
    2e86:	bd80      	pop	{r7, pc}
    2e88:	200006d0 	.word	0x200006d0

00002e8c <z_log_msg2_free>:

void z_log_msg2_free(union log_msg2_generic *msg)
{
    2e8c:	b580      	push	{r7, lr}
    2e8e:	b082      	sub	sp, #8
    2e90:	af00      	add	r7, sp, #0
    2e92:	6078      	str	r0, [r7, #4]
	mpsc_pbuf_free(&log_buffer, (union mpsc_pbuf_generic *)msg);
    2e94:	6879      	ldr	r1, [r7, #4]
    2e96:	4803      	ldr	r0, [pc, #12]	; (2ea4 <z_log_msg2_free+0x18>)
    2e98:	f006 fa04 	bl	92a4 <mpsc_pbuf_free>
}
    2e9c:	bf00      	nop
    2e9e:	3708      	adds	r7, #8
    2ea0:	46bd      	mov	sp, r7
    2ea2:	bd80      	pop	{r7, pc}
    2ea4:	200006d0 	.word	0x200006d0

00002ea8 <z_log_msg2_pending>:


bool z_log_msg2_pending(void)
{
    2ea8:	b580      	push	{r7, lr}
    2eaa:	af00      	add	r7, sp, #0
	return mpsc_pbuf_is_pending(&log_buffer);
    2eac:	4802      	ldr	r0, [pc, #8]	; (2eb8 <z_log_msg2_pending+0x10>)
    2eae:	f006 fa59 	bl	9364 <mpsc_pbuf_is_pending>
    2eb2:	4603      	mov	r3, r0
}
    2eb4:	4618      	mov	r0, r3
    2eb6:	bd80      	pop	{r7, pc}
    2eb8:	200006d0 	.word	0x200006d0

00002ebc <log_process_thread_timer_expiry_fn>:

	return mpsc_pbuf_get_max_utilization(&log_buffer, max);
}

static void log_process_thread_timer_expiry_fn(struct k_timer *timer)
{
    2ebc:	b580      	push	{r7, lr}
    2ebe:	b082      	sub	sp, #8
    2ec0:	af00      	add	r7, sp, #0
    2ec2:	6078      	str	r0, [r7, #4]
	k_sem_give(&log_process_thread_sem);
    2ec4:	4803      	ldr	r0, [pc, #12]	; (2ed4 <log_process_thread_timer_expiry_fn+0x18>)
    2ec6:	f006 fbe5 	bl	9694 <k_sem_give>
}
    2eca:	bf00      	nop
    2ecc:	3708      	adds	r7, #8
    2ece:	46bd      	mov	sp, r7
    2ed0:	bd80      	pop	{r7, pc}
    2ed2:	bf00      	nop
    2ed4:	20000090 	.word	0x20000090

00002ed8 <log_process_thread_func>:

static void log_process_thread_func(void *dummy1, void *dummy2, void *dummy3)
{
    2ed8:	b580      	push	{r7, lr}
    2eda:	b084      	sub	sp, #16
    2edc:	af00      	add	r7, sp, #0
    2ede:	60f8      	str	r0, [r7, #12]
    2ee0:	60b9      	str	r1, [r7, #8]
    2ee2:	607a      	str	r2, [r7, #4]
	__ASSERT_NO_MSG(log_backend_count_get() > 0);

	log_init();
    2ee4:	f7ff fe62 	bl	2bac <log_init>
	thread_set(k_current_get());
    2ee8:	f006 fb42 	bl	9570 <k_current_get>
    2eec:	4603      	mov	r3, r0
    2eee:	4618      	mov	r0, r3
    2ef0:	f7ff fe94 	bl	2c1c <thread_set>

	while (true) {
		if (log_process(false) == false) {
    2ef4:	2000      	movs	r0, #0
    2ef6:	f006 fbd8 	bl	96aa <log_process>
    2efa:	4603      	mov	r3, r0
    2efc:	f083 0301 	eor.w	r3, r3, #1
    2f00:	b2db      	uxtb	r3, r3
    2f02:	2b00      	cmp	r3, #0
    2f04:	d0f6      	beq.n	2ef4 <log_process_thread_func+0x1c>
			k_sem_take(&log_process_thread_sem, K_FOREVER);
    2f06:	f04f 32ff 	mov.w	r2, #4294967295
    2f0a:	f04f 33ff 	mov.w	r3, #4294967295
    2f0e:	4802      	ldr	r0, [pc, #8]	; (2f18 <log_process_thread_func+0x40>)
    2f10:	f006 fbb0 	bl	9674 <k_sem_take>
		if (log_process(false) == false) {
    2f14:	e7ee      	b.n	2ef4 <log_process_thread_func+0x1c>
    2f16:	bf00      	nop
    2f18:	20000090 	.word	0x20000090

00002f1c <enable_logger>:

K_KERNEL_STACK_DEFINE(logging_stack, CONFIG_LOG_PROCESS_THREAD_STACK_SIZE);
struct k_thread logging_thread;

static int enable_logger(const struct device *arg)
{
    2f1c:	b580      	push	{r7, lr}
    2f1e:	b08a      	sub	sp, #40	; 0x28
    2f20:	af08      	add	r7, sp, #32
    2f22:	6078      	str	r0, [r7, #4]
	ARG_UNUSED(arg);

	if (IS_ENABLED(CONFIG_LOG_PROCESS_THREAD)) {
		k_timer_init(&log_process_thread_timer,
    2f24:	2200      	movs	r2, #0
    2f26:	4914      	ldr	r1, [pc, #80]	; (2f78 <enable_logger+0x5c>)
    2f28:	4814      	ldr	r0, [pc, #80]	; (2f7c <enable_logger+0x60>)
    2f2a:	f008 fae8 	bl	b4fe <k_timer_init>
		/* start logging thread */
		k_thread_create(&logging_thread, logging_stack,
				K_KERNEL_STACK_SIZEOF(logging_stack),
				log_process_thread_func, NULL, NULL, NULL,
				K_LOWEST_APPLICATION_THREAD_PRIO, 0,
				COND_CODE_1(CONFIG_LOG_PROCESS_THREAD,
    2f2e:	f04f 0000 	mov.w	r0, #0
    2f32:	f04f 0100 	mov.w	r1, #0
    2f36:	f7ff f8e9 	bl	210c <k_ms_to_ticks_ceil64>
    2f3a:	4602      	mov	r2, r0
    2f3c:	460b      	mov	r3, r1
		k_thread_create(&logging_thread, logging_stack,
    2f3e:	e9cd 2306 	strd	r2, r3, [sp, #24]
    2f42:	2300      	movs	r3, #0
    2f44:	9304      	str	r3, [sp, #16]
    2f46:	230e      	movs	r3, #14
    2f48:	9303      	str	r3, [sp, #12]
    2f4a:	2300      	movs	r3, #0
    2f4c:	9302      	str	r3, [sp, #8]
    2f4e:	2300      	movs	r3, #0
    2f50:	9301      	str	r3, [sp, #4]
    2f52:	2300      	movs	r3, #0
    2f54:	9300      	str	r3, [sp, #0]
    2f56:	4b0a      	ldr	r3, [pc, #40]	; (2f80 <enable_logger+0x64>)
    2f58:	f44f 5280 	mov.w	r2, #4096	; 0x1000
    2f5c:	4909      	ldr	r1, [pc, #36]	; (2f84 <enable_logger+0x68>)
    2f5e:	480a      	ldr	r0, [pc, #40]	; (2f88 <enable_logger+0x6c>)
    2f60:	f006 fb2c 	bl	95bc <k_thread_create>
					K_MSEC(CONFIG_LOG_PROCESS_THREAD_STARTUP_DELAY_MS),
					K_NO_WAIT));
		k_thread_name_set(&logging_thread, "logging");
    2f64:	4909      	ldr	r1, [pc, #36]	; (2f8c <enable_logger+0x70>)
    2f66:	4808      	ldr	r0, [pc, #32]	; (2f88 <enable_logger+0x6c>)
    2f68:	f006 fb4f 	bl	960a <k_thread_name_set>
	} else {
		log_init();
	}

	return 0;
    2f6c:	2300      	movs	r3, #0
}
    2f6e:	4618      	mov	r0, r3
    2f70:	3708      	adds	r7, #8
    2f72:	46bd      	mov	sp, r7
    2f74:	bd80      	pop	{r7, pc}
    2f76:	bf00      	nop
    2f78:	00002ebd 	.word	0x00002ebd
    2f7c:	20000118 	.word	0x20000118
    2f80:	00002ed9 	.word	0x00002ed9
    2f84:	20000c90 	.word	0x20000c90
    2f88:	20000550 	.word	0x20000550
    2f8c:	0000b89c 	.word	0x0000b89c

00002f90 <log_const_source_id>:
 *
 * @return Source ID.
 */
static inline uint32_t log_const_source_id(
				const struct log_source_const_data *data)
{
    2f90:	b480      	push	{r7}
    2f92:	b083      	sub	sp, #12
    2f94:	af00      	add	r7, sp, #0
    2f96:	6078      	str	r0, [r7, #4]
	return ((const uint8_t *)data - (uint8_t *)__log_const_start)/
    2f98:	687b      	ldr	r3, [r7, #4]
    2f9a:	4a04      	ldr	r2, [pc, #16]	; (2fac <log_const_source_id+0x1c>)
    2f9c:	1a9b      	subs	r3, r3, r2
    2f9e:	08db      	lsrs	r3, r3, #3
			sizeof(struct log_source_const_data);
}
    2fa0:	4618      	mov	r0, r3
    2fa2:	370c      	adds	r7, #12
    2fa4:	46bd      	mov	sp, r7
    2fa6:	bc80      	pop	{r7}
    2fa8:	4770      	bx	lr
    2faa:	bf00      	nop
    2fac:	0000b7c0 	.word	0x0000b7c0

00002fb0 <z_log_sources_count>:
	return &__log_dynamic_start[source_id].filters;
}

/** @brief Get number of registered sources. */
static inline uint32_t z_log_sources_count(void)
{
    2fb0:	b580      	push	{r7, lr}
    2fb2:	af00      	add	r7, sp, #0
	return log_const_source_id(__log_const_end);
    2fb4:	4802      	ldr	r0, [pc, #8]	; (2fc0 <z_log_sources_count+0x10>)
    2fb6:	f7ff ffeb 	bl	2f90 <log_const_source_id>
    2fba:	4603      	mov	r3, r0
}
    2fbc:	4618      	mov	r0, r3
    2fbe:	bd80      	pop	{r7, pc}
    2fc0:	0000b7e0 	.word	0x0000b7e0

00002fc4 <log_backend_get>:
{
    2fc4:	b480      	push	{r7}
    2fc6:	b083      	sub	sp, #12
    2fc8:	af00      	add	r7, sp, #0
    2fca:	6078      	str	r0, [r7, #4]
	return &__log_backends_start[idx];
    2fcc:	687b      	ldr	r3, [r7, #4]
    2fce:	011b      	lsls	r3, r3, #4
    2fd0:	4a03      	ldr	r2, [pc, #12]	; (2fe0 <log_backend_get+0x1c>)
    2fd2:	4413      	add	r3, r2
}
    2fd4:	4618      	mov	r0, r3
    2fd6:	370c      	adds	r7, #12
    2fd8:	46bd      	mov	sp, r7
    2fda:	bc80      	pop	{r7}
    2fdc:	4770      	bx	lr
    2fde:	bf00      	nop
    2fe0:	0000b7e0 	.word	0x0000b7e0

00002fe4 <log_name_get>:
 *
 * @param source_id Source ID.
 * @return Name.
 */
static inline const char *log_name_get(uint32_t source_id)
{
    2fe4:	b480      	push	{r7}
    2fe6:	b083      	sub	sp, #12
    2fe8:	af00      	add	r7, sp, #0
    2fea:	6078      	str	r0, [r7, #4]
	return __log_const_start[source_id].name;
    2fec:	4a04      	ldr	r2, [pc, #16]	; (3000 <log_name_get+0x1c>)
    2fee:	687b      	ldr	r3, [r7, #4]
    2ff0:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
}
    2ff4:	4618      	mov	r0, r3
    2ff6:	370c      	adds	r7, #12
    2ff8:	46bd      	mov	sp, r7
    2ffa:	bc80      	pop	{r7}
    2ffc:	4770      	bx	lr
    2ffe:	bf00      	nop
    3000:	0000b7c0 	.word	0x0000b7c0

00003004 <cbpprintf>:
 * @return the number of characters printed, or a negative error value
 * returned from invoking @p out.
 */
static inline
int cbpprintf(cbprintf_cb out, void *ctx, void *packaged)
{
    3004:	b580      	push	{r7, lr}
    3006:	b084      	sub	sp, #16
    3008:	af00      	add	r7, sp, #0
    300a:	60f8      	str	r0, [r7, #12]
    300c:	60b9      	str	r1, [r7, #8]
    300e:	607a      	str	r2, [r7, #4]
	return cbpprintf_external(out, cbvprintf, ctx, packaged);
    3010:	687b      	ldr	r3, [r7, #4]
    3012:	68ba      	ldr	r2, [r7, #8]
    3014:	4904      	ldr	r1, [pc, #16]	; (3028 <cbpprintf+0x24>)
    3016:	68f8      	ldr	r0, [r7, #12]
    3018:	f005 fa2d 	bl	8476 <cbpprintf_external>
    301c:	4603      	mov	r3, r0
}
    301e:	4618      	mov	r0, r3
    3020:	3710      	adds	r7, #16
    3022:	46bd      	mov	sp, r7
    3024:	bd80      	pop	{r7, pc}
    3026:	bf00      	nop
    3028:	00001655 	.word	0x00001655

0000302c <log_const_source_id>:
{
    302c:	b480      	push	{r7}
    302e:	b083      	sub	sp, #12
    3030:	af00      	add	r7, sp, #0
    3032:	6078      	str	r0, [r7, #4]
	return ((const uint8_t *)data - (uint8_t *)__log_const_start)/
    3034:	687b      	ldr	r3, [r7, #4]
    3036:	4a04      	ldr	r2, [pc, #16]	; (3048 <log_const_source_id+0x1c>)
    3038:	1a9b      	subs	r3, r3, r2
    303a:	08db      	lsrs	r3, r3, #3
}
    303c:	4618      	mov	r0, r3
    303e:	370c      	adds	r7, #12
    3040:	46bd      	mov	sp, r7
    3042:	bc80      	pop	{r7}
    3044:	4770      	bx	lr
    3046:	bf00      	nop
    3048:	0000b7c0 	.word	0x0000b7c0

0000304c <print_formatted>:
	return 0;
}

static int print_formatted(const struct log_output *output,
			   const char *fmt, ...)
{
    304c:	b40e      	push	{r1, r2, r3}
    304e:	b580      	push	{r7, lr}
    3050:	b085      	sub	sp, #20
    3052:	af00      	add	r7, sp, #0
    3054:	6078      	str	r0, [r7, #4]
	va_list args;
	int length = 0;
    3056:	2300      	movs	r3, #0
    3058:	60fb      	str	r3, [r7, #12]

	va_start(args, fmt);
    305a:	f107 0320 	add.w	r3, r7, #32
    305e:	60bb      	str	r3, [r7, #8]
	length = cbvprintf(out_func, (void *)output, fmt, args);
    3060:	68bb      	ldr	r3, [r7, #8]
    3062:	69fa      	ldr	r2, [r7, #28]
    3064:	6879      	ldr	r1, [r7, #4]
    3066:	4806      	ldr	r0, [pc, #24]	; (3080 <print_formatted+0x34>)
    3068:	f7fe faf4 	bl	1654 <cbvprintf>
    306c:	60f8      	str	r0, [r7, #12]
	va_end(args);

	return length;
    306e:	68fb      	ldr	r3, [r7, #12]
}
    3070:	4618      	mov	r0, r3
    3072:	3714      	adds	r7, #20
    3074:	46bd      	mov	sp, r7
    3076:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
    307a:	b003      	add	sp, #12
    307c:	4770      	bx	lr
    307e:	bf00      	nop
    3080:	00009a23 	.word	0x00009a23

00003084 <timestamp_print>:
	output_date->day += seconds / SECONDS_IN_DAY;
}

static int timestamp_print(const struct log_output *output,
			   uint32_t flags, log_timestamp_t timestamp)
{
    3084:	b580      	push	{r7, lr}
    3086:	b094      	sub	sp, #80	; 0x50
    3088:	af04      	add	r7, sp, #16
    308a:	60f8      	str	r0, [r7, #12]
    308c:	60b9      	str	r1, [r7, #8]
    308e:	607a      	str	r2, [r7, #4]
	int length;
	bool format =
		(flags & LOG_OUTPUT_FLAG_FORMAT_TIMESTAMP) |
		(flags & LOG_OUTPUT_FLAG_FORMAT_SYSLOG) |
    3090:	68bb      	ldr	r3, [r7, #8]
    3092:	f003 0344 	and.w	r3, r3, #68	; 0x44
	bool format =
    3096:	2b00      	cmp	r3, #0
    3098:	bf14      	ite	ne
    309a:	2301      	movne	r3, #1
    309c:	2300      	moveq	r3, #0
    309e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
		IS_ENABLED(CONFIG_LOG_OUTPUT_FORMAT_LINUX_TIMESTAMP);


	if (!format) {
    30a2:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
    30a6:	f083 0301 	eor.w	r3, r3, #1
    30aa:	b2db      	uxtb	r3, r3
    30ac:	2b00      	cmp	r3, #0
    30ae:	d006      	beq.n	30be <timestamp_print+0x3a>
#ifndef CONFIG_LOG_TIMESTAMP_64BIT
		length = print_formatted(output, "[%08lu] ", timestamp);
    30b0:	687a      	ldr	r2, [r7, #4]
    30b2:	4938      	ldr	r1, [pc, #224]	; (3194 <timestamp_print+0x110>)
    30b4:	68f8      	ldr	r0, [r7, #12]
    30b6:	f7ff ffc9 	bl	304c <print_formatted>
    30ba:	63b8      	str	r0, [r7, #56]	; 0x38
    30bc:	e065      	b.n	318a <timestamp_print+0x106>
#else
		length = print_formatted(output, "[%016llu] ", timestamp);
#endif
	} else if (freq != 0U) {
    30be:	4b36      	ldr	r3, [pc, #216]	; (3198 <timestamp_print+0x114>)
    30c0:	681b      	ldr	r3, [r3, #0]
    30c2:	2b00      	cmp	r3, #0
    30c4:	d05f      	beq.n	3186 <timestamp_print+0x102>
		uint32_t hours;
		uint32_t mins;
		uint32_t ms;
		uint32_t us;

		timestamp /= timestamp_div;
    30c6:	4b35      	ldr	r3, [pc, #212]	; (319c <timestamp_print+0x118>)
    30c8:	681b      	ldr	r3, [r3, #0]
    30ca:	687a      	ldr	r2, [r7, #4]
    30cc:	fbb2 f3f3 	udiv	r3, r2, r3
    30d0:	607b      	str	r3, [r7, #4]
		total_seconds = timestamp / freq;
    30d2:	4b31      	ldr	r3, [pc, #196]	; (3198 <timestamp_print+0x114>)
    30d4:	681b      	ldr	r3, [r3, #0]
    30d6:	687a      	ldr	r2, [r7, #4]
    30d8:	fbb2 f3f3 	udiv	r3, r2, r3
    30dc:	637b      	str	r3, [r7, #52]	; 0x34
		seconds = total_seconds;
    30de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    30e0:	633b      	str	r3, [r7, #48]	; 0x30
		hours = seconds / 3600U;
    30e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    30e4:	4a2e      	ldr	r2, [pc, #184]	; (31a0 <timestamp_print+0x11c>)
    30e6:	fba2 2303 	umull	r2, r3, r2, r3
    30ea:	0adb      	lsrs	r3, r3, #11
    30ec:	62fb      	str	r3, [r7, #44]	; 0x2c
		seconds -= hours * 3600U;
    30ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    30f0:	f44f 6261 	mov.w	r2, #3600	; 0xe10
    30f4:	fb02 f303 	mul.w	r3, r2, r3
    30f8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
    30fa:	1ad3      	subs	r3, r2, r3
    30fc:	633b      	str	r3, [r7, #48]	; 0x30
		mins = seconds / 60U;
    30fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    3100:	4a28      	ldr	r2, [pc, #160]	; (31a4 <timestamp_print+0x120>)
    3102:	fba2 2303 	umull	r2, r3, r2, r3
    3106:	095b      	lsrs	r3, r3, #5
    3108:	62bb      	str	r3, [r7, #40]	; 0x28
		seconds -= mins * 60U;
    310a:	6aba      	ldr	r2, [r7, #40]	; 0x28
    310c:	4613      	mov	r3, r2
    310e:	011b      	lsls	r3, r3, #4
    3110:	1a9b      	subs	r3, r3, r2
    3112:	009b      	lsls	r3, r3, #2
    3114:	461a      	mov	r2, r3
    3116:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    3118:	1a9b      	subs	r3, r3, r2
    311a:	633b      	str	r3, [r7, #48]	; 0x30

		remainder = timestamp % freq;
    311c:	4b1e      	ldr	r3, [pc, #120]	; (3198 <timestamp_print+0x114>)
    311e:	681a      	ldr	r2, [r3, #0]
    3120:	687b      	ldr	r3, [r7, #4]
    3122:	fbb3 f1f2 	udiv	r1, r3, r2
    3126:	fb01 f202 	mul.w	r2, r1, r2
    312a:	1a9b      	subs	r3, r3, r2
    312c:	627b      	str	r3, [r7, #36]	; 0x24
		ms = (remainder * 1000U) / freq;
    312e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    3130:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    3134:	fb03 f202 	mul.w	r2, r3, r2
    3138:	4b17      	ldr	r3, [pc, #92]	; (3198 <timestamp_print+0x114>)
    313a:	681b      	ldr	r3, [r3, #0]
    313c:	fbb2 f3f3 	udiv	r3, r2, r3
    3140:	623b      	str	r3, [r7, #32]
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
    3142:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    3144:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    3148:	fb03 f202 	mul.w	r2, r3, r2
    314c:	4b12      	ldr	r3, [pc, #72]	; (3198 <timestamp_print+0x114>)
    314e:	681b      	ldr	r3, [r3, #0]
    3150:	6a39      	ldr	r1, [r7, #32]
    3152:	fb01 f303 	mul.w	r3, r1, r3
    3156:	1ad3      	subs	r3, r2, r3
    3158:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    315c:	fb03 f202 	mul.w	r2, r3, r2
    3160:	4b0d      	ldr	r3, [pc, #52]	; (3198 <timestamp_print+0x114>)
    3162:	681b      	ldr	r3, [r3, #0]
    3164:	fbb2 f3f3 	udiv	r3, r2, r3
    3168:	61fb      	str	r3, [r7, #28]
			if (IS_ENABLED(CONFIG_LOG_OUTPUT_FORMAT_LINUX_TIMESTAMP)) {
				length = print_formatted(output,
							"[%5ld.%06d] ",
							total_seconds, ms * 1000U + us);
			} else {
				length = print_formatted(output,
    316a:	69fb      	ldr	r3, [r7, #28]
    316c:	9302      	str	r3, [sp, #8]
    316e:	6a3b      	ldr	r3, [r7, #32]
    3170:	9301      	str	r3, [sp, #4]
    3172:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    3174:	9300      	str	r3, [sp, #0]
    3176:	6abb      	ldr	r3, [r7, #40]	; 0x28
    3178:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    317a:	490b      	ldr	r1, [pc, #44]	; (31a8 <timestamp_print+0x124>)
    317c:	68f8      	ldr	r0, [r7, #12]
    317e:	f7ff ff65 	bl	304c <print_formatted>
    3182:	63b8      	str	r0, [r7, #56]	; 0x38
    3184:	e001      	b.n	318a <timestamp_print+0x106>
							"[%02u:%02u:%02u.%03u,%03u] ",
							hours, mins, seconds, ms, us);
			}
		}
	} else {
		length = 0;
    3186:	2300      	movs	r3, #0
    3188:	63bb      	str	r3, [r7, #56]	; 0x38
	}

	return length;
    318a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
    318c:	4618      	mov	r0, r3
    318e:	3740      	adds	r7, #64	; 0x40
    3190:	46bd      	mov	sp, r7
    3192:	bd80      	pop	{r7, pc}
    3194:	0000b8c4 	.word	0x0000b8c4
    3198:	2000070c 	.word	0x2000070c
    319c:	20000710 	.word	0x20000710
    31a0:	91a2b3c5 	.word	0x91a2b3c5
    31a4:	88888889 	.word	0x88888889
    31a8:	0000b8d0 	.word	0x0000b8d0

000031ac <color_print>:

static void color_print(const struct log_output *output,
			bool color, bool start, uint32_t level)
{
    31ac:	b580      	push	{r7, lr}
    31ae:	b086      	sub	sp, #24
    31b0:	af00      	add	r7, sp, #0
    31b2:	60f8      	str	r0, [r7, #12]
    31b4:	607b      	str	r3, [r7, #4]
    31b6:	460b      	mov	r3, r1
    31b8:	72fb      	strb	r3, [r7, #11]
    31ba:	4613      	mov	r3, r2
    31bc:	72bb      	strb	r3, [r7, #10]
	if (color) {
    31be:	7afb      	ldrb	r3, [r7, #11]
    31c0:	2b00      	cmp	r3, #0
    31c2:	d014      	beq.n	31ee <color_print+0x42>
		const char *log_color = start && (colors[level] != NULL) ?
				colors[level] : LOG_COLOR_CODE_DEFAULT;
    31c4:	7abb      	ldrb	r3, [r7, #10]
    31c6:	2b00      	cmp	r3, #0
    31c8:	d00a      	beq.n	31e0 <color_print+0x34>
		const char *log_color = start && (colors[level] != NULL) ?
    31ca:	4a0b      	ldr	r2, [pc, #44]	; (31f8 <color_print+0x4c>)
    31cc:	687b      	ldr	r3, [r7, #4]
    31ce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    31d2:	2b00      	cmp	r3, #0
    31d4:	d004      	beq.n	31e0 <color_print+0x34>
				colors[level] : LOG_COLOR_CODE_DEFAULT;
    31d6:	4a08      	ldr	r2, [pc, #32]	; (31f8 <color_print+0x4c>)
    31d8:	687b      	ldr	r3, [r7, #4]
    31da:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    31de:	e000      	b.n	31e2 <color_print+0x36>
    31e0:	4b06      	ldr	r3, [pc, #24]	; (31fc <color_print+0x50>)
		const char *log_color = start && (colors[level] != NULL) ?
    31e2:	617b      	str	r3, [r7, #20]
		print_formatted(output, "%s", log_color);
    31e4:	697a      	ldr	r2, [r7, #20]
    31e6:	4906      	ldr	r1, [pc, #24]	; (3200 <color_print+0x54>)
    31e8:	68f8      	ldr	r0, [r7, #12]
    31ea:	f7ff ff2f 	bl	304c <print_formatted>
	}
}
    31ee:	bf00      	nop
    31f0:	3718      	adds	r7, #24
    31f2:	46bd      	mov	sp, r7
    31f4:	bd80      	pop	{r7, pc}
    31f6:	bf00      	nop
    31f8:	0000bfd0 	.word	0x0000bfd0
    31fc:	0000b8ec 	.word	0x0000b8ec
    3200:	0000b8f4 	.word	0x0000b8f4

00003204 <ids_print>:


static int ids_print(const struct log_output *output, bool level_on,
		     bool func_on, uint32_t domain_id, int16_t source_id,
		     uint32_t level)
{
    3204:	b590      	push	{r4, r7, lr}
    3206:	b087      	sub	sp, #28
    3208:	af00      	add	r7, sp, #0
    320a:	60f8      	str	r0, [r7, #12]
    320c:	607b      	str	r3, [r7, #4]
    320e:	460b      	mov	r3, r1
    3210:	72fb      	strb	r3, [r7, #11]
    3212:	4613      	mov	r3, r2
    3214:	72bb      	strb	r3, [r7, #10]
	int total = 0;
    3216:	2300      	movs	r3, #0
    3218:	617b      	str	r3, [r7, #20]

	if (level_on) {
    321a:	7afb      	ldrb	r3, [r7, #11]
    321c:	2b00      	cmp	r3, #0
    321e:	d00c      	beq.n	323a <ids_print+0x36>
		total += print_formatted(output, "<%s> ", severity[level]);
    3220:	4a19      	ldr	r2, [pc, #100]	; (3288 <ids_print+0x84>)
    3222:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    3224:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    3228:	461a      	mov	r2, r3
    322a:	4918      	ldr	r1, [pc, #96]	; (328c <ids_print+0x88>)
    322c:	68f8      	ldr	r0, [r7, #12]
    322e:	f7ff ff0d 	bl	304c <print_formatted>
    3232:	4602      	mov	r2, r0
    3234:	697b      	ldr	r3, [r7, #20]
    3236:	4413      	add	r3, r2
    3238:	617b      	str	r3, [r7, #20]
	}

	if (source_id >= 0) {
    323a:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
    323e:	2b00      	cmp	r3, #0
    3240:	db1d      	blt.n	327e <ids_print+0x7a>
		total += print_formatted(output,
    3242:	7abb      	ldrb	r3, [r7, #10]
    3244:	2b00      	cmp	r3, #0
    3246:	d009      	beq.n	325c <ids_print+0x58>
				(func_on &&
				((1 << level) & LOG_FUNCTION_PREFIX_MASK)) ?
    3248:	2201      	movs	r2, #1
    324a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    324c:	fa02 f303 	lsl.w	r3, r2, r3
    3250:	f003 0310 	and.w	r3, r3, #16
				(func_on &&
    3254:	2b00      	cmp	r3, #0
    3256:	d001      	beq.n	325c <ids_print+0x58>
		total += print_formatted(output,
    3258:	4c0d      	ldr	r4, [pc, #52]	; (3290 <ids_print+0x8c>)
    325a:	e000      	b.n	325e <ids_print+0x5a>
    325c:	4c0d      	ldr	r4, [pc, #52]	; (3294 <ids_print+0x90>)
    325e:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
    3262:	4619      	mov	r1, r3
    3264:	6878      	ldr	r0, [r7, #4]
    3266:	f006 fafd 	bl	9864 <log_source_name_get>
    326a:	4603      	mov	r3, r0
    326c:	461a      	mov	r2, r3
    326e:	4621      	mov	r1, r4
    3270:	68f8      	ldr	r0, [r7, #12]
    3272:	f7ff feeb 	bl	304c <print_formatted>
    3276:	4602      	mov	r2, r0
    3278:	697b      	ldr	r3, [r7, #20]
    327a:	4413      	add	r3, r2
    327c:	617b      	str	r3, [r7, #20]
				"%s." : "%s: ",
				log_source_name_get(domain_id, source_id));
	}

	return total;
    327e:	697b      	ldr	r3, [r7, #20]
}
    3280:	4618      	mov	r0, r3
    3282:	371c      	adds	r7, #28
    3284:	46bd      	mov	sp, r7
    3286:	bd90      	pop	{r4, r7, pc}
    3288:	0000bfbc 	.word	0x0000bfbc
    328c:	0000b8f8 	.word	0x0000b8f8
    3290:	0000b900 	.word	0x0000b900
    3294:	0000b904 	.word	0x0000b904

00003298 <newline_print>:

static void newline_print(const struct log_output *ctx, uint32_t flags)
{
    3298:	b580      	push	{r7, lr}
    329a:	b082      	sub	sp, #8
    329c:	af00      	add	r7, sp, #0
    329e:	6078      	str	r0, [r7, #4]
    32a0:	6039      	str	r1, [r7, #0]
	if (IS_ENABLED(CONFIG_LOG_BACKEND_NET) &&
	    flags & LOG_OUTPUT_FLAG_FORMAT_SYSLOG) {
		return;
	}

	if ((flags & LOG_OUTPUT_FLAG_CRLF_NONE) != 0U) {
    32a2:	683b      	ldr	r3, [r7, #0]
    32a4:	f003 0310 	and.w	r3, r3, #16
    32a8:	2b00      	cmp	r3, #0
    32aa:	d10e      	bne.n	32ca <newline_print+0x32>
		return;
	}

	if ((flags & LOG_OUTPUT_FLAG_CRLF_LFONLY) != 0U) {
    32ac:	683b      	ldr	r3, [r7, #0]
    32ae:	f003 0320 	and.w	r3, r3, #32
    32b2:	2b00      	cmp	r3, #0
    32b4:	d004      	beq.n	32c0 <newline_print+0x28>
		print_formatted(ctx, "\n");
    32b6:	4907      	ldr	r1, [pc, #28]	; (32d4 <newline_print+0x3c>)
    32b8:	6878      	ldr	r0, [r7, #4]
    32ba:	f7ff fec7 	bl	304c <print_formatted>
    32be:	e005      	b.n	32cc <newline_print+0x34>
	} else {
		print_formatted(ctx, "\r\n");
    32c0:	4905      	ldr	r1, [pc, #20]	; (32d8 <newline_print+0x40>)
    32c2:	6878      	ldr	r0, [r7, #4]
    32c4:	f7ff fec2 	bl	304c <print_formatted>
    32c8:	e000      	b.n	32cc <newline_print+0x34>
		return;
    32ca:	bf00      	nop
	}
}
    32cc:	3708      	adds	r7, #8
    32ce:	46bd      	mov	sp, r7
    32d0:	bd80      	pop	{r7, pc}
    32d2:	bf00      	nop
    32d4:	0000b90c 	.word	0x0000b90c
    32d8:	0000b910 	.word	0x0000b910

000032dc <hexdump_line_print>:
}

static void hexdump_line_print(const struct log_output *output,
			       const uint8_t *data, uint32_t length,
			       int prefix_offset, uint32_t flags)
{
    32dc:	b580      	push	{r7, lr}
    32de:	b088      	sub	sp, #32
    32e0:	af00      	add	r7, sp, #0
    32e2:	60f8      	str	r0, [r7, #12]
    32e4:	60b9      	str	r1, [r7, #8]
    32e6:	607a      	str	r2, [r7, #4]
    32e8:	603b      	str	r3, [r7, #0]
	newline_print(output, flags);
    32ea:	6ab9      	ldr	r1, [r7, #40]	; 0x28
    32ec:	68f8      	ldr	r0, [r7, #12]
    32ee:	f7ff ffd3 	bl	3298 <newline_print>

	for (int i = 0; i < prefix_offset; i++) {
    32f2:	2300      	movs	r3, #0
    32f4:	61fb      	str	r3, [r7, #28]
    32f6:	e006      	b.n	3306 <hexdump_line_print+0x2a>
		print_formatted(output, " ");
    32f8:	4936      	ldr	r1, [pc, #216]	; (33d4 <hexdump_line_print+0xf8>)
    32fa:	68f8      	ldr	r0, [r7, #12]
    32fc:	f7ff fea6 	bl	304c <print_formatted>
	for (int i = 0; i < prefix_offset; i++) {
    3300:	69fb      	ldr	r3, [r7, #28]
    3302:	3301      	adds	r3, #1
    3304:	61fb      	str	r3, [r7, #28]
    3306:	69fa      	ldr	r2, [r7, #28]
    3308:	683b      	ldr	r3, [r7, #0]
    330a:	429a      	cmp	r2, r3
    330c:	dbf4      	blt.n	32f8 <hexdump_line_print+0x1c>
	}

	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
    330e:	2300      	movs	r3, #0
    3310:	61bb      	str	r3, [r7, #24]
    3312:	e020      	b.n	3356 <hexdump_line_print+0x7a>
		if (i > 0 && !(i % 8)) {
    3314:	69bb      	ldr	r3, [r7, #24]
    3316:	2b00      	cmp	r3, #0
    3318:	dd08      	ble.n	332c <hexdump_line_print+0x50>
    331a:	69bb      	ldr	r3, [r7, #24]
    331c:	f003 0307 	and.w	r3, r3, #7
    3320:	2b00      	cmp	r3, #0
    3322:	d103      	bne.n	332c <hexdump_line_print+0x50>
			print_formatted(output, " ");
    3324:	492b      	ldr	r1, [pc, #172]	; (33d4 <hexdump_line_print+0xf8>)
    3326:	68f8      	ldr	r0, [r7, #12]
    3328:	f7ff fe90 	bl	304c <print_formatted>
		}

		if (i < length) {
    332c:	69bb      	ldr	r3, [r7, #24]
    332e:	687a      	ldr	r2, [r7, #4]
    3330:	429a      	cmp	r2, r3
    3332:	d909      	bls.n	3348 <hexdump_line_print+0x6c>
			print_formatted(output, "%02x ", data[i]);
    3334:	69bb      	ldr	r3, [r7, #24]
    3336:	68ba      	ldr	r2, [r7, #8]
    3338:	4413      	add	r3, r2
    333a:	781b      	ldrb	r3, [r3, #0]
    333c:	461a      	mov	r2, r3
    333e:	4926      	ldr	r1, [pc, #152]	; (33d8 <hexdump_line_print+0xfc>)
    3340:	68f8      	ldr	r0, [r7, #12]
    3342:	f7ff fe83 	bl	304c <print_formatted>
    3346:	e003      	b.n	3350 <hexdump_line_print+0x74>
		} else {
			print_formatted(output, "   ");
    3348:	4924      	ldr	r1, [pc, #144]	; (33dc <hexdump_line_print+0x100>)
    334a:	68f8      	ldr	r0, [r7, #12]
    334c:	f7ff fe7e 	bl	304c <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
    3350:	69bb      	ldr	r3, [r7, #24]
    3352:	3301      	adds	r3, #1
    3354:	61bb      	str	r3, [r7, #24]
    3356:	69bb      	ldr	r3, [r7, #24]
    3358:	2b0f      	cmp	r3, #15
    335a:	dddb      	ble.n	3314 <hexdump_line_print+0x38>
		}
	}

	print_formatted(output, "|");
    335c:	4920      	ldr	r1, [pc, #128]	; (33e0 <hexdump_line_print+0x104>)
    335e:	68f8      	ldr	r0, [r7, #12]
    3360:	f7ff fe74 	bl	304c <print_formatted>

	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
    3364:	2300      	movs	r3, #0
    3366:	617b      	str	r3, [r7, #20]
    3368:	e02b      	b.n	33c2 <hexdump_line_print+0xe6>
		if (i > 0 && !(i % 8)) {
    336a:	697b      	ldr	r3, [r7, #20]
    336c:	2b00      	cmp	r3, #0
    336e:	dd08      	ble.n	3382 <hexdump_line_print+0xa6>
    3370:	697b      	ldr	r3, [r7, #20]
    3372:	f003 0307 	and.w	r3, r3, #7
    3376:	2b00      	cmp	r3, #0
    3378:	d103      	bne.n	3382 <hexdump_line_print+0xa6>
			print_formatted(output, " ");
    337a:	4916      	ldr	r1, [pc, #88]	; (33d4 <hexdump_line_print+0xf8>)
    337c:	68f8      	ldr	r0, [r7, #12]
    337e:	f7ff fe65 	bl	304c <print_formatted>
		}

		if (i < length) {
    3382:	697b      	ldr	r3, [r7, #20]
    3384:	687a      	ldr	r2, [r7, #4]
    3386:	429a      	cmp	r2, r3
    3388:	d914      	bls.n	33b4 <hexdump_line_print+0xd8>
			char c = (char)data[i];
    338a:	697b      	ldr	r3, [r7, #20]
    338c:	68ba      	ldr	r2, [r7, #8]
    338e:	4413      	add	r3, r2
    3390:	781b      	ldrb	r3, [r3, #0]
    3392:	74fb      	strb	r3, [r7, #19]

			print_formatted(output, "%c",
			      isprint((int)c) ? c : '.');
    3394:	7cfb      	ldrb	r3, [r7, #19]
    3396:	4618      	mov	r0, r3
    3398:	f006 fb31 	bl	99fe <isprint>
    339c:	4603      	mov	r3, r0
			print_formatted(output, "%c",
    339e:	2b00      	cmp	r3, #0
    33a0:	d001      	beq.n	33a6 <hexdump_line_print+0xca>
    33a2:	7cfb      	ldrb	r3, [r7, #19]
    33a4:	e000      	b.n	33a8 <hexdump_line_print+0xcc>
    33a6:	232e      	movs	r3, #46	; 0x2e
    33a8:	461a      	mov	r2, r3
    33aa:	490e      	ldr	r1, [pc, #56]	; (33e4 <hexdump_line_print+0x108>)
    33ac:	68f8      	ldr	r0, [r7, #12]
    33ae:	f7ff fe4d 	bl	304c <print_formatted>
    33b2:	e003      	b.n	33bc <hexdump_line_print+0xe0>
		} else {
			print_formatted(output, " ");
    33b4:	4907      	ldr	r1, [pc, #28]	; (33d4 <hexdump_line_print+0xf8>)
    33b6:	68f8      	ldr	r0, [r7, #12]
    33b8:	f7ff fe48 	bl	304c <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
    33bc:	697b      	ldr	r3, [r7, #20]
    33be:	3301      	adds	r3, #1
    33c0:	617b      	str	r3, [r7, #20]
    33c2:	697b      	ldr	r3, [r7, #20]
    33c4:	2b0f      	cmp	r3, #15
    33c6:	ddd0      	ble.n	336a <hexdump_line_print+0x8e>
		}
	}
}
    33c8:	bf00      	nop
    33ca:	bf00      	nop
    33cc:	3720      	adds	r7, #32
    33ce:	46bd      	mov	sp, r7
    33d0:	bd80      	pop	{r7, pc}
    33d2:	bf00      	nop
    33d4:	0000b914 	.word	0x0000b914
    33d8:	0000b918 	.word	0x0000b918
    33dc:	0000b920 	.word	0x0000b920
    33e0:	0000b924 	.word	0x0000b924
    33e4:	0000b928 	.word	0x0000b928

000033e8 <prefix_print>:
}

static uint32_t prefix_print(const struct log_output *output,
			 uint32_t flags, bool func_on, log_timestamp_t timestamp, uint8_t level,
			 uint8_t domain_id, int16_t source_id)
{
    33e8:	b580      	push	{r7, lr}
    33ea:	b08a      	sub	sp, #40	; 0x28
    33ec:	af02      	add	r7, sp, #8
    33ee:	60f8      	str	r0, [r7, #12]
    33f0:	60b9      	str	r1, [r7, #8]
    33f2:	603b      	str	r3, [r7, #0]
    33f4:	4613      	mov	r3, r2
    33f6:	71fb      	strb	r3, [r7, #7]
	uint32_t length = 0U;
    33f8:	2300      	movs	r3, #0
    33fa:	61fb      	str	r3, [r7, #28]

	bool stamp = flags & LOG_OUTPUT_FLAG_TIMESTAMP;
    33fc:	68bb      	ldr	r3, [r7, #8]
    33fe:	f003 0302 	and.w	r3, r3, #2
    3402:	2b00      	cmp	r3, #0
    3404:	bf14      	ite	ne
    3406:	2301      	movne	r3, #1
    3408:	2300      	moveq	r3, #0
    340a:	76fb      	strb	r3, [r7, #27]
	bool colors_on = flags & LOG_OUTPUT_FLAG_COLORS;
    340c:	68bb      	ldr	r3, [r7, #8]
    340e:	f003 0301 	and.w	r3, r3, #1
    3412:	2b00      	cmp	r3, #0
    3414:	bf14      	ite	ne
    3416:	2301      	movne	r3, #1
    3418:	2300      	moveq	r3, #0
    341a:	76bb      	strb	r3, [r7, #26]
	bool level_on = flags & LOG_OUTPUT_FLAG_LEVEL;
    341c:	68bb      	ldr	r3, [r7, #8]
    341e:	f003 0308 	and.w	r3, r3, #8
    3422:	2b00      	cmp	r3, #0
    3424:	bf14      	ite	ne
    3426:	2301      	movne	r3, #1
    3428:	2300      	moveq	r3, #0
    342a:	767b      	strb	r3, [r7, #25]
	const char *tag = z_log_get_tag();
    342c:	f006 f9f2 	bl	9814 <z_log_get_tag>
    3430:	6178      	str	r0, [r7, #20]
			"<%d>1 ",
			facility * 8 +
			level_to_rfc5424_severity(level));
	}

	if (tag) {
    3432:	697b      	ldr	r3, [r7, #20]
    3434:	2b00      	cmp	r3, #0
    3436:	d009      	beq.n	344c <prefix_print+0x64>
		length += print_formatted(output, "%s ", tag);
    3438:	697a      	ldr	r2, [r7, #20]
    343a:	491a      	ldr	r1, [pc, #104]	; (34a4 <prefix_print+0xbc>)
    343c:	68f8      	ldr	r0, [r7, #12]
    343e:	f7ff fe05 	bl	304c <print_formatted>
    3442:	4603      	mov	r3, r0
    3444:	461a      	mov	r2, r3
    3446:	69fb      	ldr	r3, [r7, #28]
    3448:	4413      	add	r3, r2
    344a:	61fb      	str	r3, [r7, #28]
	}

	if (stamp) {
    344c:	7efb      	ldrb	r3, [r7, #27]
    344e:	2b00      	cmp	r3, #0
    3450:	d009      	beq.n	3466 <prefix_print+0x7e>
		length += timestamp_print(output, flags, timestamp);
    3452:	683a      	ldr	r2, [r7, #0]
    3454:	68b9      	ldr	r1, [r7, #8]
    3456:	68f8      	ldr	r0, [r7, #12]
    3458:	f7ff fe14 	bl	3084 <timestamp_print>
    345c:	4603      	mov	r3, r0
    345e:	461a      	mov	r2, r3
    3460:	69fb      	ldr	r3, [r7, #28]
    3462:	4413      	add	r3, r2
    3464:	61fb      	str	r3, [r7, #28]
			output, "%s - - - - ",
			output->control_block->hostname ?
			output->control_block->hostname :
			"zephyr");
	} else {
		color_prefix(output, colors_on, level);
    3466:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
    346a:	7ebb      	ldrb	r3, [r7, #26]
    346c:	4619      	mov	r1, r3
    346e:	68f8      	ldr	r0, [r7, #12]
    3470:	f006 fb45 	bl	9afe <color_prefix>
	}

	length += ids_print(output, level_on, func_on,
    3474:	f897 002c 	ldrb.w	r0, [r7, #44]	; 0x2c
    3478:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
    347c:	79fa      	ldrb	r2, [r7, #7]
    347e:	7e79      	ldrb	r1, [r7, #25]
    3480:	9301      	str	r3, [sp, #4]
    3482:	f9b7 3030 	ldrsh.w	r3, [r7, #48]	; 0x30
    3486:	9300      	str	r3, [sp, #0]
    3488:	4603      	mov	r3, r0
    348a:	68f8      	ldr	r0, [r7, #12]
    348c:	f7ff feba 	bl	3204 <ids_print>
    3490:	4603      	mov	r3, r0
    3492:	461a      	mov	r2, r3
    3494:	69fb      	ldr	r3, [r7, #28]
    3496:	4413      	add	r3, r2
    3498:	61fb      	str	r3, [r7, #28]
			domain_id, source_id, level);


	return length;
    349a:	69fb      	ldr	r3, [r7, #28]
}
    349c:	4618      	mov	r0, r3
    349e:	3720      	adds	r7, #32
    34a0:	46bd      	mov	sp, r7
    34a2:	bd80      	pop	{r7, pc}
    34a4:	0000b930 	.word	0x0000b930

000034a8 <log_output_msg2_process>:
	log_output_flush(output);
}

void log_output_msg2_process(const struct log_output *output,
			     struct log_msg2 *msg, uint32_t flags)
{
    34a8:	b580      	push	{r7, lr}
    34aa:	b090      	sub	sp, #64	; 0x40
    34ac:	af04      	add	r7, sp, #16
    34ae:	60f8      	str	r0, [r7, #12]
    34b0:	60b9      	str	r1, [r7, #8]
    34b2:	607a      	str	r2, [r7, #4]
	log_timestamp_t timestamp = log_msg2_get_timestamp(msg);
    34b4:	68b8      	ldr	r0, [r7, #8]
    34b6:	f006 fa69 	bl	998c <log_msg2_get_timestamp>
    34ba:	62b8      	str	r0, [r7, #40]	; 0x28
	uint8_t level = log_msg2_get_level(msg);
    34bc:	68b8      	ldr	r0, [r7, #8]
    34be:	f006 fa4c 	bl	995a <log_msg2_get_level>
    34c2:	4603      	mov	r3, r0
    34c4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	bool raw_string = (level == LOG_LEVEL_INTERNAL_RAW_STRING);
    34c8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
    34cc:	2b00      	cmp	r3, #0
    34ce:	bf0c      	ite	eq
    34d0:	2301      	moveq	r3, #1
    34d2:	2300      	movne	r3, #0
    34d4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	uint32_t prefix_offset;

	if (!raw_string) {
    34d8:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
    34dc:	f083 0301 	eor.w	r3, r3, #1
    34e0:	b2db      	uxtb	r3, r3
    34e2:	2b00      	cmp	r3, #0
    34e4:	d024      	beq.n	3530 <log_output_msg2_process+0x88>
		void *source = (void *)log_msg2_get_source(msg);
    34e6:	68b8      	ldr	r0, [r7, #8]
    34e8:	f006 fa45 	bl	9976 <log_msg2_get_source>
    34ec:	6238      	str	r0, [r7, #32]
		uint8_t domain_id = log_msg2_get_domain(msg);
    34ee:	68b8      	ldr	r0, [r7, #8]
    34f0:	f006 fa25 	bl	993e <log_msg2_get_domain>
    34f4:	4603      	mov	r3, r0
    34f6:	77fb      	strb	r3, [r7, #31]
		int16_t source_id = source ?
    34f8:	6a3b      	ldr	r3, [r7, #32]
    34fa:	2b00      	cmp	r3, #0
    34fc:	d005      	beq.n	350a <log_output_msg2_process+0x62>
			(IS_ENABLED(CONFIG_LOG_RUNTIME_FILTERING) ?
				log_dynamic_source_id(source) :
    34fe:	6a38      	ldr	r0, [r7, #32]
    3500:	f7ff fd94 	bl	302c <log_const_source_id>
    3504:	4603      	mov	r3, r0
		int16_t source_id = source ?
    3506:	b21b      	sxth	r3, r3
    3508:	e001      	b.n	350e <log_output_msg2_process+0x66>
    350a:	f04f 33ff 	mov.w	r3, #4294967295
    350e:	83bb      	strh	r3, [r7, #28]
				log_const_source_id(source)) :
			-1;

		prefix_offset = prefix_print(output, flags, 0, timestamp,
    3510:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
    3514:	9302      	str	r3, [sp, #8]
    3516:	7ffb      	ldrb	r3, [r7, #31]
    3518:	9301      	str	r3, [sp, #4]
    351a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
    351e:	9300      	str	r3, [sp, #0]
    3520:	6abb      	ldr	r3, [r7, #40]	; 0x28
    3522:	2200      	movs	r2, #0
    3524:	6879      	ldr	r1, [r7, #4]
    3526:	68f8      	ldr	r0, [r7, #12]
    3528:	f7ff ff5e 	bl	33e8 <prefix_print>
    352c:	62f8      	str	r0, [r7, #44]	; 0x2c
    352e:	e001      	b.n	3534 <log_output_msg2_process+0x8c>
					 level, domain_id, source_id);
	} else {
		prefix_offset = 0;
    3530:	2300      	movs	r3, #0
    3532:	62fb      	str	r3, [r7, #44]	; 0x2c
	}

	size_t len;
	uint8_t *data = log_msg2_get_package(msg, &len);
    3534:	f107 0310 	add.w	r3, r7, #16
    3538:	4619      	mov	r1, r3
    353a:	68b8      	ldr	r0, [r7, #8]
    353c:	f006 fa4b 	bl	99d6 <log_msg2_get_package>
    3540:	61b8      	str	r0, [r7, #24]

	if (len) {
    3542:	693b      	ldr	r3, [r7, #16]
    3544:	2b00      	cmp	r3, #0
    3546:	d00c      	beq.n	3562 <log_output_msg2_process+0xba>
		int err = cbpprintf(raw_string ? cr_out_func :  out_func,
    3548:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
    354c:	2b00      	cmp	r3, #0
    354e:	d001      	beq.n	3554 <log_output_msg2_process+0xac>
    3550:	4b18      	ldr	r3, [pc, #96]	; (35b4 <log_output_msg2_process+0x10c>)
    3552:	e000      	b.n	3556 <log_output_msg2_process+0xae>
    3554:	4b18      	ldr	r3, [pc, #96]	; (35b8 <log_output_msg2_process+0x110>)
    3556:	69ba      	ldr	r2, [r7, #24]
    3558:	68f9      	ldr	r1, [r7, #12]
    355a:	4618      	mov	r0, r3
    355c:	f7ff fd52 	bl	3004 <cbpprintf>
    3560:	6178      	str	r0, [r7, #20]

		(void)err;
		__ASSERT_NO_MSG(err >= 0);
	}

	data = log_msg2_get_data(msg, &len);
    3562:	f107 0310 	add.w	r3, r7, #16
    3566:	4619      	mov	r1, r3
    3568:	68b8      	ldr	r0, [r7, #8]
    356a:	f006 fa1a 	bl	99a2 <log_msg2_get_data>
    356e:	61b8      	str	r0, [r7, #24]
	if (len) {
    3570:	693b      	ldr	r3, [r7, #16]
    3572:	2b00      	cmp	r3, #0
    3574:	d008      	beq.n	3588 <log_output_msg2_process+0xe0>
		log_msg2_hexdump(output, data, len, prefix_offset, flags);
    3576:	693a      	ldr	r2, [r7, #16]
    3578:	6af9      	ldr	r1, [r7, #44]	; 0x2c
    357a:	687b      	ldr	r3, [r7, #4]
    357c:	9300      	str	r3, [sp, #0]
    357e:	460b      	mov	r3, r1
    3580:	69b9      	ldr	r1, [r7, #24]
    3582:	68f8      	ldr	r0, [r7, #12]
    3584:	f006 fadd 	bl	9b42 <log_msg2_hexdump>
	}

	if (!raw_string) {
    3588:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
    358c:	f083 0301 	eor.w	r3, r3, #1
    3590:	b2db      	uxtb	r3, r3
    3592:	2b00      	cmp	r3, #0
    3594:	d006      	beq.n	35a4 <log_output_msg2_process+0xfc>
		postfix_print(output, flags, level);
    3596:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
    359a:	461a      	mov	r2, r3
    359c:	6879      	ldr	r1, [r7, #4]
    359e:	68f8      	ldr	r0, [r7, #12]
    35a0:	f006 faf3 	bl	9b8a <postfix_print>
	}

	log_output_flush(output);
    35a4:	68f8      	ldr	r0, [r7, #12]
    35a6:	f006 fa91 	bl	9acc <log_output_flush>
}
    35aa:	bf00      	nop
    35ac:	3730      	adds	r7, #48	; 0x30
    35ae:	46bd      	mov	sp, r7
    35b0:	bd80      	pop	{r7, pc}
    35b2:	bf00      	nop
    35b4:	00009a69 	.word	0x00009a69
    35b8:	00009a23 	.word	0x00009a23

000035bc <log_output_dropped_process>:
	postfix_print(output, flags, level);
	log_output_flush(output);
}

void log_output_dropped_process(const struct log_output *output, uint32_t cnt)
{
    35bc:	b580      	push	{r7, lr}
    35be:	b086      	sub	sp, #24
    35c0:	af00      	add	r7, sp, #0
    35c2:	6078      	str	r0, [r7, #4]
    35c4:	6039      	str	r1, [r7, #0]
	char buf[5];
	int len;
	static const char prefix[] = DROPPED_COLOR_PREFIX "--- ";
	static const char postfix[] =
			" messages dropped ---\r\n" DROPPED_COLOR_POSTFIX;
	log_output_func_t outf = output->func;
    35c6:	687b      	ldr	r3, [r7, #4]
    35c8:	681b      	ldr	r3, [r3, #0]
    35ca:	617b      	str	r3, [r7, #20]

	cnt = MIN(cnt, 9999);
    35cc:	683b      	ldr	r3, [r7, #0]
    35ce:	f242 720f 	movw	r2, #9999	; 0x270f
    35d2:	4293      	cmp	r3, r2
    35d4:	bf28      	it	cs
    35d6:	4613      	movcs	r3, r2
    35d8:	603b      	str	r3, [r7, #0]
	len = snprintk(buf, sizeof(buf), "%d", cnt);
    35da:	f107 0008 	add.w	r0, r7, #8
    35de:	683b      	ldr	r3, [r7, #0]
    35e0:	4a10      	ldr	r2, [pc, #64]	; (3624 <log_output_dropped_process+0x68>)
    35e2:	2105      	movs	r1, #5
    35e4:	f005 f840 	bl	8668 <snprintk>
    35e8:	6138      	str	r0, [r7, #16]

	buffer_write(outf, (uint8_t *)prefix, sizeof(prefix) - 1,
		     output->control_block->ctx);
    35ea:	687b      	ldr	r3, [r7, #4]
    35ec:	685b      	ldr	r3, [r3, #4]
	buffer_write(outf, (uint8_t *)prefix, sizeof(prefix) - 1,
    35ee:	685b      	ldr	r3, [r3, #4]
    35f0:	220b      	movs	r2, #11
    35f2:	490d      	ldr	r1, [pc, #52]	; (3628 <log_output_dropped_process+0x6c>)
    35f4:	6978      	ldr	r0, [r7, #20]
    35f6:	f006 fa4c 	bl	9a92 <buffer_write>
	buffer_write(outf, buf, len, output->control_block->ctx);
    35fa:	693a      	ldr	r2, [r7, #16]
    35fc:	687b      	ldr	r3, [r7, #4]
    35fe:	685b      	ldr	r3, [r3, #4]
    3600:	685b      	ldr	r3, [r3, #4]
    3602:	f107 0108 	add.w	r1, r7, #8
    3606:	6978      	ldr	r0, [r7, #20]
    3608:	f006 fa43 	bl	9a92 <buffer_write>
	buffer_write(outf, (uint8_t *)postfix, sizeof(postfix) - 1,
		     output->control_block->ctx);
    360c:	687b      	ldr	r3, [r7, #4]
    360e:	685b      	ldr	r3, [r3, #4]
	buffer_write(outf, (uint8_t *)postfix, sizeof(postfix) - 1,
    3610:	685b      	ldr	r3, [r3, #4]
    3612:	221b      	movs	r2, #27
    3614:	4905      	ldr	r1, [pc, #20]	; (362c <log_output_dropped_process+0x70>)
    3616:	6978      	ldr	r0, [r7, #20]
    3618:	f006 fa3b 	bl	9a92 <buffer_write>
}
    361c:	bf00      	nop
    361e:	3718      	adds	r7, #24
    3620:	46bd      	mov	sp, r7
    3622:	bd80      	pop	{r7, pc}
    3624:	0000b934 	.word	0x0000b934
    3628:	0000bfe4 	.word	0x0000bfe4
    362c:	0000bff0 	.word	0x0000bff0

00003630 <log_output_timestamp_freq_set>:

void log_output_timestamp_freq_set(uint32_t frequency)
{
    3630:	b480      	push	{r7}
    3632:	b083      	sub	sp, #12
    3634:	af00      	add	r7, sp, #0
    3636:	6078      	str	r0, [r7, #4]
	timestamp_div = 1U;
    3638:	4b0b      	ldr	r3, [pc, #44]	; (3668 <log_output_timestamp_freq_set+0x38>)
    363a:	2201      	movs	r2, #1
    363c:	601a      	str	r2, [r3, #0]
	/* There is no point to have frequency higher than 1MHz (ns are not
	 * printed) and too high frequency leads to overflows in calculations.
	 */
	while (frequency > 1000000) {
    363e:	e007      	b.n	3650 <log_output_timestamp_freq_set+0x20>
		frequency /= 2U;
    3640:	687b      	ldr	r3, [r7, #4]
    3642:	085b      	lsrs	r3, r3, #1
    3644:	607b      	str	r3, [r7, #4]
		timestamp_div *= 2U;
    3646:	4b08      	ldr	r3, [pc, #32]	; (3668 <log_output_timestamp_freq_set+0x38>)
    3648:	681b      	ldr	r3, [r3, #0]
    364a:	005b      	lsls	r3, r3, #1
    364c:	4a06      	ldr	r2, [pc, #24]	; (3668 <log_output_timestamp_freq_set+0x38>)
    364e:	6013      	str	r3, [r2, #0]
	while (frequency > 1000000) {
    3650:	687b      	ldr	r3, [r7, #4]
    3652:	4a06      	ldr	r2, [pc, #24]	; (366c <log_output_timestamp_freq_set+0x3c>)
    3654:	4293      	cmp	r3, r2
    3656:	d8f3      	bhi.n	3640 <log_output_timestamp_freq_set+0x10>
	}

	freq = frequency;
    3658:	4a05      	ldr	r2, [pc, #20]	; (3670 <log_output_timestamp_freq_set+0x40>)
    365a:	687b      	ldr	r3, [r7, #4]
    365c:	6013      	str	r3, [r2, #0]
}
    365e:	bf00      	nop
    3660:	370c      	adds	r7, #12
    3662:	46bd      	mov	sp, r7
    3664:	bc80      	pop	{r7}
    3666:	4770      	bx	lr
    3668:	20000710 	.word	0x20000710
    366c:	000f4240 	.word	0x000f4240
    3670:	2000070c 	.word	0x2000070c

00003674 <char_out>:
		uart_poll_out(uart_dev, c);
	}
}

static int char_out(uint8_t *data, size_t length, void *ctx)
{
    3674:	b580      	push	{r7, lr}
    3676:	b086      	sub	sp, #24
    3678:	af00      	add	r7, sp, #0
    367a:	60f8      	str	r0, [r7, #12]
    367c:	60b9      	str	r1, [r7, #8]
    367e:	607a      	str	r2, [r7, #4]
		dict_char_out_hex(data, length);
		return length;
	}

	if (!IS_ENABLED(CONFIG_LOG_BACKEND_UART_ASYNC) || in_panic || !use_async) {
		for (size_t i = 0; i < length; i++) {
    3680:	2300      	movs	r3, #0
    3682:	617b      	str	r3, [r7, #20]
    3684:	e00b      	b.n	369e <char_out+0x2a>
			uart_poll_out(uart_dev, data[i]);
    3686:	4b0a      	ldr	r3, [pc, #40]	; (36b0 <char_out+0x3c>)
    3688:	6818      	ldr	r0, [r3, #0]
    368a:	68fa      	ldr	r2, [r7, #12]
    368c:	697b      	ldr	r3, [r7, #20]
    368e:	4413      	add	r3, r2
    3690:	781b      	ldrb	r3, [r3, #0]
    3692:	4619      	mov	r1, r3
    3694:	f006 fb79 	bl	9d8a <uart_poll_out>
		for (size_t i = 0; i < length; i++) {
    3698:	697b      	ldr	r3, [r7, #20]
    369a:	3301      	adds	r3, #1
    369c:	617b      	str	r3, [r7, #20]
    369e:	697a      	ldr	r2, [r7, #20]
    36a0:	68bb      	ldr	r3, [r7, #8]
    36a2:	429a      	cmp	r2, r3
    36a4:	d3ef      	bcc.n	3686 <char_out+0x12>
		}

		return length;
    36a6:	68bb      	ldr	r3, [r7, #8]
	__ASSERT_NO_MSG(err == 0);

	(void)err;

	return length;
}
    36a8:	4618      	mov	r0, r3
    36aa:	3718      	adds	r7, #24
    36ac:	46bd      	mov	sp, r7
    36ae:	bd80      	pop	{r7, pc}
    36b0:	20000714 	.word	0x20000714

000036b4 <process>:
	log_backend_std_put(&log_output_uart, flag, msg);
}

static void process(const struct log_backend *const backend,
		union log_msg2_generic *msg)
{
    36b4:	b580      	push	{r7, lr}
    36b6:	b084      	sub	sp, #16
    36b8:	af00      	add	r7, sp, #0
    36ba:	6078      	str	r0, [r7, #4]
    36bc:	6039      	str	r1, [r7, #0]
	uint32_t flags = log_backend_std_get_flags();
    36be:	f006 fb26 	bl	9d0e <log_backend_std_get_flags>
    36c2:	60f8      	str	r0, [r7, #12]

	log_format_func_t log_output_func = log_format_func_t_get(log_format_current);
    36c4:	4b07      	ldr	r3, [pc, #28]	; (36e4 <process+0x30>)
    36c6:	681b      	ldr	r3, [r3, #0]
    36c8:	4618      	mov	r0, r3
    36ca:	f7ff f9d3 	bl	2a74 <log_format_func_t_get>
    36ce:	60b8      	str	r0, [r7, #8]

	log_output_func(&log_output_uart, &msg->log, flags);
    36d0:	6839      	ldr	r1, [r7, #0]
    36d2:	68bb      	ldr	r3, [r7, #8]
    36d4:	68fa      	ldr	r2, [r7, #12]
    36d6:	4804      	ldr	r0, [pc, #16]	; (36e8 <process+0x34>)
    36d8:	4798      	blx	r3
}
    36da:	bf00      	nop
    36dc:	3710      	adds	r7, #16
    36de:	46bd      	mov	sp, r7
    36e0:	bd80      	pop	{r7, pc}
    36e2:	bf00      	nop
    36e4:	20000718 	.word	0x20000718
    36e8:	0000c00c 	.word	0x0000c00c

000036ec <format_set>:

static int format_set(const struct log_backend *const backend, uint32_t log_type)
{
    36ec:	b480      	push	{r7}
    36ee:	b083      	sub	sp, #12
    36f0:	af00      	add	r7, sp, #0
    36f2:	6078      	str	r0, [r7, #4]
    36f4:	6039      	str	r1, [r7, #0]
	log_format_current = log_type;
    36f6:	4a04      	ldr	r2, [pc, #16]	; (3708 <format_set+0x1c>)
    36f8:	683b      	ldr	r3, [r7, #0]
    36fa:	6013      	str	r3, [r2, #0]
	return 0;
    36fc:	2300      	movs	r3, #0
}
    36fe:	4618      	mov	r0, r3
    3700:	370c      	adds	r7, #12
    3702:	46bd      	mov	sp, r7
    3704:	bc80      	pop	{r7}
    3706:	4770      	bx	lr
    3708:	20000718 	.word	0x20000718

0000370c <log_backend_uart_init>:

static void log_backend_uart_init(struct log_backend const *const backend)
{
    370c:	b480      	push	{r7}
    370e:	b085      	sub	sp, #20
    3710:	af00      	add	r7, sp, #0
    3712:	6078      	str	r0, [r7, #4]
	uart_dev = DEVICE_DT_GET(DT_CHOSEN(zephyr_console));
    3714:	4b03      	ldr	r3, [pc, #12]	; (3724 <log_backend_uart_init+0x18>)
    3716:	4a04      	ldr	r2, [pc, #16]	; (3728 <log_backend_uart_init+0x1c>)
    3718:	601a      	str	r2, [r3, #0]
		} else {
			LOG_WRN("Failed to initialize asynchronous mode (err:%d). "
				"Fallback to polling.", err);
		}
	}
}
    371a:	3714      	adds	r7, #20
    371c:	46bd      	mov	sp, r7
    371e:	bc80      	pop	{r7}
    3720:	4770      	bx	lr
    3722:	bf00      	nop
    3724:	20000714 	.word	0x20000714
    3728:	0000b604 	.word	0x0000b604

0000372c <panic>:

static void panic(struct log_backend const *const backend)
{
    372c:	b580      	push	{r7, lr}
    372e:	b082      	sub	sp, #8
    3730:	af00      	add	r7, sp, #0
    3732:	6078      	str	r0, [r7, #4]
	in_panic = true;
    3734:	4b04      	ldr	r3, [pc, #16]	; (3748 <panic+0x1c>)
    3736:	2201      	movs	r2, #1
    3738:	701a      	strb	r2, [r3, #0]
	log_backend_std_panic(&log_output_uart);
    373a:	4804      	ldr	r0, [pc, #16]	; (374c <panic+0x20>)
    373c:	f006 fafa 	bl	9d34 <log_backend_std_panic>
}
    3740:	bf00      	nop
    3742:	3708      	adds	r7, #8
    3744:	46bd      	mov	sp, r7
    3746:	bd80      	pop	{r7, pc}
    3748:	2000088b 	.word	0x2000088b
    374c:	0000c00c 	.word	0x0000c00c

00003750 <dropped>:

static void dropped(const struct log_backend *const backend, uint32_t cnt)
{
    3750:	b580      	push	{r7, lr}
    3752:	b082      	sub	sp, #8
    3754:	af00      	add	r7, sp, #0
    3756:	6078      	str	r0, [r7, #4]
    3758:	6039      	str	r1, [r7, #0]
	ARG_UNUSED(backend);

	if (IS_ENABLED(CONFIG_LOG_BACKEND_UART_OUTPUT_DICTIONARY)) {
		log_dict_output_dropped_process(&log_output_uart, cnt);
	} else {
		log_backend_std_dropped(&log_output_uart, cnt);
    375a:	6839      	ldr	r1, [r7, #0]
    375c:	4803      	ldr	r0, [pc, #12]	; (376c <dropped+0x1c>)
    375e:	f006 faf4 	bl	9d4a <log_backend_std_dropped>
	}
}
    3762:	bf00      	nop
    3764:	3708      	adds	r7, #8
    3766:	46bd      	mov	sp, r7
    3768:	bd80      	pop	{r7, pc}
    376a:	bf00      	nop
    376c:	0000c00c 	.word	0x0000c00c

00003770 <__do_init_array_aux>:

/**
 * @brief Execute initialization routines referenced in .init_array section
 */
void __do_init_array_aux(void)
{
    3770:	b580      	push	{r7, lr}
    3772:	b082      	sub	sp, #8
    3774:	af00      	add	r7, sp, #0
	for (func_ptr *func = __init_array_start;
    3776:	4b09      	ldr	r3, [pc, #36]	; (379c <__do_init_array_aux+0x2c>)
    3778:	607b      	str	r3, [r7, #4]
    377a:	e005      	b.n	3788 <__do_init_array_aux+0x18>
		func < __init_array_end;
		func++) {
		(*func)();
    377c:	687b      	ldr	r3, [r7, #4]
    377e:	681b      	ldr	r3, [r3, #0]
    3780:	4798      	blx	r3
		func++) {
    3782:	687b      	ldr	r3, [r7, #4]
    3784:	3304      	adds	r3, #4
    3786:	607b      	str	r3, [r7, #4]
	for (func_ptr *func = __init_array_start;
    3788:	687b      	ldr	r3, [r7, #4]
    378a:	4a05      	ldr	r2, [pc, #20]	; (37a0 <__do_init_array_aux+0x30>)
    378c:	4293      	cmp	r3, r2
    378e:	d3f5      	bcc.n	377c <__do_init_array_aux+0xc>
	}
}
    3790:	bf00      	nop
    3792:	bf00      	nop
    3794:	3708      	adds	r7, #8
    3796:	46bd      	mov	sp, r7
    3798:	bd80      	pop	{r7, pc}
    379a:	bf00      	nop
    379c:	0000b7c0 	.word	0x0000b7c0
    37a0:	0000b7c0 	.word	0x0000b7c0

000037a4 <__do_global_ctors_aux>:
 *
 * This routine is invoked by the kernel prior to the execution of the
 * application's main().
 */
void __do_global_ctors_aux(void)
{
    37a4:	b580      	push	{r7, lr}
    37a6:	b082      	sub	sp, #8
    37a8:	af00      	add	r7, sp, #0
	unsigned int nCtors;

	nCtors = (unsigned long)__CTOR_LIST__[0];
    37aa:	4b09      	ldr	r3, [pc, #36]	; (37d0 <__do_global_ctors_aux+0x2c>)
    37ac:	681b      	ldr	r3, [r3, #0]
    37ae:	607b      	str	r3, [r7, #4]

	while (nCtors >= 1U) {
    37b0:	e006      	b.n	37c0 <__do_global_ctors_aux+0x1c>
		__CTOR_LIST__[nCtors--]();
    37b2:	687b      	ldr	r3, [r7, #4]
    37b4:	1e5a      	subs	r2, r3, #1
    37b6:	607a      	str	r2, [r7, #4]
    37b8:	4a05      	ldr	r2, [pc, #20]	; (37d0 <__do_global_ctors_aux+0x2c>)
    37ba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    37be:	4798      	blx	r3
	while (nCtors >= 1U) {
    37c0:	687b      	ldr	r3, [r7, #4]
    37c2:	2b00      	cmp	r3, #0
    37c4:	d1f5      	bne.n	37b2 <__do_global_ctors_aux+0xe>
	}
}
    37c6:	bf00      	nop
    37c8:	bf00      	nop
    37ca:	3708      	adds	r7, #8
    37cc:	46bd      	mov	sp, r7
    37ce:	bd80      	pop	{r7, pc}
    37d0:	0000b7b8 	.word	0x0000b7b8

000037d4 <z_arm_cpu_idle_init>:
 * void z_arm_cpu_idle_init(void);
 */

SECTION_FUNC(TEXT, z_arm_cpu_idle_init)
#if defined(CONFIG_CPU_CORTEX_M)
	ldr	r1, =_SCB_SCR
    37d4:	4901      	ldr	r1, [pc, #4]	; (37dc <z_arm_cpu_idle_init+0x8>)
	movs.n	r2, #_SCR_INIT_BITS
    37d6:	2210      	movs	r2, #16
	str	r2, [r1]
    37d8:	600a      	str	r2, [r1, #0]
#endif
	bx	lr
    37da:	4770      	bx	lr
	ldr	r1, =_SCB_SCR
    37dc:	e000ed10 	.word	0xe000ed10

000037e0 <arch_cpu_idle>:
	 * before entering low power state.
	 *
	 * Set PRIMASK before configuring BASEPRI to prevent interruption
	 * before wake-up.
	 */
	cpsid	i
    37e0:	b672      	cpsid	i

	/*
	 * Set wake-up interrupt priority to the lowest and synchronise to
	 * ensure that this is visible to the WFI instruction.
	 */
	eors.n	r0, r0
    37e2:	4040      	eors	r0, r0
	msr	BASEPRI, r0
    37e4:	f380 8811 	msr	BASEPRI, r0
	isb
    37e8:	f3bf 8f6f 	isb	sy

	/*
	 * Wait for all memory transactions to complete before entering low
	 * power state.
	 */
	dsb
    37ec:	f3bf 8f4f 	dsb	sy

	/* Enter low power state */
	wfi
    37f0:	bf30      	wfi

	/*
	 * Clear PRIMASK and flush instruction buffer to immediately service
	 * the wake-up interrupt.
	 */
	cpsie	i
    37f2:	b662      	cpsie	i
	isb
    37f4:	f3bf 8f6f 	isb	sy

	bx	lr
    37f8:	4770      	bx	lr
    37fa:	bf00      	nop

000037fc <esf_dump>:
#include <kernel_arch_data.h>
#include <zephyr/logging/log.h>
LOG_MODULE_DECLARE(os, CONFIG_KERNEL_LOG_LEVEL);

static void esf_dump(const z_arch_esf_t *esf)
{
    37fc:	b580      	push	{r7, lr}
    37fe:	b09c      	sub	sp, #112	; 0x70
    3800:	af06      	add	r7, sp, #24
    3802:	6078      	str	r0, [r7, #4]
	LOG_ERR("r0/a1:  0x%08x  r1/a2:  0x%08x  r2/a3:  0x%08x",
    3804:	2303      	movs	r3, #3
    3806:	2b00      	cmp	r3, #0
    3808:	d021      	beq.n	384e <esf_dump+0x52>
    380a:	f006 fad5 	bl	9db8 <k_is_user_context>
    380e:	4603      	mov	r3, r0
    3810:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    3814:	2300      	movs	r3, #0
    3816:	627b      	str	r3, [r7, #36]	; 0x24
    3818:	4b42      	ldr	r3, [pc, #264]	; (3924 <esf_dump+0x128>)
    381a:	681b      	ldr	r3, [r3, #0]
    381c:	62fb      	str	r3, [r7, #44]	; 0x2c
    381e:	687b      	ldr	r3, [r7, #4]
    3820:	681b      	ldr	r3, [r3, #0]
    3822:	687a      	ldr	r2, [r7, #4]
    3824:	6852      	ldr	r2, [r2, #4]
    3826:	6879      	ldr	r1, [r7, #4]
    3828:	6889      	ldr	r1, [r1, #8]
    382a:	9105      	str	r1, [sp, #20]
    382c:	9204      	str	r2, [sp, #16]
    382e:	9303      	str	r3, [sp, #12]
    3830:	4b3d      	ldr	r3, [pc, #244]	; (3928 <esf_dump+0x12c>)
    3832:	9302      	str	r3, [sp, #8]
    3834:	2300      	movs	r3, #0
    3836:	9301      	str	r3, [sp, #4]
    3838:	2300      	movs	r3, #0
    383a:	9300      	str	r3, [sp, #0]
    383c:	2300      	movs	r3, #0
    383e:	2201      	movs	r2, #1
    3840:	6af9      	ldr	r1, [r7, #44]	; 0x2c
    3842:	2000      	movs	r0, #0
    3844:	f006 fabf 	bl	9dc6 <z_log_msg2_runtime_create>
    3848:	2300      	movs	r3, #0
    384a:	633b      	str	r3, [r7, #48]	; 0x30
    384c:	e000      	b.n	3850 <esf_dump+0x54>
    384e:	bf00      	nop
		esf->basic.a1, esf->basic.a2, esf->basic.a3);
	LOG_ERR("r3/a4:  0x%08x r12/ip:  0x%08x r14/lr:  0x%08x",
    3850:	2303      	movs	r3, #3
    3852:	2b00      	cmp	r3, #0
    3854:	d021      	beq.n	389a <esf_dump+0x9e>
    3856:	f006 faaf 	bl	9db8 <k_is_user_context>
    385a:	4603      	mov	r3, r0
    385c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
    3860:	2300      	movs	r3, #0
    3862:	61fb      	str	r3, [r7, #28]
    3864:	4b2f      	ldr	r3, [pc, #188]	; (3924 <esf_dump+0x128>)
    3866:	681b      	ldr	r3, [r3, #0]
    3868:	63bb      	str	r3, [r7, #56]	; 0x38
    386a:	687b      	ldr	r3, [r7, #4]
    386c:	68db      	ldr	r3, [r3, #12]
    386e:	687a      	ldr	r2, [r7, #4]
    3870:	6912      	ldr	r2, [r2, #16]
    3872:	6879      	ldr	r1, [r7, #4]
    3874:	6949      	ldr	r1, [r1, #20]
    3876:	9105      	str	r1, [sp, #20]
    3878:	9204      	str	r2, [sp, #16]
    387a:	9303      	str	r3, [sp, #12]
    387c:	4b2b      	ldr	r3, [pc, #172]	; (392c <esf_dump+0x130>)
    387e:	9302      	str	r3, [sp, #8]
    3880:	2300      	movs	r3, #0
    3882:	9301      	str	r3, [sp, #4]
    3884:	2300      	movs	r3, #0
    3886:	9300      	str	r3, [sp, #0]
    3888:	2300      	movs	r3, #0
    388a:	2201      	movs	r2, #1
    388c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
    388e:	2000      	movs	r0, #0
    3890:	f006 fa99 	bl	9dc6 <z_log_msg2_runtime_create>
    3894:	2300      	movs	r3, #0
    3896:	63fb      	str	r3, [r7, #60]	; 0x3c
    3898:	e000      	b.n	389c <esf_dump+0xa0>
    389a:	bf00      	nop
		esf->basic.a4, esf->basic.ip, esf->basic.lr);
	LOG_ERR(" xpsr:  0x%08x", esf->basic.xpsr);
    389c:	2303      	movs	r3, #3
    389e:	2b00      	cmp	r3, #0
    38a0:	d01b      	beq.n	38da <esf_dump+0xde>
    38a2:	f006 fa89 	bl	9db8 <k_is_user_context>
    38a6:	4603      	mov	r3, r0
    38a8:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    38ac:	2300      	movs	r3, #0
    38ae:	617b      	str	r3, [r7, #20]
    38b0:	4b1c      	ldr	r3, [pc, #112]	; (3924 <esf_dump+0x128>)
    38b2:	681b      	ldr	r3, [r3, #0]
    38b4:	643b      	str	r3, [r7, #64]	; 0x40
    38b6:	687b      	ldr	r3, [r7, #4]
    38b8:	69db      	ldr	r3, [r3, #28]
    38ba:	9303      	str	r3, [sp, #12]
    38bc:	4b1c      	ldr	r3, [pc, #112]	; (3930 <esf_dump+0x134>)
    38be:	9302      	str	r3, [sp, #8]
    38c0:	2300      	movs	r3, #0
    38c2:	9301      	str	r3, [sp, #4]
    38c4:	2300      	movs	r3, #0
    38c6:	9300      	str	r3, [sp, #0]
    38c8:	2300      	movs	r3, #0
    38ca:	2201      	movs	r2, #1
    38cc:	6c39      	ldr	r1, [r7, #64]	; 0x40
    38ce:	2000      	movs	r0, #0
    38d0:	f006 fa79 	bl	9dc6 <z_log_msg2_runtime_create>
    38d4:	2300      	movs	r3, #0
    38d6:	64bb      	str	r3, [r7, #72]	; 0x48
    38d8:	e000      	b.n	38dc <esf_dump+0xe0>
    38da:	bf00      	nop
	}

	LOG_ERR("EXC_RETURN: 0x%0x", esf->extra_info.exc_return);

#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
	LOG_ERR("Faulting instruction address (r15/pc): 0x%08x",
    38dc:	2303      	movs	r3, #3
    38de:	2b00      	cmp	r3, #0
    38e0:	d101      	bne.n	38e6 <esf_dump+0xea>
    38e2:	bf00      	nop
		esf->basic.pc);
}
    38e4:	e01a      	b.n	391c <esf_dump+0x120>
	LOG_ERR("Faulting instruction address (r15/pc): 0x%08x",
    38e6:	f006 fa67 	bl	9db8 <k_is_user_context>
    38ea:	4603      	mov	r3, r0
    38ec:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
    38f0:	2300      	movs	r3, #0
    38f2:	60fb      	str	r3, [r7, #12]
    38f4:	4b0b      	ldr	r3, [pc, #44]	; (3924 <esf_dump+0x128>)
    38f6:	681b      	ldr	r3, [r3, #0]
    38f8:	653b      	str	r3, [r7, #80]	; 0x50
    38fa:	687b      	ldr	r3, [r7, #4]
    38fc:	699b      	ldr	r3, [r3, #24]
    38fe:	9303      	str	r3, [sp, #12]
    3900:	4b0c      	ldr	r3, [pc, #48]	; (3934 <esf_dump+0x138>)
    3902:	9302      	str	r3, [sp, #8]
    3904:	2300      	movs	r3, #0
    3906:	9301      	str	r3, [sp, #4]
    3908:	2300      	movs	r3, #0
    390a:	9300      	str	r3, [sp, #0]
    390c:	2300      	movs	r3, #0
    390e:	2201      	movs	r2, #1
    3910:	6d39      	ldr	r1, [r7, #80]	; 0x50
    3912:	2000      	movs	r0, #0
    3914:	f006 fa57 	bl	9dc6 <z_log_msg2_runtime_create>
    3918:	2300      	movs	r3, #0
    391a:	657b      	str	r3, [r7, #84]	; 0x54
}
    391c:	bf00      	nop
    391e:	3758      	adds	r7, #88	; 0x58
    3920:	46bd      	mov	sp, r7
    3922:	bd80      	pop	{r7, pc}
    3924:	2000000c 	.word	0x2000000c
    3928:	0000b958 	.word	0x0000b958
    392c:	0000b988 	.word	0x0000b988
    3930:	0000b9b8 	.word	0x0000b9b8
    3934:	0000b9c8 	.word	0x0000b9c8

00003938 <z_SysNmiOnReset>:
_ASM_FILE_PROLOGUE

GTEXT(z_SysNmiOnReset)

SECTION_FUNC(TEXT, z_SysNmiOnReset)
    wfi
    3938:	bf30      	wfi
    b z_SysNmiOnReset
    393a:	f7ff bffd 	b.w	3938 <z_SysNmiOnReset>
    393e:	bf00      	nop

00003940 <relocate_vector_table>:
#ifdef CONFIG_CPU_CORTEX_M_HAS_VTOR

#define VECTOR_ADDRESS ((uintptr_t)_vector_start)

static inline void relocate_vector_table(void)
{
    3940:	b480      	push	{r7}
    3942:	af00      	add	r7, sp, #0
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
    3944:	4b08      	ldr	r3, [pc, #32]	; (3968 <relocate_vector_table+0x28>)
    3946:	4a09      	ldr	r2, [pc, #36]	; (396c <relocate_vector_table+0x2c>)
    3948:	f023 4360 	bic.w	r3, r3, #3758096384	; 0xe0000000
    394c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
    3950:	6093      	str	r3, [r2, #8]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
    3952:	f3bf 8f4f 	dsb	sy
}
    3956:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
    3958:	f3bf 8f6f 	isb	sy
}
    395c:	bf00      	nop
	__DSB();
	__ISB();
}
    395e:	bf00      	nop
    3960:	46bd      	mov	sp, r7
    3962:	bc80      	pop	{r7}
    3964:	4770      	bx	lr
    3966:	bf00      	nop
    3968:	00000000 	.word	0x00000000
    396c:	e000ed00 	.word	0xe000ed00

00003970 <z_arm_pendsv>:
    pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_INSTRUMENT_THREAD_SWITCHING */

    /* load _kernel into r1 and current k_thread into r2 */
    ldr r1, =_kernel
    3970:	490f      	ldr	r1, [pc, #60]	; (39b0 <z_arm_pendsv+0x40>)
    ldr r2, [r1, #_kernel_offset_to_current]
    3972:	688a      	ldr	r2, [r1, #8]
    /* Store LSB of LR (EXC_RETURN) to the thread's 'mode' word. */
    strb lr, [r2, #_thread_offset_to_mode_exc_return]
#endif

    /* addr of callee-saved regs in thread in r0 */
    ldr r0, =_thread_offset_to_callee_saved
    3974:	f04f 0030 	mov.w	r0, #48	; 0x30
    add r0, r2
    3978:	4410      	add	r0, r2

    /* save callee-saved + psp in thread */
#if defined(CONFIG_CPU_CORTEX_M)
    mrs ip, PSP
    397a:	f3ef 8c09 	mrs	ip, PSP
    mov r6, r11
    mov r7, ip
    /* store r8-12 */
    stmea r0!, {r3-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    stmia r0, {v1-v8, ip}
    397e:	e880 1ff0 	stmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}

    /* Protect the kernel state while we play with the thread lists */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    3982:	2020      	movs	r0, #32
    msr BASEPRI_MAX, r0
    3984:	f380 8812 	msr	BASEPRI_MAX, r0
    isb /* Make the effect of disabling interrupts be realized immediately */
    3988:	f3bf 8f6f 	isb	sy
     * the new thread is context-switched in since all decisions
     * to pend PendSV have been taken with the current kernel
     * state and this is what we're handling currently.
     */
#if defined(CONFIG_CPU_CORTEX_M)
    ldr v4, =_SCS_ICSR
    398c:	4f09      	ldr	r7, [pc, #36]	; (39b4 <z_arm_pendsv+0x44>)
    ldr v3, =_SCS_ICSR_UNPENDSV
    398e:	f04f 6600 	mov.w	r6, #134217728	; 0x8000000
#endif

    /* _kernel is still in r1 */

    /* fetch the thread to run from the ready queue cache */
    ldr r2, [r1, #_kernel_offset_to_ready_q_cache]
    3992:	698a      	ldr	r2, [r1, #24]

    str r2, [r1, #_kernel_offset_to_current]
    3994:	608a      	str	r2, [r1, #8]
     * has been handled.
     */

    /* _SCS_ICSR is still in v4 and _SCS_ICSR_UNPENDSV in v3 */
#if defined(CONFIG_CPU_CORTEX_M)
    str v3, [v4, #0]
    3996:	603e      	str	r6, [r7, #0]

    ldr r0, [r4]
    movs.n r3, #0
    str r3, [r4]
#else
    ldr r0, [r2, #_thread_offset_to_basepri]
    3998:	6f10      	ldr	r0, [r2, #112]	; 0x70
    movs r3, #0
    399a:	2300      	movs	r3, #0
    str r3, [r2, #_thread_offset_to_basepri]
    399c:	6713      	str	r3, [r2, #112]	; 0x70
    /* restore r4-r7, go back 9*4 bytes to the start of the stored block */
    subs r0, #36
    ldmia r0!, {r4-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    /* restore BASEPRI for the incoming thread */
    msr BASEPRI, r0
    399e:	f380 8811 	msr	BASEPRI, r0
    isb

#endif

    /* load callee-saved + psp from thread */
    add r0, r2, #_thread_offset_to_callee_saved
    39a2:	f102 0030 	add.w	r0, r2, #48	; 0x30
    ldmia r0, {v1-v8, ip}
    39a6:	e890 1ff0 	ldmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
    msr PSP, ip
    39aa:	f38c 8809 	msr	PSP, ip

    /*
     * Cortex-M: return from PendSV exception
     * Cortex-R: return to the caller (z_arm_{exc,int}_exit, or z_arm_svc)
     */
    bx lr
    39ae:	4770      	bx	lr
    ldr r1, =_kernel
    39b0:	2000074c 	.word	0x2000074c
    ldr v4, =_SCS_ICSR
    39b4:	e000ed04 	.word	0xe000ed04

000039b8 <z_arm_svc>:
  bne _stack_frame_endif
_stack_frame_msp:
  mrs r0, MSP
_stack_frame_endif:
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    tst lr, #_EXC_RETURN_SPSEL_Msk /* did we come from thread mode ? */
    39b8:	f01e 0f04 	tst.w	lr, #4
    the "eq" / "ne" suffixes on the MRS instruction. Isn't this 
    overkill? Won't the processor already execute a single one of these
    based on the ITE EQ statement?
    */

    ite eq  /* if zero (equal), came from handler mode */
    39bc:	bf0c      	ite	eq
        mrseq r0, MSP   /* handler mode, stack frame is on MSP */
    39be:	f3ef 8008 	mrseq	r0, MSP
        mrsne r0, PSP   /* thread mode, stack frame is on PSP */
    39c2:	f3ef 8009 	mrsne	r0, PSP
#endif

    /* Figure out what SVC call number was invoked */

    ldr r1, [r0, #24]   /* grab address of PC from stack frame */
    39c6:	6981      	ldr	r1, [r0, #24]
     */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    subs r1, r1, #2
    ldrb r1, [r1]
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    ldrb r1, [r1, #-2]
    39c8:	f811 1c02 	ldrb.w	r1, [r1, #-2]
    bne _oops

#endif /* CONFIG_USERSPACE */

    /* Check if SVC == 2, software has requested a kernel panic / oops */
    cmp r1, #_SVC_CALL_RUNTIME_EXCEPT
    39cc:	2902      	cmp	r1, #2
    beq _oops
    39ce:	d006      	beq.n	39de <_oops>

    cmp r1, #_SVC_CALL_CONTEXT_SWITCH
    39d0:	2900      	cmp	r1, #0
    beq _context_switch
    39d2:	d0ff      	beq.n	39d4 <_context_switch>

000039d4 <_context_switch>:
    which are the argumenst to the _arch_context_switch function.

    R0 currently contains the stackframe pointer. Lets move that to R2, 
    since we need to restore the value of R0.
    */
    mov r2, r0
    39d4:	4602      	mov	r2, r0
    ldr r0, [r2]     /* grab previous contents of R0 from the stack frame */ 
    movs r3, #4      /* ARMv6 doesn't support loading from a register + immediate offset... */
    ldr r1, [r2, r3] /* grab previous contents of R1 from the stack frame */

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    ldr r0, [r2]     /* grab previous contents of R0 from the stack frame */
    39d6:	6810      	ldr	r0, [r2, #0]
    ldr r1, [r2, #4] /* grab previous contents of R1 from the stack frame */
    39d8:	6851      	ldr	r1, [r2, #4]
#endif

    b _arch_context_switch
    39da:	f000 b86b 	b.w	3ab4 <_arch_context_switch>

000039de <_oops>:
#endif /* CONFIG_USE_SWITCH */

_oops:
    push {r0, lr}
    39de:	b501      	push	{r0, lr}
    push {r1, r2}
    push {r4-r11}
    mov  r1, sp /* pointer to _callee_saved_t */
#endif /* CONFIG_ARMV7_M_ARMV8_M_MAINLINE */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
    bl z_do_kernel_oops
    39e0:	f006 fa3d 	bl	9e5e <z_do_kernel_oops>
     * the MSP to its value prior to entering the function
     */
    add sp, #40
#endif /* CONFIG_ARMV7_M_ARMV8_M_MAINLINE */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
    pop {r0, pc}
    39e4:	bd01      	pop	{r0, pc}
    39e6:	bf00      	nop

000039e8 <arch_new_thread>:
 * of the ESF.
 */
void arch_new_thread(struct k_thread *thread, k_thread_stack_t *stack,
		     char *stack_ptr, k_thread_entry_t entry,
		     void *p1, void *p2, void *p3)
{
    39e8:	b480      	push	{r7}
    39ea:	b087      	sub	sp, #28
    39ec:	af00      	add	r7, sp, #0
    39ee:	60f8      	str	r0, [r7, #12]
    39f0:	60b9      	str	r1, [r7, #8]
    39f2:	607a      	str	r2, [r7, #4]
    39f4:	603b      	str	r3, [r7, #0]
		thread->stack_info.size -= FP_GUARD_EXTRA_SIZE;
	}
#endif /* FP_GUARD_EXTRA_SIZE */
#endif /* CONFIG_MPU_STACK_GUARD */

	iframe = Z_STACK_PTR_TO_FRAME(struct __basic_sf, stack_ptr);
    39f6:	687b      	ldr	r3, [r7, #4]
    39f8:	3b20      	subs	r3, #32
    39fa:	617b      	str	r3, [r7, #20]
		iframe->pc = (uint32_t)arch_user_mode_enter;
	} else {
		iframe->pc = (uint32_t)z_thread_entry;
	}
#else
	iframe->pc = (uint32_t)z_thread_entry;
    39fc:	4a13      	ldr	r2, [pc, #76]	; (3a4c <arch_new_thread+0x64>)
    39fe:	697b      	ldr	r3, [r7, #20]
    3a00:	619a      	str	r2, [r3, #24]
#endif

#if defined(CONFIG_CPU_CORTEX_M)
	/* force ARM mode by clearing LSB of address */
	iframe->pc &= 0xfffffffe;
    3a02:	697b      	ldr	r3, [r7, #20]
    3a04:	699b      	ldr	r3, [r3, #24]
    3a06:	f023 0201 	bic.w	r2, r3, #1
    3a0a:	697b      	ldr	r3, [r7, #20]
    3a0c:	619a      	str	r2, [r3, #24]
#endif
	iframe->a1 = (uint32_t)entry;
    3a0e:	683a      	ldr	r2, [r7, #0]
    3a10:	697b      	ldr	r3, [r7, #20]
    3a12:	601a      	str	r2, [r3, #0]
	iframe->a2 = (uint32_t)p1;
    3a14:	6a3a      	ldr	r2, [r7, #32]
    3a16:	697b      	ldr	r3, [r7, #20]
    3a18:	605a      	str	r2, [r3, #4]
	iframe->a3 = (uint32_t)p2;
    3a1a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    3a1c:	697b      	ldr	r3, [r7, #20]
    3a1e:	609a      	str	r2, [r3, #8]
	iframe->a4 = (uint32_t)p3;
    3a20:	6aba      	ldr	r2, [r7, #40]	; 0x28
    3a22:	697b      	ldr	r3, [r7, #20]
    3a24:	60da      	str	r2, [r3, #12]

#if defined(CONFIG_CPU_CORTEX_M)
	iframe->xpsr =
    3a26:	697b      	ldr	r3, [r7, #20]
    3a28:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
    3a2c:	61da      	str	r2, [r3, #28]
	iframe = (struct __basic_sf *)
		((uintptr_t)iframe - sizeof(struct __fpu_sf));
	memset(iframe, 0, sizeof(struct __fpu_sf));
#endif

	thread->callee_saved.psp = (uint32_t)iframe;
    3a2e:	697a      	ldr	r2, [r7, #20]
    3a30:	68fb      	ldr	r3, [r7, #12]
    3a32:	651a      	str	r2, [r3, #80]	; 0x50
	thread->arch.basepri = 0;
    3a34:	68fb      	ldr	r3, [r7, #12]
    3a36:	2200      	movs	r2, #0
    3a38:	671a      	str	r2, [r3, #112]	; 0x70
	 * initial values in all other registers/thread entries are
	 * irrelevant.
	 */

#if defined(CONFIG_USE_SWITCH)
	thread->switch_handle = thread;
    3a3a:	68fb      	ldr	r3, [r7, #12]
    3a3c:	68fa      	ldr	r2, [r7, #12]
    3a3e:	669a      	str	r2, [r3, #104]	; 0x68
#endif
}
    3a40:	bf00      	nop
    3a42:	371c      	adds	r7, #28
    3a44:	46bd      	mov	sp, r7
    3a46:	bc80      	pop	{r7}
    3a48:	4770      	bx	lr
    3a4a:	bf00      	nop
    3a4c:	000086cb 	.word	0x000086cb

00003a50 <arch_switch_to_main_thread>:
#endif /* CONFIG_FPU */
}

void arch_switch_to_main_thread(struct k_thread *main_thread, char *stack_ptr,
				k_thread_entry_t _main)
{
    3a50:	b580      	push	{r7, lr}
    3a52:	b084      	sub	sp, #16
    3a54:	af00      	add	r7, sp, #0
    3a56:	60f8      	str	r0, [r7, #12]
    3a58:	60b9      	str	r1, [r7, #8]
    3a5a:	607a      	str	r2, [r7, #4]
	z_arm_prepare_switch_to_main();
    3a5c:	f006 fa2f 	bl	9ebe <z_arm_prepare_switch_to_main>

	_current = main_thread;
    3a60:	4a08      	ldr	r2, [pc, #32]	; (3a84 <arch_switch_to_main_thread+0x34>)
    3a62:	68fb      	ldr	r3, [r7, #12]
    3a64:	6093      	str	r3, [r2, #8]

	/*
	 * Set PSP to the highest address of the main stack
	 * before enabling interrupts and jumping to main.
	 */
	__asm__ volatile (
    3a66:	687b      	ldr	r3, [r7, #4]
    3a68:	68ba      	ldr	r2, [r7, #8]
    3a6a:	4618      	mov	r0, r3
    3a6c:	f382 8809 	msr	PSP, r2
    3a70:	2100      	movs	r1, #0
    3a72:	b663      	cpsie	if
    3a74:	f381 8811 	msr	BASEPRI, r1
    3a78:	f3bf 8f6f 	isb	sy
    3a7c:	2200      	movs	r2, #0
    3a7e:	2300      	movs	r3, #0
    3a80:	f004 fe23 	bl	86ca <z_thread_entry>
    3a84:	2000074c 	.word	0x2000074c

00003a88 <_isr_wrapper>:
 *
 */
SECTION_FUNC(TEXT, _isr_wrapper)

#if defined(CONFIG_CPU_CORTEX_M)
	push {r0,lr}		/* r0, lr are now the first items on the stack */
    3a88:	b501      	push	{r0, lr}
#endif

#endif /* CONFIG_PM */

#if defined(CONFIG_CPU_CORTEX_M)
	mrs r0, IPSR	/* get exception number */
    3a8a:	f3ef 8005 	mrs	r0, IPSR
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r1, =16
	subs r0, r1	/* get IRQ number */
	lsls r0, #3	/* table is 8-byte wide */
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	sub r0, r0, #16	/* get IRQ number */
    3a8e:	f1a0 0010 	sub.w	r0, r0, #16
	lsl r0, r0, #3	/* table is 8-byte wide */
    3a92:	ea4f 00c0 	mov.w	r0, r0, lsl #3
	lsl r1, r1, #3
	cmp r0, r1
	bge spurious_continue
#endif /* !CONFIG_CPU_CORTEX_M */

	ldr r1, =_sw_isr_table
    3a96:	4904      	ldr	r1, [pc, #16]	; (3aa8 <_isr_wrapper+0x20>)
	add r1, r1, r0	/* table entry: ISRs must have their MSB set to stay
    3a98:	4401      	add	r1, r0
			 * in thumb mode */

	ldm r1!,{r0,r3}	/* arg in r0, ISR in r3 */
    3a9a:	c909      	ldmia	r1!, {r0, r3}
	blx r3		/* call ISR */
    3a9c:	4798      	blx	r3

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	pop {r0, r3}
	mov lr, r3
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	pop {r0, lr}
    3a9e:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	/* Use 'bx' instead of 'b' because 'bx' can jump further, and use
	 * 'bx' instead of 'blx' because exception return is done in
	 * z_arm_int_exit() */
	ldr r1, =z_arm_int_exit
    3aa2:	4902      	ldr	r1, [pc, #8]	; (3aac <_isr_wrapper+0x24>)
	bx r1
    3aa4:	4708      	bx	r1
    3aa6:	0000      	.short	0x0000
	ldr r1, =_sw_isr_table
    3aa8:	0000b64c 	.word	0x0000b64c
	ldr r1, =z_arm_int_exit
    3aac:	00003af5 	.word	0x00003af5

00003ab0 <z_arm_context_switch>:
 * void z_arm_context_switch(struct k_thread *new, struct k_thread *old);
 */

GTEXT(z_arm_context_switch)
SECTION_FUNC(TEXT, z_arm_context_switch)
    svc #_SVC_CALL_CONTEXT_SWITCH
    3ab0:	df00      	svc	0
    bx lr
    3ab2:	4770      	bx	lr

00003ab4 <_arch_context_switch>:
    /* r2 == unused */
    /* r3 == unused */

    /* Lets re-arrange some things to make it easier to re-use the old Swap code */
    /* Move the "new" k_thread into r3 for safekeeping, we need it later */
    mov r3, r0
    3ab4:	4603      	mov	r3, r0
    /* Move the "old" / current k_thread into r2 to match the original Swap code */
    mov r2, r1
    3ab6:	460a      	mov	r2, r1
    
    /* Load _kernel into r1. */
    ldr r1, =_kernel
    3ab8:	490d      	ldr	r1, [pc, #52]	; (3af0 <_arch_context_switch+0x3c>)
    all these registers.
    Get the offset to this structure from the current thread pointer, and store in R0.
    Since the struct is inline with the k_thread, r0 now contains
    the address where we can start writing registers
    */
    ldr r0, =_thread_offset_to_callee_saved
    3aba:	f04f 0030 	mov.w	r0, #48	; 0x30
    add r0, r2
    3abe:	4410      	add	r0, r2
    mrs is a magic instruction that is used to read data from 
    one of the special system register. in this case, we are 
    reading the Process Stack Pointer (PSP) into the `ip` register
    */
    /* TODO: again, why do we call this "IP" here? This is R12 */
    mrs ip, PSP
    3ac0:	f3ef 8c09 	mrs	ip, PSP
    /* 
    This ARM arch supports directly pushing all registers 
    into a stack, so do this in one instruction 
    */
    /* What is the v naming convention for these registers? */
    stmia r0, {v1-v8, ip}
    3ac4:	e880 1ff0 	stmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}

    /* Protect the kernel state while we play with the thread lists */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    3ac8:	2020      	movs	r0, #32
    msr BASEPRI_MAX, r0
    3aca:	f380 8812 	msr	BASEPRI_MAX, r0
    isb /* Make the effect of disabling interrupts be realized immediately */
    3ace:	f3bf 8f6f 	isb	sy

    /* 
    save the old thread into switch_handle, which is required
    by wait_for_switch
    */
    str r2, [r2, #___thread_t_switch_handle_OFFSET]
    3ad2:	6692      	str	r2, [r2, #104]	; 0x68

    /* the thread to run is in R3. Move it into R2 */
    mov r2, r3
    3ad4:	461a      	mov	r2, r3

    ldr r0, [r4]
    movs.n r3, #0
    str r3, [r4]
#else
    ldr r0, [r2, #_thread_offset_to_basepri]
    3ad6:	6f10      	ldr	r0, [r2, #112]	; 0x70
    movs r3, #0
    3ad8:	2300      	movs	r3, #0
    str r3, [r2, #_thread_offset_to_basepri]
    3ada:	6713      	str	r3, [r2, #112]	; 0x70
    /* restore r4-r7, go back 9*4 bytes to the start of the stored block */
    subs r0, #36
    ldmia r0!, {r4-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    /* restore BASEPRI for the incoming thread */
    msr BASEPRI, r0
    3adc:	f380 8811 	msr	BASEPRI, r0
    isb

#endif

    /* load callee-saved + psp from thread */
    add r0, r2, #_thread_offset_to_callee_saved
    3ae0:	f102 0030 	add.w	r0, r2, #48	; 0x30
    ldmia r0, {v1-v8, ip}
    3ae4:	e890 1ff0 	ldmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
    msr PSP, ip
    3ae8:	f38c 8809 	msr	PSP, ip

    /*
     * Cortex-M: return from PendSV exception
     * Cortex-R: return to the caller (z_arm_{exc,int}_exit, or z_arm_svc)
     */
    3aec:	4770      	bx	lr
    3aee:	0000      	.short	0x0000
    ldr r1, =_kernel
    3af0:	2000074c 	.word	0x2000074c

00003af4 <z_arm_exc_exit>:
 */

SECTION_SUBSEC_FUNC(TEXT, _HandlerModeExit, z_arm_exc_exit)

#ifdef CONFIG_PREEMPT_ENABLED
	ldr r3, =_kernel
    3af4:	4b04      	ldr	r3, [pc, #16]	; (3b08 <_EXIT_EXC+0x2>)
	/* 
	TODO: When exiting interrupt handler, should we be doing this?
	Seems incorrect when using arch_swap()
	*/

	ldr r1, [r3, #_kernel_offset_to_current]
    3af6:	6899      	ldr	r1, [r3, #8]
	ldr r0, [r3, #_kernel_offset_to_ready_q_cache]
    3af8:	6998      	ldr	r0, [r3, #24]
	cmp r0, r1
    3afa:	4288      	cmp	r0, r1
	beq _EXIT_EXC
    3afc:	d003      	beq.n	3b06 <_EXIT_EXC>
	/*
	TODO: definitely don't execute a PendSV when CONFIG_USE_SWITCH is true!
	*/

	/* context switch required, pend the PendSV exception */
	ldr r1, =_SCS_ICSR
    3afe:	4903      	ldr	r1, [pc, #12]	; (3b0c <_EXIT_EXC+0x6>)
	ldr r2, =_SCS_ICSR_PENDSV
    3b00:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
	str r2, [r1]
    3b04:	600a      	str	r2, [r1, #0]

00003b06 <_EXIT_EXC>:
#else
	pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_STACK_SENTINEL */

	bx lr
    3b06:	4770      	bx	lr
	ldr r3, =_kernel
    3b08:	2000074c 	.word	0x2000074c
	ldr r1, =_SCS_ICSR
    3b0c:	e000ed04 	.word	0xe000ed04

00003b10 <mem_manage_fault>:
 *
 * @return error code to identify the fatal error reason
 */
static uint32_t mem_manage_fault(z_arch_esf_t *esf, int from_hard_fault,
			      bool *recoverable)
{
    3b10:	b580      	push	{r7, lr}
    3b12:	b0aa      	sub	sp, #168	; 0xa8
    3b14:	af04      	add	r7, sp, #16
    3b16:	60f8      	str	r0, [r7, #12]
    3b18:	60b9      	str	r1, [r7, #8]
    3b1a:	607a      	str	r2, [r7, #4]
	uint32_t reason = K_ERR_CPU_EXCEPTION;
    3b1c:	2300      	movs	r3, #0
    3b1e:	657b      	str	r3, [r7, #84]	; 0x54
	uint32_t mmfar = -EINVAL;
    3b20:	f06f 0315 	mvn.w	r3, #21
    3b24:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c

	PR_FAULT_INFO("***** MPU FAULT *****");
    3b28:	2303      	movs	r3, #3
    3b2a:	2b00      	cmp	r3, #0
    3b2c:	d018      	beq.n	3b60 <mem_manage_fault+0x50>
    3b2e:	f006 f9cc 	bl	9eca <k_is_user_context>
    3b32:	4603      	mov	r3, r0
    3b34:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
    3b38:	2300      	movs	r3, #0
    3b3a:	643b      	str	r3, [r7, #64]	; 0x40
    3b3c:	4b7a      	ldr	r3, [pc, #488]	; (3d28 <mem_manage_fault+0x218>)
    3b3e:	681b      	ldr	r3, [r3, #0]
    3b40:	65fb      	str	r3, [r7, #92]	; 0x5c
    3b42:	4b7a      	ldr	r3, [pc, #488]	; (3d2c <mem_manage_fault+0x21c>)
    3b44:	9302      	str	r3, [sp, #8]
    3b46:	2300      	movs	r3, #0
    3b48:	9301      	str	r3, [sp, #4]
    3b4a:	2300      	movs	r3, #0
    3b4c:	9300      	str	r3, [sp, #0]
    3b4e:	2300      	movs	r3, #0
    3b50:	2201      	movs	r2, #1
    3b52:	6df9      	ldr	r1, [r7, #92]	; 0x5c
    3b54:	2000      	movs	r0, #0
    3b56:	f006 f9bf 	bl	9ed8 <z_log_msg2_runtime_create>
    3b5a:	2300      	movs	r3, #0
    3b5c:	663b      	str	r3, [r7, #96]	; 0x60
    3b5e:	e000      	b.n	3b62 <mem_manage_fault+0x52>
    3b60:	bf00      	nop

	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
    3b62:	4b73      	ldr	r3, [pc, #460]	; (3d30 <mem_manage_fault+0x220>)
    3b64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    3b66:	f003 0310 	and.w	r3, r3, #16
    3b6a:	2b00      	cmp	r3, #0
    3b6c:	d01c      	beq.n	3ba8 <mem_manage_fault+0x98>
		PR_FAULT_INFO("  Stacking error (context area might be"
    3b6e:	2303      	movs	r3, #3
    3b70:	2b00      	cmp	r3, #0
    3b72:	d018      	beq.n	3ba6 <mem_manage_fault+0x96>
    3b74:	f006 f9a9 	bl	9eca <k_is_user_context>
    3b78:	4603      	mov	r3, r0
    3b7a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
    3b7e:	2300      	movs	r3, #0
    3b80:	63bb      	str	r3, [r7, #56]	; 0x38
    3b82:	4b69      	ldr	r3, [pc, #420]	; (3d28 <mem_manage_fault+0x218>)
    3b84:	681b      	ldr	r3, [r3, #0]
    3b86:	66bb      	str	r3, [r7, #104]	; 0x68
    3b88:	4b6a      	ldr	r3, [pc, #424]	; (3d34 <mem_manage_fault+0x224>)
    3b8a:	9302      	str	r3, [sp, #8]
    3b8c:	2300      	movs	r3, #0
    3b8e:	9301      	str	r3, [sp, #4]
    3b90:	2300      	movs	r3, #0
    3b92:	9300      	str	r3, [sp, #0]
    3b94:	2300      	movs	r3, #0
    3b96:	2201      	movs	r2, #1
    3b98:	6eb9      	ldr	r1, [r7, #104]	; 0x68
    3b9a:	2000      	movs	r0, #0
    3b9c:	f006 f99c 	bl	9ed8 <z_log_msg2_runtime_create>
    3ba0:	2300      	movs	r3, #0
    3ba2:	66fb      	str	r3, [r7, #108]	; 0x6c
    3ba4:	e000      	b.n	3ba8 <mem_manage_fault+0x98>
    3ba6:	bf00      	nop
			" not valid)");
	}
	if ((SCB->CFSR & SCB_CFSR_MUNSTKERR_Msk) != 0) {
    3ba8:	4b61      	ldr	r3, [pc, #388]	; (3d30 <mem_manage_fault+0x220>)
    3baa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    3bac:	f003 0308 	and.w	r3, r3, #8
    3bb0:	2b00      	cmp	r3, #0
    3bb2:	d01c      	beq.n	3bee <mem_manage_fault+0xde>
		PR_FAULT_INFO("  Unstacking error");
    3bb4:	2303      	movs	r3, #3
    3bb6:	2b00      	cmp	r3, #0
    3bb8:	d018      	beq.n	3bec <mem_manage_fault+0xdc>
    3bba:	f006 f986 	bl	9eca <k_is_user_context>
    3bbe:	4603      	mov	r3, r0
    3bc0:	f887 3073 	strb.w	r3, [r7, #115]	; 0x73
    3bc4:	2300      	movs	r3, #0
    3bc6:	633b      	str	r3, [r7, #48]	; 0x30
    3bc8:	4b57      	ldr	r3, [pc, #348]	; (3d28 <mem_manage_fault+0x218>)
    3bca:	681b      	ldr	r3, [r3, #0]
    3bcc:	677b      	str	r3, [r7, #116]	; 0x74
    3bce:	4b5a      	ldr	r3, [pc, #360]	; (3d38 <mem_manage_fault+0x228>)
    3bd0:	9302      	str	r3, [sp, #8]
    3bd2:	2300      	movs	r3, #0
    3bd4:	9301      	str	r3, [sp, #4]
    3bd6:	2300      	movs	r3, #0
    3bd8:	9300      	str	r3, [sp, #0]
    3bda:	2300      	movs	r3, #0
    3bdc:	2201      	movs	r2, #1
    3bde:	6f79      	ldr	r1, [r7, #116]	; 0x74
    3be0:	2000      	movs	r0, #0
    3be2:	f006 f979 	bl	9ed8 <z_log_msg2_runtime_create>
    3be6:	2300      	movs	r3, #0
    3be8:	67bb      	str	r3, [r7, #120]	; 0x78
    3bea:	e000      	b.n	3bee <mem_manage_fault+0xde>
    3bec:	bf00      	nop
	}
	if ((SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) != 0) {
    3bee:	4b50      	ldr	r3, [pc, #320]	; (3d30 <mem_manage_fault+0x220>)
    3bf0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    3bf2:	f003 0302 	and.w	r3, r3, #2
    3bf6:	2b00      	cmp	r3, #0
    3bf8:	d058      	beq.n	3cac <mem_manage_fault+0x19c>
		PR_FAULT_INFO("  Data Access Violation");
    3bfa:	2303      	movs	r3, #3
    3bfc:	2b00      	cmp	r3, #0
    3bfe:	d01b      	beq.n	3c38 <mem_manage_fault+0x128>
    3c00:	f006 f963 	bl	9eca <k_is_user_context>
    3c04:	4603      	mov	r3, r0
    3c06:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    3c0a:	2300      	movs	r3, #0
    3c0c:	62bb      	str	r3, [r7, #40]	; 0x28
    3c0e:	4b46      	ldr	r3, [pc, #280]	; (3d28 <mem_manage_fault+0x218>)
    3c10:	681b      	ldr	r3, [r3, #0]
    3c12:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    3c16:	4b49      	ldr	r3, [pc, #292]	; (3d3c <mem_manage_fault+0x22c>)
    3c18:	9302      	str	r3, [sp, #8]
    3c1a:	2300      	movs	r3, #0
    3c1c:	9301      	str	r3, [sp, #4]
    3c1e:	2300      	movs	r3, #0
    3c20:	9300      	str	r3, [sp, #0]
    3c22:	2300      	movs	r3, #0
    3c24:	2201      	movs	r2, #1
    3c26:	f8d7 1080 	ldr.w	r1, [r7, #128]	; 0x80
    3c2a:	2000      	movs	r0, #0
    3c2c:	f006 f954 	bl	9ed8 <z_log_msg2_runtime_create>
    3c30:	2300      	movs	r3, #0
    3c32:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    3c36:	e000      	b.n	3c3a <mem_manage_fault+0x12a>
    3c38:	bf00      	nop
		 * The MMFAR address is valid only if this bit is 1.
		 *
		 * Software must follow this sequence because another higher
		 * priority exception might change the MMFAR value.
		 */
		uint32_t temp = SCB->MMFAR;
    3c3a:	4b3d      	ldr	r3, [pc, #244]	; (3d30 <mem_manage_fault+0x220>)
    3c3c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    3c3e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

		if ((SCB->CFSR & SCB_CFSR_MMARVALID_Msk) != 0) {
    3c42:	4b3b      	ldr	r3, [pc, #236]	; (3d30 <mem_manage_fault+0x220>)
    3c44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    3c46:	f003 0380 	and.w	r3, r3, #128	; 0x80
    3c4a:	2b00      	cmp	r3, #0
    3c4c:	d02e      	beq.n	3cac <mem_manage_fault+0x19c>
			mmfar = temp;
    3c4e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
    3c52:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
			PR_EXC("  MMFAR Address: 0x%x", mmfar);
    3c56:	2303      	movs	r3, #3
    3c58:	2b00      	cmp	r3, #0
    3c5a:	d01d      	beq.n	3c98 <mem_manage_fault+0x188>
    3c5c:	f006 f935 	bl	9eca <k_is_user_context>
    3c60:	4603      	mov	r3, r0
    3c62:	f887 3093 	strb.w	r3, [r7, #147]	; 0x93
    3c66:	2300      	movs	r3, #0
    3c68:	623b      	str	r3, [r7, #32]
    3c6a:	4b2f      	ldr	r3, [pc, #188]	; (3d28 <mem_manage_fault+0x218>)
    3c6c:	681b      	ldr	r3, [r3, #0]
    3c6e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    3c72:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
    3c76:	9303      	str	r3, [sp, #12]
    3c78:	4b31      	ldr	r3, [pc, #196]	; (3d40 <mem_manage_fault+0x230>)
    3c7a:	9302      	str	r3, [sp, #8]
    3c7c:	2300      	movs	r3, #0
    3c7e:	9301      	str	r3, [sp, #4]
    3c80:	2300      	movs	r3, #0
    3c82:	9300      	str	r3, [sp, #0]
    3c84:	2300      	movs	r3, #0
    3c86:	2201      	movs	r2, #1
    3c88:	f8d7 1094 	ldr.w	r1, [r7, #148]	; 0x94
    3c8c:	2000      	movs	r0, #0
    3c8e:	f006 f923 	bl	9ed8 <z_log_msg2_runtime_create>
    3c92:	2300      	movs	r3, #0
    3c94:	653b      	str	r3, [r7, #80]	; 0x50
    3c96:	e000      	b.n	3c9a <mem_manage_fault+0x18a>
    3c98:	bf00      	nop
			if (from_hard_fault != 0) {
    3c9a:	68bb      	ldr	r3, [r7, #8]
    3c9c:	2b00      	cmp	r3, #0
    3c9e:	d005      	beq.n	3cac <mem_manage_fault+0x19c>
				/* clear SCB_MMAR[VALID] to reset */
				SCB->CFSR &= ~SCB_CFSR_MMARVALID_Msk;
    3ca0:	4b23      	ldr	r3, [pc, #140]	; (3d30 <mem_manage_fault+0x220>)
    3ca2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    3ca4:	4a22      	ldr	r2, [pc, #136]	; (3d30 <mem_manage_fault+0x220>)
    3ca6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    3caa:	6293      	str	r3, [r2, #40]	; 0x28
			}
		}
	}
	if ((SCB->CFSR & SCB_CFSR_IACCVIOL_Msk) != 0) {
    3cac:	4b20      	ldr	r3, [pc, #128]	; (3d30 <mem_manage_fault+0x220>)
    3cae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    3cb0:	f003 0301 	and.w	r3, r3, #1
    3cb4:	2b00      	cmp	r3, #0
    3cb6:	d01c      	beq.n	3cf2 <mem_manage_fault+0x1e2>
		PR_FAULT_INFO("  Instruction Access Violation");
    3cb8:	2303      	movs	r3, #3
    3cba:	2b00      	cmp	r3, #0
    3cbc:	d018      	beq.n	3cf0 <mem_manage_fault+0x1e0>
    3cbe:	f006 f904 	bl	9eca <k_is_user_context>
    3cc2:	4603      	mov	r3, r0
    3cc4:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
    3cc8:	2300      	movs	r3, #0
    3cca:	61bb      	str	r3, [r7, #24]
    3ccc:	4b16      	ldr	r3, [pc, #88]	; (3d28 <mem_manage_fault+0x218>)
    3cce:	681b      	ldr	r3, [r3, #0]
    3cd0:	64bb      	str	r3, [r7, #72]	; 0x48
    3cd2:	4b1c      	ldr	r3, [pc, #112]	; (3d44 <mem_manage_fault+0x234>)
    3cd4:	9302      	str	r3, [sp, #8]
    3cd6:	2300      	movs	r3, #0
    3cd8:	9301      	str	r3, [sp, #4]
    3cda:	2300      	movs	r3, #0
    3cdc:	9300      	str	r3, [sp, #0]
    3cde:	2300      	movs	r3, #0
    3ce0:	2201      	movs	r2, #1
    3ce2:	6cb9      	ldr	r1, [r7, #72]	; 0x48
    3ce4:	2000      	movs	r0, #0
    3ce6:	f006 f8f7 	bl	9ed8 <z_log_msg2_runtime_create>
    3cea:	2300      	movs	r3, #0
    3cec:	647b      	str	r3, [r7, #68]	; 0x44
    3cee:	e000      	b.n	3cf2 <mem_manage_fault+0x1e2>
    3cf0:	bf00      	nop
	 * crossed into an area beyond the thread stack.]
	 *
	 * Data Access Violation errors may or may not be caused by
	 * thread stack overflows.
	 */
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
    3cf2:	4b0f      	ldr	r3, [pc, #60]	; (3d30 <mem_manage_fault+0x220>)
    3cf4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    3cf6:	f003 0310 	and.w	r3, r3, #16
    3cfa:	2b00      	cmp	r3, #0
    3cfc:	d101      	bne.n	3d02 <mem_manage_fault+0x1f2>
		(SCB->CFSR & SCB_CFSR_DACCVIOL_Msk)) {
    3cfe:	4b0c      	ldr	r3, [pc, #48]	; (3d30 <mem_manage_fault+0x220>)
    3d00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
		SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTPENDED_Msk;
	}
#endif /* CONFIG_ARMV7_M_ARMV8_M_FP */

	/* clear MMFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;
    3d02:	4b0b      	ldr	r3, [pc, #44]	; (3d30 <mem_manage_fault+0x220>)
    3d04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    3d06:	4a0a      	ldr	r2, [pc, #40]	; (3d30 <mem_manage_fault+0x220>)
    3d08:	f043 03ff 	orr.w	r3, r3, #255	; 0xff
    3d0c:	6293      	str	r3, [r2, #40]	; 0x28

	/* Assess whether system shall ignore/recover from this MPU fault. */
	*recoverable = memory_fault_recoverable(esf, true);
    3d0e:	2101      	movs	r1, #1
    3d10:	68f8      	ldr	r0, [r7, #12]
    3d12:	f006 f924 	bl	9f5e <memory_fault_recoverable>
    3d16:	4603      	mov	r3, r0
    3d18:	461a      	mov	r2, r3
    3d1a:	687b      	ldr	r3, [r7, #4]
    3d1c:	701a      	strb	r2, [r3, #0]

	return reason;
    3d1e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
}
    3d20:	4618      	mov	r0, r3
    3d22:	3798      	adds	r7, #152	; 0x98
    3d24:	46bd      	mov	sp, r7
    3d26:	bd80      	pop	{r7, pc}
    3d28:	20000010 	.word	0x20000010
    3d2c:	0000b9f8 	.word	0x0000b9f8
    3d30:	e000ed00 	.word	0xe000ed00
    3d34:	0000ba10 	.word	0x0000ba10
    3d38:	0000ba44 	.word	0x0000ba44
    3d3c:	0000ba58 	.word	0x0000ba58
    3d40:	0000ba70 	.word	0x0000ba70
    3d44:	0000ba88 	.word	0x0000ba88

00003d48 <bus_fault>:
 *
 * @return error code to identify the fatal error reason.
 *
 */
static int bus_fault(z_arch_esf_t *esf, int from_hard_fault, bool *recoverable)
{
    3d48:	b580      	push	{r7, lr}
    3d4a:	b0ae      	sub	sp, #184	; 0xb8
    3d4c:	af04      	add	r7, sp, #16
    3d4e:	60f8      	str	r0, [r7, #12]
    3d50:	60b9      	str	r1, [r7, #8]
    3d52:	607a      	str	r2, [r7, #4]
	uint32_t reason = K_ERR_CPU_EXCEPTION;
    3d54:	2300      	movs	r3, #0
    3d56:	663b      	str	r3, [r7, #96]	; 0x60

	PR_FAULT_INFO("***** BUS FAULT *****");
    3d58:	2303      	movs	r3, #3
    3d5a:	2b00      	cmp	r3, #0
    3d5c:	d018      	beq.n	3d90 <bus_fault+0x48>
    3d5e:	f006 f8b4 	bl	9eca <k_is_user_context>
    3d62:	4603      	mov	r3, r0
    3d64:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
    3d68:	2300      	movs	r3, #0
    3d6a:	64bb      	str	r3, [r7, #72]	; 0x48
    3d6c:	4b88      	ldr	r3, [pc, #544]	; (3f90 <bus_fault+0x248>)
    3d6e:	681b      	ldr	r3, [r3, #0]
    3d70:	66bb      	str	r3, [r7, #104]	; 0x68
    3d72:	4b88      	ldr	r3, [pc, #544]	; (3f94 <bus_fault+0x24c>)
    3d74:	9302      	str	r3, [sp, #8]
    3d76:	2300      	movs	r3, #0
    3d78:	9301      	str	r3, [sp, #4]
    3d7a:	2300      	movs	r3, #0
    3d7c:	9300      	str	r3, [sp, #0]
    3d7e:	2300      	movs	r3, #0
    3d80:	2201      	movs	r2, #1
    3d82:	6eb9      	ldr	r1, [r7, #104]	; 0x68
    3d84:	2000      	movs	r0, #0
    3d86:	f006 f8a7 	bl	9ed8 <z_log_msg2_runtime_create>
    3d8a:	2300      	movs	r3, #0
    3d8c:	66fb      	str	r3, [r7, #108]	; 0x6c
    3d8e:	e000      	b.n	3d92 <bus_fault+0x4a>
    3d90:	bf00      	nop

	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
    3d92:	4b81      	ldr	r3, [pc, #516]	; (3f98 <bus_fault+0x250>)
    3d94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    3d96:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
    3d9a:	2b00      	cmp	r3, #0
    3d9c:	d01c      	beq.n	3dd8 <bus_fault+0x90>
		PR_FAULT_INFO("  Stacking error");
    3d9e:	2303      	movs	r3, #3
    3da0:	2b00      	cmp	r3, #0
    3da2:	d018      	beq.n	3dd6 <bus_fault+0x8e>
    3da4:	f006 f891 	bl	9eca <k_is_user_context>
    3da8:	4603      	mov	r3, r0
    3daa:	f887 3073 	strb.w	r3, [r7, #115]	; 0x73
    3dae:	2300      	movs	r3, #0
    3db0:	643b      	str	r3, [r7, #64]	; 0x40
    3db2:	4b77      	ldr	r3, [pc, #476]	; (3f90 <bus_fault+0x248>)
    3db4:	681b      	ldr	r3, [r3, #0]
    3db6:	677b      	str	r3, [r7, #116]	; 0x74
    3db8:	4b78      	ldr	r3, [pc, #480]	; (3f9c <bus_fault+0x254>)
    3dba:	9302      	str	r3, [sp, #8]
    3dbc:	2300      	movs	r3, #0
    3dbe:	9301      	str	r3, [sp, #4]
    3dc0:	2300      	movs	r3, #0
    3dc2:	9300      	str	r3, [sp, #0]
    3dc4:	2300      	movs	r3, #0
    3dc6:	2201      	movs	r2, #1
    3dc8:	6f79      	ldr	r1, [r7, #116]	; 0x74
    3dca:	2000      	movs	r0, #0
    3dcc:	f006 f884 	bl	9ed8 <z_log_msg2_runtime_create>
    3dd0:	2300      	movs	r3, #0
    3dd2:	67bb      	str	r3, [r7, #120]	; 0x78
    3dd4:	e000      	b.n	3dd8 <bus_fault+0x90>
    3dd6:	bf00      	nop
	}
	if (SCB->CFSR & SCB_CFSR_UNSTKERR_Msk) {
    3dd8:	4b6f      	ldr	r3, [pc, #444]	; (3f98 <bus_fault+0x250>)
    3dda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    3ddc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
    3de0:	2b00      	cmp	r3, #0
    3de2:	d01f      	beq.n	3e24 <bus_fault+0xdc>
		PR_FAULT_INFO("  Unstacking error");
    3de4:	2303      	movs	r3, #3
    3de6:	2b00      	cmp	r3, #0
    3de8:	d01b      	beq.n	3e22 <bus_fault+0xda>
    3dea:	f006 f86e 	bl	9eca <k_is_user_context>
    3dee:	4603      	mov	r3, r0
    3df0:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    3df4:	2300      	movs	r3, #0
    3df6:	63bb      	str	r3, [r7, #56]	; 0x38
    3df8:	4b65      	ldr	r3, [pc, #404]	; (3f90 <bus_fault+0x248>)
    3dfa:	681b      	ldr	r3, [r3, #0]
    3dfc:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    3e00:	4b67      	ldr	r3, [pc, #412]	; (3fa0 <bus_fault+0x258>)
    3e02:	9302      	str	r3, [sp, #8]
    3e04:	2300      	movs	r3, #0
    3e06:	9301      	str	r3, [sp, #4]
    3e08:	2300      	movs	r3, #0
    3e0a:	9300      	str	r3, [sp, #0]
    3e0c:	2300      	movs	r3, #0
    3e0e:	2201      	movs	r2, #1
    3e10:	f8d7 1080 	ldr.w	r1, [r7, #128]	; 0x80
    3e14:	2000      	movs	r0, #0
    3e16:	f006 f85f 	bl	9ed8 <z_log_msg2_runtime_create>
    3e1a:	2300      	movs	r3, #0
    3e1c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    3e20:	e000      	b.n	3e24 <bus_fault+0xdc>
    3e22:	bf00      	nop
	}
	if (SCB->CFSR & SCB_CFSR_PRECISERR_Msk) {
    3e24:	4b5c      	ldr	r3, [pc, #368]	; (3f98 <bus_fault+0x250>)
    3e26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    3e28:	f403 7300 	and.w	r3, r3, #512	; 0x200
    3e2c:	2b00      	cmp	r3, #0
    3e2e:	d055      	beq.n	3edc <bus_fault+0x194>
		PR_FAULT_INFO("  Precise data bus error");
    3e30:	2303      	movs	r3, #3
    3e32:	2b00      	cmp	r3, #0
    3e34:	d01b      	beq.n	3e6e <bus_fault+0x126>
    3e36:	f006 f848 	bl	9eca <k_is_user_context>
    3e3a:	4603      	mov	r3, r0
    3e3c:	f887 308b 	strb.w	r3, [r7, #139]	; 0x8b
    3e40:	2300      	movs	r3, #0
    3e42:	633b      	str	r3, [r7, #48]	; 0x30
    3e44:	4b52      	ldr	r3, [pc, #328]	; (3f90 <bus_fault+0x248>)
    3e46:	681b      	ldr	r3, [r3, #0]
    3e48:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    3e4c:	4b55      	ldr	r3, [pc, #340]	; (3fa4 <bus_fault+0x25c>)
    3e4e:	9302      	str	r3, [sp, #8]
    3e50:	2300      	movs	r3, #0
    3e52:	9301      	str	r3, [sp, #4]
    3e54:	2300      	movs	r3, #0
    3e56:	9300      	str	r3, [sp, #0]
    3e58:	2300      	movs	r3, #0
    3e5a:	2201      	movs	r2, #1
    3e5c:	f8d7 108c 	ldr.w	r1, [r7, #140]	; 0x8c
    3e60:	2000      	movs	r0, #0
    3e62:	f006 f839 	bl	9ed8 <z_log_msg2_runtime_create>
    3e66:	2300      	movs	r3, #0
    3e68:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    3e6c:	e000      	b.n	3e70 <bus_fault+0x128>
    3e6e:	bf00      	nop
		 * The BFAR address is valid only if this bit is 1.
		 *
		 * Software must follow this sequence because another
		 * higher priority exception might change the BFAR value.
		 */
		STORE_xFAR(bfar, SCB->BFAR);
    3e70:	4b49      	ldr	r3, [pc, #292]	; (3f98 <bus_fault+0x250>)
    3e72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    3e74:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

		if ((SCB->CFSR & SCB_CFSR_BFARVALID_Msk) != 0) {
    3e78:	4b47      	ldr	r3, [pc, #284]	; (3f98 <bus_fault+0x250>)
    3e7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    3e7c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
    3e80:	2b00      	cmp	r3, #0
    3e82:	d02b      	beq.n	3edc <bus_fault+0x194>
			PR_EXC("  BFAR Address: 0x%x", bfar);
    3e84:	2303      	movs	r3, #3
    3e86:	2b00      	cmp	r3, #0
    3e88:	d01e      	beq.n	3ec8 <bus_fault+0x180>
    3e8a:	f006 f81e 	bl	9eca <k_is_user_context>
    3e8e:	4603      	mov	r3, r0
    3e90:	f887 309b 	strb.w	r3, [r7, #155]	; 0x9b
    3e94:	2300      	movs	r3, #0
    3e96:	62bb      	str	r3, [r7, #40]	; 0x28
    3e98:	4b3d      	ldr	r3, [pc, #244]	; (3f90 <bus_fault+0x248>)
    3e9a:	681b      	ldr	r3, [r3, #0]
    3e9c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    3ea0:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
    3ea4:	9303      	str	r3, [sp, #12]
    3ea6:	4b40      	ldr	r3, [pc, #256]	; (3fa8 <bus_fault+0x260>)
    3ea8:	9302      	str	r3, [sp, #8]
    3eaa:	2300      	movs	r3, #0
    3eac:	9301      	str	r3, [sp, #4]
    3eae:	2300      	movs	r3, #0
    3eb0:	9300      	str	r3, [sp, #0]
    3eb2:	2300      	movs	r3, #0
    3eb4:	2201      	movs	r2, #1
    3eb6:	f8d7 109c 	ldr.w	r1, [r7, #156]	; 0x9c
    3eba:	2000      	movs	r0, #0
    3ebc:	f006 f80c 	bl	9ed8 <z_log_msg2_runtime_create>
    3ec0:	2300      	movs	r3, #0
    3ec2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    3ec6:	e000      	b.n	3eca <bus_fault+0x182>
    3ec8:	bf00      	nop
			if (from_hard_fault != 0) {
    3eca:	68bb      	ldr	r3, [r7, #8]
    3ecc:	2b00      	cmp	r3, #0
    3ece:	d005      	beq.n	3edc <bus_fault+0x194>
				/* clear SCB_CFSR_BFAR[VALID] to reset */
				SCB->CFSR &= ~SCB_CFSR_BFARVALID_Msk;
    3ed0:	4b31      	ldr	r3, [pc, #196]	; (3f98 <bus_fault+0x250>)
    3ed2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    3ed4:	4a30      	ldr	r2, [pc, #192]	; (3f98 <bus_fault+0x250>)
    3ed6:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
    3eda:	6293      	str	r3, [r2, #40]	; 0x28
			}
		}
	}
	if (SCB->CFSR & SCB_CFSR_IMPRECISERR_Msk) {
    3edc:	4b2e      	ldr	r3, [pc, #184]	; (3f98 <bus_fault+0x250>)
    3ede:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    3ee0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
    3ee4:	2b00      	cmp	r3, #0
    3ee6:	d01c      	beq.n	3f22 <bus_fault+0x1da>
		PR_FAULT_INFO("  Imprecise data bus error");
    3ee8:	2303      	movs	r3, #3
    3eea:	2b00      	cmp	r3, #0
    3eec:	d018      	beq.n	3f20 <bus_fault+0x1d8>
    3eee:	f005 ffec 	bl	9eca <k_is_user_context>
    3ef2:	4603      	mov	r3, r0
    3ef4:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
    3ef8:	2300      	movs	r3, #0
    3efa:	623b      	str	r3, [r7, #32]
    3efc:	4b24      	ldr	r3, [pc, #144]	; (3f90 <bus_fault+0x248>)
    3efe:	681b      	ldr	r3, [r3, #0]
    3f00:	65fb      	str	r3, [r7, #92]	; 0x5c
    3f02:	4b2a      	ldr	r3, [pc, #168]	; (3fac <bus_fault+0x264>)
    3f04:	9302      	str	r3, [sp, #8]
    3f06:	2300      	movs	r3, #0
    3f08:	9301      	str	r3, [sp, #4]
    3f0a:	2300      	movs	r3, #0
    3f0c:	9300      	str	r3, [sp, #0]
    3f0e:	2300      	movs	r3, #0
    3f10:	2201      	movs	r2, #1
    3f12:	6df9      	ldr	r1, [r7, #92]	; 0x5c
    3f14:	2000      	movs	r0, #0
    3f16:	f005 ffdf 	bl	9ed8 <z_log_msg2_runtime_create>
    3f1a:	2300      	movs	r3, #0
    3f1c:	65bb      	str	r3, [r7, #88]	; 0x58
    3f1e:	e000      	b.n	3f22 <bus_fault+0x1da>
    3f20:	bf00      	nop
	}
	if ((SCB->CFSR & SCB_CFSR_IBUSERR_Msk) != 0) {
    3f22:	4b1d      	ldr	r3, [pc, #116]	; (3f98 <bus_fault+0x250>)
    3f24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    3f26:	f403 7380 	and.w	r3, r3, #256	; 0x100
    3f2a:	2b00      	cmp	r3, #0
    3f2c:	d01c      	beq.n	3f68 <bus_fault+0x220>
		PR_FAULT_INFO("  Instruction bus error");
    3f2e:	2303      	movs	r3, #3
    3f30:	2b00      	cmp	r3, #0
    3f32:	d018      	beq.n	3f66 <bus_fault+0x21e>
    3f34:	f005 ffc9 	bl	9eca <k_is_user_context>
    3f38:	4603      	mov	r3, r0
    3f3a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
    3f3e:	2300      	movs	r3, #0
    3f40:	61bb      	str	r3, [r7, #24]
    3f42:	4b13      	ldr	r3, [pc, #76]	; (3f90 <bus_fault+0x248>)
    3f44:	681b      	ldr	r3, [r3, #0]
    3f46:	653b      	str	r3, [r7, #80]	; 0x50
    3f48:	4b19      	ldr	r3, [pc, #100]	; (3fb0 <bus_fault+0x268>)
    3f4a:	9302      	str	r3, [sp, #8]
    3f4c:	2300      	movs	r3, #0
    3f4e:	9301      	str	r3, [sp, #4]
    3f50:	2300      	movs	r3, #0
    3f52:	9300      	str	r3, [sp, #0]
    3f54:	2300      	movs	r3, #0
    3f56:	2201      	movs	r2, #1
    3f58:	6d39      	ldr	r1, [r7, #80]	; 0x50
    3f5a:	2000      	movs	r0, #0
    3f5c:	f005 ffbc 	bl	9ed8 <z_log_msg2_runtime_create>
    3f60:	2300      	movs	r3, #0
    3f62:	64fb      	str	r3, [r7, #76]	; 0x4c
    3f64:	e000      	b.n	3f68 <bus_fault+0x220>
    3f66:	bf00      	nop
		SYSMPU->CESR &= ~sperr;
	}
#endif /* defined(CONFIG_ARM_MPU) && defined(CONFIG_CPU_HAS_NXP_MPU) */

	/* clear BFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
    3f68:	4b0b      	ldr	r3, [pc, #44]	; (3f98 <bus_fault+0x250>)
    3f6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    3f6c:	4a0a      	ldr	r2, [pc, #40]	; (3f98 <bus_fault+0x250>)
    3f6e:	f443 437f 	orr.w	r3, r3, #65280	; 0xff00
    3f72:	6293      	str	r3, [r2, #40]	; 0x28

	*recoverable = memory_fault_recoverable(esf, true);
    3f74:	2101      	movs	r1, #1
    3f76:	68f8      	ldr	r0, [r7, #12]
    3f78:	f005 fff1 	bl	9f5e <memory_fault_recoverable>
    3f7c:	4603      	mov	r3, r0
    3f7e:	461a      	mov	r2, r3
    3f80:	687b      	ldr	r3, [r7, #4]
    3f82:	701a      	strb	r2, [r3, #0]

	return reason;
    3f84:	6e3b      	ldr	r3, [r7, #96]	; 0x60
}
    3f86:	4618      	mov	r0, r3
    3f88:	37a8      	adds	r7, #168	; 0xa8
    3f8a:	46bd      	mov	sp, r7
    3f8c:	bd80      	pop	{r7, pc}
    3f8e:	bf00      	nop
    3f90:	20000010 	.word	0x20000010
    3f94:	0000baa8 	.word	0x0000baa8
    3f98:	e000ed00 	.word	0xe000ed00
    3f9c:	0000bac0 	.word	0x0000bac0
    3fa0:	0000ba44 	.word	0x0000ba44
    3fa4:	0000bad4 	.word	0x0000bad4
    3fa8:	0000baf0 	.word	0x0000baf0
    3fac:	0000bb08 	.word	0x0000bb08
    3fb0:	0000bb24 	.word	0x0000bb24

00003fb4 <usage_fault>:
 * See z_arm_fault_dump() for example.
 *
 * @return error code to identify the fatal error reason
 */
static uint32_t usage_fault(const z_arch_esf_t *esf)
{
    3fb4:	b580      	push	{r7, lr}
    3fb6:	b0aa      	sub	sp, #168	; 0xa8
    3fb8:	af04      	add	r7, sp, #16
    3fba:	6078      	str	r0, [r7, #4]
	uint32_t reason = K_ERR_CPU_EXCEPTION;
    3fbc:	2300      	movs	r3, #0
    3fbe:	64fb      	str	r3, [r7, #76]	; 0x4c

	PR_FAULT_INFO("***** USAGE FAULT *****");
    3fc0:	2303      	movs	r3, #3
    3fc2:	2b00      	cmp	r3, #0
    3fc4:	d018      	beq.n	3ff8 <usage_fault+0x44>
    3fc6:	f005 ff80 	bl	9eca <k_is_user_context>
    3fca:	4603      	mov	r3, r0
    3fcc:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
    3fd0:	2300      	movs	r3, #0
    3fd2:	63fb      	str	r3, [r7, #60]	; 0x3c
    3fd4:	4b7b      	ldr	r3, [pc, #492]	; (41c4 <usage_fault+0x210>)
    3fd6:	681b      	ldr	r3, [r3, #0]
    3fd8:	657b      	str	r3, [r7, #84]	; 0x54
    3fda:	4b7b      	ldr	r3, [pc, #492]	; (41c8 <usage_fault+0x214>)
    3fdc:	9302      	str	r3, [sp, #8]
    3fde:	2300      	movs	r3, #0
    3fe0:	9301      	str	r3, [sp, #4]
    3fe2:	2300      	movs	r3, #0
    3fe4:	9300      	str	r3, [sp, #0]
    3fe6:	2300      	movs	r3, #0
    3fe8:	2201      	movs	r2, #1
    3fea:	6d79      	ldr	r1, [r7, #84]	; 0x54
    3fec:	2000      	movs	r0, #0
    3fee:	f005 ff73 	bl	9ed8 <z_log_msg2_runtime_create>
    3ff2:	2300      	movs	r3, #0
    3ff4:	65bb      	str	r3, [r7, #88]	; 0x58
    3ff6:	e000      	b.n	3ffa <usage_fault+0x46>
    3ff8:	bf00      	nop

	/* bits are sticky: they stack and must be reset */
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
    3ffa:	4b74      	ldr	r3, [pc, #464]	; (41cc <usage_fault+0x218>)
    3ffc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    3ffe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
    4002:	2b00      	cmp	r3, #0
    4004:	d01c      	beq.n	4040 <usage_fault+0x8c>
		PR_FAULT_INFO("  Division by zero");
    4006:	2303      	movs	r3, #3
    4008:	2b00      	cmp	r3, #0
    400a:	d018      	beq.n	403e <usage_fault+0x8a>
    400c:	f005 ff5d 	bl	9eca <k_is_user_context>
    4010:	4603      	mov	r3, r0
    4012:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
    4016:	2300      	movs	r3, #0
    4018:	637b      	str	r3, [r7, #52]	; 0x34
    401a:	4b6a      	ldr	r3, [pc, #424]	; (41c4 <usage_fault+0x210>)
    401c:	681b      	ldr	r3, [r3, #0]
    401e:	663b      	str	r3, [r7, #96]	; 0x60
    4020:	4b6b      	ldr	r3, [pc, #428]	; (41d0 <usage_fault+0x21c>)
    4022:	9302      	str	r3, [sp, #8]
    4024:	2300      	movs	r3, #0
    4026:	9301      	str	r3, [sp, #4]
    4028:	2300      	movs	r3, #0
    402a:	9300      	str	r3, [sp, #0]
    402c:	2300      	movs	r3, #0
    402e:	2201      	movs	r2, #1
    4030:	6e39      	ldr	r1, [r7, #96]	; 0x60
    4032:	2000      	movs	r0, #0
    4034:	f005 ff50 	bl	9ed8 <z_log_msg2_runtime_create>
    4038:	2300      	movs	r3, #0
    403a:	667b      	str	r3, [r7, #100]	; 0x64
    403c:	e000      	b.n	4040 <usage_fault+0x8c>
    403e:	bf00      	nop
	}
	if ((SCB->CFSR & SCB_CFSR_UNALIGNED_Msk) != 0) {
    4040:	4b62      	ldr	r3, [pc, #392]	; (41cc <usage_fault+0x218>)
    4042:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    4044:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
    4048:	2b00      	cmp	r3, #0
    404a:	d01c      	beq.n	4086 <usage_fault+0xd2>
		PR_FAULT_INFO("  Unaligned memory access");
    404c:	2303      	movs	r3, #3
    404e:	2b00      	cmp	r3, #0
    4050:	d018      	beq.n	4084 <usage_fault+0xd0>
    4052:	f005 ff3a 	bl	9eca <k_is_user_context>
    4056:	4603      	mov	r3, r0
    4058:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b
    405c:	2300      	movs	r3, #0
    405e:	62fb      	str	r3, [r7, #44]	; 0x2c
    4060:	4b58      	ldr	r3, [pc, #352]	; (41c4 <usage_fault+0x210>)
    4062:	681b      	ldr	r3, [r3, #0]
    4064:	66fb      	str	r3, [r7, #108]	; 0x6c
    4066:	4b5b      	ldr	r3, [pc, #364]	; (41d4 <usage_fault+0x220>)
    4068:	9302      	str	r3, [sp, #8]
    406a:	2300      	movs	r3, #0
    406c:	9301      	str	r3, [sp, #4]
    406e:	2300      	movs	r3, #0
    4070:	9300      	str	r3, [sp, #0]
    4072:	2300      	movs	r3, #0
    4074:	2201      	movs	r2, #1
    4076:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
    4078:	2000      	movs	r0, #0
    407a:	f005 ff2d 	bl	9ed8 <z_log_msg2_runtime_create>
    407e:	2300      	movs	r3, #0
    4080:	673b      	str	r3, [r7, #112]	; 0x70
    4082:	e000      	b.n	4086 <usage_fault+0xd2>
    4084:	bf00      	nop
		 */
		reason = K_ERR_STACK_CHK_FAIL;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
	}
#endif /* CONFIG_ARMV8_M_MAINLINE */
	if ((SCB->CFSR & SCB_CFSR_NOCP_Msk) != 0) {
    4086:	4b51      	ldr	r3, [pc, #324]	; (41cc <usage_fault+0x218>)
    4088:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    408a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
    408e:	2b00      	cmp	r3, #0
    4090:	d01c      	beq.n	40cc <usage_fault+0x118>
		PR_FAULT_INFO("  No coprocessor instructions");
    4092:	2303      	movs	r3, #3
    4094:	2b00      	cmp	r3, #0
    4096:	d018      	beq.n	40ca <usage_fault+0x116>
    4098:	f005 ff17 	bl	9eca <k_is_user_context>
    409c:	4603      	mov	r3, r0
    409e:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    40a2:	2300      	movs	r3, #0
    40a4:	627b      	str	r3, [r7, #36]	; 0x24
    40a6:	4b47      	ldr	r3, [pc, #284]	; (41c4 <usage_fault+0x210>)
    40a8:	681b      	ldr	r3, [r3, #0]
    40aa:	67bb      	str	r3, [r7, #120]	; 0x78
    40ac:	4b4a      	ldr	r3, [pc, #296]	; (41d8 <usage_fault+0x224>)
    40ae:	9302      	str	r3, [sp, #8]
    40b0:	2300      	movs	r3, #0
    40b2:	9301      	str	r3, [sp, #4]
    40b4:	2300      	movs	r3, #0
    40b6:	9300      	str	r3, [sp, #0]
    40b8:	2300      	movs	r3, #0
    40ba:	2201      	movs	r2, #1
    40bc:	6fb9      	ldr	r1, [r7, #120]	; 0x78
    40be:	2000      	movs	r0, #0
    40c0:	f005 ff0a 	bl	9ed8 <z_log_msg2_runtime_create>
    40c4:	2300      	movs	r3, #0
    40c6:	67fb      	str	r3, [r7, #124]	; 0x7c
    40c8:	e000      	b.n	40cc <usage_fault+0x118>
    40ca:	bf00      	nop
	}
	if ((SCB->CFSR & SCB_CFSR_INVPC_Msk) != 0) {
    40cc:	4b3f      	ldr	r3, [pc, #252]	; (41cc <usage_fault+0x218>)
    40ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    40d0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
    40d4:	2b00      	cmp	r3, #0
    40d6:	d01f      	beq.n	4118 <usage_fault+0x164>
		PR_FAULT_INFO("  Illegal load of EXC_RETURN into PC");
    40d8:	2303      	movs	r3, #3
    40da:	2b00      	cmp	r3, #0
    40dc:	d01b      	beq.n	4116 <usage_fault+0x162>
    40de:	f005 fef4 	bl	9eca <k_is_user_context>
    40e2:	4603      	mov	r3, r0
    40e4:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
    40e8:	2300      	movs	r3, #0
    40ea:	61fb      	str	r3, [r7, #28]
    40ec:	4b35      	ldr	r3, [pc, #212]	; (41c4 <usage_fault+0x210>)
    40ee:	681b      	ldr	r3, [r3, #0]
    40f0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    40f4:	4b39      	ldr	r3, [pc, #228]	; (41dc <usage_fault+0x228>)
    40f6:	9302      	str	r3, [sp, #8]
    40f8:	2300      	movs	r3, #0
    40fa:	9301      	str	r3, [sp, #4]
    40fc:	2300      	movs	r3, #0
    40fe:	9300      	str	r3, [sp, #0]
    4100:	2300      	movs	r3, #0
    4102:	2201      	movs	r2, #1
    4104:	f8d7 1084 	ldr.w	r1, [r7, #132]	; 0x84
    4108:	2000      	movs	r0, #0
    410a:	f005 fee5 	bl	9ed8 <z_log_msg2_runtime_create>
    410e:	2300      	movs	r3, #0
    4110:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    4114:	e000      	b.n	4118 <usage_fault+0x164>
    4116:	bf00      	nop
	}
	if ((SCB->CFSR & SCB_CFSR_INVSTATE_Msk) != 0) {
    4118:	4b2c      	ldr	r3, [pc, #176]	; (41cc <usage_fault+0x218>)
    411a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    411c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
    4120:	2b00      	cmp	r3, #0
    4122:	d01f      	beq.n	4164 <usage_fault+0x1b0>
		PR_FAULT_INFO("  Illegal use of the EPSR");
    4124:	2303      	movs	r3, #3
    4126:	2b00      	cmp	r3, #0
    4128:	d01b      	beq.n	4162 <usage_fault+0x1ae>
    412a:	f005 fece 	bl	9eca <k_is_user_context>
    412e:	4603      	mov	r3, r0
    4130:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
    4134:	2300      	movs	r3, #0
    4136:	617b      	str	r3, [r7, #20]
    4138:	4b22      	ldr	r3, [pc, #136]	; (41c4 <usage_fault+0x210>)
    413a:	681b      	ldr	r3, [r3, #0]
    413c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    4140:	4b27      	ldr	r3, [pc, #156]	; (41e0 <usage_fault+0x22c>)
    4142:	9302      	str	r3, [sp, #8]
    4144:	2300      	movs	r3, #0
    4146:	9301      	str	r3, [sp, #4]
    4148:	2300      	movs	r3, #0
    414a:	9300      	str	r3, [sp, #0]
    414c:	2300      	movs	r3, #0
    414e:	2201      	movs	r2, #1
    4150:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
    4154:	2000      	movs	r0, #0
    4156:	f005 febf 	bl	9ed8 <z_log_msg2_runtime_create>
    415a:	2300      	movs	r3, #0
    415c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    4160:	e000      	b.n	4164 <usage_fault+0x1b0>
    4162:	bf00      	nop
	}
	if ((SCB->CFSR & SCB_CFSR_UNDEFINSTR_Msk) != 0) {
    4164:	4b19      	ldr	r3, [pc, #100]	; (41cc <usage_fault+0x218>)
    4166:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    4168:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
    416c:	2b00      	cmp	r3, #0
    416e:	d01c      	beq.n	41aa <usage_fault+0x1f6>
		PR_FAULT_INFO("  Attempt to execute undefined instruction");
    4170:	2303      	movs	r3, #3
    4172:	2b00      	cmp	r3, #0
    4174:	d018      	beq.n	41a8 <usage_fault+0x1f4>
    4176:	f005 fea8 	bl	9eca <k_is_user_context>
    417a:	4603      	mov	r3, r0
    417c:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
    4180:	2300      	movs	r3, #0
    4182:	60fb      	str	r3, [r7, #12]
    4184:	4b0f      	ldr	r3, [pc, #60]	; (41c4 <usage_fault+0x210>)
    4186:	681b      	ldr	r3, [r3, #0]
    4188:	647b      	str	r3, [r7, #68]	; 0x44
    418a:	4b16      	ldr	r3, [pc, #88]	; (41e4 <usage_fault+0x230>)
    418c:	9302      	str	r3, [sp, #8]
    418e:	2300      	movs	r3, #0
    4190:	9301      	str	r3, [sp, #4]
    4192:	2300      	movs	r3, #0
    4194:	9300      	str	r3, [sp, #0]
    4196:	2300      	movs	r3, #0
    4198:	2201      	movs	r2, #1
    419a:	6c79      	ldr	r1, [r7, #68]	; 0x44
    419c:	2000      	movs	r0, #0
    419e:	f005 fe9b 	bl	9ed8 <z_log_msg2_runtime_create>
    41a2:	2300      	movs	r3, #0
    41a4:	643b      	str	r3, [r7, #64]	; 0x40
    41a6:	e000      	b.n	41aa <usage_fault+0x1f6>
    41a8:	bf00      	nop
	}

	/* clear UFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
    41aa:	4b08      	ldr	r3, [pc, #32]	; (41cc <usage_fault+0x218>)
    41ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    41ae:	4a07      	ldr	r2, [pc, #28]	; (41cc <usage_fault+0x218>)
    41b0:	ea6f 4303 	mvn.w	r3, r3, lsl #16
    41b4:	ea6f 4313 	mvn.w	r3, r3, lsr #16
    41b8:	6293      	str	r3, [r2, #40]	; 0x28

	return reason;
    41ba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
}
    41bc:	4618      	mov	r0, r3
    41be:	3798      	adds	r7, #152	; 0x98
    41c0:	46bd      	mov	sp, r7
    41c2:	bd80      	pop	{r7, pc}
    41c4:	20000010 	.word	0x20000010
    41c8:	0000bb3c 	.word	0x0000bb3c
    41cc:	e000ed00 	.word	0xe000ed00
    41d0:	0000bb54 	.word	0x0000bb54
    41d4:	0000bb68 	.word	0x0000bb68
    41d8:	0000bb84 	.word	0x0000bb84
    41dc:	0000bba4 	.word	0x0000bba4
    41e0:	0000bbcc 	.word	0x0000bbcc
    41e4:	0000bbe8 	.word	0x0000bbe8

000041e8 <debug_monitor>:
 *
 * See z_arm_fault_dump() for example.
 *
 */
static void debug_monitor(z_arch_esf_t *esf, bool *recoverable)
{
    41e8:	b580      	push	{r7, lr}
    41ea:	b08c      	sub	sp, #48	; 0x30
    41ec:	af04      	add	r7, sp, #16
    41ee:	6078      	str	r0, [r7, #4]
    41f0:	6039      	str	r1, [r7, #0]
	*recoverable = false;
    41f2:	683b      	ldr	r3, [r7, #0]
    41f4:	2200      	movs	r2, #0
    41f6:	701a      	strb	r2, [r3, #0]

	PR_FAULT_INFO(
    41f8:	2303      	movs	r3, #3
    41fa:	2b00      	cmp	r3, #0
    41fc:	d101      	bne.n	4202 <debug_monitor+0x1a>
    41fe:	bf00      	nop

		*recoverable = memory_fault_recoverable(esf, false);
	}

#endif
}
    4200:	e016      	b.n	4230 <debug_monitor+0x48>
	PR_FAULT_INFO(
    4202:	f005 fe62 	bl	9eca <k_is_user_context>
    4206:	4603      	mov	r3, r0
    4208:	76fb      	strb	r3, [r7, #27]
    420a:	2300      	movs	r3, #0
    420c:	613b      	str	r3, [r7, #16]
    420e:	4b0a      	ldr	r3, [pc, #40]	; (4238 <debug_monitor+0x50>)
    4210:	681b      	ldr	r3, [r3, #0]
    4212:	61fb      	str	r3, [r7, #28]
    4214:	4b09      	ldr	r3, [pc, #36]	; (423c <debug_monitor+0x54>)
    4216:	9302      	str	r3, [sp, #8]
    4218:	2300      	movs	r3, #0
    421a:	9301      	str	r3, [sp, #4]
    421c:	2300      	movs	r3, #0
    421e:	9300      	str	r3, [sp, #0]
    4220:	2300      	movs	r3, #0
    4222:	2201      	movs	r2, #1
    4224:	69f9      	ldr	r1, [r7, #28]
    4226:	2000      	movs	r0, #0
    4228:	f005 fe56 	bl	9ed8 <z_log_msg2_runtime_create>
    422c:	2300      	movs	r3, #0
    422e:	617b      	str	r3, [r7, #20]
}
    4230:	bf00      	nop
    4232:	3720      	adds	r7, #32
    4234:	46bd      	mov	sp, r7
    4236:	bd80      	pop	{r7, pc}
    4238:	20000010 	.word	0x20000010
    423c:	0000bc14 	.word	0x0000bc14

00004240 <hard_fault>:
 * See z_arm_fault_dump() for example.
 *
 * @return error code to identify the fatal error reason
 */
static uint32_t hard_fault(z_arch_esf_t *esf, bool *recoverable)
{
    4240:	b580      	push	{r7, lr}
    4242:	b0a0      	sub	sp, #128	; 0x80
    4244:	af04      	add	r7, sp, #16
    4246:	6078      	str	r0, [r7, #4]
    4248:	6039      	str	r1, [r7, #0]
	uint32_t reason = K_ERR_CPU_EXCEPTION;
    424a:	2300      	movs	r3, #0
    424c:	66bb      	str	r3, [r7, #104]	; 0x68

	PR_FAULT_INFO("***** HARD FAULT *****");
    424e:	2303      	movs	r3, #3
    4250:	2b00      	cmp	r3, #0
    4252:	d018      	beq.n	4286 <hard_fault+0x46>
    4254:	f005 fe39 	bl	9eca <k_is_user_context>
    4258:	4603      	mov	r3, r0
    425a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    425e:	2300      	movs	r3, #0
    4260:	62fb      	str	r3, [r7, #44]	; 0x2c
    4262:	4b69      	ldr	r3, [pc, #420]	; (4408 <hard_fault+0x1c8>)
    4264:	681b      	ldr	r3, [r3, #0]
    4266:	64fb      	str	r3, [r7, #76]	; 0x4c
    4268:	4b68      	ldr	r3, [pc, #416]	; (440c <hard_fault+0x1cc>)
    426a:	9302      	str	r3, [sp, #8]
    426c:	2300      	movs	r3, #0
    426e:	9301      	str	r3, [sp, #4]
    4270:	2300      	movs	r3, #0
    4272:	9300      	str	r3, [sp, #0]
    4274:	2300      	movs	r3, #0
    4276:	2201      	movs	r2, #1
    4278:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
    427a:	2000      	movs	r0, #0
    427c:	f005 fe2c 	bl	9ed8 <z_log_msg2_runtime_create>
    4280:	2300      	movs	r3, #0
    4282:	64bb      	str	r3, [r7, #72]	; 0x48
    4284:	e000      	b.n	4288 <hard_fault+0x48>
    4286:	bf00      	nop
		reason = esf->basic.r0;
	}

	*recoverable = memory_fault_recoverable(esf, true);
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	*recoverable = false;
    4288:	683b      	ldr	r3, [r7, #0]
    428a:	2200      	movs	r2, #0
    428c:	701a      	strb	r2, [r3, #0]

	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
    428e:	4b60      	ldr	r3, [pc, #384]	; (4410 <hard_fault+0x1d0>)
    4290:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    4292:	f003 0302 	and.w	r3, r3, #2
    4296:	2b00      	cmp	r3, #0
    4298:	d01c      	beq.n	42d4 <hard_fault+0x94>
		PR_EXC("  Bus fault on vector table read");
    429a:	2303      	movs	r3, #3
    429c:	2b00      	cmp	r3, #0
    429e:	f000 80aa 	beq.w	43f6 <hard_fault+0x1b6>
    42a2:	f005 fe12 	bl	9eca <k_is_user_context>
    42a6:	4603      	mov	r3, r0
    42a8:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
    42ac:	2300      	movs	r3, #0
    42ae:	627b      	str	r3, [r7, #36]	; 0x24
    42b0:	4b55      	ldr	r3, [pc, #340]	; (4408 <hard_fault+0x1c8>)
    42b2:	681b      	ldr	r3, [r3, #0]
    42b4:	637b      	str	r3, [r7, #52]	; 0x34
    42b6:	4b57      	ldr	r3, [pc, #348]	; (4414 <hard_fault+0x1d4>)
    42b8:	9302      	str	r3, [sp, #8]
    42ba:	2300      	movs	r3, #0
    42bc:	9301      	str	r3, [sp, #4]
    42be:	2300      	movs	r3, #0
    42c0:	9300      	str	r3, [sp, #0]
    42c2:	2300      	movs	r3, #0
    42c4:	2201      	movs	r2, #1
    42c6:	6b79      	ldr	r1, [r7, #52]	; 0x34
    42c8:	2000      	movs	r0, #0
    42ca:	f005 fe05 	bl	9ed8 <z_log_msg2_runtime_create>
    42ce:	2300      	movs	r3, #0
    42d0:	633b      	str	r3, [r7, #48]	; 0x30
    42d2:	e093      	b.n	43fc <hard_fault+0x1bc>
	} else if ((SCB->HFSR & SCB_HFSR_DEBUGEVT_Msk) != 0) {
    42d4:	4b4e      	ldr	r3, [pc, #312]	; (4410 <hard_fault+0x1d0>)
    42d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    42d8:	2b00      	cmp	r3, #0
    42da:	da1c      	bge.n	4316 <hard_fault+0xd6>
		PR_EXC("  Debug event");
    42dc:	2303      	movs	r3, #3
    42de:	2b00      	cmp	r3, #0
    42e0:	f000 808b 	beq.w	43fa <hard_fault+0x1ba>
    42e4:	f005 fdf1 	bl	9eca <k_is_user_context>
    42e8:	4603      	mov	r3, r0
    42ea:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
    42ee:	2300      	movs	r3, #0
    42f0:	61fb      	str	r3, [r7, #28]
    42f2:	4b45      	ldr	r3, [pc, #276]	; (4408 <hard_fault+0x1c8>)
    42f4:	681b      	ldr	r3, [r3, #0]
    42f6:	643b      	str	r3, [r7, #64]	; 0x40
    42f8:	4b47      	ldr	r3, [pc, #284]	; (4418 <hard_fault+0x1d8>)
    42fa:	9302      	str	r3, [sp, #8]
    42fc:	2300      	movs	r3, #0
    42fe:	9301      	str	r3, [sp, #4]
    4300:	2300      	movs	r3, #0
    4302:	9300      	str	r3, [sp, #0]
    4304:	2300      	movs	r3, #0
    4306:	2201      	movs	r2, #1
    4308:	6c39      	ldr	r1, [r7, #64]	; 0x40
    430a:	2000      	movs	r0, #0
    430c:	f005 fde4 	bl	9ed8 <z_log_msg2_runtime_create>
    4310:	2300      	movs	r3, #0
    4312:	63fb      	str	r3, [r7, #60]	; 0x3c
    4314:	e072      	b.n	43fc <hard_fault+0x1bc>
	} else if ((SCB->HFSR & SCB_HFSR_FORCED_Msk) != 0) {
    4316:	4b3e      	ldr	r3, [pc, #248]	; (4410 <hard_fault+0x1d0>)
    4318:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    431a:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
    431e:	2b00      	cmp	r3, #0
    4320:	d06c      	beq.n	43fc <hard_fault+0x1bc>
		PR_EXC("  Fault escalation (see below)");
    4322:	2303      	movs	r3, #3
    4324:	2b00      	cmp	r3, #0
    4326:	d018      	beq.n	435a <hard_fault+0x11a>
    4328:	f005 fdcf 	bl	9eca <k_is_user_context>
    432c:	4603      	mov	r3, r0
    432e:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
    4332:	2300      	movs	r3, #0
    4334:	617b      	str	r3, [r7, #20]
    4336:	4b34      	ldr	r3, [pc, #208]	; (4408 <hard_fault+0x1c8>)
    4338:	681b      	ldr	r3, [r3, #0]
    433a:	657b      	str	r3, [r7, #84]	; 0x54
    433c:	4b37      	ldr	r3, [pc, #220]	; (441c <hard_fault+0x1dc>)
    433e:	9302      	str	r3, [sp, #8]
    4340:	2300      	movs	r3, #0
    4342:	9301      	str	r3, [sp, #4]
    4344:	2300      	movs	r3, #0
    4346:	9300      	str	r3, [sp, #0]
    4348:	2300      	movs	r3, #0
    434a:	2201      	movs	r2, #1
    434c:	6d79      	ldr	r1, [r7, #84]	; 0x54
    434e:	2000      	movs	r0, #0
    4350:	f005 fdc2 	bl	9ed8 <z_log_msg2_runtime_create>
    4354:	2300      	movs	r3, #0
    4356:	65bb      	str	r3, [r7, #88]	; 0x58
    4358:	e000      	b.n	435c <hard_fault+0x11c>
    435a:	bf00      	nop
		if (z_arm_is_synchronous_svc(esf)) {
    435c:	6878      	ldr	r0, [r7, #4]
    435e:	f005 fe0a 	bl	9f76 <z_arm_is_synchronous_svc>
    4362:	4603      	mov	r3, r0
    4364:	2b00      	cmp	r3, #0
    4366:	d023      	beq.n	43b0 <hard_fault+0x170>
			PR_EXC("ARCH_EXCEPT with reason %x\n", esf->basic.r0);
    4368:	2303      	movs	r3, #3
    436a:	2b00      	cmp	r3, #0
    436c:	d01b      	beq.n	43a6 <hard_fault+0x166>
    436e:	f005 fdac 	bl	9eca <k_is_user_context>
    4372:	4603      	mov	r3, r0
    4374:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
    4378:	2300      	movs	r3, #0
    437a:	60fb      	str	r3, [r7, #12]
    437c:	4b22      	ldr	r3, [pc, #136]	; (4408 <hard_fault+0x1c8>)
    437e:	681b      	ldr	r3, [r3, #0]
    4380:	663b      	str	r3, [r7, #96]	; 0x60
    4382:	687b      	ldr	r3, [r7, #4]
    4384:	681b      	ldr	r3, [r3, #0]
    4386:	9303      	str	r3, [sp, #12]
    4388:	4b25      	ldr	r3, [pc, #148]	; (4420 <hard_fault+0x1e0>)
    438a:	9302      	str	r3, [sp, #8]
    438c:	2300      	movs	r3, #0
    438e:	9301      	str	r3, [sp, #4]
    4390:	2300      	movs	r3, #0
    4392:	9300      	str	r3, [sp, #0]
    4394:	2300      	movs	r3, #0
    4396:	2201      	movs	r2, #1
    4398:	6e39      	ldr	r1, [r7, #96]	; 0x60
    439a:	2000      	movs	r0, #0
    439c:	f005 fd9c 	bl	9ed8 <z_log_msg2_runtime_create>
    43a0:	2300      	movs	r3, #0
    43a2:	667b      	str	r3, [r7, #100]	; 0x64
    43a4:	e000      	b.n	43a8 <hard_fault+0x168>
    43a6:	bf00      	nop
			reason = esf->basic.r0;
    43a8:	687b      	ldr	r3, [r7, #4]
    43aa:	681b      	ldr	r3, [r3, #0]
    43ac:	66bb      	str	r3, [r7, #104]	; 0x68
    43ae:	e025      	b.n	43fc <hard_fault+0x1bc>
		} else if (SCB_MMFSR != 0) {
    43b0:	4b1c      	ldr	r3, [pc, #112]	; (4424 <hard_fault+0x1e4>)
    43b2:	781b      	ldrb	r3, [r3, #0]
    43b4:	b2db      	uxtb	r3, r3
    43b6:	2b00      	cmp	r3, #0
    43b8:	d006      	beq.n	43c8 <hard_fault+0x188>
			reason = mem_manage_fault(esf, 1, recoverable);
    43ba:	683a      	ldr	r2, [r7, #0]
    43bc:	2101      	movs	r1, #1
    43be:	6878      	ldr	r0, [r7, #4]
    43c0:	f7ff fba6 	bl	3b10 <mem_manage_fault>
    43c4:	66b8      	str	r0, [r7, #104]	; 0x68
    43c6:	e019      	b.n	43fc <hard_fault+0x1bc>
		} else if (SCB_BFSR != 0) {
    43c8:	4b17      	ldr	r3, [pc, #92]	; (4428 <hard_fault+0x1e8>)
    43ca:	781b      	ldrb	r3, [r3, #0]
    43cc:	b2db      	uxtb	r3, r3
    43ce:	2b00      	cmp	r3, #0
    43d0:	d007      	beq.n	43e2 <hard_fault+0x1a2>
			reason = bus_fault(esf, 1, recoverable);
    43d2:	683a      	ldr	r2, [r7, #0]
    43d4:	2101      	movs	r1, #1
    43d6:	6878      	ldr	r0, [r7, #4]
    43d8:	f7ff fcb6 	bl	3d48 <bus_fault>
    43dc:	4603      	mov	r3, r0
    43de:	66bb      	str	r3, [r7, #104]	; 0x68
    43e0:	e00c      	b.n	43fc <hard_fault+0x1bc>
		} else if (SCB_UFSR != 0) {
    43e2:	4b12      	ldr	r3, [pc, #72]	; (442c <hard_fault+0x1ec>)
    43e4:	881b      	ldrh	r3, [r3, #0]
    43e6:	b29b      	uxth	r3, r3
    43e8:	2b00      	cmp	r3, #0
    43ea:	d007      	beq.n	43fc <hard_fault+0x1bc>
			reason = usage_fault(esf);
    43ec:	6878      	ldr	r0, [r7, #4]
    43ee:	f7ff fde1 	bl	3fb4 <usage_fault>
    43f2:	66b8      	str	r0, [r7, #104]	; 0x68
    43f4:	e002      	b.n	43fc <hard_fault+0x1bc>
		PR_EXC("  Bus fault on vector table read");
    43f6:	bf00      	nop
    43f8:	e000      	b.n	43fc <hard_fault+0x1bc>
		PR_EXC("  Debug event");
    43fa:	bf00      	nop
	}
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	return reason;
    43fc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
}
    43fe:	4618      	mov	r0, r3
    4400:	3770      	adds	r7, #112	; 0x70
    4402:	46bd      	mov	sp, r7
    4404:	bd80      	pop	{r7, pc}
    4406:	bf00      	nop
    4408:	20000010 	.word	0x20000010
    440c:	0000bc38 	.word	0x0000bc38
    4410:	e000ed00 	.word	0xe000ed00
    4414:	0000bc50 	.word	0x0000bc50
    4418:	0000bc74 	.word	0x0000bc74
    441c:	0000bc84 	.word	0x0000bc84
    4420:	0000bca4 	.word	0x0000bca4
    4424:	e000ed28 	.word	0xe000ed28
    4428:	e000ed29 	.word	0xe000ed29
    442c:	e000ed2a 	.word	0xe000ed2a

00004430 <reserved_exception>:
 *
 * See z_arm_fault_dump() for example.
 *
 */
static void reserved_exception(const z_arch_esf_t *esf, int fault)
{
    4430:	b580      	push	{r7, lr}
    4432:	b08e      	sub	sp, #56	; 0x38
    4434:	af06      	add	r7, sp, #24
    4436:	6078      	str	r0, [r7, #4]
    4438:	6039      	str	r1, [r7, #0]
	ARG_UNUSED(esf);

	PR_FAULT_INFO("***** %s %d) *****",
    443a:	2303      	movs	r3, #3
    443c:	2b00      	cmp	r3, #0
    443e:	d101      	bne.n	4444 <reserved_exception+0x14>
    4440:	bf00      	nop
	       fault < 16 ? "Reserved Exception (" : "Spurious interrupt (IRQ ",
	       fault - 16);
}
    4442:	e020      	b.n	4486 <reserved_exception+0x56>
	PR_FAULT_INFO("***** %s %d) *****",
    4444:	f005 fd41 	bl	9eca <k_is_user_context>
    4448:	4603      	mov	r3, r0
    444a:	75fb      	strb	r3, [r7, #23]
    444c:	2300      	movs	r3, #0
    444e:	613b      	str	r3, [r7, #16]
    4450:	4b0f      	ldr	r3, [pc, #60]	; (4490 <reserved_exception+0x60>)
    4452:	681b      	ldr	r3, [r3, #0]
    4454:	61bb      	str	r3, [r7, #24]
    4456:	683b      	ldr	r3, [r7, #0]
    4458:	2b0f      	cmp	r3, #15
    445a:	dc01      	bgt.n	4460 <reserved_exception+0x30>
    445c:	4b0d      	ldr	r3, [pc, #52]	; (4494 <reserved_exception+0x64>)
    445e:	e000      	b.n	4462 <reserved_exception+0x32>
    4460:	4b0d      	ldr	r3, [pc, #52]	; (4498 <reserved_exception+0x68>)
    4462:	683a      	ldr	r2, [r7, #0]
    4464:	3a10      	subs	r2, #16
    4466:	9204      	str	r2, [sp, #16]
    4468:	9303      	str	r3, [sp, #12]
    446a:	4b0c      	ldr	r3, [pc, #48]	; (449c <reserved_exception+0x6c>)
    446c:	9302      	str	r3, [sp, #8]
    446e:	2300      	movs	r3, #0
    4470:	9301      	str	r3, [sp, #4]
    4472:	2300      	movs	r3, #0
    4474:	9300      	str	r3, [sp, #0]
    4476:	2300      	movs	r3, #0
    4478:	2201      	movs	r2, #1
    447a:	69b9      	ldr	r1, [r7, #24]
    447c:	2000      	movs	r0, #0
    447e:	f005 fd2b 	bl	9ed8 <z_log_msg2_runtime_create>
    4482:	2300      	movs	r3, #0
    4484:	61fb      	str	r3, [r7, #28]
}
    4486:	bf00      	nop
    4488:	3720      	adds	r7, #32
    448a:	46bd      	mov	sp, r7
    448c:	bd80      	pop	{r7, pc}
    448e:	bf00      	nop
    4490:	20000010 	.word	0x20000010
    4494:	0000bcc0 	.word	0x0000bcc0
    4498:	0000bcd8 	.word	0x0000bcd8
    449c:	0000bcf4 	.word	0x0000bcf4

000044a0 <fault_handle>:

/* Handler function for ARM fault conditions. */
static uint32_t fault_handle(z_arch_esf_t *esf, int fault, bool *recoverable)
{
    44a0:	b580      	push	{r7, lr}
    44a2:	b086      	sub	sp, #24
    44a4:	af00      	add	r7, sp, #0
    44a6:	60f8      	str	r0, [r7, #12]
    44a8:	60b9      	str	r1, [r7, #8]
    44aa:	607a      	str	r2, [r7, #4]
	uint32_t reason = K_ERR_CPU_EXCEPTION;
    44ac:	2300      	movs	r3, #0
    44ae:	617b      	str	r3, [r7, #20]

	*recoverable = false;
    44b0:	687b      	ldr	r3, [r7, #4]
    44b2:	2200      	movs	r2, #0
    44b4:	701a      	strb	r2, [r3, #0]

	switch (fault) {
    44b6:	68bb      	ldr	r3, [r7, #8]
    44b8:	3b03      	subs	r3, #3
    44ba:	2b09      	cmp	r3, #9
    44bc:	d835      	bhi.n	452a <fault_handle+0x8a>
    44be:	a201      	add	r2, pc, #4	; (adr r2, 44c4 <fault_handle+0x24>)
    44c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    44c4:	000044ed 	.word	0x000044ed
    44c8:	000044f9 	.word	0x000044f9
    44cc:	00004507 	.word	0x00004507
    44d0:	00004517 	.word	0x00004517
    44d4:	0000452b 	.word	0x0000452b
    44d8:	0000452b 	.word	0x0000452b
    44dc:	0000452b 	.word	0x0000452b
    44e0:	0000452b 	.word	0x0000452b
    44e4:	0000452b 	.word	0x0000452b
    44e8:	00004521 	.word	0x00004521
	case 3:
		reason = hard_fault(esf, recoverable);
    44ec:	6879      	ldr	r1, [r7, #4]
    44ee:	68f8      	ldr	r0, [r7, #12]
    44f0:	f7ff fea6 	bl	4240 <hard_fault>
    44f4:	6178      	str	r0, [r7, #20]
		break;
    44f6:	e01d      	b.n	4534 <fault_handle+0x94>
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	/* HardFault is raised for all fault conditions on ARMv6-M. */
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	case 4:
		reason = mem_manage_fault(esf, 0, recoverable);
    44f8:	687a      	ldr	r2, [r7, #4]
    44fa:	2100      	movs	r1, #0
    44fc:	68f8      	ldr	r0, [r7, #12]
    44fe:	f7ff fb07 	bl	3b10 <mem_manage_fault>
    4502:	6178      	str	r0, [r7, #20]
		break;
    4504:	e016      	b.n	4534 <fault_handle+0x94>
	case 5:
		reason = bus_fault(esf, 0, recoverable);
    4506:	687a      	ldr	r2, [r7, #4]
    4508:	2100      	movs	r1, #0
    450a:	68f8      	ldr	r0, [r7, #12]
    450c:	f7ff fc1c 	bl	3d48 <bus_fault>
    4510:	4603      	mov	r3, r0
    4512:	617b      	str	r3, [r7, #20]
		break;
    4514:	e00e      	b.n	4534 <fault_handle+0x94>
	case 6:
		reason = usage_fault(esf);
    4516:	68f8      	ldr	r0, [r7, #12]
    4518:	f7ff fd4c 	bl	3fb4 <usage_fault>
    451c:	6178      	str	r0, [r7, #20]
		break;
    451e:	e009      	b.n	4534 <fault_handle+0x94>
	case 7:
		secure_fault(esf);
		break;
#endif /* CONFIG_ARM_SECURE_FIRMWARE */
	case 12:
		debug_monitor(esf, recoverable);
    4520:	6879      	ldr	r1, [r7, #4]
    4522:	68f8      	ldr	r0, [r7, #12]
    4524:	f7ff fe60 	bl	41e8 <debug_monitor>
		break;
    4528:	e004      	b.n	4534 <fault_handle+0x94>
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
	default:
		reserved_exception(esf, fault);
    452a:	68b9      	ldr	r1, [r7, #8]
    452c:	68f8      	ldr	r0, [r7, #12]
    452e:	f7ff ff7f 	bl	4430 <reserved_exception>
		break;
    4532:	bf00      	nop
	}

	if ((*recoverable) == false) {
    4534:	687b      	ldr	r3, [r7, #4]
    4536:	781b      	ldrb	r3, [r3, #0]
    4538:	f083 0301 	eor.w	r3, r3, #1
    453c:	b2db      	uxtb	r3, r3
    453e:	2b00      	cmp	r3, #0
    4540:	d003      	beq.n	454a <fault_handle+0xaa>
		/* Dump generic information about the fault. */
		fault_show(esf, fault);
    4542:	68b9      	ldr	r1, [r7, #8]
    4544:	68f8      	ldr	r0, [r7, #12]
    4546:	f005 fd00 	bl	9f4a <fault_show>
	}

	return reason;
    454a:	697b      	ldr	r3, [r7, #20]
}
    454c:	4618      	mov	r0, r3
    454e:	3718      	adds	r7, #24
    4550:	46bd      	mov	sp, r7
    4552:	bd80      	pop	{r7, pc}

00004554 <get_esf>:
 *
 * @return ESF pointer on success, otherwise return NULL
 */
static inline z_arch_esf_t *get_esf(uint32_t msp, uint32_t psp, uint32_t exc_return,
	bool *nested_exc)
{
    4554:	b580      	push	{r7, lr}
    4556:	b08e      	sub	sp, #56	; 0x38
    4558:	af04      	add	r7, sp, #16
    455a:	60f8      	str	r0, [r7, #12]
    455c:	60b9      	str	r1, [r7, #8]
    455e:	607a      	str	r2, [r7, #4]
    4560:	603b      	str	r3, [r7, #0]
	bool alternative_state_exc = false;
    4562:	2300      	movs	r3, #0
    4564:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	z_arch_esf_t *ptr_esf = NULL;
    4568:	2300      	movs	r3, #0
    456a:	627b      	str	r3, [r7, #36]	; 0x24

	*nested_exc = false;
    456c:	683b      	ldr	r3, [r7, #0]
    456e:	2200      	movs	r2, #0
    4570:	701a      	strb	r2, [r3, #0]

	if ((exc_return & EXC_RETURN_INDICATOR_PREFIX) !=
    4572:	687b      	ldr	r3, [r7, #4]
    4574:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
    4578:	f1b3 4f7f 	cmp.w	r3, #4278190080	; 0xff000000
    457c:	d001      	beq.n	4582 <get_esf+0x2e>
			EXC_RETURN_INDICATOR_PREFIX) {
		/* Invalid EXC_RETURN value. This is a fatal error. */
		return NULL;
    457e:	2300      	movs	r3, #0
    4580:	e03d      	b.n	45fe <get_esf+0xaa>
	}
#else
	/* The processor has a single execution state.
	 * We verify that the Thread mode is using PSP.
	 */
	if ((exc_return & EXC_RETURN_MODE_THREAD) &&
    4582:	687b      	ldr	r3, [r7, #4]
    4584:	f003 0308 	and.w	r3, r3, #8
    4588:	2b00      	cmp	r3, #0
    458a:	d023      	beq.n	45d4 <get_esf+0x80>
		(!(exc_return & EXC_RETURN_SPSEL_PROCESS))) {
    458c:	687b      	ldr	r3, [r7, #4]
    458e:	f003 0304 	and.w	r3, r3, #4
	if ((exc_return & EXC_RETURN_MODE_THREAD) &&
    4592:	2b00      	cmp	r3, #0
    4594:	d11e      	bne.n	45d4 <get_esf+0x80>
		PR_EXC("SPSEL in thread mode does not indicate PSP");
    4596:	2303      	movs	r3, #3
    4598:	2b00      	cmp	r3, #0
    459a:	d018      	beq.n	45ce <get_esf+0x7a>
    459c:	f005 fc95 	bl	9eca <k_is_user_context>
    45a0:	4603      	mov	r3, r0
    45a2:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
    45a6:	2300      	movs	r3, #0
    45a8:	617b      	str	r3, [r7, #20]
    45aa:	4b17      	ldr	r3, [pc, #92]	; (4608 <get_esf+0xb4>)
    45ac:	681b      	ldr	r3, [r3, #0]
    45ae:	61fb      	str	r3, [r7, #28]
    45b0:	4b16      	ldr	r3, [pc, #88]	; (460c <get_esf+0xb8>)
    45b2:	9302      	str	r3, [sp, #8]
    45b4:	2300      	movs	r3, #0
    45b6:	9301      	str	r3, [sp, #4]
    45b8:	2300      	movs	r3, #0
    45ba:	9300      	str	r3, [sp, #0]
    45bc:	2300      	movs	r3, #0
    45be:	2201      	movs	r2, #1
    45c0:	69f9      	ldr	r1, [r7, #28]
    45c2:	2000      	movs	r0, #0
    45c4:	f005 fc88 	bl	9ed8 <z_log_msg2_runtime_create>
    45c8:	2300      	movs	r3, #0
    45ca:	61bb      	str	r3, [r7, #24]
    45cc:	e000      	b.n	45d0 <get_esf+0x7c>
    45ce:	bf00      	nop
		return NULL;
    45d0:	2300      	movs	r3, #0
    45d2:	e014      	b.n	45fe <get_esf+0xaa>
	}
#endif /* CONFIG_ARM_SECURE_FIRMWARE */

	if (!alternative_state_exc) {
    45d4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
    45d8:	f083 0301 	eor.w	r3, r3, #1
    45dc:	b2db      	uxtb	r3, r3
    45de:	2b00      	cmp	r3, #0
    45e0:	d00c      	beq.n	45fc <get_esf+0xa8>
		if (exc_return & EXC_RETURN_MODE_THREAD) {
    45e2:	687b      	ldr	r3, [r7, #4]
    45e4:	f003 0308 	and.w	r3, r3, #8
    45e8:	2b00      	cmp	r3, #0
    45ea:	d002      	beq.n	45f2 <get_esf+0x9e>
			/* Returning to thread mode */
			ptr_esf =  (z_arch_esf_t *)psp;
    45ec:	68bb      	ldr	r3, [r7, #8]
    45ee:	627b      	str	r3, [r7, #36]	; 0x24
    45f0:	e004      	b.n	45fc <get_esf+0xa8>

		} else {
			/* Returning to handler mode */
			ptr_esf = (z_arch_esf_t *)msp;
    45f2:	68fb      	ldr	r3, [r7, #12]
    45f4:	627b      	str	r3, [r7, #36]	; 0x24
			*nested_exc = true;
    45f6:	683b      	ldr	r3, [r7, #0]
    45f8:	2201      	movs	r2, #1
    45fa:	701a      	strb	r2, [r3, #0]
		}
	}

	return ptr_esf;
    45fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
    45fe:	4618      	mov	r0, r3
    4600:	3728      	adds	r7, #40	; 0x28
    4602:	46bd      	mov	sp, r7
    4604:	bd80      	pop	{r7, pc}
    4606:	bf00      	nop
    4608:	20000010 	.word	0x20000010
    460c:	0000bd08 	.word	0x0000bd08

00004610 <z_arm_fault>:
 * @param callee_regs Callee-saved registers (R4-R11, PSP)
 *
 */
void z_arm_fault(uint32_t msp, uint32_t psp, uint32_t exc_return,
	_callee_saved_t *callee_regs)
{
    4610:	b580      	push	{r7, lr}
    4612:	b092      	sub	sp, #72	; 0x48
    4614:	af00      	add	r7, sp, #0
    4616:	60f8      	str	r0, [r7, #12]
    4618:	60b9      	str	r1, [r7, #8]
    461a:	607a      	str	r2, [r7, #4]
    461c:	603b      	str	r3, [r7, #0]
	uint32_t reason = K_ERR_CPU_EXCEPTION;
    461e:	2300      	movs	r3, #0
    4620:	647b      	str	r3, [r7, #68]	; 0x44
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    4622:	4b24      	ldr	r3, [pc, #144]	; (46b4 <z_arm_fault+0xa4>)
    4624:	685b      	ldr	r3, [r3, #4]
    4626:	f3c3 0308 	ubfx	r3, r3, #0, #9
    462a:	643b      	str	r3, [r7, #64]	; 0x40
    462c:	2300      	movs	r3, #0
    462e:	63bb      	str	r3, [r7, #56]	; 0x38
	__asm__ volatile(
    4630:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    4632:	f383 8811 	msr	BASEPRI, r3
    4636:	f3bf 8f6f 	isb	sy
}
    463a:	bf00      	nop
	arch_irq_unlock(0);

	/* Retrieve the Exception Stack Frame (ESF) to be supplied
	 * as argument to the remainder of the fault handling process.
	 */
	 esf = get_esf(msp, psp, exc_return, &nested_exc);
    463c:	f107 0336 	add.w	r3, r7, #54	; 0x36
    4640:	687a      	ldr	r2, [r7, #4]
    4642:	68b9      	ldr	r1, [r7, #8]
    4644:	68f8      	ldr	r0, [r7, #12]
    4646:	f7ff ff85 	bl	4554 <get_esf>
    464a:	63f8      	str	r0, [r7, #60]	; 0x3c

#ifdef CONFIG_DEBUG_COREDUMP
	z_arm_coredump_fault_sp = POINTER_TO_UINT(esf);
#endif

	reason = fault_handle(esf, fault, &recoverable);
    464c:	f107 0337 	add.w	r3, r7, #55	; 0x37
    4650:	461a      	mov	r2, r3
    4652:	6c39      	ldr	r1, [r7, #64]	; 0x40
    4654:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
    4656:	f7ff ff23 	bl	44a0 <fault_handle>
    465a:	6478      	str	r0, [r7, #68]	; 0x44
	if (recoverable) {
    465c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
    4660:	2b00      	cmp	r3, #0
    4662:	d123      	bne.n	46ac <z_arm_fault+0x9c>
		return;
	}

	/* Copy ESF */
#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	memcpy(&esf_copy, esf, sizeof(z_arch_esf_t));
    4664:	f107 0314 	add.w	r3, r7, #20
    4668:	2220      	movs	r2, #32
    466a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
    466c:	4618      	mov	r0, r3
    466e:	f005 fce9 	bl	a044 <memcpy>
	/* Overwrite stacked IPSR to mark a nested exception,
	 * or a return to Thread mode. Note that this may be
	 * required, if the retrieved ESF contents are invalid
	 * due to, for instance, a stacking error.
	 */
	if (nested_exc) {
    4672:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
    4676:	2b00      	cmp	r3, #0
    4678:	d00b      	beq.n	4692 <z_arm_fault+0x82>
		if ((esf_copy.basic.xpsr & IPSR_ISR_Msk) == 0) {
    467a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    467c:	f3c3 0308 	ubfx	r3, r3, #0, #9
    4680:	2b00      	cmp	r3, #0
    4682:	d10c      	bne.n	469e <z_arm_fault+0x8e>
			esf_copy.basic.xpsr |= IPSR_ISR_Msk;
    4684:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    4686:	ea6f 2353 	mvn.w	r3, r3, lsr #9
    468a:	ea6f 2343 	mvn.w	r3, r3, lsl #9
    468e:	633b      	str	r3, [r7, #48]	; 0x30
    4690:	e005      	b.n	469e <z_arm_fault+0x8e>
		}
	} else {
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
    4692:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    4694:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
    4698:	f023 0301 	bic.w	r3, r3, #1
    469c:	633b      	str	r3, [r7, #48]	; 0x30
	}

	z_arm_fatal_error(reason, &esf_copy);
    469e:	f107 0314 	add.w	r3, r7, #20
    46a2:	4619      	mov	r1, r3
    46a4:	6c78      	ldr	r0, [r7, #68]	; 0x44
    46a6:	f005 fbc7 	bl	9e38 <z_arm_fatal_error>
    46aa:	e000      	b.n	46ae <z_arm_fault+0x9e>
		return;
    46ac:	bf00      	nop
}
    46ae:	3748      	adds	r7, #72	; 0x48
    46b0:	46bd      	mov	sp, r7
    46b2:	bd80      	pop	{r7, pc}
    46b4:	e000ed00 	.word	0xe000ed00

000046b8 <z_arm_fault_init>:
 *
 * Turns on the desired hardware faults.
 *
 */
void z_arm_fault_init(void)
{
    46b8:	b480      	push	{r7}
    46ba:	af00      	add	r7, sp, #0
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	SCB->CCR |= SCB_CCR_DIV_0_TRP_Msk;
    46bc:	4b04      	ldr	r3, [pc, #16]	; (46d0 <z_arm_fault_init+0x18>)
    46be:	695b      	ldr	r3, [r3, #20]
    46c0:	4a03      	ldr	r2, [pc, #12]	; (46d0 <z_arm_fault_init+0x18>)
    46c2:	f043 0310 	orr.w	r3, r3, #16
    46c6:	6153      	str	r3, [r2, #20]
	SCB->CCR |= SCB_CCR_STKOFHFNMIGN_Msk;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
#ifdef CONFIG_TRAP_UNALIGNED_ACCESS
	SCB->CCR |= SCB_CCR_UNALIGN_TRP_Msk;
#endif /* CONFIG_TRAP_UNALIGNED_ACCESS */
}
    46c8:	bf00      	nop
    46ca:	46bd      	mov	sp, r7
    46cc:	bc80      	pop	{r7}
    46ce:	4770      	bx	lr
    46d0:	e000ed00 	.word	0xe000ed00

000046d4 <z_arm_bus_fault>:
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
SECTION_SUBSEC_FUNC(TEXT,__fault,z_arm_exc_spurious)

	mrs r0, MSP
    46d4:	f3ef 8008 	mrs	r0, MSP
	mrs r1, PSP
    46d8:	f3ef 8109 	mrs	r1, PSP
	push {r0, lr}
    46dc:	b501      	push	{r0, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	push {r4-r11}
#endif
	mov  r3, sp /* pointer to _callee_saved_t */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
	mov r2, lr /* EXC_RETURN */
    46de:	4672      	mov	r2, lr
	bl z_arm_fault
    46e0:	f7ff ff96 	bl	4610 <z_arm_fault>
	 * in this routine. Therefore, we can just reset
	 * the MSP to its value prior to entering the function
	 */
	add sp, #40
#endif
	pop {r0, pc}
    46e4:	bd01      	pop	{r0, pc}
    46e6:	bf00      	nop

000046e8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
    46e8:	b480      	push	{r7}
    46ea:	b083      	sub	sp, #12
    46ec:	af00      	add	r7, sp, #0
    46ee:	4603      	mov	r3, r0
    46f0:	6039      	str	r1, [r7, #0]
    46f2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
    46f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
    46f8:	2b00      	cmp	r3, #0
    46fa:	db0a      	blt.n	4712 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    46fc:	683b      	ldr	r3, [r7, #0]
    46fe:	b2da      	uxtb	r2, r3
    4700:	490c      	ldr	r1, [pc, #48]	; (4734 <__NVIC_SetPriority+0x4c>)
    4702:	f997 3007 	ldrsb.w	r3, [r7, #7]
    4706:	0152      	lsls	r2, r2, #5
    4708:	b2d2      	uxtb	r2, r2
    470a:	440b      	add	r3, r1
    470c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
    4710:	e00a      	b.n	4728 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    4712:	683b      	ldr	r3, [r7, #0]
    4714:	b2da      	uxtb	r2, r3
    4716:	4908      	ldr	r1, [pc, #32]	; (4738 <__NVIC_SetPriority+0x50>)
    4718:	79fb      	ldrb	r3, [r7, #7]
    471a:	f003 030f 	and.w	r3, r3, #15
    471e:	3b04      	subs	r3, #4
    4720:	0152      	lsls	r2, r2, #5
    4722:	b2d2      	uxtb	r2, r2
    4724:	440b      	add	r3, r1
    4726:	761a      	strb	r2, [r3, #24]
}
    4728:	bf00      	nop
    472a:	370c      	adds	r7, #12
    472c:	46bd      	mov	sp, r7
    472e:	bc80      	pop	{r7}
    4730:	4770      	bx	lr
    4732:	bf00      	nop
    4734:	e000e100 	.word	0xe000e100
    4738:	e000ed00 	.word	0xe000ed00

0000473c <__start>:

    /* lock interrupts: will get unlocked when switch to main task */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    473c:	2020      	movs	r0, #32
    msr BASEPRI, r0
    473e:	f380 8811 	msr	BASEPRI, r0

    /*
     * Set PSP and use it to boot without using MSP, so that it
     * gets set to z_interrupt_stacks during initialization.
     */
    ldr r0, =z_interrupt_stacks
    4742:	4808      	ldr	r0, [pc, #32]	; (4764 <__start+0x28>)
    ldr r1, =CONFIG_ISR_STACK_SIZE + MPU_GUARD_ALIGN_AND_SIZE
    4744:	f44f 6100 	mov.w	r1, #2048	; 0x800
    adds r0, r0, r1
    4748:	1840      	adds	r0, r0, r1
    msr PSP, r0
    474a:	f380 8809 	msr	PSP, r0
    mrs r0, CONTROL
    474e:	f3ef 8014 	mrs	r0, CONTROL
    movs r1, #2
    4752:	2102      	movs	r1, #2
    orrs r0, r1 /* CONTROL_SPSEL_Msk */
    4754:	4308      	orrs	r0, r1
    msr CONTROL, r0
    4756:	f380 8814 	msr	CONTROL, r0
    /*
     * When changing the stack pointer, software must use an ISB instruction
     * immediately after the MSR instruction. This ensures that instructions
     * after the ISB instruction execute using the new stack pointer.
     */
    isb
    475a:	f3bf 8f6f 	isb	sy
    /*
     * 'bl' jumps the furthest of the branch instructions that are
     * supported on all platforms. So it is used when jumping to z_arm_prep_c
     * (even though we do not intend to return).
     */
    bl z_arm_prep_c
    475e:	f005 fba2 	bl	9ea6 <z_arm_prep_c>
    4762:	0000      	.short	0x0000
    ldr r0, =z_interrupt_stacks
    4764:	20002190 	.word	0x20002190

00004768 <z_impl_k_thread_abort>:
#include <kswap.h>
#include <zephyr/wait_q.h>
#include <zephyr/sys/__assert.h>

void z_impl_k_thread_abort(k_tid_t thread)
{
    4768:	b580      	push	{r7, lr}
    476a:	b084      	sub	sp, #16
    476c:	af00      	add	r7, sp, #0
    476e:	6078      	str	r0, [r7, #4]
	if (_current == thread) {
    4770:	4b11      	ldr	r3, [pc, #68]	; (47b8 <z_impl_k_thread_abort+0x50>)
    4772:	689b      	ldr	r3, [r3, #8]
    4774:	687a      	ldr	r2, [r7, #4]
    4776:	429a      	cmp	r2, r3
    4778:	d116      	bne.n	47a8 <z_impl_k_thread_abort+0x40>
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    477a:	f3ef 8305 	mrs	r3, IPSR
    477e:	60fb      	str	r3, [r7, #12]
  return(result);
    4780:	68fb      	ldr	r3, [r7, #12]
 * The current executing vector is found in the IPSR register. All
 * IRQs and system exceptions are considered as interrupt context.
 */
static ALWAYS_INLINE bool arch_is_in_isr(void)
{
	return (__get_IPSR()) ? (true) : (false);
    4782:	2b00      	cmp	r3, #0
    4784:	bf14      	ite	ne
    4786:	2301      	movne	r3, #1
    4788:	2300      	moveq	r3, #0
    478a:	b2db      	uxtb	r3, r3
		if (arch_is_in_isr()) {
    478c:	2b00      	cmp	r3, #0
    478e:	d00b      	beq.n	47a8 <z_impl_k_thread_abort+0x40>
			 * should no longer run after we return, so
			 * Trigger PendSV, in case we are in one of the
			 * situations where the isr check is true but there
			 * is not an implicit scheduler invocation.
			 */
			SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    4790:	4b0a      	ldr	r3, [pc, #40]	; (47bc <z_impl_k_thread_abort+0x54>)
    4792:	685b      	ldr	r3, [r3, #4]
    4794:	4a09      	ldr	r2, [pc, #36]	; (47bc <z_impl_k_thread_abort+0x54>)
    4796:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
    479a:	6053      	str	r3, [r2, #4]
			/* Clear any system calls that may be pending
			 * as they have a higher priority than the PendSV
			 * handler and will check the stack of the thread
			 * being aborted.
			 */
			SCB->SHCSR &= ~SCB_SHCSR_SVCALLPENDED_Msk;
    479c:	4b07      	ldr	r3, [pc, #28]	; (47bc <z_impl_k_thread_abort+0x54>)
    479e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    47a0:	4a06      	ldr	r2, [pc, #24]	; (47bc <z_impl_k_thread_abort+0x54>)
    47a2:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
    47a6:	6253      	str	r3, [r2, #36]	; 0x24
		}
	}

	z_thread_abort(thread);
    47a8:	6878      	ldr	r0, [r7, #4]
    47aa:	f003 f87d 	bl	78a8 <z_thread_abort>
}
    47ae:	bf00      	nop
    47b0:	3710      	adds	r7, #16
    47b2:	46bd      	mov	sp, r7
    47b4:	bd80      	pop	{r7, pc}
    47b6:	bf00      	nop
    47b8:	2000074c 	.word	0x2000074c
    47bc:	e000ed00 	.word	0xe000ed00

000047c0 <__stdout_hook_install>:
}

static int (*_stdout_hook)(int) = _stdout_hook_default;

void __stdout_hook_install(int (*hook)(int))
{
    47c0:	b480      	push	{r7}
    47c2:	b083      	sub	sp, #12
    47c4:	af00      	add	r7, sp, #0
    47c6:	6078      	str	r0, [r7, #4]
	_stdout_hook = hook;
    47c8:	4a03      	ldr	r2, [pc, #12]	; (47d8 <__stdout_hook_install+0x18>)
    47ca:	687b      	ldr	r3, [r7, #4]
    47cc:	6013      	str	r3, [r2, #0]
}
    47ce:	bf00      	nop
    47d0:	370c      	adds	r7, #12
    47d2:	46bd      	mov	sp, r7
    47d4:	bc80      	pop	{r7}
    47d6:	4770      	bx	lr
    47d8:	20000014 	.word	0x20000014

000047dc <uart_stellaris_init>:
#define RCGC1_UART0_EN 0x00000001
#define RCGC1_UART1_EN 0x00000002
#define RCGC1_UART2_EN 0x00000004

static int uart_stellaris_init(const struct device *dev)
{
    47dc:	b480      	push	{r7}
    47de:	b083      	sub	sp, #12
    47e0:	af00      	add	r7, sp, #0
    47e2:	6078      	str	r0, [r7, #4]
#ifdef CONFIG_UART_STELLARIS_PORT_0
	RCGC1 |= RCGC1_UART0_EN;
    47e4:	4b0b      	ldr	r3, [pc, #44]	; (4814 <uart_stellaris_init+0x38>)
    47e6:	681b      	ldr	r3, [r3, #0]
    47e8:	4a0a      	ldr	r2, [pc, #40]	; (4814 <uart_stellaris_init+0x38>)
    47ea:	f043 0301 	orr.w	r3, r3, #1
    47ee:	6013      	str	r3, [r2, #0]
#endif

#ifdef CONFIG_UART_STELLARIS_PORT_1
	RCGC1 |= RCGC1_UART1_EN;
    47f0:	4b08      	ldr	r3, [pc, #32]	; (4814 <uart_stellaris_init+0x38>)
    47f2:	681b      	ldr	r3, [r3, #0]
    47f4:	4a07      	ldr	r2, [pc, #28]	; (4814 <uart_stellaris_init+0x38>)
    47f6:	f043 0302 	orr.w	r3, r3, #2
    47fa:	6013      	str	r3, [r2, #0]
#endif

#ifdef CONFIG_UART_STELLARIS_PORT_2
	RCGC1 |= RCGC1_UART2_EN;
    47fc:	4b05      	ldr	r3, [pc, #20]	; (4814 <uart_stellaris_init+0x38>)
    47fe:	681b      	ldr	r3, [r3, #0]
    4800:	4a04      	ldr	r2, [pc, #16]	; (4814 <uart_stellaris_init+0x38>)
    4802:	f043 0304 	orr.w	r3, r3, #4
    4806:	6013      	str	r3, [r2, #0]
#endif

	return 0;
    4808:	2300      	movs	r3, #0
}
    480a:	4618      	mov	r0, r3
    480c:	370c      	adds	r7, #12
    480e:	46bd      	mov	sp, r7
    4810:	bc80      	pop	{r7}
    4812:	4770      	bx	lr
    4814:	400fe104 	.word	0x400fe104

00004818 <console_out>:
 *
 * @return The character passed as input.
 */

static int console_out(int c)
{
    4818:	b580      	push	{r7, lr}
    481a:	b082      	sub	sp, #8
    481c:	af00      	add	r7, sp, #0
    481e:	6078      	str	r0, [r7, #4]
		return c;
	}

#endif  /* CONFIG_UART_CONSOLE_DEBUG_SERVER_HOOKS */

	if ('\n' == c) {
    4820:	687b      	ldr	r3, [r7, #4]
    4822:	2b0a      	cmp	r3, #10
    4824:	d105      	bne.n	4832 <console_out+0x1a>
		uart_poll_out(uart_console_dev, '\r');
    4826:	4b09      	ldr	r3, [pc, #36]	; (484c <console_out+0x34>)
    4828:	681b      	ldr	r3, [r3, #0]
    482a:	210d      	movs	r1, #13
    482c:	4618      	mov	r0, r3
    482e:	f005 fce9 	bl	a204 <uart_poll_out>
	}
	uart_poll_out(uart_console_dev, c);
    4832:	4b06      	ldr	r3, [pc, #24]	; (484c <console_out+0x34>)
    4834:	681b      	ldr	r3, [r3, #0]
    4836:	687a      	ldr	r2, [r7, #4]
    4838:	b2d2      	uxtb	r2, r2
    483a:	4611      	mov	r1, r2
    483c:	4618      	mov	r0, r3
    483e:	f005 fce1 	bl	a204 <uart_poll_out>

	return c;
    4842:	687b      	ldr	r3, [r7, #4]
}
    4844:	4618      	mov	r0, r3
    4846:	3708      	adds	r7, #8
    4848:	46bd      	mov	sp, r7
    484a:	bd80      	pop	{r7, pc}
    484c:	20000734 	.word	0x20000734

00004850 <uart_console_hook_install>:
/**
 * @brief Install printk/stdout hook for UART console output
 */

static void uart_console_hook_install(void)
{
    4850:	b580      	push	{r7, lr}
    4852:	af00      	add	r7, sp, #0
#if defined(CONFIG_STDOUT_CONSOLE)
	__stdout_hook_install(console_out);
    4854:	4803      	ldr	r0, [pc, #12]	; (4864 <uart_console_hook_install+0x14>)
    4856:	f7ff ffb3 	bl	47c0 <__stdout_hook_install>
#endif
#if defined(CONFIG_PRINTK)
	__printk_hook_install(console_out);
    485a:	4802      	ldr	r0, [pc, #8]	; (4864 <uart_console_hook_install+0x14>)
    485c:	f7fc fbc8 	bl	ff0 <__printk_hook_install>
#endif
}
    4860:	bf00      	nop
    4862:	bd80      	pop	{r7, pc}
    4864:	00004819 	.word	0x00004819

00004868 <uart_console_init>:
 * @brief Initialize one UART as the console/debug port
 *
 * @return 0 if successful, otherwise failed.
 */
static int uart_console_init(const struct device *arg)
{
    4868:	b580      	push	{r7, lr}
    486a:	b082      	sub	sp, #8
    486c:	af00      	add	r7, sp, #0
    486e:	6078      	str	r0, [r7, #4]

	ARG_UNUSED(arg);

	/* Claim console device */
	uart_console_dev = DEVICE_DT_GET(DT_CHOSEN(zephyr_console));
    4870:	4b0b      	ldr	r3, [pc, #44]	; (48a0 <uart_console_init+0x38>)
    4872:	4a0c      	ldr	r2, [pc, #48]	; (48a4 <uart_console_init+0x3c>)
    4874:	601a      	str	r2, [r3, #0]
	if (!device_is_ready(uart_console_dev)) {
    4876:	4b0a      	ldr	r3, [pc, #40]	; (48a0 <uart_console_init+0x38>)
    4878:	681b      	ldr	r3, [r3, #0]
    487a:	4618      	mov	r0, r3
    487c:	f005 fca3 	bl	a1c6 <device_is_ready>
    4880:	4603      	mov	r3, r0
    4882:	f083 0301 	eor.w	r3, r3, #1
    4886:	b2db      	uxtb	r3, r3
    4888:	2b00      	cmp	r3, #0
    488a:	d002      	beq.n	4892 <uart_console_init+0x2a>
		return -ENODEV;
    488c:	f06f 0312 	mvn.w	r3, #18
    4890:	e002      	b.n	4898 <uart_console_init+0x30>
	}

	uart_console_hook_install();
    4892:	f7ff ffdd 	bl	4850 <uart_console_hook_install>

	return 0;
    4896:	2300      	movs	r3, #0
}
    4898:	4618      	mov	r0, r3
    489a:	3708      	adds	r7, #8
    489c:	46bd      	mov	sp, r7
    489e:	bd80      	pop	{r7, pc}
    48a0:	20000734 	.word	0x20000734
    48a4:	0000b604 	.word	0x0000b604

000048a8 <sys_clock_hw_cycles_per_sec>:
{
    48a8:	b480      	push	{r7}
    48aa:	af00      	add	r7, sp, #0
	return CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC;
    48ac:	4b02      	ldr	r3, [pc, #8]	; (48b8 <sys_clock_hw_cycles_per_sec+0x10>)
}
    48ae:	4618      	mov	r0, r3
    48b0:	46bd      	mov	sp, r7
    48b2:	bc80      	pop	{r7}
    48b4:	4770      	bx	lr
    48b6:	bf00      	nop
    48b8:	00b71b00 	.word	0x00b71b00

000048bc <__NVIC_SetPriority>:
{
    48bc:	b480      	push	{r7}
    48be:	b083      	sub	sp, #12
    48c0:	af00      	add	r7, sp, #0
    48c2:	4603      	mov	r3, r0
    48c4:	6039      	str	r1, [r7, #0]
    48c6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
    48c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
    48cc:	2b00      	cmp	r3, #0
    48ce:	db0a      	blt.n	48e6 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    48d0:	683b      	ldr	r3, [r7, #0]
    48d2:	b2da      	uxtb	r2, r3
    48d4:	490c      	ldr	r1, [pc, #48]	; (4908 <__NVIC_SetPriority+0x4c>)
    48d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
    48da:	0152      	lsls	r2, r2, #5
    48dc:	b2d2      	uxtb	r2, r2
    48de:	440b      	add	r3, r1
    48e0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
    48e4:	e00a      	b.n	48fc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    48e6:	683b      	ldr	r3, [r7, #0]
    48e8:	b2da      	uxtb	r2, r3
    48ea:	4908      	ldr	r1, [pc, #32]	; (490c <__NVIC_SetPriority+0x50>)
    48ec:	79fb      	ldrb	r3, [r7, #7]
    48ee:	f003 030f 	and.w	r3, r3, #15
    48f2:	3b04      	subs	r3, #4
    48f4:	0152      	lsls	r2, r2, #5
    48f6:	b2d2      	uxtb	r2, r2
    48f8:	440b      	add	r3, r1
    48fa:	761a      	strb	r2, [r3, #24]
}
    48fc:	bf00      	nop
    48fe:	370c      	adds	r7, #12
    4900:	46bd      	mov	sp, r7
    4902:	bc80      	pop	{r7}
    4904:	4770      	bx	lr
    4906:	bf00      	nop
    4908:	e000e100 	.word	0xe000e100
    490c:	e000ed00 	.word	0xe000ed00

00004910 <elapsed>:
 *     - the timer reset or the last time the function was called
 *     - and until the current call of the function is completed.
 * - the function is invoked with interrupts disabled.
 */
static uint32_t elapsed(void)
{
    4910:	b480      	push	{r7}
    4912:	b085      	sub	sp, #20
    4914:	af00      	add	r7, sp, #0
	uint32_t val1 = SysTick->VAL;	/* A */
    4916:	4b13      	ldr	r3, [pc, #76]	; (4964 <elapsed+0x54>)
    4918:	689b      	ldr	r3, [r3, #8]
    491a:	60fb      	str	r3, [r7, #12]
	uint32_t ctrl = SysTick->CTRL;	/* B */
    491c:	4b11      	ldr	r3, [pc, #68]	; (4964 <elapsed+0x54>)
    491e:	681b      	ldr	r3, [r3, #0]
    4920:	60bb      	str	r3, [r7, #8]
	uint32_t val2 = SysTick->VAL;	/* C */
    4922:	4b10      	ldr	r3, [pc, #64]	; (4964 <elapsed+0x54>)
    4924:	689b      	ldr	r3, [r3, #8]
    4926:	607b      	str	r3, [r7, #4]
	 * 4) After C we'll see it next time
	 *
	 * So the count in val2 is post-wrap and last_load needs to be
	 * added if and only if COUNTFLAG is set or val1 < val2.
	 */
	if ((ctrl & SysTick_CTRL_COUNTFLAG_Msk)
    4928:	68bb      	ldr	r3, [r7, #8]
    492a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
    492e:	2b00      	cmp	r3, #0
    4930:	d103      	bne.n	493a <elapsed+0x2a>
	    || (val1 < val2)) {
    4932:	68fa      	ldr	r2, [r7, #12]
    4934:	687b      	ldr	r3, [r7, #4]
    4936:	429a      	cmp	r2, r3
    4938:	d208      	bcs.n	494c <elapsed+0x3c>
		overflow_cyc += last_load;
    493a:	4b0b      	ldr	r3, [pc, #44]	; (4968 <elapsed+0x58>)
    493c:	681a      	ldr	r2, [r3, #0]
    493e:	4b0b      	ldr	r3, [pc, #44]	; (496c <elapsed+0x5c>)
    4940:	681b      	ldr	r3, [r3, #0]
    4942:	4413      	add	r3, r2
    4944:	4a08      	ldr	r2, [pc, #32]	; (4968 <elapsed+0x58>)
    4946:	6013      	str	r3, [r2, #0]

		/* We know there was a wrap, but we might not have
		 * seen it in CTRL, so clear it. */
		(void)SysTick->CTRL;
    4948:	4b06      	ldr	r3, [pc, #24]	; (4964 <elapsed+0x54>)
    494a:	681b      	ldr	r3, [r3, #0]
	}

	return (last_load - val2) + overflow_cyc;
    494c:	4b07      	ldr	r3, [pc, #28]	; (496c <elapsed+0x5c>)
    494e:	681a      	ldr	r2, [r3, #0]
    4950:	687b      	ldr	r3, [r7, #4]
    4952:	1ad2      	subs	r2, r2, r3
    4954:	4b04      	ldr	r3, [pc, #16]	; (4968 <elapsed+0x58>)
    4956:	681b      	ldr	r3, [r3, #0]
    4958:	4413      	add	r3, r2
}
    495a:	4618      	mov	r0, r3
    495c:	3714      	adds	r7, #20
    495e:	46bd      	mov	sp, r7
    4960:	bc80      	pop	{r7}
    4962:	4770      	bx	lr
    4964:	e000e010 	.word	0xe000e010
    4968:	20000748 	.word	0x20000748
    496c:	2000073c 	.word	0x2000073c

00004970 <sys_clock_isr>:

/* Callout out of platform assembly, not hooked via IRQ_CONNECT... */
void sys_clock_isr(void *arg)
{
    4970:	b590      	push	{r4, r7, lr}
    4972:	b085      	sub	sp, #20
    4974:	af00      	add	r7, sp, #0
    4976:	6078      	str	r0, [r7, #4]
	ARG_UNUSED(arg);
	uint32_t dticks;

	/* Update overflow_cyc and clear COUNTFLAG by invoking elapsed() */
	elapsed();
    4978:	f7ff ffca 	bl	4910 <elapsed>

	/* Increment the amount of HW cycles elapsed (complete counter
	 * cycles) and announce the progress to the kernel.
	 */
	cycle_count += overflow_cyc;
    497c:	4b1b      	ldr	r3, [pc, #108]	; (49ec <sys_clock_isr+0x7c>)
    497e:	681a      	ldr	r2, [r3, #0]
    4980:	4b1b      	ldr	r3, [pc, #108]	; (49f0 <sys_clock_isr+0x80>)
    4982:	681b      	ldr	r3, [r3, #0]
    4984:	4413      	add	r3, r2
    4986:	4a1a      	ldr	r2, [pc, #104]	; (49f0 <sys_clock_isr+0x80>)
    4988:	6013      	str	r3, [r2, #0]
	overflow_cyc = 0;
    498a:	4b18      	ldr	r3, [pc, #96]	; (49ec <sys_clock_isr+0x7c>)
    498c:	2200      	movs	r2, #0
    498e:	601a      	str	r2, [r3, #0]
		 * because the value has been updated before LOAD re-program.
		 *
		 * We can assess if this is the case by inspecting COUNTFLAG.
		 */

		dticks = (cycle_count - announced_cycles) / CYC_PER_TICK;
    4990:	4b17      	ldr	r3, [pc, #92]	; (49f0 <sys_clock_isr+0x80>)
    4992:	681a      	ldr	r2, [r3, #0]
    4994:	4b17      	ldr	r3, [pc, #92]	; (49f4 <sys_clock_isr+0x84>)
    4996:	681b      	ldr	r3, [r3, #0]
    4998:	1ad4      	subs	r4, r2, r3
    499a:	f7ff ff85 	bl	48a8 <sys_clock_hw_cycles_per_sec>
    499e:	4603      	mov	r3, r0
    49a0:	4a15      	ldr	r2, [pc, #84]	; (49f8 <sys_clock_isr+0x88>)
    49a2:	fb82 1203 	smull	r1, r2, r2, r3
    49a6:	1152      	asrs	r2, r2, #5
    49a8:	17db      	asrs	r3, r3, #31
    49aa:	1ad3      	subs	r3, r2, r3
    49ac:	fbb4 f3f3 	udiv	r3, r4, r3
    49b0:	60fb      	str	r3, [r7, #12]
		announced_cycles += dticks * CYC_PER_TICK;
    49b2:	f7ff ff79 	bl	48a8 <sys_clock_hw_cycles_per_sec>
    49b6:	4603      	mov	r3, r0
    49b8:	4a0f      	ldr	r2, [pc, #60]	; (49f8 <sys_clock_isr+0x88>)
    49ba:	fb82 1203 	smull	r1, r2, r2, r3
    49be:	1152      	asrs	r2, r2, #5
    49c0:	17db      	asrs	r3, r3, #31
    49c2:	1ad3      	subs	r3, r2, r3
    49c4:	461a      	mov	r2, r3
    49c6:	68fb      	ldr	r3, [r7, #12]
    49c8:	fb03 f202 	mul.w	r2, r3, r2
    49cc:	4b09      	ldr	r3, [pc, #36]	; (49f4 <sys_clock_isr+0x84>)
    49ce:	681b      	ldr	r3, [r3, #0]
    49d0:	4413      	add	r3, r2
    49d2:	4a08      	ldr	r2, [pc, #32]	; (49f4 <sys_clock_isr+0x84>)
    49d4:	6013      	str	r3, [r2, #0]
		sys_clock_announce(dticks);
    49d6:	68fb      	ldr	r3, [r7, #12]
    49d8:	4618      	mov	r0, r3
    49da:	f003 fa0b 	bl	7df4 <sys_clock_announce>
	} else {
		sys_clock_announce(1);
	}
	z_arm_int_exit();
    49de:	f7ff f889 	bl	3af4 <z_arm_exc_exit>
}
    49e2:	bf00      	nop
    49e4:	3714      	adds	r7, #20
    49e6:	46bd      	mov	sp, r7
    49e8:	bd90      	pop	{r4, r7, pc}
    49ea:	bf00      	nop
    49ec:	20000748 	.word	0x20000748
    49f0:	20000740 	.word	0x20000740
    49f4:	20000744 	.word	0x20000744
    49f8:	51eb851f 	.word	0x51eb851f

000049fc <sys_clock_set_timeout>:

void sys_clock_set_timeout(int32_t ticks, bool idle)
{
    49fc:	b590      	push	{r4, r7, lr}
    49fe:	b091      	sub	sp, #68	; 0x44
    4a00:	af00      	add	r7, sp, #0
    4a02:	6078      	str	r0, [r7, #4]
    4a04:	460b      	mov	r3, r1
    4a06:	70fb      	strb	r3, [r7, #3]
	 * need to wake up multiple times per second.  If the kernel
	 * allows us to miss tick announcements in idle, then shut off
	 * the counter. (Note: we can assume if idle==true that
	 * interrupts are already disabled)
	 */
	if (IS_ENABLED(CONFIG_TICKLESS_KERNEL) && idle && ticks == K_TICKS_FOREVER) {
    4a08:	78fb      	ldrb	r3, [r7, #3]
    4a0a:	2b00      	cmp	r3, #0
    4a0c:	d00e      	beq.n	4a2c <sys_clock_set_timeout+0x30>
    4a0e:	687b      	ldr	r3, [r7, #4]
    4a10:	f1b3 3fff 	cmp.w	r3, #4294967295
    4a14:	d10a      	bne.n	4a2c <sys_clock_set_timeout+0x30>
		SysTick->CTRL &= ~SysTick_CTRL_ENABLE_Msk;
    4a16:	4bad      	ldr	r3, [pc, #692]	; (4ccc <sys_clock_set_timeout+0x2d0>)
    4a18:	681b      	ldr	r3, [r3, #0]
    4a1a:	4aac      	ldr	r2, [pc, #688]	; (4ccc <sys_clock_set_timeout+0x2d0>)
    4a1c:	f023 0301 	bic.w	r3, r3, #1
    4a20:	6013      	str	r3, [r2, #0]
		last_load = TIMER_STOPPED;
    4a22:	4bab      	ldr	r3, [pc, #684]	; (4cd0 <sys_clock_set_timeout+0x2d4>)
    4a24:	f04f 427f 	mov.w	r2, #4278190080	; 0xff000000
    4a28:	601a      	str	r2, [r3, #0]
    4a2a:	e14b      	b.n	4cc4 <sys_clock_set_timeout+0x2c8>
	}

#if defined(CONFIG_TICKLESS_KERNEL)
	uint32_t delay;
	uint32_t val1, val2;
	uint32_t last_load_ = last_load;
    4a2c:	4ba8      	ldr	r3, [pc, #672]	; (4cd0 <sys_clock_set_timeout+0x2d4>)
    4a2e:	681b      	ldr	r3, [r3, #0]
    4a30:	63fb      	str	r3, [r7, #60]	; 0x3c

	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
    4a32:	687b      	ldr	r3, [r7, #4]
    4a34:	f1b3 3fff 	cmp.w	r3, #4294967295
    4a38:	d10e      	bne.n	4a58 <sys_clock_set_timeout+0x5c>
    4a3a:	f7ff ff35 	bl	48a8 <sys_clock_hw_cycles_per_sec>
    4a3e:	4603      	mov	r3, r0
    4a40:	4aa4      	ldr	r2, [pc, #656]	; (4cd4 <sys_clock_set_timeout+0x2d8>)
    4a42:	fb82 1203 	smull	r1, r2, r2, r3
    4a46:	1152      	asrs	r2, r2, #5
    4a48:	17db      	asrs	r3, r3, #31
    4a4a:	1ad3      	subs	r3, r2, r3
    4a4c:	f06f 427f 	mvn.w	r2, #4278190080	; 0xff000000
    4a50:	fb92 f3f3 	sdiv	r3, r2, r3
    4a54:	3b01      	subs	r3, #1
    4a56:	e000      	b.n	4a5a <sys_clock_set_timeout+0x5e>
    4a58:	687b      	ldr	r3, [r7, #4]
    4a5a:	607b      	str	r3, [r7, #4]
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
    4a5c:	687b      	ldr	r3, [r7, #4]
    4a5e:	2b01      	cmp	r3, #1
    4a60:	dd21      	ble.n	4aa6 <sys_clock_set_timeout+0xaa>
    4a62:	f7ff ff21 	bl	48a8 <sys_clock_hw_cycles_per_sec>
    4a66:	4603      	mov	r3, r0
    4a68:	4a9a      	ldr	r2, [pc, #616]	; (4cd4 <sys_clock_set_timeout+0x2d8>)
    4a6a:	fb82 1203 	smull	r1, r2, r2, r3
    4a6e:	1152      	asrs	r2, r2, #5
    4a70:	17db      	asrs	r3, r3, #31
    4a72:	1ad3      	subs	r3, r2, r3
    4a74:	f06f 427f 	mvn.w	r2, #4278190080	; 0xff000000
    4a78:	fb92 f3f3 	sdiv	r3, r2, r3
    4a7c:	687a      	ldr	r2, [r7, #4]
    4a7e:	429a      	cmp	r2, r3
    4a80:	da02      	bge.n	4a88 <sys_clock_set_timeout+0x8c>
    4a82:	687b      	ldr	r3, [r7, #4]
    4a84:	3b01      	subs	r3, #1
    4a86:	e00f      	b.n	4aa8 <sys_clock_set_timeout+0xac>
    4a88:	f7ff ff0e 	bl	48a8 <sys_clock_hw_cycles_per_sec>
    4a8c:	4603      	mov	r3, r0
    4a8e:	4a91      	ldr	r2, [pc, #580]	; (4cd4 <sys_clock_set_timeout+0x2d8>)
    4a90:	fb82 1203 	smull	r1, r2, r2, r3
    4a94:	1152      	asrs	r2, r2, #5
    4a96:	17db      	asrs	r3, r3, #31
    4a98:	1ad3      	subs	r3, r2, r3
    4a9a:	f06f 427f 	mvn.w	r2, #4278190080	; 0xff000000
    4a9e:	fb92 f3f3 	sdiv	r3, r2, r3
    4aa2:	3b01      	subs	r3, #1
    4aa4:	e000      	b.n	4aa8 <sys_clock_set_timeout+0xac>
    4aa6:	2300      	movs	r3, #0
    4aa8:	607b      	str	r3, [r7, #4]
    4aaa:	4b8b      	ldr	r3, [pc, #556]	; (4cd8 <sys_clock_set_timeout+0x2dc>)
    4aac:	627b      	str	r3, [r7, #36]	; 0x24
	__asm__ volatile(
    4aae:	f04f 0320 	mov.w	r3, #32
    4ab2:	f3ef 8211 	mrs	r2, BASEPRI
    4ab6:	f383 8812 	msr	BASEPRI_MAX, r3
    4aba:	f3bf 8f6f 	isb	sy
    4abe:	623a      	str	r2, [r7, #32]
    4ac0:	61fb      	str	r3, [r7, #28]
	return key;
    4ac2:	6a3b      	ldr	r3, [r7, #32]

	/* Note that we need to use the underlying arch-specific lock
	 * implementation.  The "irq_lock()" API in SMP context is
	 * actually a wrapper for a global spinlock!
	 */
	k.key = arch_irq_lock();
    4ac4:	60bb      	str	r3, [r7, #8]
#endif

#ifdef CONFIG_SPIN_VALIDATE
	z_spin_lock_set_owner(l);
#endif
	return k;
    4ac6:	68bb      	ldr	r3, [r7, #8]
    4ac8:	613b      	str	r3, [r7, #16]

	k_spinlock_key_t key = k_spin_lock(&lock);

	uint32_t pending = elapsed();
    4aca:	f7ff ff21 	bl	4910 <elapsed>
    4ace:	63b8      	str	r0, [r7, #56]	; 0x38

	val1 = SysTick->VAL;
    4ad0:	4b7e      	ldr	r3, [pc, #504]	; (4ccc <sys_clock_set_timeout+0x2d0>)
    4ad2:	689b      	ldr	r3, [r3, #8]
    4ad4:	637b      	str	r3, [r7, #52]	; 0x34

	cycle_count += pending;
    4ad6:	4b81      	ldr	r3, [pc, #516]	; (4cdc <sys_clock_set_timeout+0x2e0>)
    4ad8:	681a      	ldr	r2, [r3, #0]
    4ada:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    4adc:	4413      	add	r3, r2
    4ade:	4a7f      	ldr	r2, [pc, #508]	; (4cdc <sys_clock_set_timeout+0x2e0>)
    4ae0:	6013      	str	r3, [r2, #0]
	overflow_cyc = 0U;
    4ae2:	4b7f      	ldr	r3, [pc, #508]	; (4ce0 <sys_clock_set_timeout+0x2e4>)
    4ae4:	2200      	movs	r2, #0
    4ae6:	601a      	str	r2, [r3, #0]

	uint32_t unannounced = cycle_count - announced_cycles;
    4ae8:	4b7c      	ldr	r3, [pc, #496]	; (4cdc <sys_clock_set_timeout+0x2e0>)
    4aea:	681a      	ldr	r2, [r3, #0]
    4aec:	4b7d      	ldr	r3, [pc, #500]	; (4ce4 <sys_clock_set_timeout+0x2e8>)
    4aee:	681b      	ldr	r3, [r3, #0]
    4af0:	1ad3      	subs	r3, r2, r3
    4af2:	633b      	str	r3, [r7, #48]	; 0x30

	if ((int32_t)unannounced < 0) {
    4af4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    4af6:	2b00      	cmp	r3, #0
    4af8:	da14      	bge.n	4b24 <sys_clock_set_timeout+0x128>
		 * wrap duration, because new timeouts keep being set
		 * before the existing one fires.  Force an announce
		 * to avoid loss of a wrap event, making sure the
		 * delay is at least the minimum delay possible.
		 */
		last_load = MIN_DELAY;
    4afa:	f7ff fed5 	bl	48a8 <sys_clock_hw_cycles_per_sec>
    4afe:	4603      	mov	r3, r0
    4b00:	f5b3 1fc8 	cmp.w	r3, #1638400	; 0x190000
    4b04:	db09      	blt.n	4b1a <sys_clock_set_timeout+0x11e>
    4b06:	f7ff fecf 	bl	48a8 <sys_clock_hw_cycles_per_sec>
    4b0a:	4603      	mov	r3, r0
    4b0c:	4a71      	ldr	r2, [pc, #452]	; (4cd4 <sys_clock_set_timeout+0x2d8>)
    4b0e:	fb82 1203 	smull	r1, r2, r2, r3
    4b12:	1252      	asrs	r2, r2, #9
    4b14:	17db      	asrs	r3, r3, #31
    4b16:	1ad3      	subs	r3, r2, r3
    4b18:	e001      	b.n	4b1e <sys_clock_set_timeout+0x122>
    4b1a:	f44f 6380 	mov.w	r3, #1024	; 0x400
    4b1e:	4a6c      	ldr	r2, [pc, #432]	; (4cd0 <sys_clock_set_timeout+0x2d4>)
    4b20:	6013      	str	r3, [r2, #0]
    4b22:	e0a0      	b.n	4c66 <sys_clock_set_timeout+0x26a>
	} else {
		/* Desired delay in the future */
		delay = ticks * CYC_PER_TICK;
    4b24:	f7ff fec0 	bl	48a8 <sys_clock_hw_cycles_per_sec>
    4b28:	4603      	mov	r3, r0
    4b2a:	4a6a      	ldr	r2, [pc, #424]	; (4cd4 <sys_clock_set_timeout+0x2d8>)
    4b2c:	fb82 1203 	smull	r1, r2, r2, r3
    4b30:	1152      	asrs	r2, r2, #5
    4b32:	17db      	asrs	r3, r3, #31
    4b34:	1ad3      	subs	r3, r2, r3
    4b36:	687a      	ldr	r2, [r7, #4]
    4b38:	fb02 f303 	mul.w	r3, r2, r3
    4b3c:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* Round delay up to next tick boundary */
		delay += unannounced;
    4b3e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    4b40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    4b42:	4413      	add	r3, r2
    4b44:	62fb      	str	r3, [r7, #44]	; 0x2c
		delay =
		 ((delay + CYC_PER_TICK - 1) / CYC_PER_TICK) * CYC_PER_TICK;
    4b46:	f7ff feaf 	bl	48a8 <sys_clock_hw_cycles_per_sec>
    4b4a:	4603      	mov	r3, r0
    4b4c:	4a61      	ldr	r2, [pc, #388]	; (4cd4 <sys_clock_set_timeout+0x2d8>)
    4b4e:	fb82 1203 	smull	r1, r2, r2, r3
    4b52:	1152      	asrs	r2, r2, #5
    4b54:	17db      	asrs	r3, r3, #31
    4b56:	1ad3      	subs	r3, r2, r3
    4b58:	461a      	mov	r2, r3
    4b5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    4b5c:	4413      	add	r3, r2
    4b5e:	1e5c      	subs	r4, r3, #1
    4b60:	f7ff fea2 	bl	48a8 <sys_clock_hw_cycles_per_sec>
    4b64:	4603      	mov	r3, r0
    4b66:	4a5b      	ldr	r2, [pc, #364]	; (4cd4 <sys_clock_set_timeout+0x2d8>)
    4b68:	fb82 1203 	smull	r1, r2, r2, r3
    4b6c:	1152      	asrs	r2, r2, #5
    4b6e:	17db      	asrs	r3, r3, #31
    4b70:	1ad3      	subs	r3, r2, r3
    4b72:	fbb4 f4f3 	udiv	r4, r4, r3
    4b76:	f7ff fe97 	bl	48a8 <sys_clock_hw_cycles_per_sec>
    4b7a:	4603      	mov	r3, r0
    4b7c:	4a55      	ldr	r2, [pc, #340]	; (4cd4 <sys_clock_set_timeout+0x2d8>)
    4b7e:	fb82 1203 	smull	r1, r2, r2, r3
    4b82:	1152      	asrs	r2, r2, #5
    4b84:	17db      	asrs	r3, r3, #31
    4b86:	1ad3      	subs	r3, r2, r3
		delay =
    4b88:	fb04 f303 	mul.w	r3, r4, r3
    4b8c:	62fb      	str	r3, [r7, #44]	; 0x2c
		delay -= unannounced;
    4b8e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    4b90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    4b92:	1ad3      	subs	r3, r2, r3
    4b94:	62fb      	str	r3, [r7, #44]	; 0x2c
		delay = MAX(delay, MIN_DELAY);
    4b96:	f7ff fe87 	bl	48a8 <sys_clock_hw_cycles_per_sec>
    4b9a:	4603      	mov	r3, r0
    4b9c:	f5b3 1fc8 	cmp.w	r3, #1638400	; 0x190000
    4ba0:	db0a      	blt.n	4bb8 <sys_clock_set_timeout+0x1bc>
    4ba2:	f7ff fe81 	bl	48a8 <sys_clock_hw_cycles_per_sec>
    4ba6:	4603      	mov	r3, r0
    4ba8:	4a4a      	ldr	r2, [pc, #296]	; (4cd4 <sys_clock_set_timeout+0x2d8>)
    4baa:	fb82 1203 	smull	r1, r2, r2, r3
    4bae:	1252      	asrs	r2, r2, #9
    4bb0:	17db      	asrs	r3, r3, #31
    4bb2:	1ad3      	subs	r3, r2, r3
    4bb4:	461a      	mov	r2, r3
    4bb6:	e001      	b.n	4bbc <sys_clock_set_timeout+0x1c0>
    4bb8:	f44f 6280 	mov.w	r2, #1024	; 0x400
    4bbc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    4bbe:	429a      	cmp	r2, r3
    4bc0:	d312      	bcc.n	4be8 <sys_clock_set_timeout+0x1ec>
    4bc2:	f7ff fe71 	bl	48a8 <sys_clock_hw_cycles_per_sec>
    4bc6:	4603      	mov	r3, r0
    4bc8:	f5b3 1fc8 	cmp.w	r3, #1638400	; 0x190000
    4bcc:	db09      	blt.n	4be2 <sys_clock_set_timeout+0x1e6>
    4bce:	f7ff fe6b 	bl	48a8 <sys_clock_hw_cycles_per_sec>
    4bd2:	4603      	mov	r3, r0
    4bd4:	4a3f      	ldr	r2, [pc, #252]	; (4cd4 <sys_clock_set_timeout+0x2d8>)
    4bd6:	fb82 1203 	smull	r1, r2, r2, r3
    4bda:	1252      	asrs	r2, r2, #9
    4bdc:	17db      	asrs	r3, r3, #31
    4bde:	1ad3      	subs	r3, r2, r3
    4be0:	e003      	b.n	4bea <sys_clock_set_timeout+0x1ee>
    4be2:	f44f 6380 	mov.w	r3, #1024	; 0x400
    4be6:	e000      	b.n	4bea <sys_clock_set_timeout+0x1ee>
    4be8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    4bea:	62fb      	str	r3, [r7, #44]	; 0x2c
		if (delay > MAX_CYCLES) {
    4bec:	f7ff fe5c 	bl	48a8 <sys_clock_hw_cycles_per_sec>
    4bf0:	4603      	mov	r3, r0
    4bf2:	4a38      	ldr	r2, [pc, #224]	; (4cd4 <sys_clock_set_timeout+0x2d8>)
    4bf4:	fb82 1203 	smull	r1, r2, r2, r3
    4bf8:	1152      	asrs	r2, r2, #5
    4bfa:	17db      	asrs	r3, r3, #31
    4bfc:	1ad3      	subs	r3, r2, r3
    4bfe:	f06f 427f 	mvn.w	r2, #4278190080	; 0xff000000
    4c02:	fb92 f3f3 	sdiv	r3, r2, r3
    4c06:	1e5c      	subs	r4, r3, #1
    4c08:	f7ff fe4e 	bl	48a8 <sys_clock_hw_cycles_per_sec>
    4c0c:	4603      	mov	r3, r0
    4c0e:	4a31      	ldr	r2, [pc, #196]	; (4cd4 <sys_clock_set_timeout+0x2d8>)
    4c10:	fb82 1203 	smull	r1, r2, r2, r3
    4c14:	1152      	asrs	r2, r2, #5
    4c16:	17db      	asrs	r3, r3, #31
    4c18:	1ad3      	subs	r3, r2, r3
    4c1a:	fb04 f303 	mul.w	r3, r4, r3
    4c1e:	461a      	mov	r2, r3
    4c20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    4c22:	4293      	cmp	r3, r2
    4c24:	d91c      	bls.n	4c60 <sys_clock_set_timeout+0x264>
			last_load = MAX_CYCLES;
    4c26:	f7ff fe3f 	bl	48a8 <sys_clock_hw_cycles_per_sec>
    4c2a:	4603      	mov	r3, r0
    4c2c:	4a29      	ldr	r2, [pc, #164]	; (4cd4 <sys_clock_set_timeout+0x2d8>)
    4c2e:	fb82 1203 	smull	r1, r2, r2, r3
    4c32:	1152      	asrs	r2, r2, #5
    4c34:	17db      	asrs	r3, r3, #31
    4c36:	1ad3      	subs	r3, r2, r3
    4c38:	f06f 427f 	mvn.w	r2, #4278190080	; 0xff000000
    4c3c:	fb92 f3f3 	sdiv	r3, r2, r3
    4c40:	1e5c      	subs	r4, r3, #1
    4c42:	f7ff fe31 	bl	48a8 <sys_clock_hw_cycles_per_sec>
    4c46:	4603      	mov	r3, r0
    4c48:	4a22      	ldr	r2, [pc, #136]	; (4cd4 <sys_clock_set_timeout+0x2d8>)
    4c4a:	fb82 1203 	smull	r1, r2, r2, r3
    4c4e:	1152      	asrs	r2, r2, #5
    4c50:	17db      	asrs	r3, r3, #31
    4c52:	1ad3      	subs	r3, r2, r3
    4c54:	fb04 f303 	mul.w	r3, r4, r3
    4c58:	461a      	mov	r2, r3
    4c5a:	4b1d      	ldr	r3, [pc, #116]	; (4cd0 <sys_clock_set_timeout+0x2d4>)
    4c5c:	601a      	str	r2, [r3, #0]
    4c5e:	e002      	b.n	4c66 <sys_clock_set_timeout+0x26a>
		} else {
			last_load = delay;
    4c60:	4a1b      	ldr	r2, [pc, #108]	; (4cd0 <sys_clock_set_timeout+0x2d4>)
    4c62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    4c64:	6013      	str	r3, [r2, #0]
		}
	}

	val2 = SysTick->VAL;
    4c66:	4b19      	ldr	r3, [pc, #100]	; (4ccc <sys_clock_set_timeout+0x2d0>)
    4c68:	689b      	ldr	r3, [r3, #8]
    4c6a:	62bb      	str	r3, [r7, #40]	; 0x28

	SysTick->LOAD = last_load - 1;
    4c6c:	4b18      	ldr	r3, [pc, #96]	; (4cd0 <sys_clock_set_timeout+0x2d4>)
    4c6e:	681b      	ldr	r3, [r3, #0]
    4c70:	4a16      	ldr	r2, [pc, #88]	; (4ccc <sys_clock_set_timeout+0x2d0>)
    4c72:	3b01      	subs	r3, #1
    4c74:	6053      	str	r3, [r2, #4]
	SysTick->VAL = 0; /* resets timer to last_load */
    4c76:	4b15      	ldr	r3, [pc, #84]	; (4ccc <sys_clock_set_timeout+0x2d0>)
    4c78:	2200      	movs	r2, #0
    4c7a:	609a      	str	r2, [r3, #8]
	 * close to LOAD, then there are little chances to catch val2 between
	 * val1 and LOAD after a wrap. COUNTFLAG should be checked in addition.
	 * But since the load computation is faster than MIN_DELAY, then we
	 * don't need to worry about this case.
	 */
	if (val1 < val2) {
    4c7c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
    4c7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
    4c80:	429a      	cmp	r2, r3
    4c82:	d20a      	bcs.n	4c9a <sys_clock_set_timeout+0x29e>
		cycle_count += (val1 + (last_load_ - val2));
    4c84:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    4c86:	6abb      	ldr	r3, [r7, #40]	; 0x28
    4c88:	1ad2      	subs	r2, r2, r3
    4c8a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    4c8c:	441a      	add	r2, r3
    4c8e:	4b13      	ldr	r3, [pc, #76]	; (4cdc <sys_clock_set_timeout+0x2e0>)
    4c90:	681b      	ldr	r3, [r3, #0]
    4c92:	4413      	add	r3, r2
    4c94:	4a11      	ldr	r2, [pc, #68]	; (4cdc <sys_clock_set_timeout+0x2e0>)
    4c96:	6013      	str	r3, [r2, #0]
    4c98:	e007      	b.n	4caa <sys_clock_set_timeout+0x2ae>
	} else {
		cycle_count += (val1 - val2);
    4c9a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
    4c9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
    4c9e:	1ad2      	subs	r2, r2, r3
    4ca0:	4b0e      	ldr	r3, [pc, #56]	; (4cdc <sys_clock_set_timeout+0x2e0>)
    4ca2:	681b      	ldr	r3, [r3, #0]
    4ca4:	4413      	add	r3, r2
    4ca6:	4a0d      	ldr	r2, [pc, #52]	; (4cdc <sys_clock_set_timeout+0x2e0>)
    4ca8:	6013      	str	r3, [r2, #0]
    4caa:	4b0b      	ldr	r3, [pc, #44]	; (4cd8 <sys_clock_set_timeout+0x2dc>)
    4cac:	61bb      	str	r3, [r7, #24]
    4cae:	693b      	ldr	r3, [r7, #16]
    4cb0:	60fb      	str	r3, [r7, #12]
	 * a memory barrier when used like this, and we don't have a
	 * Zephyr framework for that.
	 */
	atomic_clear(&l->locked);
#endif
	arch_irq_unlock(key.key);
    4cb2:	68fb      	ldr	r3, [r7, #12]
    4cb4:	617b      	str	r3, [r7, #20]
	__asm__ volatile(
    4cb6:	697b      	ldr	r3, [r7, #20]
    4cb8:	f383 8811 	msr	BASEPRI, r3
    4cbc:	f3bf 8f6f 	isb	sy
}
    4cc0:	bf00      	nop
}
    4cc2:	bf00      	nop
	}
	k_spin_unlock(&lock, key);
#endif
}
    4cc4:	3744      	adds	r7, #68	; 0x44
    4cc6:	46bd      	mov	sp, r7
    4cc8:	bd90      	pop	{r4, r7, pc}
    4cca:	bf00      	nop
    4ccc:	e000e010 	.word	0xe000e010
    4cd0:	2000073c 	.word	0x2000073c
    4cd4:	51eb851f 	.word	0x51eb851f
    4cd8:	20000738 	.word	0x20000738
    4cdc:	20000740 	.word	0x20000740
    4ce0:	20000748 	.word	0x20000748
    4ce4:	20000744 	.word	0x20000744

00004ce8 <sys_clock_elapsed>:

uint32_t sys_clock_elapsed(void)
{
    4ce8:	b580      	push	{r7, lr}
    4cea:	b08a      	sub	sp, #40	; 0x28
    4cec:	af00      	add	r7, sp, #0
    4cee:	4b1c      	ldr	r3, [pc, #112]	; (4d60 <sys_clock_elapsed+0x78>)
    4cf0:	61bb      	str	r3, [r7, #24]
	__asm__ volatile(
    4cf2:	f04f 0320 	mov.w	r3, #32
    4cf6:	f3ef 8211 	mrs	r2, BASEPRI
    4cfa:	f383 8812 	msr	BASEPRI_MAX, r3
    4cfe:	f3bf 8f6f 	isb	sy
    4d02:	617a      	str	r2, [r7, #20]
    4d04:	613b      	str	r3, [r7, #16]
	return key;
    4d06:	697b      	ldr	r3, [r7, #20]
	k.key = arch_irq_lock();
    4d08:	60bb      	str	r3, [r7, #8]
	return k;
    4d0a:	68bb      	ldr	r3, [r7, #8]
    4d0c:	60fb      	str	r3, [r7, #12]
	if (!TICKLESS) {
		return 0;
	}

	k_spinlock_key_t key = k_spin_lock(&lock);
	uint32_t cyc = elapsed() + cycle_count - announced_cycles;
    4d0e:	f7ff fdff 	bl	4910 <elapsed>
    4d12:	4602      	mov	r2, r0
    4d14:	4b13      	ldr	r3, [pc, #76]	; (4d64 <sys_clock_elapsed+0x7c>)
    4d16:	681b      	ldr	r3, [r3, #0]
    4d18:	441a      	add	r2, r3
    4d1a:	4b13      	ldr	r3, [pc, #76]	; (4d68 <sys_clock_elapsed+0x80>)
    4d1c:	681b      	ldr	r3, [r3, #0]
    4d1e:	1ad3      	subs	r3, r2, r3
    4d20:	627b      	str	r3, [r7, #36]	; 0x24
    4d22:	4b0f      	ldr	r3, [pc, #60]	; (4d60 <sys_clock_elapsed+0x78>)
    4d24:	623b      	str	r3, [r7, #32]
    4d26:	68fb      	ldr	r3, [r7, #12]
    4d28:	607b      	str	r3, [r7, #4]
	arch_irq_unlock(key.key);
    4d2a:	687b      	ldr	r3, [r7, #4]
    4d2c:	61fb      	str	r3, [r7, #28]
	__asm__ volatile(
    4d2e:	69fb      	ldr	r3, [r7, #28]
    4d30:	f383 8811 	msr	BASEPRI, r3
    4d34:	f3bf 8f6f 	isb	sy
}
    4d38:	bf00      	nop
}
    4d3a:	bf00      	nop

	k_spin_unlock(&lock, key);
	return cyc / CYC_PER_TICK;
    4d3c:	f7ff fdb4 	bl	48a8 <sys_clock_hw_cycles_per_sec>
    4d40:	4603      	mov	r3, r0
    4d42:	4a0a      	ldr	r2, [pc, #40]	; (4d6c <sys_clock_elapsed+0x84>)
    4d44:	fb82 1203 	smull	r1, r2, r2, r3
    4d48:	1152      	asrs	r2, r2, #5
    4d4a:	17db      	asrs	r3, r3, #31
    4d4c:	1ad3      	subs	r3, r2, r3
    4d4e:	461a      	mov	r2, r3
    4d50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    4d52:	fbb3 f3f2 	udiv	r3, r3, r2
}
    4d56:	4618      	mov	r0, r3
    4d58:	3728      	adds	r7, #40	; 0x28
    4d5a:	46bd      	mov	sp, r7
    4d5c:	bd80      	pop	{r7, pc}
    4d5e:	bf00      	nop
    4d60:	20000738 	.word	0x20000738
    4d64:	20000740 	.word	0x20000740
    4d68:	20000744 	.word	0x20000744
    4d6c:	51eb851f 	.word	0x51eb851f

00004d70 <sys_clock_cycle_get_32>:

uint32_t sys_clock_cycle_get_32(void)
{
    4d70:	b580      	push	{r7, lr}
    4d72:	b08a      	sub	sp, #40	; 0x28
    4d74:	af00      	add	r7, sp, #0
    4d76:	4b14      	ldr	r3, [pc, #80]	; (4dc8 <sys_clock_cycle_get_32+0x58>)
    4d78:	61bb      	str	r3, [r7, #24]
	__asm__ volatile(
    4d7a:	f04f 0320 	mov.w	r3, #32
    4d7e:	f3ef 8211 	mrs	r2, BASEPRI
    4d82:	f383 8812 	msr	BASEPRI_MAX, r3
    4d86:	f3bf 8f6f 	isb	sy
    4d8a:	617a      	str	r2, [r7, #20]
    4d8c:	613b      	str	r3, [r7, #16]
	return key;
    4d8e:	697b      	ldr	r3, [r7, #20]
	k.key = arch_irq_lock();
    4d90:	60bb      	str	r3, [r7, #8]
	return k;
    4d92:	68bb      	ldr	r3, [r7, #8]
    4d94:	60fb      	str	r3, [r7, #12]
	k_spinlock_key_t key = k_spin_lock(&lock);
	uint32_t ret = elapsed() + cycle_count;
    4d96:	f7ff fdbb 	bl	4910 <elapsed>
    4d9a:	4602      	mov	r2, r0
    4d9c:	4b0b      	ldr	r3, [pc, #44]	; (4dcc <sys_clock_cycle_get_32+0x5c>)
    4d9e:	681b      	ldr	r3, [r3, #0]
    4da0:	4413      	add	r3, r2
    4da2:	627b      	str	r3, [r7, #36]	; 0x24
    4da4:	4b08      	ldr	r3, [pc, #32]	; (4dc8 <sys_clock_cycle_get_32+0x58>)
    4da6:	623b      	str	r3, [r7, #32]
    4da8:	68fb      	ldr	r3, [r7, #12]
    4daa:	607b      	str	r3, [r7, #4]
	arch_irq_unlock(key.key);
    4dac:	687b      	ldr	r3, [r7, #4]
    4dae:	61fb      	str	r3, [r7, #28]
	__asm__ volatile(
    4db0:	69fb      	ldr	r3, [r7, #28]
    4db2:	f383 8811 	msr	BASEPRI, r3
    4db6:	f3bf 8f6f 	isb	sy
}
    4dba:	bf00      	nop
}
    4dbc:	bf00      	nop

	k_spin_unlock(&lock, key);
	return ret;
    4dbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
    4dc0:	4618      	mov	r0, r3
    4dc2:	3728      	adds	r7, #40	; 0x28
    4dc4:	46bd      	mov	sp, r7
    4dc6:	bd80      	pop	{r7, pc}
    4dc8:	20000738 	.word	0x20000738
    4dcc:	20000740 	.word	0x20000740

00004dd0 <sys_clock_driver_init>:
{
	SysTick->CTRL &= ~SysTick_CTRL_ENABLE_Msk;
}

static int sys_clock_driver_init(const struct device *dev)
{
    4dd0:	b580      	push	{r7, lr}
    4dd2:	b082      	sub	sp, #8
    4dd4:	af00      	add	r7, sp, #0
    4dd6:	6078      	str	r0, [r7, #4]
	ARG_UNUSED(dev);

	NVIC_SetPriority(SysTick_IRQn, _IRQ_PRIO_OFFSET);
    4dd8:	2101      	movs	r1, #1
    4dda:	f04f 30ff 	mov.w	r0, #4294967295
    4dde:	f7ff fd6d 	bl	48bc <__NVIC_SetPriority>
	last_load = CYC_PER_TICK - 1;
    4de2:	f7ff fd61 	bl	48a8 <sys_clock_hw_cycles_per_sec>
    4de6:	4603      	mov	r3, r0
    4de8:	4a0f      	ldr	r2, [pc, #60]	; (4e28 <sys_clock_driver_init+0x58>)
    4dea:	fb82 1203 	smull	r1, r2, r2, r3
    4dee:	1152      	asrs	r2, r2, #5
    4df0:	17db      	asrs	r3, r3, #31
    4df2:	1ad3      	subs	r3, r2, r3
    4df4:	3b01      	subs	r3, #1
    4df6:	461a      	mov	r2, r3
    4df8:	4b0c      	ldr	r3, [pc, #48]	; (4e2c <sys_clock_driver_init+0x5c>)
    4dfa:	601a      	str	r2, [r3, #0]
	overflow_cyc = 0U;
    4dfc:	4b0c      	ldr	r3, [pc, #48]	; (4e30 <sys_clock_driver_init+0x60>)
    4dfe:	2200      	movs	r2, #0
    4e00:	601a      	str	r2, [r3, #0]
	SysTick->LOAD = last_load;
    4e02:	4a0c      	ldr	r2, [pc, #48]	; (4e34 <sys_clock_driver_init+0x64>)
    4e04:	4b09      	ldr	r3, [pc, #36]	; (4e2c <sys_clock_driver_init+0x5c>)
    4e06:	681b      	ldr	r3, [r3, #0]
    4e08:	6053      	str	r3, [r2, #4]
	SysTick->VAL = 0; /* resets timer to last_load */
    4e0a:	4b0a      	ldr	r3, [pc, #40]	; (4e34 <sys_clock_driver_init+0x64>)
    4e0c:	2200      	movs	r2, #0
    4e0e:	609a      	str	r2, [r3, #8]
	SysTick->CTRL |= (SysTick_CTRL_ENABLE_Msk |
    4e10:	4b08      	ldr	r3, [pc, #32]	; (4e34 <sys_clock_driver_init+0x64>)
    4e12:	681b      	ldr	r3, [r3, #0]
    4e14:	4a07      	ldr	r2, [pc, #28]	; (4e34 <sys_clock_driver_init+0x64>)
    4e16:	f043 0307 	orr.w	r3, r3, #7
    4e1a:	6013      	str	r3, [r2, #0]
			  SysTick_CTRL_TICKINT_Msk |
			  SysTick_CTRL_CLKSOURCE_Msk);
	return 0;
    4e1c:	2300      	movs	r3, #0
}
    4e1e:	4618      	mov	r0, r3
    4e20:	3708      	adds	r7, #8
    4e22:	46bd      	mov	sp, r7
    4e24:	bd80      	pop	{r7, pc}
    4e26:	bf00      	nop
    4e28:	51eb851f 	.word	0x51eb851f
    4e2c:	2000073c 	.word	0x2000073c
    4e30:	20000748 	.word	0x20000748
    4e34:	e000e010 	.word	0xe000e010

00004e38 <z_device_state_init>:
 *
 * The state object is always zero-initialized, but this may not be
 * sufficient.
 */
void z_device_state_init(void)
{
    4e38:	b580      	push	{r7, lr}
    4e3a:	b082      	sub	sp, #8
    4e3c:	af00      	add	r7, sp, #0
	const struct device *dev = __device_start;
    4e3e:	4b09      	ldr	r3, [pc, #36]	; (4e64 <z_device_state_init+0x2c>)
    4e40:	607b      	str	r3, [r7, #4]

	while (dev < __device_end) {
    4e42:	e005      	b.n	4e50 <z_device_state_init+0x18>
		z_object_init(dev);
    4e44:	6878      	ldr	r0, [r7, #4]
    4e46:	f005 fad0 	bl	a3ea <z_object_init>
		++dev;
    4e4a:	687b      	ldr	r3, [r7, #4]
    4e4c:	3318      	adds	r3, #24
    4e4e:	607b      	str	r3, [r7, #4]
	while (dev < __device_end) {
    4e50:	687b      	ldr	r3, [r7, #4]
    4e52:	4a05      	ldr	r2, [pc, #20]	; (4e68 <z_device_state_init+0x30>)
    4e54:	4293      	cmp	r3, r2
    4e56:	d3f5      	bcc.n	4e44 <z_device_state_init+0xc>
	}
}
    4e58:	bf00      	nop
    4e5a:	bf00      	nop
    4e5c:	3708      	adds	r7, #8
    4e5e:	46bd      	mov	sp, r7
    4e60:	bd80      	pop	{r7, pc}
    4e62:	bf00      	nop
    4e64:	0000b604 	.word	0x0000b604
    4e68:	0000b64c 	.word	0x0000b64c

00004e6c <z_sys_init_run_level>:
 * off and the next one begins.
 *
 * @param level init level to run.
 */
void z_sys_init_run_level(int32_t level)
{
    4e6c:	b580      	push	{r7, lr}
    4e6e:	b086      	sub	sp, #24
    4e70:	af00      	add	r7, sp, #0
    4e72:	6078      	str	r0, [r7, #4]
		/* End marker */
		__init_end,
	};
	const struct init_entry *entry;

	for (entry = levels[level]; entry < levels[level+1]; entry++) {
    4e74:	4a1c      	ldr	r2, [pc, #112]	; (4ee8 <z_sys_init_run_level+0x7c>)
    4e76:	687b      	ldr	r3, [r7, #4]
    4e78:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    4e7c:	617b      	str	r3, [r7, #20]
    4e7e:	e026      	b.n	4ece <z_sys_init_run_level+0x62>
		const struct device *dev = entry->dev;
    4e80:	697b      	ldr	r3, [r7, #20]
    4e82:	685b      	ldr	r3, [r3, #4]
    4e84:	60fb      	str	r3, [r7, #12]
		int rc = entry->init(dev);
    4e86:	697b      	ldr	r3, [r7, #20]
    4e88:	681b      	ldr	r3, [r3, #0]
    4e8a:	68f8      	ldr	r0, [r7, #12]
    4e8c:	4798      	blx	r3
    4e8e:	6138      	str	r0, [r7, #16]

		if (dev != NULL) {
    4e90:	68fb      	ldr	r3, [r7, #12]
    4e92:	2b00      	cmp	r3, #0
    4e94:	d018      	beq.n	4ec8 <z_sys_init_run_level+0x5c>
			/* Mark device initialized.  If initialization
			 * failed, record the error condition.
			 */
			if (rc != 0) {
    4e96:	693b      	ldr	r3, [r7, #16]
    4e98:	2b00      	cmp	r3, #0
    4e9a:	d00f      	beq.n	4ebc <z_sys_init_run_level+0x50>
				if (rc < 0) {
    4e9c:	693b      	ldr	r3, [r7, #16]
    4e9e:	2b00      	cmp	r3, #0
    4ea0:	da02      	bge.n	4ea8 <z_sys_init_run_level+0x3c>
					rc = -rc;
    4ea2:	693b      	ldr	r3, [r7, #16]
    4ea4:	425b      	negs	r3, r3
    4ea6:	613b      	str	r3, [r7, #16]
				}
				if (rc > UINT8_MAX) {
    4ea8:	693b      	ldr	r3, [r7, #16]
    4eaa:	2bff      	cmp	r3, #255	; 0xff
    4eac:	dd01      	ble.n	4eb2 <z_sys_init_run_level+0x46>
					rc = UINT8_MAX;
    4eae:	23ff      	movs	r3, #255	; 0xff
    4eb0:	613b      	str	r3, [r7, #16]
				}
				dev->state->init_res = rc;
    4eb2:	68fb      	ldr	r3, [r7, #12]
    4eb4:	68db      	ldr	r3, [r3, #12]
    4eb6:	693a      	ldr	r2, [r7, #16]
    4eb8:	b2d2      	uxtb	r2, r2
    4eba:	701a      	strb	r2, [r3, #0]
			}
			dev->state->initialized = true;
    4ebc:	68fb      	ldr	r3, [r7, #12]
    4ebe:	68da      	ldr	r2, [r3, #12]
    4ec0:	7853      	ldrb	r3, [r2, #1]
    4ec2:	f043 0301 	orr.w	r3, r3, #1
    4ec6:	7053      	strb	r3, [r2, #1]
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
    4ec8:	697b      	ldr	r3, [r7, #20]
    4eca:	3308      	adds	r3, #8
    4ecc:	617b      	str	r3, [r7, #20]
    4ece:	687b      	ldr	r3, [r7, #4]
    4ed0:	3301      	adds	r3, #1
    4ed2:	4a05      	ldr	r2, [pc, #20]	; (4ee8 <z_sys_init_run_level+0x7c>)
    4ed4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    4ed8:	697a      	ldr	r2, [r7, #20]
    4eda:	429a      	cmp	r2, r3
    4edc:	d3d0      	bcc.n	4e80 <z_sys_init_run_level+0x14>
		}
	}
}
    4ede:	bf00      	nop
    4ee0:	bf00      	nop
    4ee2:	3718      	adds	r7, #24
    4ee4:	46bd      	mov	sp, r7
    4ee6:	bd80      	pop	{r7, pc}
    4ee8:	2000002c 	.word	0x2000002c

00004eec <k_sys_fatal_error_handler>:
/* LCOV_EXCL_STOP */

/* LCOV_EXCL_START */
__weak void k_sys_fatal_error_handler(unsigned int reason,
				      const z_arch_esf_t *esf)
{
    4eec:	b580      	push	{r7, lr}
    4eee:	b08c      	sub	sp, #48	; 0x30
    4ef0:	af04      	add	r7, sp, #16
    4ef2:	6078      	str	r0, [r7, #4]
    4ef4:	6039      	str	r1, [r7, #0]
	ARG_UNUSED(esf);

	LOG_PANIC();
    4ef6:	f005 fafb 	bl	a4f0 <log_panic>
	LOG_ERR("Halting system");
    4efa:	2303      	movs	r3, #3
    4efc:	2b00      	cmp	r3, #0
    4efe:	d017      	beq.n	4f30 <k_sys_fatal_error_handler+0x44>
    4f00:	f005 fa9d 	bl	a43e <k_is_user_context>
    4f04:	4603      	mov	r3, r0
    4f06:	76fb      	strb	r3, [r7, #27]
    4f08:	2300      	movs	r3, #0
    4f0a:	613b      	str	r3, [r7, #16]
    4f0c:	4b0a      	ldr	r3, [pc, #40]	; (4f38 <k_sys_fatal_error_handler+0x4c>)
    4f0e:	681b      	ldr	r3, [r3, #0]
    4f10:	61fb      	str	r3, [r7, #28]
    4f12:	4b0a      	ldr	r3, [pc, #40]	; (4f3c <k_sys_fatal_error_handler+0x50>)
    4f14:	9302      	str	r3, [sp, #8]
    4f16:	2300      	movs	r3, #0
    4f18:	9301      	str	r3, [sp, #4]
    4f1a:	2300      	movs	r3, #0
    4f1c:	9300      	str	r3, [sp, #0]
    4f1e:	2300      	movs	r3, #0
    4f20:	2201      	movs	r2, #1
    4f22:	69f9      	ldr	r1, [r7, #28]
    4f24:	2000      	movs	r0, #0
    4f26:	f005 faaa 	bl	a47e <z_log_msg2_runtime_create>
    4f2a:	2300      	movs	r3, #0
    4f2c:	617b      	str	r3, [r7, #20]
    4f2e:	e000      	b.n	4f32 <k_sys_fatal_error_handler+0x46>
    4f30:	bf00      	nop
	arch_system_halt(reason);
    4f32:	6878      	ldr	r0, [r7, #4]
    4f34:	f005 faf7 	bl	a526 <arch_system_halt>
    4f38:	20000040 	.word	0x20000040
    4f3c:	0000bd4c 	.word	0x0000bd4c

00004f40 <thread_name_get>:
	CODE_UNREACHABLE; /* LCOV_EXCL_LINE */
}
/* LCOV_EXCL_STOP */

static const char *thread_name_get(struct k_thread *thread)
{
    4f40:	b580      	push	{r7, lr}
    4f42:	b084      	sub	sp, #16
    4f44:	af00      	add	r7, sp, #0
    4f46:	6078      	str	r0, [r7, #4]
	const char *thread_name = (thread != NULL) ? k_thread_name_get(thread) : NULL;
    4f48:	687b      	ldr	r3, [r7, #4]
    4f4a:	2b00      	cmp	r3, #0
    4f4c:	d004      	beq.n	4f58 <thread_name_get+0x18>
    4f4e:	6878      	ldr	r0, [r7, #4]
    4f50:	f005 fc2e 	bl	a7b0 <k_thread_name_get>
    4f54:	4603      	mov	r3, r0
    4f56:	e000      	b.n	4f5a <thread_name_get+0x1a>
    4f58:	2300      	movs	r3, #0
    4f5a:	60fb      	str	r3, [r7, #12]

	if ((thread_name == NULL) || (thread_name[0] == '\0')) {
    4f5c:	68fb      	ldr	r3, [r7, #12]
    4f5e:	2b00      	cmp	r3, #0
    4f60:	d003      	beq.n	4f6a <thread_name_get+0x2a>
    4f62:	68fb      	ldr	r3, [r7, #12]
    4f64:	781b      	ldrb	r3, [r3, #0]
    4f66:	2b00      	cmp	r3, #0
    4f68:	d101      	bne.n	4f6e <thread_name_get+0x2e>
		thread_name = "unknown";
    4f6a:	4b03      	ldr	r3, [pc, #12]	; (4f78 <thread_name_get+0x38>)
    4f6c:	60fb      	str	r3, [r7, #12]
	}

	return thread_name;
    4f6e:	68fb      	ldr	r3, [r7, #12]
}
    4f70:	4618      	mov	r0, r3
    4f72:	3710      	adds	r7, #16
    4f74:	46bd      	mov	sp, r7
    4f76:	bd80      	pop	{r7, pc}
    4f78:	0000bd5c 	.word	0x0000bd5c

00004f7c <reason_to_str>:

static const char *reason_to_str(unsigned int reason)
{
    4f7c:	b480      	push	{r7}
    4f7e:	b083      	sub	sp, #12
    4f80:	af00      	add	r7, sp, #0
    4f82:	6078      	str	r0, [r7, #4]
	switch (reason) {
    4f84:	687b      	ldr	r3, [r7, #4]
    4f86:	2b04      	cmp	r3, #4
    4f88:	d816      	bhi.n	4fb8 <reason_to_str+0x3c>
    4f8a:	a201      	add	r2, pc, #4	; (adr r2, 4f90 <reason_to_str+0x14>)
    4f8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    4f90:	00004fa5 	.word	0x00004fa5
    4f94:	00004fa9 	.word	0x00004fa9
    4f98:	00004fad 	.word	0x00004fad
    4f9c:	00004fb1 	.word	0x00004fb1
    4fa0:	00004fb5 	.word	0x00004fb5
	case K_ERR_CPU_EXCEPTION:
		return "CPU exception";
    4fa4:	4b07      	ldr	r3, [pc, #28]	; (4fc4 <reason_to_str+0x48>)
    4fa6:	e008      	b.n	4fba <reason_to_str+0x3e>
	case K_ERR_SPURIOUS_IRQ:
		return "Unhandled interrupt";
    4fa8:	4b07      	ldr	r3, [pc, #28]	; (4fc8 <reason_to_str+0x4c>)
    4faa:	e006      	b.n	4fba <reason_to_str+0x3e>
	case K_ERR_STACK_CHK_FAIL:
		return "Stack overflow";
    4fac:	4b07      	ldr	r3, [pc, #28]	; (4fcc <reason_to_str+0x50>)
    4fae:	e004      	b.n	4fba <reason_to_str+0x3e>
	case K_ERR_KERNEL_OOPS:
		return "Kernel oops";
    4fb0:	4b07      	ldr	r3, [pc, #28]	; (4fd0 <reason_to_str+0x54>)
    4fb2:	e002      	b.n	4fba <reason_to_str+0x3e>
	case K_ERR_KERNEL_PANIC:
		return "Kernel panic";
    4fb4:	4b07      	ldr	r3, [pc, #28]	; (4fd4 <reason_to_str+0x58>)
    4fb6:	e000      	b.n	4fba <reason_to_str+0x3e>
	default:
		return "Unknown error";
    4fb8:	4b07      	ldr	r3, [pc, #28]	; (4fd8 <reason_to_str+0x5c>)
	}
}
    4fba:	4618      	mov	r0, r3
    4fbc:	370c      	adds	r7, #12
    4fbe:	46bd      	mov	sp, r7
    4fc0:	bc80      	pop	{r7}
    4fc2:	4770      	bx	lr
    4fc4:	0000bd64 	.word	0x0000bd64
    4fc8:	0000bd74 	.word	0x0000bd74
    4fcc:	0000bd88 	.word	0x0000bd88
    4fd0:	0000bd98 	.word	0x0000bd98
    4fd4:	0000bda4 	.word	0x0000bda4
    4fd8:	0000bdb4 	.word	0x0000bdb4

00004fdc <z_fatal_error>:
	return 0;
#endif
}

void z_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
    4fdc:	b590      	push	{r4, r7, lr}
    4fde:	b09f      	sub	sp, #124	; 0x7c
    4fe0:	af06      	add	r7, sp, #24
    4fe2:	6078      	str	r0, [r7, #4]
    4fe4:	6039      	str	r1, [r7, #0]
	__asm__ volatile(
    4fe6:	f04f 0320 	mov.w	r3, #32
    4fea:	f3ef 8211 	mrs	r2, BASEPRI
    4fee:	f383 8812 	msr	BASEPRI_MAX, r3
    4ff2:	f3bf 8f6f 	isb	sy
    4ff6:	657a      	str	r2, [r7, #84]	; 0x54
    4ff8:	65fb      	str	r3, [r7, #92]	; 0x5c
	return key;
    4ffa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
	/* We can't allow this code to be preempted, but don't need to
	 * synchronize between CPUs, so an arch-layer lock is
	 * appropriate.
	 */
	unsigned int key = arch_irq_lock();
    4ffc:	62bb      	str	r3, [r7, #40]	; 0x28
	struct k_thread *thread = IS_ENABLED(CONFIG_MULTITHREADING) ?
			k_current_get() : NULL;
    4ffe:	f005 fa25 	bl	a44c <k_current_get>
    5002:	62f8      	str	r0, [r7, #44]	; 0x2c

	/* twister looks for the "ZEPHYR FATAL ERROR" string, don't
	 * change it without also updating twister
	 */
	LOG_ERR(">>> ZEPHYR FATAL ERROR %d: %s on CPU %d", reason,
    5004:	2303      	movs	r3, #3
    5006:	2b00      	cmp	r3, #0
    5008:	d023      	beq.n	5052 <z_fatal_error+0x76>
    500a:	f005 fa18 	bl	a43e <k_is_user_context>
    500e:	4603      	mov	r3, r0
    5010:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    5014:	2300      	movs	r3, #0
    5016:	61fb      	str	r3, [r7, #28]
    5018:	4b49      	ldr	r3, [pc, #292]	; (5140 <z_fatal_error+0x164>)
    501a:	681b      	ldr	r3, [r3, #0]
    501c:	637b      	str	r3, [r7, #52]	; 0x34
    501e:	6878      	ldr	r0, [r7, #4]
    5020:	f7ff ffac 	bl	4f7c <reason_to_str>
    5024:	4604      	mov	r4, r0
    5026:	f005 fa8d 	bl	a544 <get_cpu>
    502a:	4603      	mov	r3, r0
    502c:	9305      	str	r3, [sp, #20]
    502e:	9404      	str	r4, [sp, #16]
    5030:	687b      	ldr	r3, [r7, #4]
    5032:	9303      	str	r3, [sp, #12]
    5034:	4b43      	ldr	r3, [pc, #268]	; (5144 <z_fatal_error+0x168>)
    5036:	9302      	str	r3, [sp, #8]
    5038:	2300      	movs	r3, #0
    503a:	9301      	str	r3, [sp, #4]
    503c:	2300      	movs	r3, #0
    503e:	9300      	str	r3, [sp, #0]
    5040:	2300      	movs	r3, #0
    5042:	2201      	movs	r2, #1
    5044:	6b79      	ldr	r1, [r7, #52]	; 0x34
    5046:	2000      	movs	r0, #0
    5048:	f005 fa19 	bl	a47e <z_log_msg2_runtime_create>
    504c:	2300      	movs	r3, #0
    504e:	63bb      	str	r3, [r7, #56]	; 0x38
    5050:	e000      	b.n	5054 <z_fatal_error+0x78>
    5052:	bf00      	nop
	 * an IRQ or exception was being handled, or thread context.
	 *
	 * See #17656
	 */
#if defined(CONFIG_ARCH_HAS_NESTED_EXCEPTION_DETECTION)
	if ((esf != NULL) && arch_is_in_nested_exception(esf)) {
    5054:	683b      	ldr	r3, [r7, #0]
    5056:	2b00      	cmp	r3, #0
    5058:	d029      	beq.n	50ae <z_fatal_error+0xd2>
    505a:	683b      	ldr	r3, [r7, #0]
    505c:	65bb      	str	r3, [r7, #88]	; 0x58
 * @return true if execution state was in handler mode, before
 *              the current exception occurred, otherwise false.
 */
static ALWAYS_INLINE bool arch_is_in_nested_exception(const z_arch_esf_t *esf)
{
	return (esf->basic.xpsr & IPSR_ISR_Msk) ? (true) : (false);
    505e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
    5060:	69db      	ldr	r3, [r3, #28]
    5062:	f3c3 0308 	ubfx	r3, r3, #0, #9
    5066:	2b00      	cmp	r3, #0
    5068:	bf14      	ite	ne
    506a:	2301      	movne	r3, #1
    506c:	2300      	moveq	r3, #0
    506e:	b2db      	uxtb	r3, r3
    5070:	2b00      	cmp	r3, #0
    5072:	d01c      	beq.n	50ae <z_fatal_error+0xd2>
		LOG_ERR("Fault during interrupt handling\n");
    5074:	2303      	movs	r3, #3
    5076:	2b00      	cmp	r3, #0
    5078:	d018      	beq.n	50ac <z_fatal_error+0xd0>
    507a:	f005 f9e0 	bl	a43e <k_is_user_context>
    507e:	4603      	mov	r3, r0
    5080:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    5084:	2300      	movs	r3, #0
    5086:	617b      	str	r3, [r7, #20]
    5088:	4b2d      	ldr	r3, [pc, #180]	; (5140 <z_fatal_error+0x164>)
    508a:	681b      	ldr	r3, [r3, #0]
    508c:	643b      	str	r3, [r7, #64]	; 0x40
    508e:	4b2e      	ldr	r3, [pc, #184]	; (5148 <z_fatal_error+0x16c>)
    5090:	9302      	str	r3, [sp, #8]
    5092:	2300      	movs	r3, #0
    5094:	9301      	str	r3, [sp, #4]
    5096:	2300      	movs	r3, #0
    5098:	9300      	str	r3, [sp, #0]
    509a:	2300      	movs	r3, #0
    509c:	2201      	movs	r2, #1
    509e:	6c39      	ldr	r1, [r7, #64]	; 0x40
    50a0:	2000      	movs	r0, #0
    50a2:	f005 f9ec 	bl	a47e <z_log_msg2_runtime_create>
    50a6:	2300      	movs	r3, #0
    50a8:	647b      	str	r3, [r7, #68]	; 0x44
    50aa:	e000      	b.n	50ae <z_fatal_error+0xd2>
    50ac:	bf00      	nop
	}
#endif

	LOG_ERR("Current thread: %p (%s)", thread,
    50ae:	2303      	movs	r3, #3
    50b0:	2b00      	cmp	r3, #0
    50b2:	d023      	beq.n	50fc <z_fatal_error+0x120>
    50b4:	f005 f9c3 	bl	a43e <k_is_user_context>
    50b8:	4603      	mov	r3, r0
    50ba:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
    50be:	2300      	movs	r3, #0
    50c0:	60fb      	str	r3, [r7, #12]
    50c2:	4b1f      	ldr	r3, [pc, #124]	; (5140 <z_fatal_error+0x164>)
    50c4:	681b      	ldr	r3, [r3, #0]
    50c6:	64fb      	str	r3, [r7, #76]	; 0x4c
    50c8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
    50ca:	f7ff ff39 	bl	4f40 <thread_name_get>
    50ce:	4603      	mov	r3, r0
    50d0:	4618      	mov	r0, r3
    50d2:	f005 fa13 	bl	a4fc <log_strdup>
    50d6:	4603      	mov	r3, r0
    50d8:	9304      	str	r3, [sp, #16]
    50da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    50dc:	9303      	str	r3, [sp, #12]
    50de:	4b1b      	ldr	r3, [pc, #108]	; (514c <z_fatal_error+0x170>)
    50e0:	9302      	str	r3, [sp, #8]
    50e2:	2300      	movs	r3, #0
    50e4:	9301      	str	r3, [sp, #4]
    50e6:	2300      	movs	r3, #0
    50e8:	9300      	str	r3, [sp, #0]
    50ea:	2300      	movs	r3, #0
    50ec:	2201      	movs	r2, #1
    50ee:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
    50f0:	2000      	movs	r0, #0
    50f2:	f005 f9c4 	bl	a47e <z_log_msg2_runtime_create>
    50f6:	2300      	movs	r3, #0
    50f8:	653b      	str	r3, [r7, #80]	; 0x50
    50fa:	e000      	b.n	50fe <z_fatal_error+0x122>
    50fc:	bf00      	nop
		log_strdup(thread_name_get(thread)));

	coredump(reason, esf, thread);
    50fe:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    5100:	6839      	ldr	r1, [r7, #0]
    5102:	6878      	ldr	r0, [r7, #4]
    5104:	f005 fa04 	bl	a510 <coredump>

	k_sys_fatal_error_handler(reason, esf);
    5108:	6839      	ldr	r1, [r7, #0]
    510a:	6878      	ldr	r0, [r7, #4]
    510c:	f7ff feee 	bl	4eec <k_sys_fatal_error_handler>
	if (!IS_ENABLED(CONFIG_TEST)) {
		__ASSERT(reason != K_ERR_KERNEL_PANIC,
			 "Attempted to recover from a kernel panic condition");
		/* FIXME: #17656 */
#if defined(CONFIG_ARCH_HAS_NESTED_EXCEPTION_DETECTION)
		if ((esf != NULL) && arch_is_in_nested_exception(esf)) {
    5110:	683b      	ldr	r3, [r7, #0]
    5112:	2b00      	cmp	r3, #0
    5114:	d006      	beq.n	5124 <z_fatal_error+0x148>
    5116:	683b      	ldr	r3, [r7, #0]
    5118:	627b      	str	r3, [r7, #36]	; 0x24
    511a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    511c:	69db      	ldr	r3, [r3, #28]
    511e:	f3c3 0308 	ubfx	r3, r3, #0, #9
    5122:	2b00      	cmp	r3, #0
    5124:	6abb      	ldr	r3, [r7, #40]	; 0x28
    5126:	623b      	str	r3, [r7, #32]
	__asm__ volatile(
    5128:	6a3b      	ldr	r3, [r7, #32]
    512a:	f383 8811 	msr	BASEPRI, r3
    512e:	f3bf 8f6f 	isb	sy
}
    5132:	bf00      	nop
	}

	arch_irq_unlock(key);

	if (IS_ENABLED(CONFIG_MULTITHREADING)) {
		k_thread_abort(thread);
    5134:	6af8      	ldr	r0, [r7, #44]	; 0x2c
    5136:	f005 f997 	bl	a468 <k_thread_abort>
	}
}
    513a:	3764      	adds	r7, #100	; 0x64
    513c:	46bd      	mov	sp, r7
    513e:	bd90      	pop	{r4, r7, pc}
    5140:	20000040 	.word	0x20000040
    5144:	0000bdc4 	.word	0x0000bdc4
    5148:	0000bdec 	.word	0x0000bdec
    514c:	0000be10 	.word	0x0000be10

00005150 <__NVIC_SetPriority>:
{
    5150:	b480      	push	{r7}
    5152:	b083      	sub	sp, #12
    5154:	af00      	add	r7, sp, #0
    5156:	4603      	mov	r3, r0
    5158:	6039      	str	r1, [r7, #0]
    515a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
    515c:	f997 3007 	ldrsb.w	r3, [r7, #7]
    5160:	2b00      	cmp	r3, #0
    5162:	db0a      	blt.n	517a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    5164:	683b      	ldr	r3, [r7, #0]
    5166:	b2da      	uxtb	r2, r3
    5168:	490c      	ldr	r1, [pc, #48]	; (519c <__NVIC_SetPriority+0x4c>)
    516a:	f997 3007 	ldrsb.w	r3, [r7, #7]
    516e:	0152      	lsls	r2, r2, #5
    5170:	b2d2      	uxtb	r2, r2
    5172:	440b      	add	r3, r1
    5174:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
    5178:	e00a      	b.n	5190 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    517a:	683b      	ldr	r3, [r7, #0]
    517c:	b2da      	uxtb	r2, r3
    517e:	4908      	ldr	r1, [pc, #32]	; (51a0 <__NVIC_SetPriority+0x50>)
    5180:	79fb      	ldrb	r3, [r7, #7]
    5182:	f003 030f 	and.w	r3, r3, #15
    5186:	3b04      	subs	r3, #4
    5188:	0152      	lsls	r2, r2, #5
    518a:	b2d2      	uxtb	r2, r2
    518c:	440b      	add	r3, r1
    518e:	761a      	strb	r2, [r3, #24]
}
    5190:	bf00      	nop
    5192:	370c      	adds	r7, #12
    5194:	46bd      	mov	sp, r7
    5196:	bc80      	pop	{r7}
    5198:	4770      	bx	lr
    519a:	bf00      	nop
    519c:	e000e100 	.word	0xe000e100
    51a0:	e000ed00 	.word	0xe000ed00

000051a4 <z_dummy_thread_init>:
 * use it to properly store state, which will just be discarded.
 *
 * The memory of the dummy thread can be completely uninitialized.
 */
static inline void z_dummy_thread_init(struct k_thread *dummy_thread)
{
    51a4:	b480      	push	{r7}
    51a6:	b083      	sub	sp, #12
    51a8:	af00      	add	r7, sp, #0
    51aa:	6078      	str	r0, [r7, #4]
	dummy_thread->base.thread_state = _THREAD_DUMMY;
    51ac:	687b      	ldr	r3, [r7, #4]
    51ae:	2201      	movs	r2, #1
    51b0:	735a      	strb	r2, [r3, #13]
#ifdef CONFIG_SCHED_CPU_MASK
	dummy_thread->base.cpu_mask = -1;
#endif
	dummy_thread->base.user_options = K_ESSENTIAL;
    51b2:	687b      	ldr	r3, [r7, #4]
    51b4:	2201      	movs	r2, #1
    51b6:	731a      	strb	r2, [r3, #12]
	dummy_thread->mem_domain_info.mem_domain = &k_mem_domain_default;
#endif
#if (CONFIG_HEAP_MEM_POOL_SIZE > 0)
	k_thread_system_pool_assign(dummy_thread);
#else
	dummy_thread->resource_pool = NULL;
    51b8:	687b      	ldr	r3, [r7, #4]
    51ba:	2200      	movs	r2, #0
    51bc:	66da      	str	r2, [r3, #108]	; 0x6c
#endif

	_current_cpu->current = dummy_thread;
    51be:	4a04      	ldr	r2, [pc, #16]	; (51d0 <z_dummy_thread_init+0x2c>)
    51c0:	687b      	ldr	r3, [r7, #4]
    51c2:	6093      	str	r3, [r2, #8]
}
    51c4:	bf00      	nop
    51c6:	370c      	adds	r7, #12
    51c8:	46bd      	mov	sp, r7
    51ca:	bc80      	pop	{r7}
    51cc:	4770      	bx	lr
    51ce:	bf00      	nop
    51d0:	2000074c 	.word	0x2000074c

000051d4 <z_bss_zero>:
 *
 * This routine clears the BSS region, so all bytes are 0.
 */
__boot_func
void z_bss_zero(void)
{
    51d4:	b580      	push	{r7, lr}
    51d6:	af00      	add	r7, sp, #0
	z_early_memset(__bss_start, 0, __bss_end - __bss_start);
    51d8:	4a04      	ldr	r2, [pc, #16]	; (51ec <z_bss_zero+0x18>)
    51da:	4b05      	ldr	r3, [pc, #20]	; (51f0 <z_bss_zero+0x1c>)
    51dc:	1ad3      	subs	r3, r2, r3
    51de:	461a      	mov	r2, r3
    51e0:	2100      	movs	r1, #0
    51e2:	4803      	ldr	r0, [pc, #12]	; (51f0 <z_bss_zero+0x1c>)
    51e4:	f005 f9d5 	bl	a592 <z_early_memset>
#endif	/* CONFIG_CODE_DATA_RELOCATION */
#ifdef CONFIG_COVERAGE_GCOV
	z_early_memset(&__gcov_bss_start, 0,
		       ((uintptr_t) &__gcov_bss_end - (uintptr_t) &__gcov_bss_start));
#endif
}
    51e8:	bf00      	nop
    51ea:	bd80      	pop	{r7, pc}
    51ec:	20000890 	.word	0x20000890
    51f0:	200000a0 	.word	0x200000a0

000051f4 <bg_thread_main>:
 * This routine completes kernel initialization by invoking the remaining
 * init functions, then invokes application's main() routine.
 */
__boot_func
static void bg_thread_main(void *unused1, void *unused2, void *unused3)
{
    51f4:	b580      	push	{r7, lr}
    51f6:	b084      	sub	sp, #16
    51f8:	af00      	add	r7, sp, #0
    51fa:	60f8      	str	r0, [r7, #12]
    51fc:	60b9      	str	r1, [r7, #8]
    51fe:	607a      	str	r2, [r7, #4]
	 * may perform memory management tasks (except for z_phys_map() which
	 * is allowed at any time)
	 */
	z_mem_manage_init();
#endif /* CONFIG_MMU */
	z_sys_post_kernel = true;
    5200:	4b0d      	ldr	r3, [pc, #52]	; (5238 <bg_thread_main+0x44>)
    5202:	2201      	movs	r2, #1
    5204:	701a      	strb	r2, [r3, #0]

	z_sys_init_run_level(_SYS_INIT_LEVEL_POST_KERNEL);
    5206:	2002      	movs	r0, #2
    5208:	f7ff fe30 	bl	4e6c <z_sys_init_run_level>
#if CONFIG_STACK_POINTER_RANDOM
	z_stack_adjust_initialized = 1;
#endif
	boot_banner();
    520c:	f003 f888 	bl	8320 <boot_banner>

#if defined(CONFIG_CPLUSPLUS) && !defined(CONFIG_ARCH_POSIX)
	void z_cpp_init_static(void);
	z_cpp_init_static();
    5210:	f004 fdca 	bl	9da8 <z_cpp_init_static>
#endif

	/* Final init level before app starts */
	z_sys_init_run_level(_SYS_INIT_LEVEL_APPLICATION);
    5214:	2003      	movs	r0, #3
    5216:	f7ff fe29 	bl	4e6c <z_sys_init_run_level>

	z_init_static_threads();
    521a:	f000 fc5f 	bl	5adc <z_init_static_threads>
	z_mem_manage_boot_finish();
#endif /* CONFIG_MMU */

	extern void main(void);

	main();
    521e:	f7fb fb21 	bl	864 <main>

	/* Mark nonessential since main() has no more work to do */
	z_main_thread.base.user_options &= ~K_ESSENTIAL;
    5222:	4b06      	ldr	r3, [pc, #24]	; (523c <bg_thread_main+0x48>)
    5224:	7b1b      	ldrb	r3, [r3, #12]
    5226:	f023 0301 	bic.w	r3, r3, #1
    522a:	b2da      	uxtb	r2, r3
    522c:	4b03      	ldr	r3, [pc, #12]	; (523c <bg_thread_main+0x48>)
    522e:	731a      	strb	r2, [r3, #12]

#ifdef CONFIG_COVERAGE_DUMP
	/* Dump coverage data once the main() has exited. */
	gcov_coverage_dump();
#endif
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */
    5230:	bf00      	nop
    5232:	3710      	adds	r7, #16
    5234:	46bd      	mov	sp, r7
    5236:	bd80      	pop	{r7, pc}
    5238:	2000088c 	.word	0x2000088c
    523c:	200005c8 	.word	0x200005c8

00005240 <init_idle_thread>:

#if defined(CONFIG_MULTITHREADING)
__boot_func
static void init_idle_thread(int i)
{
    5240:	b580      	push	{r7, lr}
    5242:	b08c      	sub	sp, #48	; 0x30
    5244:	af06      	add	r7, sp, #24
    5246:	6078      	str	r0, [r7, #4]
	struct k_thread *thread = &z_idle_threads[i];
    5248:	687a      	ldr	r2, [r7, #4]
    524a:	4613      	mov	r3, r2
    524c:	011b      	lsls	r3, r3, #4
    524e:	1a9b      	subs	r3, r3, r2
    5250:	00db      	lsls	r3, r3, #3
    5252:	4a15      	ldr	r2, [pc, #84]	; (52a8 <init_idle_thread+0x68>)
    5254:	4413      	add	r3, r2
    5256:	617b      	str	r3, [r7, #20]
	k_thread_stack_t *stack = z_idle_stacks[i];
    5258:	687b      	ldr	r3, [r7, #4]
    525a:	021b      	lsls	r3, r3, #8
    525c:	4a13      	ldr	r2, [pc, #76]	; (52ac <init_idle_thread+0x6c>)
    525e:	4413      	add	r3, r2
    5260:	613b      	str	r3, [r7, #16]
#else
	char *tname = "idle";
#endif

#else
	char *tname = NULL;
    5262:	2300      	movs	r3, #0
    5264:	60fb      	str	r3, [r7, #12]
#endif /* CONFIG_THREAD_NAME */

	z_setup_new_thread(thread, stack,
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
    5266:	687a      	ldr	r2, [r7, #4]
    5268:	4613      	mov	r3, r2
    526a:	005b      	lsls	r3, r3, #1
    526c:	4413      	add	r3, r2
    526e:	00db      	lsls	r3, r3, #3
    5270:	4a0f      	ldr	r2, [pc, #60]	; (52b0 <init_idle_thread+0x70>)
    5272:	4413      	add	r3, r2
	z_setup_new_thread(thread, stack,
    5274:	68fa      	ldr	r2, [r7, #12]
    5276:	9205      	str	r2, [sp, #20]
    5278:	2201      	movs	r2, #1
    527a:	9204      	str	r2, [sp, #16]
    527c:	220f      	movs	r2, #15
    527e:	9203      	str	r2, [sp, #12]
    5280:	2200      	movs	r2, #0
    5282:	9202      	str	r2, [sp, #8]
    5284:	2200      	movs	r2, #0
    5286:	9201      	str	r2, [sp, #4]
    5288:	9300      	str	r3, [sp, #0]
    528a:	4b0a      	ldr	r3, [pc, #40]	; (52b4 <init_idle_thread+0x74>)
    528c:	f44f 7280 	mov.w	r2, #256	; 0x100
    5290:	6939      	ldr	r1, [r7, #16]
    5292:	6978      	ldr	r0, [r7, #20]
    5294:	f000 fbe6 	bl	5a64 <z_setup_new_thread>
			  NULL, NULL, K_IDLE_PRIO, K_ESSENTIAL,
			  tname);
	z_mark_thread_as_started(thread);
    5298:	6978      	ldr	r0, [r7, #20]
    529a:	f005 f964 	bl	a566 <z_mark_thread_as_started>

#ifdef CONFIG_SMP
	thread->base.is_idle = 1U;
#endif
}
    529e:	bf00      	nop
    52a0:	3718      	adds	r7, #24
    52a2:	46bd      	mov	sp, r7
    52a4:	bd80      	pop	{r7, pc}
    52a6:	bf00      	nop
    52a8:	20000640 	.word	0x20000640
    52ac:	20002090 	.word	0x20002090
    52b0:	2000074c 	.word	0x2000074c
    52b4:	0000a8bb 	.word	0x0000a8bb

000052b8 <z_init_cpu>:

void z_init_cpu(int id)
{
    52b8:	b580      	push	{r7, lr}
    52ba:	b082      	sub	sp, #8
    52bc:	af00      	add	r7, sp, #0
    52be:	6078      	str	r0, [r7, #4]
	init_idle_thread(id);
    52c0:	6878      	ldr	r0, [r7, #4]
    52c2:	f7ff ffbd 	bl	5240 <init_idle_thread>
	_kernel.cpus[id].idle_thread = &z_idle_threads[id];
    52c6:	687a      	ldr	r2, [r7, #4]
    52c8:	4613      	mov	r3, r2
    52ca:	011b      	lsls	r3, r3, #4
    52cc:	1a9b      	subs	r3, r3, r2
    52ce:	00db      	lsls	r3, r3, #3
    52d0:	4a16      	ldr	r2, [pc, #88]	; (532c <z_init_cpu+0x74>)
    52d2:	1899      	adds	r1, r3, r2
    52d4:	4816      	ldr	r0, [pc, #88]	; (5330 <z_init_cpu+0x78>)
    52d6:	687a      	ldr	r2, [r7, #4]
    52d8:	4613      	mov	r3, r2
    52da:	005b      	lsls	r3, r3, #1
    52dc:	4413      	add	r3, r2
    52de:	00db      	lsls	r3, r3, #3
    52e0:	4403      	add	r3, r0
    52e2:	330c      	adds	r3, #12
    52e4:	6019      	str	r1, [r3, #0]
	_kernel.cpus[id].id = id;
    52e6:	687b      	ldr	r3, [r7, #4]
    52e8:	b2d8      	uxtb	r0, r3
    52ea:	4911      	ldr	r1, [pc, #68]	; (5330 <z_init_cpu+0x78>)
    52ec:	687a      	ldr	r2, [r7, #4]
    52ee:	4613      	mov	r3, r2
    52f0:	005b      	lsls	r3, r3, #1
    52f2:	4413      	add	r3, r2
    52f4:	00db      	lsls	r3, r3, #3
    52f6:	440b      	add	r3, r1
    52f8:	3314      	adds	r3, #20
    52fa:	4602      	mov	r2, r0
    52fc:	701a      	strb	r2, [r3, #0]
	_kernel.cpus[id].irq_stack =
		(Z_KERNEL_STACK_BUFFER(z_interrupt_stacks[id]) +
    52fe:	687b      	ldr	r3, [r7, #4]
    5300:	02db      	lsls	r3, r3, #11
    5302:	4a0c      	ldr	r2, [pc, #48]	; (5334 <z_init_cpu+0x7c>)
    5304:	4413      	add	r3, r2
    5306:	4618      	mov	r0, r3
    5308:	f005 f923 	bl	a552 <Z_KERNEL_STACK_BUFFER>
    530c:	4603      	mov	r3, r0
    530e:	f503 6100 	add.w	r1, r3, #2048	; 0x800
	_kernel.cpus[id].irq_stack =
    5312:	4807      	ldr	r0, [pc, #28]	; (5330 <z_init_cpu+0x78>)
    5314:	687a      	ldr	r2, [r7, #4]
    5316:	4613      	mov	r3, r2
    5318:	005b      	lsls	r3, r3, #1
    531a:	4413      	add	r3, r2
    531c:	00db      	lsls	r3, r3, #3
    531e:	4403      	add	r3, r0
    5320:	3304      	adds	r3, #4
    5322:	6019      	str	r1, [r3, #0]
		 K_KERNEL_STACK_SIZEOF(z_interrupt_stacks[id]));
#ifdef CONFIG_SCHED_THREAD_USAGE_ALL
	_kernel.cpus[id].usage.track_usage =
		CONFIG_SCHED_THREAD_USAGE_AUTO_ENABLE;
#endif
}
    5324:	bf00      	nop
    5326:	3708      	adds	r7, #8
    5328:	46bd      	mov	sp, r7
    532a:	bd80      	pop	{r7, pc}
    532c:	20000640 	.word	0x20000640
    5330:	2000074c 	.word	0x2000074c
    5334:	20002190 	.word	0x20002190

00005338 <prepare_multithreading>:
 *
 * @return initial stack pointer for the main thread
 */
__boot_func
static char *prepare_multithreading(void)
{
    5338:	b580      	push	{r7, lr}
    533a:	b088      	sub	sp, #32
    533c:	af06      	add	r7, sp, #24
	char *stack_ptr;

	/* _kernel.ready_q is all zeroes */
	z_sched_init();
    533e:	f002 f8e5 	bl	750c <z_sched_init>
	 * - the main thread will be the one to run first
	 * - no other thread is initialized yet and thus their priority fields
	 *   contain garbage, which would prevent the cache loading algorithm
	 *   to work as intended
	 */
	_kernel.ready_q.cache = &z_main_thread;
    5342:	4b12      	ldr	r3, [pc, #72]	; (538c <prepare_multithreading+0x54>)
    5344:	4a12      	ldr	r2, [pc, #72]	; (5390 <prepare_multithreading+0x58>)
    5346:	619a      	str	r2, [r3, #24]
#endif
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
    5348:	4b12      	ldr	r3, [pc, #72]	; (5394 <prepare_multithreading+0x5c>)
    534a:	9305      	str	r3, [sp, #20]
    534c:	2301      	movs	r3, #1
    534e:	9304      	str	r3, [sp, #16]
    5350:	2300      	movs	r3, #0
    5352:	9303      	str	r3, [sp, #12]
    5354:	2300      	movs	r3, #0
    5356:	9302      	str	r3, [sp, #8]
    5358:	2300      	movs	r3, #0
    535a:	9301      	str	r3, [sp, #4]
    535c:	2300      	movs	r3, #0
    535e:	9300      	str	r3, [sp, #0]
    5360:	4b0d      	ldr	r3, [pc, #52]	; (5398 <prepare_multithreading+0x60>)
    5362:	f44f 6280 	mov.w	r2, #1024	; 0x400
    5366:	490d      	ldr	r1, [pc, #52]	; (539c <prepare_multithreading+0x64>)
    5368:	4809      	ldr	r0, [pc, #36]	; (5390 <prepare_multithreading+0x58>)
    536a:	f000 fb7b 	bl	5a64 <z_setup_new_thread>
    536e:	6078      	str	r0, [r7, #4]
				       CONFIG_MAIN_STACK_SIZE, bg_thread_main,
				       NULL, NULL, NULL,
				       CONFIG_MAIN_THREAD_PRIORITY,
				       K_ESSENTIAL, "main");
	z_mark_thread_as_started(&z_main_thread);
    5370:	4807      	ldr	r0, [pc, #28]	; (5390 <prepare_multithreading+0x58>)
    5372:	f005 f8f8 	bl	a566 <z_mark_thread_as_started>
	z_ready_thread(&z_main_thread);
    5376:	4806      	ldr	r0, [pc, #24]	; (5390 <prepare_multithreading+0x58>)
    5378:	f001 fd50 	bl	6e1c <z_ready_thread>

	z_init_cpu(0);
    537c:	2000      	movs	r0, #0
    537e:	f7ff ff9b 	bl	52b8 <z_init_cpu>

	return stack_ptr;
    5382:	687b      	ldr	r3, [r7, #4]
}
    5384:	4618      	mov	r0, r3
    5386:	3708      	adds	r7, #8
    5388:	46bd      	mov	sp, r7
    538a:	bd80      	pop	{r7, pc}
    538c:	2000074c 	.word	0x2000074c
    5390:	200005c8 	.word	0x200005c8
    5394:	0000be2c 	.word	0x0000be2c
    5398:	000051f5 	.word	0x000051f5
    539c:	20001c90 	.word	0x20001c90

000053a0 <switch_to_main_thread>:

__boot_func
static FUNC_NORETURN void switch_to_main_thread(char *stack_ptr)
{
    53a0:	b580      	push	{r7, lr}
    53a2:	b082      	sub	sp, #8
    53a4:	af00      	add	r7, sp, #0
    53a6:	6078      	str	r0, [r7, #4]
#ifdef CONFIG_ARCH_HAS_CUSTOM_SWAP_TO_MAIN
	arch_switch_to_main_thread(&z_main_thread, stack_ptr, bg_thread_main);
    53a8:	4a02      	ldr	r2, [pc, #8]	; (53b4 <switch_to_main_thread+0x14>)
    53aa:	6879      	ldr	r1, [r7, #4]
    53ac:	4802      	ldr	r0, [pc, #8]	; (53b8 <switch_to_main_thread+0x18>)
    53ae:	f7fe fb4f 	bl	3a50 <arch_switch_to_main_thread>
    53b2:	bf00      	nop
    53b4:	000051f5 	.word	0x000051f5
    53b8:	200005c8 	.word	0x200005c8

000053bc <z_cstart>:
 *
 * @return Does not return
 */
__boot_func
FUNC_NORETURN void z_cstart(void)
{
    53bc:	b580      	push	{r7, lr}
    53be:	b0a0      	sub	sp, #128	; 0x80
    53c0:	af00      	add	r7, sp, #0
	/* gcov hook needed to get the coverage report.*/
	gcov_static_init();
    53c2:	f005 f8e0 	bl	a586 <gcov_static_init>
 *
 */
static ALWAYS_INLINE void z_arm_interrupt_stack_setup(void)
{
	uint32_t msp =
		(uint32_t)(Z_KERNEL_STACK_BUFFER(z_interrupt_stacks[0])) +
    53c6:	482d      	ldr	r0, [pc, #180]	; (547c <z_cstart+0xc0>)
    53c8:	f005 f8c3 	bl	a552 <Z_KERNEL_STACK_BUFFER>
    53cc:	4603      	mov	r3, r0
	uint32_t msp =
    53ce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
    53d2:	67fb      	str	r3, [r7, #124]	; 0x7c
    53d4:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
    53d6:	67bb      	str	r3, [r7, #120]	; 0x78
  \details Assigns the given value to the Main Stack Pointer (MSP).
  \param [in]    topOfMainStack  Main Stack Pointer value to set
 */
__STATIC_FORCEINLINE void __set_MSP(uint32_t topOfMainStack)
{
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
    53d8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
    53da:	f383 8808 	msr	MSP, r3
}
    53de:	bf00      	nop
	 * for Cortex-M3 and Cortex-M4 (ARMv7-M) MCUs. For the rest
	 * of ARM Cortex-M processors this setting is enforced by
	 * default and it is not configurable.
	 */
#if defined(CONFIG_CPU_CORTEX_M3) || defined(CONFIG_CPU_CORTEX_M4)
	SCB->CCR |= SCB_CCR_STKALIGN_Msk;
    53e0:	4b27      	ldr	r3, [pc, #156]	; (5480 <z_cstart+0xc4>)
    53e2:	695b      	ldr	r3, [r3, #20]
    53e4:	4a26      	ldr	r2, [pc, #152]	; (5480 <z_cstart+0xc4>)
    53e6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
    53ea:	6153      	str	r3, [r2, #20]
#endif
#endif /* CONFIG_STACK_ALIGN_DOUBLE_WORD */
}
    53ec:	bf00      	nop
static ALWAYS_INLINE void z_arm_exc_setup(void)
{
	/* PendSV is set to lowest priority, regardless of it being used.
	 * This is done as the IRQ is always enabled.
	 */
	NVIC_SetPriority(PendSV_IRQn, _EXC_PENDSV_PRIO);
    53ee:	21ff      	movs	r1, #255	; 0xff
    53f0:	f06f 0001 	mvn.w	r0, #1
    53f4:	f7ff feac 	bl	5150 <__NVIC_SetPriority>

#ifdef CONFIG_CPU_CORTEX_M_HAS_BASEPRI
	/* Note: SVCall IRQ priority level is left to default (0)
	 * for Cortex-M variants without BASEPRI (e.g. ARMv6-M).
	 */
	NVIC_SetPriority(SVCall_IRQn, _EXC_SVC_PRIO);
    53f8:	2100      	movs	r1, #0
    53fa:	f06f 0004 	mvn.w	r0, #4
    53fe:	f7ff fea7 	bl	5150 <__NVIC_SetPriority>
#endif

#ifdef CONFIG_CPU_CORTEX_M_HAS_PROGRAMMABLE_FAULT_PRIOS
	NVIC_SetPriority(MemoryManagement_IRQn, _EXC_FAULT_PRIO);
    5402:	2100      	movs	r1, #0
    5404:	f06f 000b 	mvn.w	r0, #11
    5408:	f7ff fea2 	bl	5150 <__NVIC_SetPriority>
	NVIC_SetPriority(BusFault_IRQn, _EXC_FAULT_PRIO);
    540c:	2100      	movs	r1, #0
    540e:	f06f 000a 	mvn.w	r0, #10
    5412:	f7ff fe9d 	bl	5150 <__NVIC_SetPriority>
	NVIC_SetPriority(UsageFault_IRQn, _EXC_FAULT_PRIO);
    5416:	2100      	movs	r1, #0
    5418:	f06f 0009 	mvn.w	r0, #9
    541c:	f7ff fe98 	bl	5150 <__NVIC_SetPriority>
#if defined(CONFIG_CPU_CORTEX_M_HAS_DWT)
	NVIC_SetPriority(DebugMonitor_IRQn, _EXC_FAULT_PRIO);
    5420:	2100      	movs	r1, #0
    5422:	f06f 0003 	mvn.w	r0, #3
    5426:	f7ff fe93 	bl	5150 <__NVIC_SetPriority>
#if defined(CONFIG_ARM_SECURE_FIRMWARE)
	NVIC_SetPriority(SecureFault_IRQn, _EXC_FAULT_PRIO);
#endif /* CONFIG_ARM_SECURE_FIRMWARE */

	/* Enable Usage, Mem, & Bus Faults */
	SCB->SHCSR |= SCB_SHCSR_USGFAULTENA_Msk | SCB_SHCSR_MEMFAULTENA_Msk |
    542a:	4b15      	ldr	r3, [pc, #84]	; (5480 <z_cstart+0xc4>)
    542c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    542e:	4a14      	ldr	r2, [pc, #80]	; (5480 <z_cstart+0xc4>)
    5430:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
    5434:	6253      	str	r3, [r2, #36]	; 0x24
	 * interrupt is accidentally raised.
	 */
	NVIC_SetPriority(SysTick_IRQn, _EXC_IRQ_DEFAULT_PRIO);
#endif /* CPU_CORTEX_M_HAS_SYSTICK && ! CORTEX_M_SYSTICK */

}
    5436:	bf00      	nop

static ALWAYS_INLINE void arch_kernel_init(void)
{
	z_arm_interrupt_stack_setup();
	z_arm_exc_setup();
	z_arm_fault_init();
    5438:	f7ff f93e 	bl	46b8 <z_arm_fault_init>
	z_arm_cpu_idle_init();
    543c:	f7fe f9ca 	bl	37d4 <z_arm_cpu_idle_init>
static ALWAYS_INLINE void z_arm_clear_faults(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Reset all faults */
	SCB->CFSR = SCB_CFSR_USGFAULTSR_Msk |
    5440:	4b0f      	ldr	r3, [pc, #60]	; (5480 <z_cstart+0xc4>)
    5442:	f04f 32ff 	mov.w	r2, #4294967295
    5446:	629a      	str	r2, [r3, #40]	; 0x28
		    SCB_CFSR_MEMFAULTSR_Msk |
		    SCB_CFSR_BUSFAULTSR_Msk;

	/* Clear all Hard Faults - HFSR is write-one-to-clear */
	SCB->HFSR = 0xffffffff;
    5448:	4b0d      	ldr	r3, [pc, #52]	; (5480 <z_cstart+0xc4>)
    544a:	f04f 32ff 	mov.w	r2, #4294967295
    544e:	62da      	str	r2, [r3, #44]	; 0x2c
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
}
    5450:	bf00      	nop
	z_arm_configure_static_mpu_regions();
#endif /* CONFIG_ARM_MPU */
#if defined(CONFIG_ARM_AARCH32_MMU)
	z_arm_mmu_init();
#endif /* CONFIG_ARM_AARCH32_MMU */
}
    5452:	bf00      	nop

	/* perform any architecture-specific initialization */
	arch_kernel_init();

	LOG_CORE_INIT();
    5454:	f7fd fb7a 	bl	2b4c <log_core_init>
	/* Note: The z_ready_thread() call in prepare_multithreading() requires
	 * a dummy thread even if CONFIG_ARCH_HAS_CUSTOM_SWAP_TO_MAIN=y
	 */
	struct k_thread dummy_thread;

	z_dummy_thread_init(&dummy_thread);
    5458:	463b      	mov	r3, r7
    545a:	4618      	mov	r0, r3
    545c:	f7ff fea2 	bl	51a4 <z_dummy_thread_init>
#endif
	/* do any necessary initialization of static devices */
	z_device_state_init();
    5460:	f7ff fcea 	bl	4e38 <z_device_state_init>

	/* perform basic hardware initialization */
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_1);
    5464:	2000      	movs	r0, #0
    5466:	f7ff fd01 	bl	4e6c <z_sys_init_run_level>
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_2);
    546a:	2001      	movs	r0, #1
    546c:	f7ff fcfe 	bl	4e6c <z_sys_init_run_level>
	timing_init();
	timing_start();
#endif

#ifdef CONFIG_MULTITHREADING
	switch_to_main_thread(prepare_multithreading());
    5470:	f7ff ff62 	bl	5338 <prepare_multithreading>
    5474:	4603      	mov	r3, r0
    5476:	4618      	mov	r0, r3
    5478:	f7ff ff92 	bl	53a0 <switch_to_main_thread>
    547c:	20002190 	.word	0x20002190
    5480:	e000ed00 	.word	0xe000ed00

00005484 <init_mem_slab_module>:
 * Perform any initialization that wasn't done at build time.
 *
 * @return 0 on success, fails otherwise.
 */
static int init_mem_slab_module(const struct device *dev)
{
    5484:	b580      	push	{r7, lr}
    5486:	b084      	sub	sp, #16
    5488:	af00      	add	r7, sp, #0
    548a:	6078      	str	r0, [r7, #4]
	int rc = 0;
    548c:	2300      	movs	r3, #0
    548e:	60fb      	str	r3, [r7, #12]
	ARG_UNUSED(dev);

	STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
    5490:	4b0f      	ldr	r3, [pc, #60]	; (54d0 <init_mem_slab_module+0x4c>)
    5492:	60bb      	str	r3, [r7, #8]
    5494:	e00c      	b.n	54b0 <init_mem_slab_module+0x2c>
		rc = create_free_list(slab);
    5496:	68b8      	ldr	r0, [r7, #8]
    5498:	f005 f8a2 	bl	a5e0 <create_free_list>
    549c:	60f8      	str	r0, [r7, #12]
		if (rc < 0) {
    549e:	68fb      	ldr	r3, [r7, #12]
    54a0:	2b00      	cmp	r3, #0
    54a2:	db0f      	blt.n	54c4 <init_mem_slab_module+0x40>
			goto out;
		}
		z_object_init(slab);
    54a4:	68b8      	ldr	r0, [r7, #8]
    54a6:	f005 f892 	bl	a5ce <z_object_init>
	STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
    54aa:	68bb      	ldr	r3, [r7, #8]
    54ac:	3320      	adds	r3, #32
    54ae:	60bb      	str	r3, [r7, #8]
    54b0:	68bb      	ldr	r3, [r7, #8]
    54b2:	4a08      	ldr	r2, [pc, #32]	; (54d4 <init_mem_slab_module+0x50>)
    54b4:	4293      	cmp	r3, r2
    54b6:	bf34      	ite	cc
    54b8:	2301      	movcc	r3, #1
    54ba:	2300      	movcs	r3, #0
    54bc:	b2db      	uxtb	r3, r3
    54be:	2b00      	cmp	r3, #0
    54c0:	d1e9      	bne.n	5496 <init_mem_slab_module+0x12>
	}

out:
    54c2:	e000      	b.n	54c6 <init_mem_slab_module+0x42>
			goto out;
    54c4:	bf00      	nop
	return rc;
    54c6:	68fb      	ldr	r3, [r7, #12]
}
    54c8:	4618      	mov	r0, r3
    54ca:	3710      	adds	r7, #16
    54cc:	46bd      	mov	sp, r7
    54ce:	bd80      	pop	{r7, pc}
    54d0:	20000090 	.word	0x20000090
    54d4:	20000090 	.word	0x20000090

000054d8 <k_ms_to_ticks_ceil64>:
{
    54d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    54dc:	b0bd      	sub	sp, #244	; 0xf4
    54de:	af00      	add	r7, sp, #0
    54e0:	e9c7 0130 	strd	r0, r1, [r7, #192]	; 0xc0
    54e4:	e9d7 2330 	ldrd	r2, r3, [r7, #192]	; 0xc0
    54e8:	e9c7 233a 	strd	r2, r3, [r7, #232]	; 0xe8
    54ec:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
    54f0:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    54f4:	2364      	movs	r3, #100	; 0x64
    54f6:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    54fa:	2301      	movs	r3, #1
    54fc:	f887 30df 	strb.w	r3, [r7, #223]	; 0xdf
    5500:	2300      	movs	r3, #0
    5502:	f887 30de 	strb.w	r3, [r7, #222]	; 0xde
    5506:	2301      	movs	r3, #1
    5508:	f887 30dd 	strb.w	r3, [r7, #221]	; 0xdd
    550c:	2300      	movs	r3, #0
    550e:	f887 30dc 	strb.w	r3, [r7, #220]	; 0xdc
		(to_hz > from_hz) && ((to_hz % from_hz) == 0U);
    5512:	f897 30df 	ldrb.w	r3, [r7, #223]	; 0xdf
    5516:	2b00      	cmp	r3, #0
    5518:	d014      	beq.n	5544 <k_ms_to_ticks_ceil64+0x6c>
	bool mul_ratio = const_hz &&
    551a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
    551e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
    5522:	429a      	cmp	r2, r3
    5524:	d20e      	bcs.n	5544 <k_ms_to_ticks_ceil64+0x6c>
		(to_hz > from_hz) && ((to_hz % from_hz) == 0U);
    5526:	f8d7 10e0 	ldr.w	r1, [r7, #224]	; 0xe0
    552a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
    552e:	fbb1 f2f3 	udiv	r2, r1, r3
    5532:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
    5536:	fb02 f303 	mul.w	r3, r2, r3
    553a:	1acb      	subs	r3, r1, r3
    553c:	2b00      	cmp	r3, #0
    553e:	d101      	bne.n	5544 <k_ms_to_ticks_ceil64+0x6c>
    5540:	2301      	movs	r3, #1
    5542:	e000      	b.n	5546 <k_ms_to_ticks_ceil64+0x6e>
    5544:	2300      	movs	r3, #0
	bool mul_ratio = const_hz &&
    5546:	f887 30db 	strb.w	r3, [r7, #219]	; 0xdb
    554a:	f897 30db 	ldrb.w	r3, [r7, #219]	; 0xdb
    554e:	f003 0301 	and.w	r3, r3, #1
    5552:	f887 30db 	strb.w	r3, [r7, #219]	; 0xdb
		(from_hz > to_hz) && ((from_hz % to_hz) == 0U);
    5556:	f897 30df 	ldrb.w	r3, [r7, #223]	; 0xdf
    555a:	2b00      	cmp	r3, #0
    555c:	d014      	beq.n	5588 <k_ms_to_ticks_ceil64+0xb0>
	bool div_ratio = const_hz &&
    555e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
    5562:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
    5566:	429a      	cmp	r2, r3
    5568:	d90e      	bls.n	5588 <k_ms_to_ticks_ceil64+0xb0>
		(from_hz > to_hz) && ((from_hz % to_hz) == 0U);
    556a:	f8d7 10e4 	ldr.w	r1, [r7, #228]	; 0xe4
    556e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
    5572:	fbb1 f2f3 	udiv	r2, r1, r3
    5576:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
    557a:	fb02 f303 	mul.w	r3, r2, r3
    557e:	1acb      	subs	r3, r1, r3
    5580:	2b00      	cmp	r3, #0
    5582:	d101      	bne.n	5588 <k_ms_to_ticks_ceil64+0xb0>
    5584:	2301      	movs	r3, #1
    5586:	e000      	b.n	558a <k_ms_to_ticks_ceil64+0xb2>
    5588:	2300      	movs	r3, #0
	bool div_ratio = const_hz &&
    558a:	f887 30da 	strb.w	r3, [r7, #218]	; 0xda
    558e:	f897 30da 	ldrb.w	r3, [r7, #218]	; 0xda
    5592:	f003 0301 	and.w	r3, r3, #1
    5596:	f887 30da 	strb.w	r3, [r7, #218]	; 0xda
	if (from_hz == to_hz) {
    559a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
    559e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
    55a2:	429a      	cmp	r2, r3
    55a4:	d10c      	bne.n	55c0 <k_ms_to_ticks_ceil64+0xe8>
		return result32 ? ((uint32_t)t) : t;
    55a6:	f897 30de 	ldrb.w	r3, [r7, #222]	; 0xde
    55aa:	2b00      	cmp	r3, #0
    55ac:	d005      	beq.n	55ba <k_ms_to_ticks_ceil64+0xe2>
    55ae:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
    55b2:	2200      	movs	r2, #0
    55b4:	461c      	mov	r4, r3
    55b6:	4615      	mov	r5, r2
    55b8:	e1de      	b.n	5978 <k_ms_to_ticks_ceil64+0x4a0>
    55ba:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
    55be:	e1db      	b.n	5978 <k_ms_to_ticks_ceil64+0x4a0>
	uint64_t off = 0;
    55c0:	f04f 0200 	mov.w	r2, #0
    55c4:	f04f 0300 	mov.w	r3, #0
    55c8:	e9c7 2334 	strd	r2, r3, [r7, #208]	; 0xd0
	if (!mul_ratio) {
    55cc:	f897 30db 	ldrb.w	r3, [r7, #219]	; 0xdb
    55d0:	f083 0301 	eor.w	r3, r3, #1
    55d4:	b2db      	uxtb	r3, r3
    55d6:	2b00      	cmp	r3, #0
    55d8:	d02a      	beq.n	5630 <k_ms_to_ticks_ceil64+0x158>
		uint32_t rdivisor = div_ratio ? (from_hz / to_hz) : from_hz;
    55da:	f897 30da 	ldrb.w	r3, [r7, #218]	; 0xda
    55de:	2b00      	cmp	r3, #0
    55e0:	d006      	beq.n	55f0 <k_ms_to_ticks_ceil64+0x118>
    55e2:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
    55e6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
    55ea:	fbb2 f3f3 	udiv	r3, r2, r3
    55ee:	e001      	b.n	55f4 <k_ms_to_ticks_ceil64+0x11c>
    55f0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
    55f4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
		if (round_up) {
    55f8:	f897 30dd 	ldrb.w	r3, [r7, #221]	; 0xdd
    55fc:	2b00      	cmp	r3, #0
    55fe:	d009      	beq.n	5614 <k_ms_to_ticks_ceil64+0x13c>
			off = rdivisor - 1U;
    5600:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
    5604:	3b01      	subs	r3, #1
    5606:	2200      	movs	r2, #0
    5608:	613b      	str	r3, [r7, #16]
    560a:	617a      	str	r2, [r7, #20]
    560c:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
    5610:	e9c7 2334 	strd	r2, r3, [r7, #208]	; 0xd0
		if (round_off) {
    5614:	f897 30dc 	ldrb.w	r3, [r7, #220]	; 0xdc
    5618:	2b00      	cmp	r3, #0
    561a:	d009      	beq.n	5630 <k_ms_to_ticks_ceil64+0x158>
			off = rdivisor / 2U;
    561c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
    5620:	085b      	lsrs	r3, r3, #1
    5622:	2200      	movs	r2, #0
    5624:	60bb      	str	r3, [r7, #8]
    5626:	60fa      	str	r2, [r7, #12]
    5628:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
    562c:	e9c7 2334 	strd	r2, r3, [r7, #208]	; 0xd0
	if (div_ratio) {
    5630:	f897 30da 	ldrb.w	r3, [r7, #218]	; 0xda
    5634:	2b00      	cmp	r3, #0
    5636:	d038      	beq.n	56aa <k_ms_to_ticks_ceil64+0x1d2>
		t += off;
    5638:	e9d7 013a 	ldrd	r0, r1, [r7, #232]	; 0xe8
    563c:	e9d7 2334 	ldrd	r2, r3, [r7, #208]	; 0xd0
    5640:	1886      	adds	r6, r0, r2
    5642:	603e      	str	r6, [r7, #0]
    5644:	eb41 0303 	adc.w	r3, r1, r3
    5648:	607b      	str	r3, [r7, #4]
    564a:	e9d7 2300 	ldrd	r2, r3, [r7]
    564e:	e9c7 233a 	strd	r2, r3, [r7, #232]	; 0xe8
		if (result32 && (t < BIT64(32))) {
    5652:	f897 30de 	ldrb.w	r3, [r7, #222]	; 0xde
    5656:	2b00      	cmp	r3, #0
    5658:	d011      	beq.n	567e <k_ms_to_ticks_ceil64+0x1a6>
    565a:	e9d7 233a 	ldrd	r2, r3, [r7, #232]	; 0xe8
    565e:	2b01      	cmp	r3, #1
    5660:	d20d      	bcs.n	567e <k_ms_to_ticks_ceil64+0x1a6>
			return ((uint32_t)t) / (from_hz / to_hz);
    5662:	f8d7 20e8 	ldr.w	r2, [r7, #232]	; 0xe8
    5666:	f8d7 10e4 	ldr.w	r1, [r7, #228]	; 0xe4
    566a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
    566e:	fbb1 f3f3 	udiv	r3, r1, r3
    5672:	fbb2 f3f3 	udiv	r3, r2, r3
    5676:	2200      	movs	r2, #0
    5678:	461c      	mov	r4, r3
    567a:	4615      	mov	r5, r2
    567c:	e17c      	b.n	5978 <k_ms_to_ticks_ceil64+0x4a0>
			return t / ((uint64_t)from_hz / to_hz);
    567e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
    5682:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
    5686:	fbb2 f3f3 	udiv	r3, r2, r3
    568a:	2200      	movs	r2, #0
    568c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    5690:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
    5694:	e9d7 2326 	ldrd	r2, r3, [r7, #152]	; 0x98
    5698:	e9d7 013a 	ldrd	r0, r1, [r7, #232]	; 0xe8
    569c:	f7fa fd26 	bl	ec <__aeabi_uldivmod>
    56a0:	4602      	mov	r2, r0
    56a2:	460b      	mov	r3, r1
    56a4:	4614      	mov	r4, r2
    56a6:	461d      	mov	r5, r3
    56a8:	e166      	b.n	5978 <k_ms_to_ticks_ceil64+0x4a0>
	} else if (mul_ratio) {
    56aa:	f897 30db 	ldrb.w	r3, [r7, #219]	; 0xdb
    56ae:	2b00      	cmp	r3, #0
    56b0:	d031      	beq.n	5716 <k_ms_to_ticks_ceil64+0x23e>
		if (result32) {
    56b2:	f897 30de 	ldrb.w	r3, [r7, #222]	; 0xde
    56b6:	2b00      	cmp	r3, #0
    56b8:	d00d      	beq.n	56d6 <k_ms_to_ticks_ceil64+0x1fe>
			return ((uint32_t)t) * (to_hz / from_hz);
    56ba:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
    56be:	f8d7 10e0 	ldr.w	r1, [r7, #224]	; 0xe0
    56c2:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
    56c6:	fbb1 f2f2 	udiv	r2, r1, r2
    56ca:	fb02 f303 	mul.w	r3, r2, r3
    56ce:	2200      	movs	r2, #0
    56d0:	461c      	mov	r4, r3
    56d2:	4615      	mov	r5, r2
    56d4:	e150      	b.n	5978 <k_ms_to_ticks_ceil64+0x4a0>
			return t * ((uint64_t)to_hz / from_hz);
    56d6:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
    56da:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
    56de:	fbb2 f3f3 	udiv	r3, r2, r3
    56e2:	2200      	movs	r2, #0
    56e4:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    56e8:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
    56ec:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
    56f0:	e9d7 8924 	ldrd	r8, r9, [r7, #144]	; 0x90
    56f4:	464a      	mov	r2, r9
    56f6:	fb02 f203 	mul.w	r2, r2, r3
    56fa:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
    56fe:	4641      	mov	r1, r8
    5700:	fb01 f303 	mul.w	r3, r1, r3
    5704:	4413      	add	r3, r2
    5706:	f8d7 20e8 	ldr.w	r2, [r7, #232]	; 0xe8
    570a:	4641      	mov	r1, r8
    570c:	fba2 4501 	umull	r4, r5, r2, r1
    5710:	442b      	add	r3, r5
    5712:	461d      	mov	r5, r3
    5714:	e130      	b.n	5978 <k_ms_to_ticks_ceil64+0x4a0>
		if (result32) {
    5716:	f897 30de 	ldrb.w	r3, [r7, #222]	; 0xde
    571a:	2b00      	cmp	r3, #0
    571c:	d035      	beq.n	578a <k_ms_to_ticks_ceil64+0x2b2>
			return (uint32_t)((t * to_hz + off) / from_hz);
    571e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
    5722:	2200      	movs	r2, #0
    5724:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    5728:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
    572c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
    5730:	e9d7 ab22 	ldrd	sl, fp, [r7, #136]	; 0x88
    5734:	465a      	mov	r2, fp
    5736:	fb02 f203 	mul.w	r2, r2, r3
    573a:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
    573e:	4651      	mov	r1, sl
    5740:	fb01 f303 	mul.w	r3, r1, r3
    5744:	4413      	add	r3, r2
    5746:	f8d7 20e8 	ldr.w	r2, [r7, #232]	; 0xe8
    574a:	4651      	mov	r1, sl
    574c:	fba2 8901 	umull	r8, r9, r2, r1
    5750:	444b      	add	r3, r9
    5752:	4699      	mov	r9, r3
    5754:	e9d7 2334 	ldrd	r2, r3, [r7, #208]	; 0xd0
    5758:	eb18 0102 	adds.w	r1, r8, r2
    575c:	f8c7 1080 	str.w	r1, [r7, #128]	; 0x80
    5760:	eb49 0303 	adc.w	r3, r9, r3
    5764:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    5768:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
    576c:	2200      	movs	r2, #0
    576e:	67bb      	str	r3, [r7, #120]	; 0x78
    5770:	67fa      	str	r2, [r7, #124]	; 0x7c
    5772:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
    5776:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
    577a:	f7fa fcb7 	bl	ec <__aeabi_uldivmod>
    577e:	4602      	mov	r2, r0
    5780:	460b      	mov	r3, r1
    5782:	2300      	movs	r3, #0
    5784:	4614      	mov	r4, r2
    5786:	461d      	mov	r5, r3
    5788:	e0f6      	b.n	5978 <k_ms_to_ticks_ceil64+0x4a0>
		} else if (const_hz && Z_TMCVT_USE_FAST_ALGO(from_hz, to_hz)) {
    578a:	f897 30df 	ldrb.w	r3, [r7, #223]	; 0xdf
    578e:	2b00      	cmp	r3, #0
    5790:	f000 8082 	beq.w	5898 <k_ms_to_ticks_ceil64+0x3c0>
    5794:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
    5798:	2200      	movs	r2, #0
    579a:	673b      	str	r3, [r7, #112]	; 0x70
    579c:	677a      	str	r2, [r7, #116]	; 0x74
    579e:	4b7a      	ldr	r3, [pc, #488]	; (5988 <k_ms_to_ticks_ceil64+0x4b0>)
    57a0:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
    57a4:	464a      	mov	r2, r9
    57a6:	fb03 f202 	mul.w	r2, r3, r2
    57aa:	2300      	movs	r3, #0
    57ac:	4641      	mov	r1, r8
    57ae:	fb01 f303 	mul.w	r3, r1, r3
    57b2:	441a      	add	r2, r3
    57b4:	4b74      	ldr	r3, [pc, #464]	; (5988 <k_ms_to_ticks_ceil64+0x4b0>)
    57b6:	4641      	mov	r1, r8
    57b8:	fba1 ab03 	umull	sl, fp, r1, r3
    57bc:	eb02 030b 	add.w	r3, r2, fp
    57c0:	469b      	mov	fp, r3
    57c2:	f1ba 0302 	subs.w	r3, sl, #2
    57c6:	66bb      	str	r3, [r7, #104]	; 0x68
    57c8:	f14b 0300 	adc.w	r3, fp, #0
    57cc:	66fb      	str	r3, [r7, #108]	; 0x6c
    57ce:	f04f 32ff 	mov.w	r2, #4294967295
    57d2:	f04f 0300 	mov.w	r3, #0
    57d6:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
    57da:	f7fa fc87 	bl	ec <__aeabi_uldivmod>
    57de:	4602      	mov	r2, r0
    57e0:	460b      	mov	r3, r1
    57e2:	4610      	mov	r0, r2
    57e4:	4619      	mov	r1, r3
    57e6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
    57ea:	2200      	movs	r2, #0
    57ec:	663b      	str	r3, [r7, #96]	; 0x60
    57ee:	667a      	str	r2, [r7, #100]	; 0x64
    57f0:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
    57f4:	4643      	mov	r3, r8
    57f6:	fb03 f201 	mul.w	r2, r3, r1
    57fa:	464b      	mov	r3, r9
    57fc:	fb00 f303 	mul.w	r3, r0, r3
    5800:	4413      	add	r3, r2
    5802:	4642      	mov	r2, r8
    5804:	fba0 2102 	umull	r2, r1, r0, r2
    5808:	f8c7 10bc 	str.w	r1, [r7, #188]	; 0xbc
    580c:	f8c7 20b8 	str.w	r2, [r7, #184]	; 0xb8
    5810:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
    5814:	4413      	add	r3, r2
    5816:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    581a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
    581e:	2b01      	cmp	r3, #1
    5820:	d23a      	bcs.n	5898 <k_ms_to_ticks_ceil64+0x3c0>
			return ((t * to_hz + off) / from_hz);
    5822:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
    5826:	2200      	movs	r2, #0
    5828:	65bb      	str	r3, [r7, #88]	; 0x58
    582a:	65fa      	str	r2, [r7, #92]	; 0x5c
    582c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
    5830:	e9d7 4516 	ldrd	r4, r5, [r7, #88]	; 0x58
    5834:	462a      	mov	r2, r5
    5836:	fb02 f203 	mul.w	r2, r2, r3
    583a:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
    583e:	4621      	mov	r1, r4
    5840:	fb01 f303 	mul.w	r3, r1, r3
    5844:	4413      	add	r3, r2
    5846:	f8d7 20e8 	ldr.w	r2, [r7, #232]	; 0xe8
    584a:	4621      	mov	r1, r4
    584c:	fba2 2101 	umull	r2, r1, r2, r1
    5850:	f8c7 10b4 	str.w	r1, [r7, #180]	; 0xb4
    5854:	f8c7 20b0 	str.w	r2, [r7, #176]	; 0xb0
    5858:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
    585c:	4413      	add	r3, r2
    585e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    5862:	e9d7 2334 	ldrd	r2, r3, [r7, #208]	; 0xd0
    5866:	e9d7 452c 	ldrd	r4, r5, [r7, #176]	; 0xb0
    586a:	4621      	mov	r1, r4
    586c:	1889      	adds	r1, r1, r2
    586e:	6539      	str	r1, [r7, #80]	; 0x50
    5870:	4629      	mov	r1, r5
    5872:	eb43 0101 	adc.w	r1, r3, r1
    5876:	6579      	str	r1, [r7, #84]	; 0x54
    5878:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
    587c:	2200      	movs	r2, #0
    587e:	64bb      	str	r3, [r7, #72]	; 0x48
    5880:	64fa      	str	r2, [r7, #76]	; 0x4c
    5882:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
    5886:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
    588a:	f7fa fc2f 	bl	ec <__aeabi_uldivmod>
    588e:	4602      	mov	r2, r0
    5890:	460b      	mov	r3, r1
    5892:	4614      	mov	r4, r2
    5894:	461d      	mov	r5, r3
    5896:	e06f      	b.n	5978 <k_ms_to_ticks_ceil64+0x4a0>
			return (t / from_hz) * to_hz + ((t % from_hz) * to_hz + off) / from_hz;
    5898:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
    589c:	2200      	movs	r2, #0
    589e:	643b      	str	r3, [r7, #64]	; 0x40
    58a0:	647a      	str	r2, [r7, #68]	; 0x44
    58a2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
    58a6:	e9d7 013a 	ldrd	r0, r1, [r7, #232]	; 0xe8
    58aa:	f7fa fc1f 	bl	ec <__aeabi_uldivmod>
    58ae:	4602      	mov	r2, r0
    58b0:	460b      	mov	r3, r1
    58b2:	4610      	mov	r0, r2
    58b4:	4619      	mov	r1, r3
    58b6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
    58ba:	2200      	movs	r2, #0
    58bc:	63bb      	str	r3, [r7, #56]	; 0x38
    58be:	63fa      	str	r2, [r7, #60]	; 0x3c
    58c0:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
    58c4:	4643      	mov	r3, r8
    58c6:	fb03 f201 	mul.w	r2, r3, r1
    58ca:	464b      	mov	r3, r9
    58cc:	fb00 f303 	mul.w	r3, r0, r3
    58d0:	4413      	add	r3, r2
    58d2:	4642      	mov	r2, r8
    58d4:	fba0 2102 	umull	r2, r1, r0, r2
    58d8:	f8c7 10ac 	str.w	r1, [r7, #172]	; 0xac
    58dc:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
    58e0:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
    58e4:	4413      	add	r3, r2
    58e6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    58ea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
    58ee:	2200      	movs	r2, #0
    58f0:	633b      	str	r3, [r7, #48]	; 0x30
    58f2:	637a      	str	r2, [r7, #52]	; 0x34
    58f4:	e9d7 013a 	ldrd	r0, r1, [r7, #232]	; 0xe8
    58f8:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
    58fc:	f7fa fbf6 	bl	ec <__aeabi_uldivmod>
    5900:	4610      	mov	r0, r2
    5902:	4619      	mov	r1, r3
    5904:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
    5908:	2200      	movs	r2, #0
    590a:	62bb      	str	r3, [r7, #40]	; 0x28
    590c:	62fa      	str	r2, [r7, #44]	; 0x2c
    590e:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
    5912:	4643      	mov	r3, r8
    5914:	fb03 f201 	mul.w	r2, r3, r1
    5918:	464b      	mov	r3, r9
    591a:	fb00 f303 	mul.w	r3, r0, r3
    591e:	4413      	add	r3, r2
    5920:	4642      	mov	r2, r8
    5922:	fba0 2102 	umull	r2, r1, r0, r2
    5926:	f8c7 10a4 	str.w	r1, [r7, #164]	; 0xa4
    592a:	f8c7 20a0 	str.w	r2, [r7, #160]	; 0xa0
    592e:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
    5932:	4413      	add	r3, r2
    5934:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    5938:	e9d7 2334 	ldrd	r2, r3, [r7, #208]	; 0xd0
    593c:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
    5940:	4641      	mov	r1, r8
    5942:	1889      	adds	r1, r1, r2
    5944:	6239      	str	r1, [r7, #32]
    5946:	4649      	mov	r1, r9
    5948:	eb43 0101 	adc.w	r1, r3, r1
    594c:	6279      	str	r1, [r7, #36]	; 0x24
    594e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
    5952:	2200      	movs	r2, #0
    5954:	61bb      	str	r3, [r7, #24]
    5956:	61fa      	str	r2, [r7, #28]
    5958:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
    595c:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
    5960:	f7fa fbc4 	bl	ec <__aeabi_uldivmod>
    5964:	4602      	mov	r2, r0
    5966:	460b      	mov	r3, r1
    5968:	e9d7 892a 	ldrd	r8, r9, [r7, #168]	; 0xa8
    596c:	4641      	mov	r1, r8
    596e:	188c      	adds	r4, r1, r2
    5970:	4649      	mov	r1, r9
    5972:	eb43 0101 	adc.w	r1, r3, r1
    5976:	460d      	mov	r5, r1
	return z_tmcvt(t, Z_HZ_ms, Z_HZ_ticks, true, false, true, false);
    5978:	4622      	mov	r2, r4
    597a:	462b      	mov	r3, r5
}
    597c:	4610      	mov	r0, r2
    597e:	4619      	mov	r1, r3
    5980:	37f4      	adds	r7, #244	; 0xf4
    5982:	46bd      	mov	sp, r7
    5984:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    5988:	01e13380 	.word	0x01e13380

0000598c <z_add_thread_timeout>:
}

extern void z_thread_timeout(struct _timeout *timeout);

static inline void z_add_thread_timeout(struct k_thread *thread, k_timeout_t ticks)
{
    598c:	b580      	push	{r7, lr}
    598e:	b084      	sub	sp, #16
    5990:	af00      	add	r7, sp, #0
    5992:	60f8      	str	r0, [r7, #12]
    5994:	e9c7 2300 	strd	r2, r3, [r7]
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
    5998:	68fb      	ldr	r3, [r7, #12]
    599a:	f103 0018 	add.w	r0, r3, #24
    599e:	e9d7 2300 	ldrd	r2, r3, [r7]
    59a2:	4903      	ldr	r1, [pc, #12]	; (59b0 <z_add_thread_timeout+0x24>)
    59a4:	f002 f894 	bl	7ad0 <z_add_timeout>
}
    59a8:	bf00      	nop
    59aa:	3710      	adds	r7, #16
    59ac:	46bd      	mov	sp, r7
    59ae:	bd80      	pop	{r7, pc}
    59b0:	000071a1 	.word	0x000071a1

000059b4 <setup_thread_stack>:
#endif /* CONFIG_STACK_GROWS_UP */
#endif /* CONFIG_STACK_POINTER_RANDOM */

static char *setup_thread_stack(struct k_thread *new_thread,
				k_thread_stack_t *stack, size_t stack_size)
{
    59b4:	b580      	push	{r7, lr}
    59b6:	b0a0      	sub	sp, #128	; 0x80
    59b8:	af0a      	add	r7, sp, #40	; 0x28
    59ba:	60f8      	str	r0, [r7, #12]
    59bc:	60b9      	str	r1, [r7, #8]
    59be:	607a      	str	r2, [r7, #4]
	size_t stack_obj_size, stack_buf_size;
	char *stack_ptr, *stack_buf_start;
	size_t delta = 0;
    59c0:	2300      	movs	r3, #0
    59c2:	647b      	str	r3, [r7, #68]	; 0x44
		stack_buf_size = stack_obj_size - K_THREAD_STACK_RESERVED;
	} else
#endif
	{
		/* Object cannot host a user mode thread */
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
    59c4:	687b      	ldr	r3, [r7, #4]
    59c6:	3307      	adds	r3, #7
    59c8:	f023 0307 	bic.w	r3, r3, #7
    59cc:	643b      	str	r3, [r7, #64]	; 0x40
		stack_buf_start = Z_KERNEL_STACK_BUFFER(stack);
    59ce:	68b8      	ldr	r0, [r7, #8]
    59d0:	f004 fe5e 	bl	a690 <Z_KERNEL_STACK_BUFFER>
    59d4:	64b8      	str	r0, [r7, #72]	; 0x48
		stack_buf_size = stack_obj_size - K_KERNEL_STACK_RESERVED;
    59d6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    59d8:	64fb      	str	r3, [r7, #76]	; 0x4c
	}

	/* Initial stack pointer at the high end of the stack object, may
	 * be reduced later in this function by TLS or random offset
	 */
	stack_ptr = (char *)stack + stack_obj_size;
    59da:	68ba      	ldr	r2, [r7, #8]
    59dc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    59de:	4413      	add	r3, r2
    59e0:	653b      	str	r3, [r7, #80]	; 0x50

	LOG_DBG("stack %p for thread %p: obj_size=%zu buf_start=%p "
    59e2:	2303      	movs	r3, #3
    59e4:	2b03      	cmp	r3, #3
    59e6:	d926      	bls.n	5a36 <setup_thread_stack+0x82>
    59e8:	f004 fe4b 	bl	a682 <k_is_user_context>
    59ec:	4603      	mov	r3, r0
    59ee:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
    59f2:	2300      	movs	r3, #0
    59f4:	637b      	str	r3, [r7, #52]	; 0x34
    59f6:	4b18      	ldr	r3, [pc, #96]	; (5a58 <setup_thread_stack+0xa4>)
    59f8:	681b      	ldr	r3, [r3, #0]
    59fa:	63fb      	str	r3, [r7, #60]	; 0x3c
    59fc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
    59fe:	9309      	str	r3, [sp, #36]	; 0x24
    5a00:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    5a02:	9308      	str	r3, [sp, #32]
    5a04:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    5a06:	9307      	str	r3, [sp, #28]
    5a08:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    5a0a:	9306      	str	r3, [sp, #24]
    5a0c:	68fb      	ldr	r3, [r7, #12]
    5a0e:	9305      	str	r3, [sp, #20]
    5a10:	68bb      	ldr	r3, [r7, #8]
    5a12:	9304      	str	r3, [sp, #16]
    5a14:	4b11      	ldr	r3, [pc, #68]	; (5a5c <setup_thread_stack+0xa8>)
    5a16:	9303      	str	r3, [sp, #12]
    5a18:	4b11      	ldr	r3, [pc, #68]	; (5a60 <setup_thread_stack+0xac>)
    5a1a:	9302      	str	r3, [sp, #8]
    5a1c:	2308      	movs	r3, #8
    5a1e:	9301      	str	r3, [sp, #4]
    5a20:	2300      	movs	r3, #0
    5a22:	9300      	str	r3, [sp, #0]
    5a24:	2300      	movs	r3, #0
    5a26:	2204      	movs	r2, #4
    5a28:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
    5a2a:	2000      	movs	r0, #0
    5a2c:	f004 fe6a 	bl	a704 <z_log_msg2_runtime_create>
    5a30:	2300      	movs	r3, #0
    5a32:	63bb      	str	r3, [r7, #56]	; 0x38
    5a34:	e000      	b.n	5a38 <setup_thread_stack+0x84>
    5a36:	bf00      	nop
		(struct _thread_userspace_local_data *)(stack_ptr - delta);
#endif
#if CONFIG_STACK_POINTER_RANDOM
	delta += random_offset(stack_buf_size);
#endif
	delta = ROUND_UP(delta, ARCH_STACK_PTR_ALIGN);
    5a38:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    5a3a:	3307      	adds	r3, #7
    5a3c:	f023 0307 	bic.w	r3, r3, #7
    5a40:	647b      	str	r3, [r7, #68]	; 0x44
	 */
	new_thread->stack_info.start = (uintptr_t)stack_buf_start;
	new_thread->stack_info.size = stack_buf_size;
	new_thread->stack_info.delta = delta;
#endif
	stack_ptr -= delta;
    5a42:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    5a44:	425b      	negs	r3, r3
    5a46:	6d3a      	ldr	r2, [r7, #80]	; 0x50
    5a48:	4413      	add	r3, r2
    5a4a:	653b      	str	r3, [r7, #80]	; 0x50

	return stack_ptr;
    5a4c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
}
    5a4e:	4618      	mov	r0, r3
    5a50:	3758      	adds	r7, #88	; 0x58
    5a52:	46bd      	mov	sp, r7
    5a54:	bd80      	pop	{r7, pc}
    5a56:	bf00      	nop
    5a58:	20000044 	.word	0x20000044
    5a5c:	0000c060 	.word	0x0000c060
    5a60:	0000be3c 	.word	0x0000be3c

00005a64 <z_setup_new_thread>:
char *z_setup_new_thread(struct k_thread *new_thread,
			 k_thread_stack_t *stack, size_t stack_size,
			 k_thread_entry_t entry,
			 void *p1, void *p2, void *p3,
			 int prio, uint32_t options, const char *name)
{
    5a64:	b580      	push	{r7, lr}
    5a66:	b08a      	sub	sp, #40	; 0x28
    5a68:	af04      	add	r7, sp, #16
    5a6a:	60f8      	str	r0, [r7, #12]
    5a6c:	60b9      	str	r1, [r7, #8]
    5a6e:	607a      	str	r2, [r7, #4]
    5a70:	603b      	str	r3, [r7, #0]
	new_thread->syscall_frame = NULL;

	/* Any given thread has access to itself */
	k_object_access_grant(new_thread, new_thread);
#endif
	z_waitq_init(&new_thread->join_queue);
    5a72:	68fb      	ldr	r3, [r7, #12]
    5a74:	3358      	adds	r3, #88	; 0x58
    5a76:	4618      	mov	r0, r3
    5a78:	f004 fe38 	bl	a6ec <z_waitq_init>

	/* Initialize various struct k_thread members */
	z_init_thread_base(&new_thread->base, prio, _THREAD_PRESTART, options);
    5a7c:	68f8      	ldr	r0, [r7, #12]
    5a7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    5a80:	2204      	movs	r2, #4
    5a82:	6af9      	ldr	r1, [r7, #44]	; 0x2c
    5a84:	f004 fef3 	bl	a86e <z_init_thread_base>
	stack_ptr = setup_thread_stack(new_thread, stack, stack_size);
    5a88:	687a      	ldr	r2, [r7, #4]
    5a8a:	68b9      	ldr	r1, [r7, #8]
    5a8c:	68f8      	ldr	r0, [r7, #12]
    5a8e:	f7ff ff91 	bl	59b4 <setup_thread_stack>
    5a92:	6178      	str	r0, [r7, #20]
	 */
	__ASSERT_NO_MSG(arch_mem_coherent(new_thread));
	__ASSERT_NO_MSG(!arch_mem_coherent(stack));
#endif

	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
    5a94:	6abb      	ldr	r3, [r7, #40]	; 0x28
    5a96:	9302      	str	r3, [sp, #8]
    5a98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    5a9a:	9301      	str	r3, [sp, #4]
    5a9c:	6a3b      	ldr	r3, [r7, #32]
    5a9e:	9300      	str	r3, [sp, #0]
    5aa0:	683b      	ldr	r3, [r7, #0]
    5aa2:	697a      	ldr	r2, [r7, #20]
    5aa4:	68b9      	ldr	r1, [r7, #8]
    5aa6:	68f8      	ldr	r0, [r7, #12]
    5aa8:	f7fd ff9e 	bl	39e8 <arch_new_thread>

	/* static threads overwrite it afterwards with real value */
	new_thread->init_data = NULL;
    5aac:	68fb      	ldr	r3, [r7, #12]
    5aae:	2200      	movs	r2, #0
    5ab0:	655a      	str	r2, [r3, #84]	; 0x54
		new_thread->base.cpu_mask = -1; /* allow all cpus */
	}
#endif
#ifdef CONFIG_ARCH_HAS_CUSTOM_SWAP_TO_MAIN
	/* _current may be null if the dummy thread is not used */
	if (!_current) {
    5ab2:	4b09      	ldr	r3, [pc, #36]	; (5ad8 <z_setup_new_thread+0x74>)
    5ab4:	689b      	ldr	r3, [r3, #8]
    5ab6:	2b00      	cmp	r3, #0
    5ab8:	d104      	bne.n	5ac4 <z_setup_new_thread+0x60>
		new_thread->resource_pool = NULL;
    5aba:	68fb      	ldr	r3, [r7, #12]
    5abc:	2200      	movs	r2, #0
    5abe:	66da      	str	r2, [r3, #108]	; 0x6c
		return stack_ptr;
    5ac0:	697b      	ldr	r3, [r7, #20]
    5ac2:	e005      	b.n	5ad0 <z_setup_new_thread+0x6c>
	}
#endif
#ifdef CONFIG_SCHED_DEADLINE
	new_thread->base.prio_deadline = 0;
#endif
	new_thread->resource_pool = _current->resource_pool;
    5ac4:	4b04      	ldr	r3, [pc, #16]	; (5ad8 <z_setup_new_thread+0x74>)
    5ac6:	689b      	ldr	r3, [r3, #8]
    5ac8:	6eda      	ldr	r2, [r3, #108]	; 0x6c
    5aca:	68fb      	ldr	r3, [r7, #12]
    5acc:	66da      	str	r2, [r3, #108]	; 0x6c
		CONFIG_SCHED_THREAD_USAGE_AUTO_ENABLE;
#endif

	SYS_PORT_TRACING_OBJ_FUNC(k_thread, create, new_thread);

	return stack_ptr;
    5ace:	697b      	ldr	r3, [r7, #20]
}
    5ad0:	4618      	mov	r0, r3
    5ad2:	3718      	adds	r7, #24
    5ad4:	46bd      	mov	sp, r7
    5ad6:	bd80      	pop	{r7, pc}
    5ad8:	2000074c 	.word	0x2000074c

00005adc <z_init_static_threads>:
	}
}
#endif /* CONFIG_USERSPACE */

void z_init_static_threads(void)
{
    5adc:	b5f0      	push	{r4, r5, r6, r7, lr}
    5ade:	b08d      	sub	sp, #52	; 0x34
    5ae0:	af06      	add	r7, sp, #24
	_FOREACH_STATIC_THREAD(thread_data) {
    5ae2:	4b35      	ldr	r3, [pc, #212]	; (5bb8 <z_init_static_threads+0xdc>)
    5ae4:	617b      	str	r3, [r7, #20]
    5ae6:	e02f      	b.n	5b48 <z_init_static_threads+0x6c>
		z_setup_new_thread(
    5ae8:	697b      	ldr	r3, [r7, #20]
    5aea:	681b      	ldr	r3, [r3, #0]
    5aec:	60fb      	str	r3, [r7, #12]
    5aee:	697b      	ldr	r3, [r7, #20]
    5af0:	685a      	ldr	r2, [r3, #4]
    5af2:	60ba      	str	r2, [r7, #8]
    5af4:	697b      	ldr	r3, [r7, #20]
    5af6:	689e      	ldr	r6, [r3, #8]
    5af8:	607e      	str	r6, [r7, #4]
    5afa:	697b      	ldr	r3, [r7, #20]
    5afc:	f8d3 c00c 	ldr.w	ip, [r3, #12]
    5b00:	f8c7 c000 	str.w	ip, [r7]
    5b04:	697b      	ldr	r3, [r7, #20]
    5b06:	691b      	ldr	r3, [r3, #16]
    5b08:	697a      	ldr	r2, [r7, #20]
    5b0a:	6952      	ldr	r2, [r2, #20]
    5b0c:	6979      	ldr	r1, [r7, #20]
    5b0e:	6989      	ldr	r1, [r1, #24]
    5b10:	6978      	ldr	r0, [r7, #20]
    5b12:	69c0      	ldr	r0, [r0, #28]
    5b14:	697e      	ldr	r6, [r7, #20]
    5b16:	6a36      	ldr	r6, [r6, #32]
    5b18:	f8d7 e014 	ldr.w	lr, [r7, #20]
    5b1c:	f8de e02c 	ldr.w	lr, [lr, #44]	; 0x2c
    5b20:	f8cd e014 	str.w	lr, [sp, #20]
    5b24:	9604      	str	r6, [sp, #16]
    5b26:	9003      	str	r0, [sp, #12]
    5b28:	9102      	str	r1, [sp, #8]
    5b2a:	9201      	str	r2, [sp, #4]
    5b2c:	9300      	str	r3, [sp, #0]
    5b2e:	683b      	ldr	r3, [r7, #0]
    5b30:	687a      	ldr	r2, [r7, #4]
    5b32:	68b9      	ldr	r1, [r7, #8]
    5b34:	68f8      	ldr	r0, [r7, #12]
    5b36:	f7ff ff95 	bl	5a64 <z_setup_new_thread>
			thread_data->init_p3,
			thread_data->init_prio,
			thread_data->init_options,
			thread_data->init_name);

		thread_data->init_thread->init_data = thread_data;
    5b3a:	697b      	ldr	r3, [r7, #20]
    5b3c:	681b      	ldr	r3, [r3, #0]
    5b3e:	697a      	ldr	r2, [r7, #20]
    5b40:	655a      	str	r2, [r3, #84]	; 0x54
	_FOREACH_STATIC_THREAD(thread_data) {
    5b42:	697b      	ldr	r3, [r7, #20]
    5b44:	3330      	adds	r3, #48	; 0x30
    5b46:	617b      	str	r3, [r7, #20]
    5b48:	697b      	ldr	r3, [r7, #20]
    5b4a:	4a1c      	ldr	r2, [pc, #112]	; (5bbc <z_init_static_threads+0xe0>)
    5b4c:	4293      	cmp	r3, r2
    5b4e:	bf34      	ite	cc
    5b50:	2301      	movcc	r3, #1
    5b52:	2300      	movcs	r3, #0
    5b54:	b2db      	uxtb	r3, r3
    5b56:	2b00      	cmp	r3, #0
    5b58:	d1c6      	bne.n	5ae8 <z_init_static_threads+0xc>
	 * until they are all started.
	 *
	 * Note that static threads defined using the legacy API have a
	 * delay of K_FOREVER.
	 */
	k_sched_lock();
    5b5a:	f001 fc35 	bl	73c8 <k_sched_lock>
	_FOREACH_STATIC_THREAD(thread_data) {
    5b5e:	4b16      	ldr	r3, [pc, #88]	; (5bb8 <z_init_static_threads+0xdc>)
    5b60:	613b      	str	r3, [r7, #16]
    5b62:	e019      	b.n	5b98 <z_init_static_threads+0xbc>
		if (thread_data->init_delay != K_TICKS_FOREVER) {
    5b64:	693b      	ldr	r3, [r7, #16]
    5b66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    5b68:	f1b3 3fff 	cmp.w	r3, #4294967295
    5b6c:	d011      	beq.n	5b92 <z_init_static_threads+0xb6>
			schedule_new_thread(thread_data->init_thread,
    5b6e:	693b      	ldr	r3, [r7, #16]
    5b70:	681e      	ldr	r6, [r3, #0]
					    K_MSEC(thread_data->init_delay));
    5b72:	693b      	ldr	r3, [r7, #16]
    5b74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    5b76:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
    5b7a:	17da      	asrs	r2, r3, #31
    5b7c:	461c      	mov	r4, r3
    5b7e:	4615      	mov	r5, r2
    5b80:	4620      	mov	r0, r4
    5b82:	4629      	mov	r1, r5
    5b84:	f7ff fca8 	bl	54d8 <k_ms_to_ticks_ceil64>
    5b88:	4602      	mov	r2, r0
    5b8a:	460b      	mov	r3, r1
			schedule_new_thread(thread_data->init_thread,
    5b8c:	4630      	mov	r0, r6
    5b8e:	f004 fe24 	bl	a7da <schedule_new_thread>
	_FOREACH_STATIC_THREAD(thread_data) {
    5b92:	693b      	ldr	r3, [r7, #16]
    5b94:	3330      	adds	r3, #48	; 0x30
    5b96:	613b      	str	r3, [r7, #16]
    5b98:	693b      	ldr	r3, [r7, #16]
    5b9a:	4a08      	ldr	r2, [pc, #32]	; (5bbc <z_init_static_threads+0xe0>)
    5b9c:	4293      	cmp	r3, r2
    5b9e:	bf34      	ite	cc
    5ba0:	2301      	movcc	r3, #1
    5ba2:	2300      	movcs	r3, #0
    5ba4:	b2db      	uxtb	r3, r3
    5ba6:	2b00      	cmp	r3, #0
    5ba8:	d1dc      	bne.n	5b64 <z_init_static_threads+0x88>
		}
	}
	k_sched_unlock();
    5baa:	f001 fc3f 	bl	742c <k_sched_unlock>
}
    5bae:	bf00      	nop
    5bb0:	371c      	adds	r7, #28
    5bb2:	46bd      	mov	sp, r7
    5bb4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    5bb6:	bf00      	nop
    5bb8:	20000060 	.word	0x20000060
    5bbc:	20000090 	.word	0x20000090

00005bc0 <z_impl_k_sem_give>:
	ARG_UNUSED(sem);
#endif
}

void z_impl_k_sem_give(struct k_sem *sem)
{
    5bc0:	b580      	push	{r7, lr}
    5bc2:	b08a      	sub	sp, #40	; 0x28
    5bc4:	af00      	add	r7, sp, #0
    5bc6:	6078      	str	r0, [r7, #4]
    5bc8:	4b1e      	ldr	r3, [pc, #120]	; (5c44 <z_impl_k_sem_give+0x84>)
    5bca:	623b      	str	r3, [r7, #32]
	__asm__ volatile(
    5bcc:	f04f 0320 	mov.w	r3, #32
    5bd0:	f3ef 8211 	mrs	r2, BASEPRI
    5bd4:	f383 8812 	msr	BASEPRI_MAX, r3
    5bd8:	f3bf 8f6f 	isb	sy
    5bdc:	61fa      	str	r2, [r7, #28]
    5bde:	61bb      	str	r3, [r7, #24]
	return key;
    5be0:	69fb      	ldr	r3, [r7, #28]
	k.key = arch_irq_lock();
    5be2:	60bb      	str	r3, [r7, #8]
	return k;
    5be4:	68bb      	ldr	r3, [r7, #8]
    5be6:	60fb      	str	r3, [r7, #12]
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_thread *thread;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, give, sem);

	thread = z_unpend_first_thread(&sem->wait_q);
    5be8:	687b      	ldr	r3, [r7, #4]
    5bea:	4618      	mov	r0, r3
    5bec:	f001 fb96 	bl	731c <z_unpend_first_thread>
    5bf0:	6278      	str	r0, [r7, #36]	; 0x24

	if (thread != NULL) {
    5bf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    5bf4:	2b00      	cmp	r3, #0
    5bf6:	d00b      	beq.n	5c10 <z_impl_k_sem_give+0x50>
    5bf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    5bfa:	617b      	str	r3, [r7, #20]
    5bfc:	2300      	movs	r3, #0
    5bfe:	613b      	str	r3, [r7, #16]
 * z_swap() is in use it's a simple inline provided by the kernel.
 */
static ALWAYS_INLINE void
arch_thread_return_value_set(struct k_thread *thread, unsigned int value)
{
	thread->swap_retval = value;
    5c00:	693a      	ldr	r2, [r7, #16]
    5c02:	697b      	ldr	r3, [r7, #20]
    5c04:	665a      	str	r2, [r3, #100]	; 0x64
}
    5c06:	bf00      	nop
		arch_thread_return_value_set(thread, 0);
		z_ready_thread(thread);
    5c08:	6a78      	ldr	r0, [r7, #36]	; 0x24
    5c0a:	f001 f907 	bl	6e1c <z_ready_thread>
    5c0e:	e010      	b.n	5c32 <z_impl_k_sem_give+0x72>
	} else {
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
    5c10:	687b      	ldr	r3, [r7, #4]
    5c12:	689b      	ldr	r3, [r3, #8]
    5c14:	687a      	ldr	r2, [r7, #4]
    5c16:	6891      	ldr	r1, [r2, #8]
    5c18:	687a      	ldr	r2, [r7, #4]
    5c1a:	68d2      	ldr	r2, [r2, #12]
    5c1c:	4291      	cmp	r1, r2
    5c1e:	d001      	beq.n	5c24 <z_impl_k_sem_give+0x64>
    5c20:	2201      	movs	r2, #1
    5c22:	e000      	b.n	5c26 <z_impl_k_sem_give+0x66>
    5c24:	2200      	movs	r2, #0
    5c26:	441a      	add	r2, r3
    5c28:	687b      	ldr	r3, [r7, #4]
    5c2a:	609a      	str	r2, [r3, #8]
		handle_poll_events(sem);
    5c2c:	6878      	ldr	r0, [r7, #4]
    5c2e:	f004 fe9e 	bl	a96e <handle_poll_events>
	}

	z_reschedule(&lock, key);
    5c32:	68f9      	ldr	r1, [r7, #12]
    5c34:	4803      	ldr	r0, [pc, #12]	; (5c44 <z_impl_k_sem_give+0x84>)
    5c36:	f005 fa1b 	bl	b070 <z_reschedule>

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, give, sem);
}
    5c3a:	bf00      	nop
    5c3c:	3728      	adds	r7, #40	; 0x28
    5c3e:	46bd      	mov	sp, r7
    5c40:	bd80      	pop	{r7, pc}
    5c42:	bf00      	nop
    5c44:	2000086c 	.word	0x2000086c

00005c48 <z_impl_k_sem_take>:
}
#include <syscalls/k_sem_give_mrsh.c>
#endif

int z_impl_k_sem_take(struct k_sem *sem, k_timeout_t timeout)
{
    5c48:	b580      	push	{r7, lr}
    5c4a:	b092      	sub	sp, #72	; 0x48
    5c4c:	af02      	add	r7, sp, #8
    5c4e:	60f8      	str	r0, [r7, #12]
    5c50:	e9c7 2300 	strd	r2, r3, [r7]
	int ret = 0;
    5c54:	2300      	movs	r3, #0
    5c56:	63fb      	str	r3, [r7, #60]	; 0x3c
    5c58:	4b2c      	ldr	r3, [pc, #176]	; (5d0c <z_impl_k_sem_take+0xc4>)
    5c5a:	63bb      	str	r3, [r7, #56]	; 0x38
	__asm__ volatile(
    5c5c:	f04f 0320 	mov.w	r3, #32
    5c60:	f3ef 8211 	mrs	r2, BASEPRI
    5c64:	f383 8812 	msr	BASEPRI_MAX, r3
    5c68:	f3bf 8f6f 	isb	sy
    5c6c:	637a      	str	r2, [r7, #52]	; 0x34
    5c6e:	633b      	str	r3, [r7, #48]	; 0x30
	return key;
    5c70:	6b7b      	ldr	r3, [r7, #52]	; 0x34
	k.key = arch_irq_lock();
    5c72:	617b      	str	r3, [r7, #20]
	return k;
    5c74:	697b      	ldr	r3, [r7, #20]
    5c76:	61fb      	str	r3, [r7, #28]

	k_spinlock_key_t key = k_spin_lock(&lock);

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, take, sem, timeout);

	if (likely(sem->count > 0U)) {
    5c78:	68fb      	ldr	r3, [r7, #12]
    5c7a:	689b      	ldr	r3, [r3, #8]
    5c7c:	2b00      	cmp	r3, #0
    5c7e:	bf14      	ite	ne
    5c80:	2301      	movne	r3, #1
    5c82:	2300      	moveq	r3, #0
    5c84:	b2db      	uxtb	r3, r3
    5c86:	2b00      	cmp	r3, #0
    5c88:	d014      	beq.n	5cb4 <z_impl_k_sem_take+0x6c>
		sem->count--;
    5c8a:	68fb      	ldr	r3, [r7, #12]
    5c8c:	689b      	ldr	r3, [r3, #8]
    5c8e:	1e5a      	subs	r2, r3, #1
    5c90:	68fb      	ldr	r3, [r7, #12]
    5c92:	609a      	str	r2, [r3, #8]
    5c94:	4b1d      	ldr	r3, [pc, #116]	; (5d0c <z_impl_k_sem_take+0xc4>)
    5c96:	62fb      	str	r3, [r7, #44]	; 0x2c
    5c98:	69fb      	ldr	r3, [r7, #28]
    5c9a:	61bb      	str	r3, [r7, #24]
	arch_irq_unlock(key.key);
    5c9c:	69bb      	ldr	r3, [r7, #24]
    5c9e:	62bb      	str	r3, [r7, #40]	; 0x28
	__asm__ volatile(
    5ca0:	6abb      	ldr	r3, [r7, #40]	; 0x28
    5ca2:	f383 8811 	msr	BASEPRI, r3
    5ca6:	f3bf 8f6f 	isb	sy
}
    5caa:	bf00      	nop
}
    5cac:	bf00      	nop
		k_spin_unlock(&lock, key);
		ret = 0;
    5cae:	2300      	movs	r3, #0
    5cb0:	63fb      	str	r3, [r7, #60]	; 0x3c
		goto out;
    5cb2:	e025      	b.n	5d00 <z_impl_k_sem_take+0xb8>
	}

	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
    5cb4:	e9d7 2300 	ldrd	r2, r3, [r7]
    5cb8:	f04f 0000 	mov.w	r0, #0
    5cbc:	f04f 0100 	mov.w	r1, #0
    5cc0:	428b      	cmp	r3, r1
    5cc2:	bf08      	it	eq
    5cc4:	4282      	cmpeq	r2, r0
    5cc6:	d110      	bne.n	5cea <z_impl_k_sem_take+0xa2>
    5cc8:	4b10      	ldr	r3, [pc, #64]	; (5d0c <z_impl_k_sem_take+0xc4>)
    5cca:	627b      	str	r3, [r7, #36]	; 0x24
    5ccc:	69fb      	ldr	r3, [r7, #28]
    5cce:	613b      	str	r3, [r7, #16]
	arch_irq_unlock(key.key);
    5cd0:	693b      	ldr	r3, [r7, #16]
    5cd2:	623b      	str	r3, [r7, #32]
	__asm__ volatile(
    5cd4:	6a3b      	ldr	r3, [r7, #32]
    5cd6:	f383 8811 	msr	BASEPRI, r3
    5cda:	f3bf 8f6f 	isb	sy
}
    5cde:	bf00      	nop
}
    5ce0:	bf00      	nop
		k_spin_unlock(&lock, key);
		ret = -EBUSY;
    5ce2:	f06f 030f 	mvn.w	r3, #15
    5ce6:	63fb      	str	r3, [r7, #60]	; 0x3c
    5ce8:	e00a      	b.n	5d00 <z_impl_k_sem_take+0xb8>
		goto out;
	}

	SYS_PORT_TRACING_OBJ_FUNC_BLOCKING(k_sem, take, sem, timeout);

	ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);
    5cea:	68f9      	ldr	r1, [r7, #12]
    5cec:	e9d7 2300 	ldrd	r2, r3, [r7]
    5cf0:	e9cd 2300 	strd	r2, r3, [sp]
    5cf4:	460a      	mov	r2, r1
    5cf6:	69f9      	ldr	r1, [r7, #28]
    5cf8:	4804      	ldr	r0, [pc, #16]	; (5d0c <z_impl_k_sem_take+0xc4>)
    5cfa:	f001 fab3 	bl	7264 <z_pend_curr>
    5cfe:	63f8      	str	r0, [r7, #60]	; 0x3c

out:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, take, sem, timeout, ret);

	return ret;
    5d00:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
    5d02:	4618      	mov	r0, r3
    5d04:	3740      	adds	r7, #64	; 0x40
    5d06:	46bd      	mov	sp, r7
    5d08:	bd80      	pop	{r7, pc}
    5d0a:	bf00      	nop
    5d0c:	2000086c 	.word	0x2000086c

00005d10 <k_ms_to_ticks_ceil32>:
{
    5d10:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
    5d14:	b0be      	sub	sp, #248	; 0xf8
    5d16:	af00      	add	r7, sp, #0
    5d18:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
	return z_tmcvt(t, Z_HZ_ms, Z_HZ_ticks, true, true, true, false);
    5d1c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
    5d20:	2200      	movs	r2, #0
    5d22:	461c      	mov	r4, r3
    5d24:	4615      	mov	r5, r2
    5d26:	e9c7 453c 	strd	r4, r5, [r7, #240]	; 0xf0
    5d2a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
    5d2e:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    5d32:	2364      	movs	r3, #100	; 0x64
    5d34:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    5d38:	2301      	movs	r3, #1
    5d3a:	f887 30e7 	strb.w	r3, [r7, #231]	; 0xe7
    5d3e:	2301      	movs	r3, #1
    5d40:	f887 30e6 	strb.w	r3, [r7, #230]	; 0xe6
    5d44:	2301      	movs	r3, #1
    5d46:	f887 30e5 	strb.w	r3, [r7, #229]	; 0xe5
    5d4a:	2300      	movs	r3, #0
    5d4c:	f887 30e4 	strb.w	r3, [r7, #228]	; 0xe4
		(to_hz > from_hz) && ((to_hz % from_hz) == 0U);
    5d50:	f897 30e7 	ldrb.w	r3, [r7, #231]	; 0xe7
    5d54:	2b00      	cmp	r3, #0
    5d56:	d014      	beq.n	5d82 <k_ms_to_ticks_ceil32+0x72>
	bool mul_ratio = const_hz &&
    5d58:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
    5d5c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
    5d60:	429a      	cmp	r2, r3
    5d62:	d20e      	bcs.n	5d82 <k_ms_to_ticks_ceil32+0x72>
		(to_hz > from_hz) && ((to_hz % from_hz) == 0U);
    5d64:	f8d7 10e8 	ldr.w	r1, [r7, #232]	; 0xe8
    5d68:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
    5d6c:	fbb1 f2f3 	udiv	r2, r1, r3
    5d70:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
    5d74:	fb02 f303 	mul.w	r3, r2, r3
    5d78:	1acb      	subs	r3, r1, r3
    5d7a:	2b00      	cmp	r3, #0
    5d7c:	d101      	bne.n	5d82 <k_ms_to_ticks_ceil32+0x72>
    5d7e:	2301      	movs	r3, #1
    5d80:	e000      	b.n	5d84 <k_ms_to_ticks_ceil32+0x74>
    5d82:	2300      	movs	r3, #0
	bool mul_ratio = const_hz &&
    5d84:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
    5d88:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
    5d8c:	f003 0301 	and.w	r3, r3, #1
    5d90:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
		(from_hz > to_hz) && ((from_hz % to_hz) == 0U);
    5d94:	f897 30e7 	ldrb.w	r3, [r7, #231]	; 0xe7
    5d98:	2b00      	cmp	r3, #0
    5d9a:	d014      	beq.n	5dc6 <k_ms_to_ticks_ceil32+0xb6>
	bool div_ratio = const_hz &&
    5d9c:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
    5da0:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
    5da4:	429a      	cmp	r2, r3
    5da6:	d90e      	bls.n	5dc6 <k_ms_to_ticks_ceil32+0xb6>
		(from_hz > to_hz) && ((from_hz % to_hz) == 0U);
    5da8:	f8d7 10ec 	ldr.w	r1, [r7, #236]	; 0xec
    5dac:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
    5db0:	fbb1 f2f3 	udiv	r2, r1, r3
    5db4:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
    5db8:	fb02 f303 	mul.w	r3, r2, r3
    5dbc:	1acb      	subs	r3, r1, r3
    5dbe:	2b00      	cmp	r3, #0
    5dc0:	d101      	bne.n	5dc6 <k_ms_to_ticks_ceil32+0xb6>
    5dc2:	2301      	movs	r3, #1
    5dc4:	e000      	b.n	5dc8 <k_ms_to_ticks_ceil32+0xb8>
    5dc6:	2300      	movs	r3, #0
	bool div_ratio = const_hz &&
    5dc8:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
    5dcc:	f897 30e2 	ldrb.w	r3, [r7, #226]	; 0xe2
    5dd0:	f003 0301 	and.w	r3, r3, #1
    5dd4:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
	if (from_hz == to_hz) {
    5dd8:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
    5ddc:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
    5de0:	429a      	cmp	r2, r3
    5de2:	d10c      	bne.n	5dfe <k_ms_to_ticks_ceil32+0xee>
		return result32 ? ((uint32_t)t) : t;
    5de4:	f897 30e6 	ldrb.w	r3, [r7, #230]	; 0xe6
    5de8:	2b00      	cmp	r3, #0
    5dea:	d005      	beq.n	5df8 <k_ms_to_ticks_ceil32+0xe8>
    5dec:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
    5df0:	2200      	movs	r2, #0
    5df2:	4698      	mov	r8, r3
    5df4:	4691      	mov	r9, r2
    5df6:	e1e6      	b.n	61c6 <k_ms_to_ticks_ceil32+0x4b6>
    5df8:	e9d7 893c 	ldrd	r8, r9, [r7, #240]	; 0xf0
    5dfc:	e1e3      	b.n	61c6 <k_ms_to_ticks_ceil32+0x4b6>
	uint64_t off = 0;
    5dfe:	f04f 0200 	mov.w	r2, #0
    5e02:	f04f 0300 	mov.w	r3, #0
    5e06:	e9c7 2336 	strd	r2, r3, [r7, #216]	; 0xd8
	if (!mul_ratio) {
    5e0a:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
    5e0e:	f083 0301 	eor.w	r3, r3, #1
    5e12:	b2db      	uxtb	r3, r3
    5e14:	2b00      	cmp	r3, #0
    5e16:	d02a      	beq.n	5e6e <k_ms_to_ticks_ceil32+0x15e>
		uint32_t rdivisor = div_ratio ? (from_hz / to_hz) : from_hz;
    5e18:	f897 30e2 	ldrb.w	r3, [r7, #226]	; 0xe2
    5e1c:	2b00      	cmp	r3, #0
    5e1e:	d006      	beq.n	5e2e <k_ms_to_ticks_ceil32+0x11e>
    5e20:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
    5e24:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
    5e28:	fbb2 f3f3 	udiv	r3, r2, r3
    5e2c:	e001      	b.n	5e32 <k_ms_to_ticks_ceil32+0x122>
    5e2e:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
    5e32:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
		if (round_up) {
    5e36:	f897 30e5 	ldrb.w	r3, [r7, #229]	; 0xe5
    5e3a:	2b00      	cmp	r3, #0
    5e3c:	d009      	beq.n	5e52 <k_ms_to_ticks_ceil32+0x142>
			off = rdivisor - 1U;
    5e3e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
    5e42:	3b01      	subs	r3, #1
    5e44:	2200      	movs	r2, #0
    5e46:	613b      	str	r3, [r7, #16]
    5e48:	617a      	str	r2, [r7, #20]
    5e4a:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
    5e4e:	e9c7 3436 	strd	r3, r4, [r7, #216]	; 0xd8
		if (round_off) {
    5e52:	f897 30e4 	ldrb.w	r3, [r7, #228]	; 0xe4
    5e56:	2b00      	cmp	r3, #0
    5e58:	d009      	beq.n	5e6e <k_ms_to_ticks_ceil32+0x15e>
			off = rdivisor / 2U;
    5e5a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
    5e5e:	085b      	lsrs	r3, r3, #1
    5e60:	2200      	movs	r2, #0
    5e62:	60bb      	str	r3, [r7, #8]
    5e64:	60fa      	str	r2, [r7, #12]
    5e66:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
    5e6a:	e9c7 3436 	strd	r3, r4, [r7, #216]	; 0xd8
	if (div_ratio) {
    5e6e:	f897 30e2 	ldrb.w	r3, [r7, #226]	; 0xe2
    5e72:	2b00      	cmp	r3, #0
    5e74:	d038      	beq.n	5ee8 <k_ms_to_ticks_ceil32+0x1d8>
		t += off;
    5e76:	e9d7 013c 	ldrd	r0, r1, [r7, #240]	; 0xf0
    5e7a:	e9d7 2336 	ldrd	r2, r3, [r7, #216]	; 0xd8
    5e7e:	1884      	adds	r4, r0, r2
    5e80:	603c      	str	r4, [r7, #0]
    5e82:	eb41 0303 	adc.w	r3, r1, r3
    5e86:	607b      	str	r3, [r7, #4]
    5e88:	e9d7 3400 	ldrd	r3, r4, [r7]
    5e8c:	e9c7 343c 	strd	r3, r4, [r7, #240]	; 0xf0
		if (result32 && (t < BIT64(32))) {
    5e90:	f897 30e6 	ldrb.w	r3, [r7, #230]	; 0xe6
    5e94:	2b00      	cmp	r3, #0
    5e96:	d011      	beq.n	5ebc <k_ms_to_ticks_ceil32+0x1ac>
    5e98:	e9d7 233c 	ldrd	r2, r3, [r7, #240]	; 0xf0
    5e9c:	2b01      	cmp	r3, #1
    5e9e:	d20d      	bcs.n	5ebc <k_ms_to_ticks_ceil32+0x1ac>
			return ((uint32_t)t) / (from_hz / to_hz);
    5ea0:	f8d7 20f0 	ldr.w	r2, [r7, #240]	; 0xf0
    5ea4:	f8d7 10ec 	ldr.w	r1, [r7, #236]	; 0xec
    5ea8:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
    5eac:	fbb1 f3f3 	udiv	r3, r1, r3
    5eb0:	fbb2 f3f3 	udiv	r3, r2, r3
    5eb4:	2200      	movs	r2, #0
    5eb6:	4698      	mov	r8, r3
    5eb8:	4691      	mov	r9, r2
    5eba:	e184      	b.n	61c6 <k_ms_to_ticks_ceil32+0x4b6>
			return t / ((uint64_t)from_hz / to_hz);
    5ebc:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
    5ec0:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
    5ec4:	fbb2 f3f3 	udiv	r3, r2, r3
    5ec8:	2200      	movs	r2, #0
    5eca:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    5ece:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
    5ed2:	e9d7 2326 	ldrd	r2, r3, [r7, #152]	; 0x98
    5ed6:	e9d7 013c 	ldrd	r0, r1, [r7, #240]	; 0xf0
    5eda:	f7fa f907 	bl	ec <__aeabi_uldivmod>
    5ede:	4602      	mov	r2, r0
    5ee0:	460b      	mov	r3, r1
    5ee2:	4690      	mov	r8, r2
    5ee4:	4699      	mov	r9, r3
    5ee6:	e16e      	b.n	61c6 <k_ms_to_ticks_ceil32+0x4b6>
	} else if (mul_ratio) {
    5ee8:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
    5eec:	2b00      	cmp	r3, #0
    5eee:	d031      	beq.n	5f54 <k_ms_to_ticks_ceil32+0x244>
		if (result32) {
    5ef0:	f897 30e6 	ldrb.w	r3, [r7, #230]	; 0xe6
    5ef4:	2b00      	cmp	r3, #0
    5ef6:	d00d      	beq.n	5f14 <k_ms_to_ticks_ceil32+0x204>
			return ((uint32_t)t) * (to_hz / from_hz);
    5ef8:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
    5efc:	f8d7 10e8 	ldr.w	r1, [r7, #232]	; 0xe8
    5f00:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
    5f04:	fbb1 f2f2 	udiv	r2, r1, r2
    5f08:	fb02 f303 	mul.w	r3, r2, r3
    5f0c:	2200      	movs	r2, #0
    5f0e:	4698      	mov	r8, r3
    5f10:	4691      	mov	r9, r2
    5f12:	e158      	b.n	61c6 <k_ms_to_ticks_ceil32+0x4b6>
			return t * ((uint64_t)to_hz / from_hz);
    5f14:	f8d7 20e8 	ldr.w	r2, [r7, #232]	; 0xe8
    5f18:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
    5f1c:	fbb2 f3f3 	udiv	r3, r2, r3
    5f20:	2200      	movs	r2, #0
    5f22:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    5f26:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
    5f2a:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
    5f2e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
    5f32:	462a      	mov	r2, r5
    5f34:	fb02 f203 	mul.w	r2, r2, r3
    5f38:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
    5f3c:	4621      	mov	r1, r4
    5f3e:	fb01 f303 	mul.w	r3, r1, r3
    5f42:	4413      	add	r3, r2
    5f44:	f8d7 20f0 	ldr.w	r2, [r7, #240]	; 0xf0
    5f48:	4621      	mov	r1, r4
    5f4a:	fba2 8901 	umull	r8, r9, r2, r1
    5f4e:	444b      	add	r3, r9
    5f50:	4699      	mov	r9, r3
    5f52:	e138      	b.n	61c6 <k_ms_to_ticks_ceil32+0x4b6>
		if (result32) {
    5f54:	f897 30e6 	ldrb.w	r3, [r7, #230]	; 0xe6
    5f58:	2b00      	cmp	r3, #0
    5f5a:	d035      	beq.n	5fc8 <k_ms_to_ticks_ceil32+0x2b8>
			return (uint32_t)((t * to_hz + off) / from_hz);
    5f5c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
    5f60:	2200      	movs	r2, #0
    5f62:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    5f66:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
    5f6a:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
    5f6e:	e9d7 4522 	ldrd	r4, r5, [r7, #136]	; 0x88
    5f72:	462a      	mov	r2, r5
    5f74:	fb02 f203 	mul.w	r2, r2, r3
    5f78:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
    5f7c:	4621      	mov	r1, r4
    5f7e:	fb01 f303 	mul.w	r3, r1, r3
    5f82:	4413      	add	r3, r2
    5f84:	f8d7 20f0 	ldr.w	r2, [r7, #240]	; 0xf0
    5f88:	4621      	mov	r1, r4
    5f8a:	fba2 ab01 	umull	sl, fp, r2, r1
    5f8e:	445b      	add	r3, fp
    5f90:	469b      	mov	fp, r3
    5f92:	e9d7 2336 	ldrd	r2, r3, [r7, #216]	; 0xd8
    5f96:	eb1a 0102 	adds.w	r1, sl, r2
    5f9a:	f8c7 1080 	str.w	r1, [r7, #128]	; 0x80
    5f9e:	eb4b 0303 	adc.w	r3, fp, r3
    5fa2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    5fa6:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
    5faa:	2200      	movs	r2, #0
    5fac:	67bb      	str	r3, [r7, #120]	; 0x78
    5fae:	67fa      	str	r2, [r7, #124]	; 0x7c
    5fb0:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
    5fb4:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
    5fb8:	f7fa f898 	bl	ec <__aeabi_uldivmod>
    5fbc:	4602      	mov	r2, r0
    5fbe:	460b      	mov	r3, r1
    5fc0:	2300      	movs	r3, #0
    5fc2:	4690      	mov	r8, r2
    5fc4:	4699      	mov	r9, r3
    5fc6:	e0fe      	b.n	61c6 <k_ms_to_ticks_ceil32+0x4b6>
		} else if (const_hz && Z_TMCVT_USE_FAST_ALGO(from_hz, to_hz)) {
    5fc8:	f897 30e7 	ldrb.w	r3, [r7, #231]	; 0xe7
    5fcc:	2b00      	cmp	r3, #0
    5fce:	f000 808b 	beq.w	60e8 <k_ms_to_ticks_ceil32+0x3d8>
    5fd2:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
    5fd6:	2200      	movs	r2, #0
    5fd8:	673b      	str	r3, [r7, #112]	; 0x70
    5fda:	677a      	str	r2, [r7, #116]	; 0x74
    5fdc:	4b7d      	ldr	r3, [pc, #500]	; (61d4 <k_ms_to_ticks_ceil32+0x4c4>)
    5fde:	e9d7 451c 	ldrd	r4, r5, [r7, #112]	; 0x70
    5fe2:	462a      	mov	r2, r5
    5fe4:	fb03 f202 	mul.w	r2, r3, r2
    5fe8:	2300      	movs	r3, #0
    5fea:	4621      	mov	r1, r4
    5fec:	fb01 f303 	mul.w	r3, r1, r3
    5ff0:	441a      	add	r2, r3
    5ff2:	4b78      	ldr	r3, [pc, #480]	; (61d4 <k_ms_to_ticks_ceil32+0x4c4>)
    5ff4:	4621      	mov	r1, r4
    5ff6:	fba1 3103 	umull	r3, r1, r1, r3
    5ffa:	f8c7 10c4 	str.w	r1, [r7, #196]	; 0xc4
    5ffe:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    6002:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
    6006:	18d3      	adds	r3, r2, r3
    6008:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    600c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
    6010:	460b      	mov	r3, r1
    6012:	3b02      	subs	r3, #2
    6014:	66bb      	str	r3, [r7, #104]	; 0x68
    6016:	4613      	mov	r3, r2
    6018:	f143 0300 	adc.w	r3, r3, #0
    601c:	66fb      	str	r3, [r7, #108]	; 0x6c
    601e:	f04f 32ff 	mov.w	r2, #4294967295
    6022:	f04f 0300 	mov.w	r3, #0
    6026:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
    602a:	f7fa f85f 	bl	ec <__aeabi_uldivmod>
    602e:	4602      	mov	r2, r0
    6030:	460b      	mov	r3, r1
    6032:	4610      	mov	r0, r2
    6034:	4619      	mov	r1, r3
    6036:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
    603a:	2200      	movs	r2, #0
    603c:	663b      	str	r3, [r7, #96]	; 0x60
    603e:	667a      	str	r2, [r7, #100]	; 0x64
    6040:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
    6044:	4623      	mov	r3, r4
    6046:	fb03 f201 	mul.w	r2, r3, r1
    604a:	462b      	mov	r3, r5
    604c:	fb00 f303 	mul.w	r3, r0, r3
    6050:	4413      	add	r3, r2
    6052:	4622      	mov	r2, r4
    6054:	fba0 2102 	umull	r2, r1, r0, r2
    6058:	f8c7 10bc 	str.w	r1, [r7, #188]	; 0xbc
    605c:	f8c7 20b8 	str.w	r2, [r7, #184]	; 0xb8
    6060:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
    6064:	4413      	add	r3, r2
    6066:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    606a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
    606e:	2b01      	cmp	r3, #1
    6070:	d23a      	bcs.n	60e8 <k_ms_to_ticks_ceil32+0x3d8>
			return ((t * to_hz + off) / from_hz);
    6072:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
    6076:	2200      	movs	r2, #0
    6078:	65bb      	str	r3, [r7, #88]	; 0x58
    607a:	65fa      	str	r2, [r7, #92]	; 0x5c
    607c:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
    6080:	e9d7 4516 	ldrd	r4, r5, [r7, #88]	; 0x58
    6084:	462a      	mov	r2, r5
    6086:	fb02 f203 	mul.w	r2, r2, r3
    608a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
    608e:	4621      	mov	r1, r4
    6090:	fb01 f303 	mul.w	r3, r1, r3
    6094:	4413      	add	r3, r2
    6096:	f8d7 20f0 	ldr.w	r2, [r7, #240]	; 0xf0
    609a:	4621      	mov	r1, r4
    609c:	fba2 2101 	umull	r2, r1, r2, r1
    60a0:	f8c7 10b4 	str.w	r1, [r7, #180]	; 0xb4
    60a4:	f8c7 20b0 	str.w	r2, [r7, #176]	; 0xb0
    60a8:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
    60ac:	4413      	add	r3, r2
    60ae:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    60b2:	e9d7 2336 	ldrd	r2, r3, [r7, #216]	; 0xd8
    60b6:	e9d7 452c 	ldrd	r4, r5, [r7, #176]	; 0xb0
    60ba:	4621      	mov	r1, r4
    60bc:	1889      	adds	r1, r1, r2
    60be:	6539      	str	r1, [r7, #80]	; 0x50
    60c0:	4629      	mov	r1, r5
    60c2:	eb43 0101 	adc.w	r1, r3, r1
    60c6:	6579      	str	r1, [r7, #84]	; 0x54
    60c8:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
    60cc:	2200      	movs	r2, #0
    60ce:	64bb      	str	r3, [r7, #72]	; 0x48
    60d0:	64fa      	str	r2, [r7, #76]	; 0x4c
    60d2:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
    60d6:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
    60da:	f7fa f807 	bl	ec <__aeabi_uldivmod>
    60de:	4602      	mov	r2, r0
    60e0:	460b      	mov	r3, r1
    60e2:	4690      	mov	r8, r2
    60e4:	4699      	mov	r9, r3
    60e6:	e06e      	b.n	61c6 <k_ms_to_ticks_ceil32+0x4b6>
			return (t / from_hz) * to_hz + ((t % from_hz) * to_hz + off) / from_hz;
    60e8:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
    60ec:	2200      	movs	r2, #0
    60ee:	643b      	str	r3, [r7, #64]	; 0x40
    60f0:	647a      	str	r2, [r7, #68]	; 0x44
    60f2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
    60f6:	e9d7 013c 	ldrd	r0, r1, [r7, #240]	; 0xf0
    60fa:	f7f9 fff7 	bl	ec <__aeabi_uldivmod>
    60fe:	4602      	mov	r2, r0
    6100:	460b      	mov	r3, r1
    6102:	4610      	mov	r0, r2
    6104:	4619      	mov	r1, r3
    6106:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
    610a:	2200      	movs	r2, #0
    610c:	63bb      	str	r3, [r7, #56]	; 0x38
    610e:	63fa      	str	r2, [r7, #60]	; 0x3c
    6110:	e9d7 450e 	ldrd	r4, r5, [r7, #56]	; 0x38
    6114:	4623      	mov	r3, r4
    6116:	fb03 f201 	mul.w	r2, r3, r1
    611a:	462b      	mov	r3, r5
    611c:	fb00 f303 	mul.w	r3, r0, r3
    6120:	4413      	add	r3, r2
    6122:	4622      	mov	r2, r4
    6124:	fba0 2102 	umull	r2, r1, r0, r2
    6128:	f8c7 10ac 	str.w	r1, [r7, #172]	; 0xac
    612c:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
    6130:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
    6134:	4413      	add	r3, r2
    6136:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    613a:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
    613e:	2200      	movs	r2, #0
    6140:	633b      	str	r3, [r7, #48]	; 0x30
    6142:	637a      	str	r2, [r7, #52]	; 0x34
    6144:	e9d7 013c 	ldrd	r0, r1, [r7, #240]	; 0xf0
    6148:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
    614c:	f7f9 ffce 	bl	ec <__aeabi_uldivmod>
    6150:	4610      	mov	r0, r2
    6152:	4619      	mov	r1, r3
    6154:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
    6158:	2200      	movs	r2, #0
    615a:	62bb      	str	r3, [r7, #40]	; 0x28
    615c:	62fa      	str	r2, [r7, #44]	; 0x2c
    615e:	e9d7 450a 	ldrd	r4, r5, [r7, #40]	; 0x28
    6162:	4623      	mov	r3, r4
    6164:	fb03 f201 	mul.w	r2, r3, r1
    6168:	462b      	mov	r3, r5
    616a:	fb00 f303 	mul.w	r3, r0, r3
    616e:	4413      	add	r3, r2
    6170:	4622      	mov	r2, r4
    6172:	fba0 2102 	umull	r2, r1, r0, r2
    6176:	f8c7 10a4 	str.w	r1, [r7, #164]	; 0xa4
    617a:	f8c7 20a0 	str.w	r2, [r7, #160]	; 0xa0
    617e:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
    6182:	4413      	add	r3, r2
    6184:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    6188:	e9d7 2336 	ldrd	r2, r3, [r7, #216]	; 0xd8
    618c:	e9d7 4528 	ldrd	r4, r5, [r7, #160]	; 0xa0
    6190:	4621      	mov	r1, r4
    6192:	1889      	adds	r1, r1, r2
    6194:	6239      	str	r1, [r7, #32]
    6196:	4629      	mov	r1, r5
    6198:	eb43 0101 	adc.w	r1, r3, r1
    619c:	6279      	str	r1, [r7, #36]	; 0x24
    619e:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
    61a2:	2200      	movs	r2, #0
    61a4:	61bb      	str	r3, [r7, #24]
    61a6:	61fa      	str	r2, [r7, #28]
    61a8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
    61ac:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
    61b0:	f7f9 ff9c 	bl	ec <__aeabi_uldivmod>
    61b4:	4602      	mov	r2, r0
    61b6:	460b      	mov	r3, r1
    61b8:	e9d7 012a 	ldrd	r0, r1, [r7, #168]	; 0xa8
    61bc:	4604      	mov	r4, r0
    61be:	eb14 0802 	adds.w	r8, r4, r2
    61c2:	eb41 0903 	adc.w	r9, r1, r3
	return z_tmcvt(t, Z_HZ_ms, Z_HZ_ticks, true, true, true, false);
    61c6:	4643      	mov	r3, r8
}
    61c8:	4618      	mov	r0, r3
    61ca:	37f8      	adds	r7, #248	; 0xf8
    61cc:	46bd      	mov	sp, r7
    61ce:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
    61d2:	bf00      	nop
    61d4:	01e13380 	.word	0x01e13380

000061d8 <k_ticks_to_ms_floor64>:
{
    61d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    61dc:	b0bd      	sub	sp, #244	; 0xf4
    61de:	af00      	add	r7, sp, #0
    61e0:	e9c7 0130 	strd	r0, r1, [r7, #192]	; 0xc0
    61e4:	e9d7 2330 	ldrd	r2, r3, [r7, #192]	; 0xc0
    61e8:	e9c7 233a 	strd	r2, r3, [r7, #232]	; 0xe8
    61ec:	2364      	movs	r3, #100	; 0x64
    61ee:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    61f2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
    61f6:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    61fa:	2301      	movs	r3, #1
    61fc:	f887 30df 	strb.w	r3, [r7, #223]	; 0xdf
    6200:	2300      	movs	r3, #0
    6202:	f887 30de 	strb.w	r3, [r7, #222]	; 0xde
    6206:	2300      	movs	r3, #0
    6208:	f887 30dd 	strb.w	r3, [r7, #221]	; 0xdd
    620c:	2300      	movs	r3, #0
    620e:	f887 30dc 	strb.w	r3, [r7, #220]	; 0xdc
		(to_hz > from_hz) && ((to_hz % from_hz) == 0U);
    6212:	f897 30df 	ldrb.w	r3, [r7, #223]	; 0xdf
    6216:	2b00      	cmp	r3, #0
    6218:	d014      	beq.n	6244 <k_ticks_to_ms_floor64+0x6c>
	bool mul_ratio = const_hz &&
    621a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
    621e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
    6222:	429a      	cmp	r2, r3
    6224:	d20e      	bcs.n	6244 <k_ticks_to_ms_floor64+0x6c>
		(to_hz > from_hz) && ((to_hz % from_hz) == 0U);
    6226:	f8d7 10e0 	ldr.w	r1, [r7, #224]	; 0xe0
    622a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
    622e:	fbb1 f2f3 	udiv	r2, r1, r3
    6232:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
    6236:	fb02 f303 	mul.w	r3, r2, r3
    623a:	1acb      	subs	r3, r1, r3
    623c:	2b00      	cmp	r3, #0
    623e:	d101      	bne.n	6244 <k_ticks_to_ms_floor64+0x6c>
    6240:	2301      	movs	r3, #1
    6242:	e000      	b.n	6246 <k_ticks_to_ms_floor64+0x6e>
    6244:	2300      	movs	r3, #0
	bool mul_ratio = const_hz &&
    6246:	f887 30db 	strb.w	r3, [r7, #219]	; 0xdb
    624a:	f897 30db 	ldrb.w	r3, [r7, #219]	; 0xdb
    624e:	f003 0301 	and.w	r3, r3, #1
    6252:	f887 30db 	strb.w	r3, [r7, #219]	; 0xdb
		(from_hz > to_hz) && ((from_hz % to_hz) == 0U);
    6256:	f897 30df 	ldrb.w	r3, [r7, #223]	; 0xdf
    625a:	2b00      	cmp	r3, #0
    625c:	d014      	beq.n	6288 <k_ticks_to_ms_floor64+0xb0>
	bool div_ratio = const_hz &&
    625e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
    6262:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
    6266:	429a      	cmp	r2, r3
    6268:	d90e      	bls.n	6288 <k_ticks_to_ms_floor64+0xb0>
		(from_hz > to_hz) && ((from_hz % to_hz) == 0U);
    626a:	f8d7 10e4 	ldr.w	r1, [r7, #228]	; 0xe4
    626e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
    6272:	fbb1 f2f3 	udiv	r2, r1, r3
    6276:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
    627a:	fb02 f303 	mul.w	r3, r2, r3
    627e:	1acb      	subs	r3, r1, r3
    6280:	2b00      	cmp	r3, #0
    6282:	d101      	bne.n	6288 <k_ticks_to_ms_floor64+0xb0>
    6284:	2301      	movs	r3, #1
    6286:	e000      	b.n	628a <k_ticks_to_ms_floor64+0xb2>
    6288:	2300      	movs	r3, #0
	bool div_ratio = const_hz &&
    628a:	f887 30da 	strb.w	r3, [r7, #218]	; 0xda
    628e:	f897 30da 	ldrb.w	r3, [r7, #218]	; 0xda
    6292:	f003 0301 	and.w	r3, r3, #1
    6296:	f887 30da 	strb.w	r3, [r7, #218]	; 0xda
	if (from_hz == to_hz) {
    629a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
    629e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
    62a2:	429a      	cmp	r2, r3
    62a4:	d10c      	bne.n	62c0 <k_ticks_to_ms_floor64+0xe8>
		return result32 ? ((uint32_t)t) : t;
    62a6:	f897 30de 	ldrb.w	r3, [r7, #222]	; 0xde
    62aa:	2b00      	cmp	r3, #0
    62ac:	d005      	beq.n	62ba <k_ticks_to_ms_floor64+0xe2>
    62ae:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
    62b2:	2200      	movs	r2, #0
    62b4:	461c      	mov	r4, r3
    62b6:	4615      	mov	r5, r2
    62b8:	e1de      	b.n	6678 <k_ticks_to_ms_floor64+0x4a0>
    62ba:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
    62be:	e1db      	b.n	6678 <k_ticks_to_ms_floor64+0x4a0>
	uint64_t off = 0;
    62c0:	f04f 0200 	mov.w	r2, #0
    62c4:	f04f 0300 	mov.w	r3, #0
    62c8:	e9c7 2334 	strd	r2, r3, [r7, #208]	; 0xd0
	if (!mul_ratio) {
    62cc:	f897 30db 	ldrb.w	r3, [r7, #219]	; 0xdb
    62d0:	f083 0301 	eor.w	r3, r3, #1
    62d4:	b2db      	uxtb	r3, r3
    62d6:	2b00      	cmp	r3, #0
    62d8:	d02a      	beq.n	6330 <k_ticks_to_ms_floor64+0x158>
		uint32_t rdivisor = div_ratio ? (from_hz / to_hz) : from_hz;
    62da:	f897 30da 	ldrb.w	r3, [r7, #218]	; 0xda
    62de:	2b00      	cmp	r3, #0
    62e0:	d006      	beq.n	62f0 <k_ticks_to_ms_floor64+0x118>
    62e2:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
    62e6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
    62ea:	fbb2 f3f3 	udiv	r3, r2, r3
    62ee:	e001      	b.n	62f4 <k_ticks_to_ms_floor64+0x11c>
    62f0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
    62f4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
		if (round_up) {
    62f8:	f897 30dd 	ldrb.w	r3, [r7, #221]	; 0xdd
    62fc:	2b00      	cmp	r3, #0
    62fe:	d009      	beq.n	6314 <k_ticks_to_ms_floor64+0x13c>
			off = rdivisor - 1U;
    6300:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
    6304:	3b01      	subs	r3, #1
    6306:	2200      	movs	r2, #0
    6308:	613b      	str	r3, [r7, #16]
    630a:	617a      	str	r2, [r7, #20]
    630c:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
    6310:	e9c7 2334 	strd	r2, r3, [r7, #208]	; 0xd0
		if (round_off) {
    6314:	f897 30dc 	ldrb.w	r3, [r7, #220]	; 0xdc
    6318:	2b00      	cmp	r3, #0
    631a:	d009      	beq.n	6330 <k_ticks_to_ms_floor64+0x158>
			off = rdivisor / 2U;
    631c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
    6320:	085b      	lsrs	r3, r3, #1
    6322:	2200      	movs	r2, #0
    6324:	60bb      	str	r3, [r7, #8]
    6326:	60fa      	str	r2, [r7, #12]
    6328:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
    632c:	e9c7 2334 	strd	r2, r3, [r7, #208]	; 0xd0
	if (div_ratio) {
    6330:	f897 30da 	ldrb.w	r3, [r7, #218]	; 0xda
    6334:	2b00      	cmp	r3, #0
    6336:	d038      	beq.n	63aa <k_ticks_to_ms_floor64+0x1d2>
		t += off;
    6338:	e9d7 013a 	ldrd	r0, r1, [r7, #232]	; 0xe8
    633c:	e9d7 2334 	ldrd	r2, r3, [r7, #208]	; 0xd0
    6340:	1886      	adds	r6, r0, r2
    6342:	603e      	str	r6, [r7, #0]
    6344:	eb41 0303 	adc.w	r3, r1, r3
    6348:	607b      	str	r3, [r7, #4]
    634a:	e9d7 2300 	ldrd	r2, r3, [r7]
    634e:	e9c7 233a 	strd	r2, r3, [r7, #232]	; 0xe8
		if (result32 && (t < BIT64(32))) {
    6352:	f897 30de 	ldrb.w	r3, [r7, #222]	; 0xde
    6356:	2b00      	cmp	r3, #0
    6358:	d011      	beq.n	637e <k_ticks_to_ms_floor64+0x1a6>
    635a:	e9d7 233a 	ldrd	r2, r3, [r7, #232]	; 0xe8
    635e:	2b01      	cmp	r3, #1
    6360:	d20d      	bcs.n	637e <k_ticks_to_ms_floor64+0x1a6>
			return ((uint32_t)t) / (from_hz / to_hz);
    6362:	f8d7 20e8 	ldr.w	r2, [r7, #232]	; 0xe8
    6366:	f8d7 10e4 	ldr.w	r1, [r7, #228]	; 0xe4
    636a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
    636e:	fbb1 f3f3 	udiv	r3, r1, r3
    6372:	fbb2 f3f3 	udiv	r3, r2, r3
    6376:	2200      	movs	r2, #0
    6378:	461c      	mov	r4, r3
    637a:	4615      	mov	r5, r2
    637c:	e17c      	b.n	6678 <k_ticks_to_ms_floor64+0x4a0>
			return t / ((uint64_t)from_hz / to_hz);
    637e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
    6382:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
    6386:	fbb2 f3f3 	udiv	r3, r2, r3
    638a:	2200      	movs	r2, #0
    638c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    6390:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
    6394:	e9d7 2326 	ldrd	r2, r3, [r7, #152]	; 0x98
    6398:	e9d7 013a 	ldrd	r0, r1, [r7, #232]	; 0xe8
    639c:	f7f9 fea6 	bl	ec <__aeabi_uldivmod>
    63a0:	4602      	mov	r2, r0
    63a2:	460b      	mov	r3, r1
    63a4:	4614      	mov	r4, r2
    63a6:	461d      	mov	r5, r3
    63a8:	e166      	b.n	6678 <k_ticks_to_ms_floor64+0x4a0>
	} else if (mul_ratio) {
    63aa:	f897 30db 	ldrb.w	r3, [r7, #219]	; 0xdb
    63ae:	2b00      	cmp	r3, #0
    63b0:	d031      	beq.n	6416 <k_ticks_to_ms_floor64+0x23e>
		if (result32) {
    63b2:	f897 30de 	ldrb.w	r3, [r7, #222]	; 0xde
    63b6:	2b00      	cmp	r3, #0
    63b8:	d00d      	beq.n	63d6 <k_ticks_to_ms_floor64+0x1fe>
			return ((uint32_t)t) * (to_hz / from_hz);
    63ba:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
    63be:	f8d7 10e0 	ldr.w	r1, [r7, #224]	; 0xe0
    63c2:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
    63c6:	fbb1 f2f2 	udiv	r2, r1, r2
    63ca:	fb02 f303 	mul.w	r3, r2, r3
    63ce:	2200      	movs	r2, #0
    63d0:	461c      	mov	r4, r3
    63d2:	4615      	mov	r5, r2
    63d4:	e150      	b.n	6678 <k_ticks_to_ms_floor64+0x4a0>
			return t * ((uint64_t)to_hz / from_hz);
    63d6:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
    63da:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
    63de:	fbb2 f3f3 	udiv	r3, r2, r3
    63e2:	2200      	movs	r2, #0
    63e4:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    63e8:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
    63ec:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
    63f0:	e9d7 8924 	ldrd	r8, r9, [r7, #144]	; 0x90
    63f4:	464a      	mov	r2, r9
    63f6:	fb02 f203 	mul.w	r2, r2, r3
    63fa:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
    63fe:	4641      	mov	r1, r8
    6400:	fb01 f303 	mul.w	r3, r1, r3
    6404:	4413      	add	r3, r2
    6406:	f8d7 20e8 	ldr.w	r2, [r7, #232]	; 0xe8
    640a:	4641      	mov	r1, r8
    640c:	fba2 4501 	umull	r4, r5, r2, r1
    6410:	442b      	add	r3, r5
    6412:	461d      	mov	r5, r3
    6414:	e130      	b.n	6678 <k_ticks_to_ms_floor64+0x4a0>
		if (result32) {
    6416:	f897 30de 	ldrb.w	r3, [r7, #222]	; 0xde
    641a:	2b00      	cmp	r3, #0
    641c:	d035      	beq.n	648a <k_ticks_to_ms_floor64+0x2b2>
			return (uint32_t)((t * to_hz + off) / from_hz);
    641e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
    6422:	2200      	movs	r2, #0
    6424:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    6428:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
    642c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
    6430:	e9d7 ab22 	ldrd	sl, fp, [r7, #136]	; 0x88
    6434:	465a      	mov	r2, fp
    6436:	fb02 f203 	mul.w	r2, r2, r3
    643a:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
    643e:	4651      	mov	r1, sl
    6440:	fb01 f303 	mul.w	r3, r1, r3
    6444:	4413      	add	r3, r2
    6446:	f8d7 20e8 	ldr.w	r2, [r7, #232]	; 0xe8
    644a:	4651      	mov	r1, sl
    644c:	fba2 8901 	umull	r8, r9, r2, r1
    6450:	444b      	add	r3, r9
    6452:	4699      	mov	r9, r3
    6454:	e9d7 2334 	ldrd	r2, r3, [r7, #208]	; 0xd0
    6458:	eb18 0102 	adds.w	r1, r8, r2
    645c:	f8c7 1080 	str.w	r1, [r7, #128]	; 0x80
    6460:	eb49 0303 	adc.w	r3, r9, r3
    6464:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    6468:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
    646c:	2200      	movs	r2, #0
    646e:	67bb      	str	r3, [r7, #120]	; 0x78
    6470:	67fa      	str	r2, [r7, #124]	; 0x7c
    6472:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
    6476:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
    647a:	f7f9 fe37 	bl	ec <__aeabi_uldivmod>
    647e:	4602      	mov	r2, r0
    6480:	460b      	mov	r3, r1
    6482:	2300      	movs	r3, #0
    6484:	4614      	mov	r4, r2
    6486:	461d      	mov	r5, r3
    6488:	e0f6      	b.n	6678 <k_ticks_to_ms_floor64+0x4a0>
		} else if (const_hz && Z_TMCVT_USE_FAST_ALGO(from_hz, to_hz)) {
    648a:	f897 30df 	ldrb.w	r3, [r7, #223]	; 0xdf
    648e:	2b00      	cmp	r3, #0
    6490:	f000 8082 	beq.w	6598 <k_ticks_to_ms_floor64+0x3c0>
    6494:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
    6498:	2200      	movs	r2, #0
    649a:	673b      	str	r3, [r7, #112]	; 0x70
    649c:	677a      	str	r2, [r7, #116]	; 0x74
    649e:	4b7a      	ldr	r3, [pc, #488]	; (6688 <k_ticks_to_ms_floor64+0x4b0>)
    64a0:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
    64a4:	464a      	mov	r2, r9
    64a6:	fb03 f202 	mul.w	r2, r3, r2
    64aa:	2300      	movs	r3, #0
    64ac:	4641      	mov	r1, r8
    64ae:	fb01 f303 	mul.w	r3, r1, r3
    64b2:	441a      	add	r2, r3
    64b4:	4b74      	ldr	r3, [pc, #464]	; (6688 <k_ticks_to_ms_floor64+0x4b0>)
    64b6:	4641      	mov	r1, r8
    64b8:	fba1 ab03 	umull	sl, fp, r1, r3
    64bc:	eb02 030b 	add.w	r3, r2, fp
    64c0:	469b      	mov	fp, r3
    64c2:	f1ba 0302 	subs.w	r3, sl, #2
    64c6:	66bb      	str	r3, [r7, #104]	; 0x68
    64c8:	f14b 0300 	adc.w	r3, fp, #0
    64cc:	66fb      	str	r3, [r7, #108]	; 0x6c
    64ce:	f04f 32ff 	mov.w	r2, #4294967295
    64d2:	f04f 0300 	mov.w	r3, #0
    64d6:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
    64da:	f7f9 fe07 	bl	ec <__aeabi_uldivmod>
    64de:	4602      	mov	r2, r0
    64e0:	460b      	mov	r3, r1
    64e2:	4610      	mov	r0, r2
    64e4:	4619      	mov	r1, r3
    64e6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
    64ea:	2200      	movs	r2, #0
    64ec:	663b      	str	r3, [r7, #96]	; 0x60
    64ee:	667a      	str	r2, [r7, #100]	; 0x64
    64f0:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
    64f4:	4643      	mov	r3, r8
    64f6:	fb03 f201 	mul.w	r2, r3, r1
    64fa:	464b      	mov	r3, r9
    64fc:	fb00 f303 	mul.w	r3, r0, r3
    6500:	4413      	add	r3, r2
    6502:	4642      	mov	r2, r8
    6504:	fba0 2102 	umull	r2, r1, r0, r2
    6508:	f8c7 10bc 	str.w	r1, [r7, #188]	; 0xbc
    650c:	f8c7 20b8 	str.w	r2, [r7, #184]	; 0xb8
    6510:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
    6514:	4413      	add	r3, r2
    6516:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    651a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
    651e:	2b01      	cmp	r3, #1
    6520:	d23a      	bcs.n	6598 <k_ticks_to_ms_floor64+0x3c0>
			return ((t * to_hz + off) / from_hz);
    6522:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
    6526:	2200      	movs	r2, #0
    6528:	65bb      	str	r3, [r7, #88]	; 0x58
    652a:	65fa      	str	r2, [r7, #92]	; 0x5c
    652c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
    6530:	e9d7 4516 	ldrd	r4, r5, [r7, #88]	; 0x58
    6534:	462a      	mov	r2, r5
    6536:	fb02 f203 	mul.w	r2, r2, r3
    653a:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
    653e:	4621      	mov	r1, r4
    6540:	fb01 f303 	mul.w	r3, r1, r3
    6544:	4413      	add	r3, r2
    6546:	f8d7 20e8 	ldr.w	r2, [r7, #232]	; 0xe8
    654a:	4621      	mov	r1, r4
    654c:	fba2 2101 	umull	r2, r1, r2, r1
    6550:	f8c7 10b4 	str.w	r1, [r7, #180]	; 0xb4
    6554:	f8c7 20b0 	str.w	r2, [r7, #176]	; 0xb0
    6558:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
    655c:	4413      	add	r3, r2
    655e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    6562:	e9d7 2334 	ldrd	r2, r3, [r7, #208]	; 0xd0
    6566:	e9d7 452c 	ldrd	r4, r5, [r7, #176]	; 0xb0
    656a:	4621      	mov	r1, r4
    656c:	1889      	adds	r1, r1, r2
    656e:	6539      	str	r1, [r7, #80]	; 0x50
    6570:	4629      	mov	r1, r5
    6572:	eb43 0101 	adc.w	r1, r3, r1
    6576:	6579      	str	r1, [r7, #84]	; 0x54
    6578:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
    657c:	2200      	movs	r2, #0
    657e:	64bb      	str	r3, [r7, #72]	; 0x48
    6580:	64fa      	str	r2, [r7, #76]	; 0x4c
    6582:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
    6586:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
    658a:	f7f9 fdaf 	bl	ec <__aeabi_uldivmod>
    658e:	4602      	mov	r2, r0
    6590:	460b      	mov	r3, r1
    6592:	4614      	mov	r4, r2
    6594:	461d      	mov	r5, r3
    6596:	e06f      	b.n	6678 <k_ticks_to_ms_floor64+0x4a0>
			return (t / from_hz) * to_hz + ((t % from_hz) * to_hz + off) / from_hz;
    6598:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
    659c:	2200      	movs	r2, #0
    659e:	643b      	str	r3, [r7, #64]	; 0x40
    65a0:	647a      	str	r2, [r7, #68]	; 0x44
    65a2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
    65a6:	e9d7 013a 	ldrd	r0, r1, [r7, #232]	; 0xe8
    65aa:	f7f9 fd9f 	bl	ec <__aeabi_uldivmod>
    65ae:	4602      	mov	r2, r0
    65b0:	460b      	mov	r3, r1
    65b2:	4610      	mov	r0, r2
    65b4:	4619      	mov	r1, r3
    65b6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
    65ba:	2200      	movs	r2, #0
    65bc:	63bb      	str	r3, [r7, #56]	; 0x38
    65be:	63fa      	str	r2, [r7, #60]	; 0x3c
    65c0:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
    65c4:	4643      	mov	r3, r8
    65c6:	fb03 f201 	mul.w	r2, r3, r1
    65ca:	464b      	mov	r3, r9
    65cc:	fb00 f303 	mul.w	r3, r0, r3
    65d0:	4413      	add	r3, r2
    65d2:	4642      	mov	r2, r8
    65d4:	fba0 2102 	umull	r2, r1, r0, r2
    65d8:	f8c7 10ac 	str.w	r1, [r7, #172]	; 0xac
    65dc:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
    65e0:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
    65e4:	4413      	add	r3, r2
    65e6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    65ea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
    65ee:	2200      	movs	r2, #0
    65f0:	633b      	str	r3, [r7, #48]	; 0x30
    65f2:	637a      	str	r2, [r7, #52]	; 0x34
    65f4:	e9d7 013a 	ldrd	r0, r1, [r7, #232]	; 0xe8
    65f8:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
    65fc:	f7f9 fd76 	bl	ec <__aeabi_uldivmod>
    6600:	4610      	mov	r0, r2
    6602:	4619      	mov	r1, r3
    6604:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
    6608:	2200      	movs	r2, #0
    660a:	62bb      	str	r3, [r7, #40]	; 0x28
    660c:	62fa      	str	r2, [r7, #44]	; 0x2c
    660e:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
    6612:	4643      	mov	r3, r8
    6614:	fb03 f201 	mul.w	r2, r3, r1
    6618:	464b      	mov	r3, r9
    661a:	fb00 f303 	mul.w	r3, r0, r3
    661e:	4413      	add	r3, r2
    6620:	4642      	mov	r2, r8
    6622:	fba0 2102 	umull	r2, r1, r0, r2
    6626:	f8c7 10a4 	str.w	r1, [r7, #164]	; 0xa4
    662a:	f8c7 20a0 	str.w	r2, [r7, #160]	; 0xa0
    662e:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
    6632:	4413      	add	r3, r2
    6634:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    6638:	e9d7 2334 	ldrd	r2, r3, [r7, #208]	; 0xd0
    663c:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
    6640:	4641      	mov	r1, r8
    6642:	1889      	adds	r1, r1, r2
    6644:	6239      	str	r1, [r7, #32]
    6646:	4649      	mov	r1, r9
    6648:	eb43 0101 	adc.w	r1, r3, r1
    664c:	6279      	str	r1, [r7, #36]	; 0x24
    664e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
    6652:	2200      	movs	r2, #0
    6654:	61bb      	str	r3, [r7, #24]
    6656:	61fa      	str	r2, [r7, #28]
    6658:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
    665c:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
    6660:	f7f9 fd44 	bl	ec <__aeabi_uldivmod>
    6664:	4602      	mov	r2, r0
    6666:	460b      	mov	r3, r1
    6668:	e9d7 892a 	ldrd	r8, r9, [r7, #168]	; 0xa8
    666c:	4641      	mov	r1, r8
    666e:	188c      	adds	r4, r1, r2
    6670:	4649      	mov	r1, r9
    6672:	eb43 0101 	adc.w	r1, r3, r1
    6676:	460d      	mov	r5, r1
	return z_tmcvt(t, Z_HZ_ticks, Z_HZ_ms, true, false, false, false);
    6678:	4622      	mov	r2, r4
    667a:	462b      	mov	r3, r5
}
    667c:	4610      	mov	r0, r2
    667e:	4619      	mov	r1, r3
    6680:	37f4      	adds	r7, #244	; 0xf4
    6682:	46bd      	mov	sp, r7
    6684:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    6688:	01e13380 	.word	0x01e13380

0000668c <arch_switch>:

#endif /* !CONFIG_MULTITHREADING && CONFIG_CPU_CORTEX_M */

#if defined(CONFIG_USE_SWITCH)
static inline void arch_switch(void *switch_to, void **switched_from)
{
    668c:	b580      	push	{r7, lr}
    668e:	b084      	sub	sp, #16
    6690:	af00      	add	r7, sp, #0
    6692:	6078      	str	r0, [r7, #4]
    6694:	6039      	str	r1, [r7, #0]
	extern void z_arm_context_switch(struct k_thread *new, struct k_thread *old);

	struct k_thread *new = switch_to;
    6696:	687b      	ldr	r3, [r7, #4]
    6698:	60fb      	str	r3, [r7, #12]
	struct k_thread *old = CONTAINER_OF(switched_from, struct k_thread,
    669a:	683b      	ldr	r3, [r7, #0]
    669c:	3b68      	subs	r3, #104	; 0x68
    669e:	60bb      	str	r3, [r7, #8]
					    switch_handle);

	printk("Arch Switch: Old=%p, New=%p\n", old, new);
    66a0:	68fa      	ldr	r2, [r7, #12]
    66a2:	68b9      	ldr	r1, [r7, #8]
    66a4:	4805      	ldr	r0, [pc, #20]	; (66bc <arch_switch+0x30>)
    66a6:	f001 ff94 	bl	85d2 <printk>

	z_arm_context_switch(new, old);
    66aa:	68b9      	ldr	r1, [r7, #8]
    66ac:	68f8      	ldr	r0, [r7, #12]
    66ae:	f7fd f9ff 	bl	3ab0 <z_arm_context_switch>
}
    66b2:	bf00      	nop
    66b4:	3710      	adds	r7, #16
    66b6:	46bd      	mov	sp, r7
    66b8:	bd80      	pop	{r7, pc}
    66ba:	bf00      	nop
    66bc:	0000bed4 	.word	0x0000bed4

000066c0 <z_add_thread_timeout>:
{
    66c0:	b580      	push	{r7, lr}
    66c2:	b084      	sub	sp, #16
    66c4:	af00      	add	r7, sp, #0
    66c6:	60f8      	str	r0, [r7, #12]
    66c8:	e9c7 2300 	strd	r2, r3, [r7]
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
    66cc:	68fb      	ldr	r3, [r7, #12]
    66ce:	f103 0018 	add.w	r0, r3, #24
    66d2:	e9d7 2300 	ldrd	r2, r3, [r7]
    66d6:	4903      	ldr	r1, [pc, #12]	; (66e4 <z_add_thread_timeout+0x24>)
    66d8:	f001 f9fa 	bl	7ad0 <z_add_timeout>
}
    66dc:	bf00      	nop
    66de:	3710      	adds	r7, #16
    66e0:	46bd      	mov	sp, r7
    66e2:	bd80      	pop	{r7, pc}
    66e4:	000071a1 	.word	0x000071a1

000066e8 <z_is_idle_thread_object>:
{
	return entry_point == idle;
}

static inline bool z_is_idle_thread_object(struct k_thread *thread)
{
    66e8:	b480      	push	{r7}
    66ea:	b083      	sub	sp, #12
    66ec:	af00      	add	r7, sp, #0
    66ee:	6078      	str	r0, [r7, #4]
#ifdef CONFIG_MULTITHREADING
#ifdef CONFIG_SMP
	return thread->base.is_idle;
#else
	return thread == &z_idle_threads[0];
    66f0:	687b      	ldr	r3, [r7, #4]
    66f2:	4a05      	ldr	r2, [pc, #20]	; (6708 <z_is_idle_thread_object+0x20>)
    66f4:	4293      	cmp	r3, r2
    66f6:	bf0c      	ite	eq
    66f8:	2301      	moveq	r3, #1
    66fa:	2300      	movne	r3, #0
    66fc:	b2db      	uxtb	r3, r3
#endif
#else
	return false;
#endif /* CONFIG_MULTITHREADING */
}
    66fe:	4618      	mov	r0, r3
    6700:	370c      	adds	r7, #12
    6702:	46bd      	mov	sp, r7
    6704:	bc80      	pop	{r7}
    6706:	4770      	bx	lr
    6708:	20000640 	.word	0x20000640

0000670c <z_sched_lock>:
		z_ready_thread(thread);
	}
}

static inline void z_sched_lock(void)
{
    670c:	b480      	push	{r7}
    670e:	af00      	add	r7, sp, #0
	__ASSERT(!arch_is_in_isr(), "");
	__ASSERT(_current->base.sched_locked != 1U, "");

	--_current->base.sched_locked;
    6710:	4b04      	ldr	r3, [pc, #16]	; (6724 <z_sched_lock+0x18>)
    6712:	689b      	ldr	r3, [r3, #8]
    6714:	7bda      	ldrb	r2, [r3, #15]
    6716:	3a01      	subs	r2, #1
    6718:	b2d2      	uxtb	r2, r2
    671a:	73da      	strb	r2, [r3, #15]

	compiler_barrier();
}
    671c:	bf00      	nop
    671e:	46bd      	mov	sp, r7
    6720:	bc80      	pop	{r7}
    6722:	4770      	bx	lr
    6724:	2000074c 	.word	0x2000074c

00006728 <z_swap_irqlock>:
{
    6728:	b580      	push	{r7, lr}
    672a:	b092      	sub	sp, #72	; 0x48
    672c:	af00      	add	r7, sp, #0
    672e:	6078      	str	r0, [r7, #4]
    6730:	687b      	ldr	r3, [r7, #4]
    6732:	647b      	str	r3, [r7, #68]	; 0x44
    6734:	2300      	movs	r3, #0
    6736:	643b      	str	r3, [r7, #64]	; 0x40
    6738:	2300      	movs	r3, #0
    673a:	63fb      	str	r3, [r7, #60]	; 0x3c
	old_thread = _current;
    673c:	4b35      	ldr	r3, [pc, #212]	; (6814 <z_swap_irqlock+0xec>)
    673e:	689b      	ldr	r3, [r3, #8]
    6740:	63bb      	str	r3, [r7, #56]	; 0x38
	old_thread->swap_retval = -EAGAIN;
    6742:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    6744:	f06f 020a 	mvn.w	r2, #10
    6748:	665a      	str	r2, [r3, #100]	; 0x64
	if (is_spinlock && lock != NULL && lock != &sched_spinlock) {
    674a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    674c:	2b00      	cmp	r3, #0
    674e:	d009      	beq.n	6764 <z_swap_irqlock+0x3c>
    6750:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    6752:	2b00      	cmp	r3, #0
    6754:	d006      	beq.n	6764 <z_swap_irqlock+0x3c>
    6756:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    6758:	4a2f      	ldr	r2, [pc, #188]	; (6818 <z_swap_irqlock+0xf0>)
    675a:	4293      	cmp	r3, r2
    675c:	d002      	beq.n	6764 <z_swap_irqlock+0x3c>
    675e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    6760:	637b      	str	r3, [r7, #52]	; 0x34
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
#endif
#ifdef CONFIG_SMP
	atomic_clear(&l->locked);
#endif
}
    6762:	bf00      	nop
	if (!is_spinlock || lock != &sched_spinlock) {
    6764:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    6766:	2b00      	cmp	r3, #0
    6768:	d003      	beq.n	6772 <z_swap_irqlock+0x4a>
    676a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    676c:	4a2a      	ldr	r2, [pc, #168]	; (6818 <z_swap_irqlock+0xf0>)
    676e:	4293      	cmp	r3, r2
    6770:	d00e      	beq.n	6790 <z_swap_irqlock+0x68>
    6772:	4b29      	ldr	r3, [pc, #164]	; (6818 <z_swap_irqlock+0xf0>)
    6774:	633b      	str	r3, [r7, #48]	; 0x30
	__asm__ volatile(
    6776:	f04f 0320 	mov.w	r3, #32
    677a:	f3ef 8211 	mrs	r2, BASEPRI
    677e:	f383 8812 	msr	BASEPRI_MAX, r3
    6782:	f3bf 8f6f 	isb	sy
    6786:	62fa      	str	r2, [r7, #44]	; 0x2c
    6788:	62bb      	str	r3, [r7, #40]	; 0x28
	return key;
    678a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	k.key = arch_irq_lock();
    678c:	60fb      	str	r3, [r7, #12]
	return k;
    678e:	bf00      	nop
	new_thread = z_swap_next_thread();
    6790:	f000 feb2 	bl	74f8 <z_swap_next_thread>
    6794:	6278      	str	r0, [r7, #36]	; 0x24
	if (new_thread != old_thread) {
    6796:	6bba      	ldr	r2, [r7, #56]	; 0x38
    6798:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    679a:	429a      	cmp	r2, r3
    679c:	d01d      	beq.n	67da <z_swap_irqlock+0xb2>
		z_sched_usage_switch(new_thread);
    679e:	6a78      	ldr	r0, [r7, #36]	; 0x24
    67a0:	f004 fafb 	bl	ad9a <z_sched_usage_switch>
		wait_for_switch(new_thread);
    67a4:	6a78      	ldr	r0, [r7, #36]	; 0x24
    67a6:	f004 fb0e 	bl	adc6 <wait_for_switch>
		_current_cpu->current = new_thread;
    67aa:	4a1a      	ldr	r2, [pc, #104]	; (6814 <z_swap_irqlock+0xec>)
    67ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    67ae:	6093      	str	r3, [r2, #8]
		z_reset_time_slice(new_thread);
    67b0:	6a78      	ldr	r0, [r7, #36]	; 0x24
    67b2:	f000 f949 	bl	6a48 <z_reset_time_slice>
		arch_cohere_stacks(old_thread, NULL, new_thread);
    67b6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    67b8:	2100      	movs	r1, #0
    67ba:	6bb8      	ldr	r0, [r7, #56]	; 0x38
    67bc:	f004 f9a7 	bl	ab0e <arch_cohere_stacks>
		void *newsh = new_thread->switch_handle;
    67c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    67c2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
    67c4:	623b      	str	r3, [r7, #32]
    67c6:	4b14      	ldr	r3, [pc, #80]	; (6818 <z_swap_irqlock+0xf0>)
    67c8:	61fb      	str	r3, [r7, #28]
}
    67ca:	bf00      	nop
		arch_switch(newsh, &old_thread->switch_handle);
    67cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    67ce:	3368      	adds	r3, #104	; 0x68
    67d0:	4619      	mov	r1, r3
    67d2:	6a38      	ldr	r0, [r7, #32]
    67d4:	f7ff ff5a 	bl	668c <arch_switch>
    67d8:	e002      	b.n	67e0 <z_swap_irqlock+0xb8>
    67da:	4b0f      	ldr	r3, [pc, #60]	; (6818 <z_swap_irqlock+0xf0>)
    67dc:	61bb      	str	r3, [r7, #24]
    67de:	bf00      	nop
	if (is_spinlock) {
    67e0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    67e2:	2b00      	cmp	r3, #0
    67e4:	d007      	beq.n	67f6 <z_swap_irqlock+0xce>
    67e6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    67e8:	617b      	str	r3, [r7, #20]
	__asm__ volatile(
    67ea:	697b      	ldr	r3, [r7, #20]
    67ec:	f383 8811 	msr	BASEPRI, r3
    67f0:	f3bf 8f6f 	isb	sy
}
    67f4:	e007      	b.n	6806 <z_swap_irqlock+0xde>
    67f6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    67f8:	613b      	str	r3, [r7, #16]
	__asm__ volatile(
    67fa:	693b      	ldr	r3, [r7, #16]
    67fc:	f383 8811 	msr	BASEPRI, r3
    6800:	f3bf 8f6f 	isb	sy
}
    6804:	bf00      	nop
	return _current->swap_retval;
    6806:	4b03      	ldr	r3, [pc, #12]	; (6814 <z_swap_irqlock+0xec>)
    6808:	689b      	ldr	r3, [r3, #8]
    680a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
}
    680c:	4618      	mov	r0, r3
    680e:	3748      	adds	r7, #72	; 0x48
    6810:	46bd      	mov	sp, r7
    6812:	bd80      	pop	{r7, pc}
    6814:	2000074c 	.word	0x2000074c
    6818:	20000870 	.word	0x20000870

0000681c <z_swap>:
{
    681c:	b580      	push	{r7, lr}
    681e:	b092      	sub	sp, #72	; 0x48
    6820:	af00      	add	r7, sp, #0
    6822:	6078      	str	r0, [r7, #4]
    6824:	6039      	str	r1, [r7, #0]
	return do_swap(key.key, lock, 1);
    6826:	683b      	ldr	r3, [r7, #0]
    6828:	647b      	str	r3, [r7, #68]	; 0x44
    682a:	687b      	ldr	r3, [r7, #4]
    682c:	643b      	str	r3, [r7, #64]	; 0x40
    682e:	2301      	movs	r3, #1
    6830:	63fb      	str	r3, [r7, #60]	; 0x3c
	old_thread = _current;
    6832:	4b36      	ldr	r3, [pc, #216]	; (690c <z_swap+0xf0>)
    6834:	689b      	ldr	r3, [r3, #8]
    6836:	63bb      	str	r3, [r7, #56]	; 0x38
	old_thread->swap_retval = -EAGAIN;
    6838:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    683a:	f06f 020a 	mvn.w	r2, #10
    683e:	665a      	str	r2, [r3, #100]	; 0x64
	if (is_spinlock && lock != NULL && lock != &sched_spinlock) {
    6840:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    6842:	2b00      	cmp	r3, #0
    6844:	d009      	beq.n	685a <z_swap+0x3e>
    6846:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    6848:	2b00      	cmp	r3, #0
    684a:	d006      	beq.n	685a <z_swap+0x3e>
    684c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    684e:	4a30      	ldr	r2, [pc, #192]	; (6910 <z_swap+0xf4>)
    6850:	4293      	cmp	r3, r2
    6852:	d002      	beq.n	685a <z_swap+0x3e>
    6854:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    6856:	637b      	str	r3, [r7, #52]	; 0x34
    6858:	bf00      	nop
	if (!is_spinlock || lock != &sched_spinlock) {
    685a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    685c:	2b00      	cmp	r3, #0
    685e:	d003      	beq.n	6868 <z_swap+0x4c>
    6860:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    6862:	4a2b      	ldr	r2, [pc, #172]	; (6910 <z_swap+0xf4>)
    6864:	4293      	cmp	r3, r2
    6866:	d00e      	beq.n	6886 <z_swap+0x6a>
    6868:	4b29      	ldr	r3, [pc, #164]	; (6910 <z_swap+0xf4>)
    686a:	633b      	str	r3, [r7, #48]	; 0x30
	__asm__ volatile(
    686c:	f04f 0320 	mov.w	r3, #32
    6870:	f3ef 8211 	mrs	r2, BASEPRI
    6874:	f383 8812 	msr	BASEPRI_MAX, r3
    6878:	f3bf 8f6f 	isb	sy
    687c:	62fa      	str	r2, [r7, #44]	; 0x2c
    687e:	62bb      	str	r3, [r7, #40]	; 0x28
	return key;
    6880:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	k.key = arch_irq_lock();
    6882:	60fb      	str	r3, [r7, #12]
	return k;
    6884:	bf00      	nop
	new_thread = z_swap_next_thread();
    6886:	f000 fe37 	bl	74f8 <z_swap_next_thread>
    688a:	6278      	str	r0, [r7, #36]	; 0x24
	if (new_thread != old_thread) {
    688c:	6bba      	ldr	r2, [r7, #56]	; 0x38
    688e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    6890:	429a      	cmp	r2, r3
    6892:	d01d      	beq.n	68d0 <z_swap+0xb4>
		z_sched_usage_switch(new_thread);
    6894:	6a78      	ldr	r0, [r7, #36]	; 0x24
    6896:	f004 fa80 	bl	ad9a <z_sched_usage_switch>
		wait_for_switch(new_thread);
    689a:	6a78      	ldr	r0, [r7, #36]	; 0x24
    689c:	f004 fa93 	bl	adc6 <wait_for_switch>
		_current_cpu->current = new_thread;
    68a0:	4a1a      	ldr	r2, [pc, #104]	; (690c <z_swap+0xf0>)
    68a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    68a4:	6093      	str	r3, [r2, #8]
		z_reset_time_slice(new_thread);
    68a6:	6a78      	ldr	r0, [r7, #36]	; 0x24
    68a8:	f000 f8ce 	bl	6a48 <z_reset_time_slice>
		arch_cohere_stacks(old_thread, NULL, new_thread);
    68ac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    68ae:	2100      	movs	r1, #0
    68b0:	6bb8      	ldr	r0, [r7, #56]	; 0x38
    68b2:	f004 f92c 	bl	ab0e <arch_cohere_stacks>
		void *newsh = new_thread->switch_handle;
    68b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    68b8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
    68ba:	623b      	str	r3, [r7, #32]
    68bc:	4b14      	ldr	r3, [pc, #80]	; (6910 <z_swap+0xf4>)
    68be:	61fb      	str	r3, [r7, #28]
}
    68c0:	bf00      	nop
		arch_switch(newsh, &old_thread->switch_handle);
    68c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    68c4:	3368      	adds	r3, #104	; 0x68
    68c6:	4619      	mov	r1, r3
    68c8:	6a38      	ldr	r0, [r7, #32]
    68ca:	f7ff fedf 	bl	668c <arch_switch>
    68ce:	e002      	b.n	68d6 <z_swap+0xba>
    68d0:	4b0f      	ldr	r3, [pc, #60]	; (6910 <z_swap+0xf4>)
    68d2:	61bb      	str	r3, [r7, #24]
    68d4:	bf00      	nop
	if (is_spinlock) {
    68d6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    68d8:	2b00      	cmp	r3, #0
    68da:	d007      	beq.n	68ec <z_swap+0xd0>
    68dc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    68de:	617b      	str	r3, [r7, #20]
	__asm__ volatile(
    68e0:	697b      	ldr	r3, [r7, #20]
    68e2:	f383 8811 	msr	BASEPRI, r3
    68e6:	f3bf 8f6f 	isb	sy
}
    68ea:	e007      	b.n	68fc <z_swap+0xe0>
    68ec:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    68ee:	613b      	str	r3, [r7, #16]
	__asm__ volatile(
    68f0:	693b      	ldr	r3, [r7, #16]
    68f2:	f383 8811 	msr	BASEPRI, r3
    68f6:	f3bf 8f6f 	isb	sy
}
    68fa:	bf00      	nop
	return _current->swap_retval;
    68fc:	4b03      	ldr	r3, [pc, #12]	; (690c <z_swap+0xf0>)
    68fe:	689b      	ldr	r3, [r3, #8]
    6900:	6e5b      	ldr	r3, [r3, #100]	; 0x64
}
    6902:	4618      	mov	r0, r3
    6904:	3748      	adds	r7, #72	; 0x48
    6906:	46bd      	mov	sp, r7
    6908:	bd80      	pop	{r7, pc}
    690a:	bf00      	nop
    690c:	2000074c 	.word	0x2000074c
    6910:	20000870 	.word	0x20000870

00006914 <move_thread_to_end_of_prio_q>:
	return thread;
#endif
}

static void move_thread_to_end_of_prio_q(struct k_thread *thread)
{
    6914:	b580      	push	{r7, lr}
    6916:	b08e      	sub	sp, #56	; 0x38
    6918:	af00      	add	r7, sp, #0
    691a:	6078      	str	r0, [r7, #4]
	if (z_is_thread_queued(thread)) {
    691c:	6878      	ldr	r0, [r7, #4]
    691e:	f004 f9c0 	bl	aca2 <z_is_thread_queued>
    6922:	4603      	mov	r3, r0
    6924:	2b00      	cmp	r3, #0
    6926:	d038      	beq.n	699a <move_thread_to_end_of_prio_q+0x86>
    6928:	687b      	ldr	r3, [r7, #4]
    692a:	637b      	str	r3, [r7, #52]	; 0x34
	thread->base.thread_state &= ~_THREAD_QUEUED;
    692c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    692e:	7b5b      	ldrb	r3, [r3, #13]
    6930:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    6934:	b2da      	uxtb	r2, r3
    6936:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    6938:	735a      	strb	r2, [r3, #13]
	if (should_queue_thread(thread)) {
    693a:	6b78      	ldr	r0, [r7, #52]	; 0x34
    693c:	f004 faba 	bl	aeb4 <should_queue_thread>
    6940:	4603      	mov	r3, r0
    6942:	2b00      	cmp	r3, #0
    6944:	d028      	beq.n	6998 <move_thread_to_end_of_prio_q+0x84>
    6946:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    6948:	633b      	str	r3, [r7, #48]	; 0x30
    694a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    694c:	62fb      	str	r3, [r7, #44]	; 0x2c
	return &_kernel.ready_q.runq;
    694e:	4b34      	ldr	r3, [pc, #208]	; (6a20 <move_thread_to_end_of_prio_q+0x10c>)
    6950:	62bb      	str	r3, [r7, #40]	; 0x28
    6952:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    6954:	627b      	str	r3, [r7, #36]	; 0x24
}

static ALWAYS_INLINE void z_priq_mq_remove(struct _priq_mq *pq,
					   struct k_thread *thread)
{
	int priority_bit = thread->base.prio - K_HIGHEST_THREAD_PRIO;
    6956:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    6958:	f993 300e 	ldrsb.w	r3, [r3, #14]
    695c:	3310      	adds	r3, #16
    695e:	623b      	str	r3, [r7, #32]

	sys_dlist_remove(&thread->base.qnode_dlist);
    6960:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    6962:	4618      	mov	r0, r3
    6964:	f004 f8b5 	bl	aad2 <sys_dlist_remove>
	if (sys_dlist_is_empty(&pq->queues[priority_bit])) {
    6968:	6a3b      	ldr	r3, [r7, #32]
    696a:	00db      	lsls	r3, r3, #3
    696c:	6aba      	ldr	r2, [r7, #40]	; 0x28
    696e:	4413      	add	r3, r2
    6970:	4618      	mov	r0, r3
    6972:	f004 f833 	bl	a9dc <sys_dlist_is_empty>
    6976:	4603      	mov	r3, r0
    6978:	2b00      	cmp	r3, #0
    697a:	d00b      	beq.n	6994 <move_thread_to_end_of_prio_q+0x80>
		pq->bitmask &= ~BIT(priority_bit);
    697c:	6abb      	ldr	r3, [r7, #40]	; 0x28
    697e:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    6982:	2101      	movs	r1, #1
    6984:	6a3b      	ldr	r3, [r7, #32]
    6986:	fa01 f303 	lsl.w	r3, r1, r3
    698a:	43db      	mvns	r3, r3
    698c:	401a      	ands	r2, r3
    698e:	6abb      	ldr	r3, [r7, #40]	; 0x28
    6990:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
	}
}
    6994:	bf00      	nop
}
    6996:	bf00      	nop
}
    6998:	bf00      	nop
    699a:	687b      	ldr	r3, [r7, #4]
    699c:	61fb      	str	r3, [r7, #28]
	thread->base.thread_state |= _THREAD_QUEUED;
    699e:	69fb      	ldr	r3, [r7, #28]
    69a0:	7b5b      	ldrb	r3, [r3, #13]
    69a2:	f063 037f 	orn	r3, r3, #127	; 0x7f
    69a6:	b2da      	uxtb	r2, r3
    69a8:	69fb      	ldr	r3, [r7, #28]
    69aa:	735a      	strb	r2, [r3, #13]
	if (should_queue_thread(thread)) {
    69ac:	69f8      	ldr	r0, [r7, #28]
    69ae:	f004 fa81 	bl	aeb4 <should_queue_thread>
    69b2:	4603      	mov	r3, r0
    69b4:	2b00      	cmp	r3, #0
    69b6:	d022      	beq.n	69fe <move_thread_to_end_of_prio_q+0xea>
    69b8:	69fb      	ldr	r3, [r7, #28]
    69ba:	61bb      	str	r3, [r7, #24]
    69bc:	69bb      	ldr	r3, [r7, #24]
    69be:	617b      	str	r3, [r7, #20]
	return &_kernel.ready_q.runq;
    69c0:	4b17      	ldr	r3, [pc, #92]	; (6a20 <move_thread_to_end_of_prio_q+0x10c>)
    69c2:	613b      	str	r3, [r7, #16]
    69c4:	69bb      	ldr	r3, [r7, #24]
    69c6:	60fb      	str	r3, [r7, #12]
	int priority_bit = thread->base.prio - K_HIGHEST_THREAD_PRIO;
    69c8:	68fb      	ldr	r3, [r7, #12]
    69ca:	f993 300e 	ldrsb.w	r3, [r3, #14]
    69ce:	3310      	adds	r3, #16
    69d0:	60bb      	str	r3, [r7, #8]
	sys_dlist_append(&pq->queues[priority_bit], &thread->base.qnode_dlist);
    69d2:	68bb      	ldr	r3, [r7, #8]
    69d4:	00db      	lsls	r3, r3, #3
    69d6:	693a      	ldr	r2, [r7, #16]
    69d8:	4413      	add	r3, r2
    69da:	68fa      	ldr	r2, [r7, #12]
    69dc:	4611      	mov	r1, r2
    69de:	4618      	mov	r0, r3
    69e0:	f004 f845 	bl	aa6e <sys_dlist_append>
	pq->bitmask |= BIT(priority_bit);
    69e4:	693b      	ldr	r3, [r7, #16]
    69e6:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    69ea:	2101      	movs	r1, #1
    69ec:	68bb      	ldr	r3, [r7, #8]
    69ee:	fa01 f303 	lsl.w	r3, r1, r3
    69f2:	431a      	orrs	r2, r3
    69f4:	693b      	ldr	r3, [r7, #16]
    69f6:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
}
    69fa:	bf00      	nop
}
    69fc:	bf00      	nop
}
    69fe:	bf00      	nop
	update_cache(thread == _current);
    6a00:	4b08      	ldr	r3, [pc, #32]	; (6a24 <move_thread_to_end_of_prio_q+0x110>)
    6a02:	689b      	ldr	r3, [r3, #8]
    6a04:	687a      	ldr	r2, [r7, #4]
    6a06:	429a      	cmp	r2, r3
    6a08:	bf0c      	ite	eq
    6a0a:	2301      	moveq	r3, #1
    6a0c:	2300      	movne	r3, #0
    6a0e:	b2db      	uxtb	r3, r3
    6a10:	4618      	mov	r0, r3
    6a12:	f000 f955 	bl	6cc0 <update_cache>
}
    6a16:	bf00      	nop
    6a18:	3738      	adds	r7, #56	; 0x38
    6a1a:	46bd      	mov	sp, r7
    6a1c:	bd80      	pop	{r7, pc}
    6a1e:	bf00      	nop
    6a20:	20000768 	.word	0x20000768
    6a24:	2000074c 	.word	0x2000074c

00006a28 <slice_time>:
{
    6a28:	b480      	push	{r7}
    6a2a:	b085      	sub	sp, #20
    6a2c:	af00      	add	r7, sp, #0
    6a2e:	6078      	str	r0, [r7, #4]
	int ret = slice_ticks;
    6a30:	4b04      	ldr	r3, [pc, #16]	; (6a44 <slice_time+0x1c>)
    6a32:	681b      	ldr	r3, [r3, #0]
    6a34:	60fb      	str	r3, [r7, #12]
	return ret;
    6a36:	68fb      	ldr	r3, [r7, #12]
}
    6a38:	4618      	mov	r0, r3
    6a3a:	3714      	adds	r7, #20
    6a3c:	46bd      	mov	sp, r7
    6a3e:	bc80      	pop	{r7}
    6a40:	4770      	bx	lr
    6a42:	bf00      	nop
    6a44:	20000874 	.word	0x20000874

00006a48 <z_reset_time_slice>:
{
    6a48:	b590      	push	{r4, r7, lr}
    6a4a:	b083      	sub	sp, #12
    6a4c:	af00      	add	r7, sp, #0
    6a4e:	6078      	str	r0, [r7, #4]
	if (slice_time(curr) != 0) {
    6a50:	6878      	ldr	r0, [r7, #4]
    6a52:	f7ff ffe9 	bl	6a28 <slice_time>
    6a56:	4603      	mov	r3, r0
    6a58:	2b00      	cmp	r3, #0
    6a5a:	d013      	beq.n	6a84 <z_reset_time_slice+0x3c>
		_current_cpu->slice_ticks = slice_time(curr) + sys_clock_elapsed();
    6a5c:	6878      	ldr	r0, [r7, #4]
    6a5e:	f7ff ffe3 	bl	6a28 <slice_time>
    6a62:	4603      	mov	r3, r0
    6a64:	461c      	mov	r4, r3
    6a66:	f7fe f93f 	bl	4ce8 <sys_clock_elapsed>
    6a6a:	4603      	mov	r3, r0
    6a6c:	4423      	add	r3, r4
    6a6e:	461a      	mov	r2, r3
    6a70:	4b06      	ldr	r3, [pc, #24]	; (6a8c <z_reset_time_slice+0x44>)
    6a72:	611a      	str	r2, [r3, #16]
		z_set_timeout_expiry(slice_time(curr), false);
    6a74:	6878      	ldr	r0, [r7, #4]
    6a76:	f7ff ffd7 	bl	6a28 <slice_time>
    6a7a:	4603      	mov	r3, r0
    6a7c:	2100      	movs	r1, #0
    6a7e:	4618      	mov	r0, r3
    6a80:	f001 f954 	bl	7d2c <z_set_timeout_expiry>
}
    6a84:	bf00      	nop
    6a86:	370c      	adds	r7, #12
    6a88:	46bd      	mov	sp, r7
    6a8a:	bd90      	pop	{r4, r7, pc}
    6a8c:	2000074c 	.word	0x2000074c

00006a90 <k_sched_time_slice_set>:
{
    6a90:	b580      	push	{r7, lr}
    6a92:	b08c      	sub	sp, #48	; 0x30
    6a94:	af00      	add	r7, sp, #0
    6a96:	6078      	str	r0, [r7, #4]
    6a98:	6039      	str	r1, [r7, #0]
	LOCKED(&sched_spinlock) {
    6a9a:	2300      	movs	r3, #0
    6a9c:	61bb      	str	r3, [r7, #24]
    6a9e:	4b22      	ldr	r3, [pc, #136]	; (6b28 <k_sched_time_slice_set+0x98>)
    6aa0:	62fb      	str	r3, [r7, #44]	; 0x2c
	__asm__ volatile(
    6aa2:	f04f 0320 	mov.w	r3, #32
    6aa6:	f3ef 8211 	mrs	r2, BASEPRI
    6aaa:	f383 8812 	msr	BASEPRI_MAX, r3
    6aae:	f3bf 8f6f 	isb	sy
    6ab2:	62ba      	str	r2, [r7, #40]	; 0x28
    6ab4:	627b      	str	r3, [r7, #36]	; 0x24
	return key;
    6ab6:	6abb      	ldr	r3, [r7, #40]	; 0x28
	k.key = arch_irq_lock();
    6ab8:	60fb      	str	r3, [r7, #12]
	return k;
    6aba:	68fb      	ldr	r3, [r7, #12]
    6abc:	617b      	str	r3, [r7, #20]
    6abe:	e02b      	b.n	6b18 <k_sched_time_slice_set+0x88>
		_current_cpu->slice_ticks = 0;
    6ac0:	4b1a      	ldr	r3, [pc, #104]	; (6b2c <k_sched_time_slice_set+0x9c>)
    6ac2:	2200      	movs	r2, #0
    6ac4:	611a      	str	r2, [r3, #16]
		slice_ticks = k_ms_to_ticks_ceil32(slice);
    6ac6:	687b      	ldr	r3, [r7, #4]
    6ac8:	4618      	mov	r0, r3
    6aca:	f7ff f921 	bl	5d10 <k_ms_to_ticks_ceil32>
    6ace:	4603      	mov	r3, r0
    6ad0:	461a      	mov	r2, r3
    6ad2:	4b17      	ldr	r3, [pc, #92]	; (6b30 <k_sched_time_slice_set+0xa0>)
    6ad4:	601a      	str	r2, [r3, #0]
		if (IS_ENABLED(CONFIG_TICKLESS_KERNEL) && slice > 0) {
    6ad6:	687b      	ldr	r3, [r7, #4]
    6ad8:	2b00      	cmp	r3, #0
    6ada:	dd06      	ble.n	6aea <k_sched_time_slice_set+0x5a>
			slice_ticks = MAX(2, slice_ticks);
    6adc:	4b14      	ldr	r3, [pc, #80]	; (6b30 <k_sched_time_slice_set+0xa0>)
    6ade:	681b      	ldr	r3, [r3, #0]
    6ae0:	2b02      	cmp	r3, #2
    6ae2:	bfb8      	it	lt
    6ae4:	2302      	movlt	r3, #2
    6ae6:	4a12      	ldr	r2, [pc, #72]	; (6b30 <k_sched_time_slice_set+0xa0>)
    6ae8:	6013      	str	r3, [r2, #0]
		slice_max_prio = prio;
    6aea:	4a12      	ldr	r2, [pc, #72]	; (6b34 <k_sched_time_slice_set+0xa4>)
    6aec:	683b      	ldr	r3, [r7, #0]
    6aee:	6013      	str	r3, [r2, #0]
		z_reset_time_slice(_current);
    6af0:	4b0e      	ldr	r3, [pc, #56]	; (6b2c <k_sched_time_slice_set+0x9c>)
    6af2:	689b      	ldr	r3, [r3, #8]
    6af4:	4618      	mov	r0, r3
    6af6:	f7ff ffa7 	bl	6a48 <z_reset_time_slice>
    6afa:	4b0b      	ldr	r3, [pc, #44]	; (6b28 <k_sched_time_slice_set+0x98>)
    6afc:	623b      	str	r3, [r7, #32]
    6afe:	697b      	ldr	r3, [r7, #20]
    6b00:	613b      	str	r3, [r7, #16]
	arch_irq_unlock(key.key);
    6b02:	693b      	ldr	r3, [r7, #16]
    6b04:	61fb      	str	r3, [r7, #28]
	__asm__ volatile(
    6b06:	69fb      	ldr	r3, [r7, #28]
    6b08:	f383 8811 	msr	BASEPRI, r3
    6b0c:	f3bf 8f6f 	isb	sy
}
    6b10:	bf00      	nop
}
    6b12:	bf00      	nop
	LOCKED(&sched_spinlock) {
    6b14:	2301      	movs	r3, #1
    6b16:	61bb      	str	r3, [r7, #24]
    6b18:	69bb      	ldr	r3, [r7, #24]
    6b1a:	2b00      	cmp	r3, #0
    6b1c:	d0d0      	beq.n	6ac0 <k_sched_time_slice_set+0x30>
}
    6b1e:	bf00      	nop
    6b20:	bf00      	nop
    6b22:	3730      	adds	r7, #48	; 0x30
    6b24:	46bd      	mov	sp, r7
    6b26:	bd80      	pop	{r7, pc}
    6b28:	20000870 	.word	0x20000870
    6b2c:	2000074c 	.word	0x2000074c
    6b30:	20000874 	.word	0x20000874
    6b34:	20000878 	.word	0x20000878

00006b38 <sliceable>:
{
    6b38:	b580      	push	{r7, lr}
    6b3a:	b084      	sub	sp, #16
    6b3c:	af00      	add	r7, sp, #0
    6b3e:	6078      	str	r0, [r7, #4]
	bool ret = is_preempt(thread)
    6b40:	6878      	ldr	r0, [r7, #4]
    6b42:	f004 f982 	bl	ae4a <is_preempt>
    6b46:	4603      	mov	r3, r0
		&& !z_is_idle_thread_object(thread);
    6b48:	2b00      	cmp	r3, #0
    6b4a:	d023      	beq.n	6b94 <sliceable+0x5c>
		&& !z_is_thread_prevented_from_running(thread)
    6b4c:	6878      	ldr	r0, [r7, #4]
    6b4e:	f004 f835 	bl	abbc <z_is_thread_prevented_from_running>
    6b52:	4603      	mov	r3, r0
    6b54:	f083 0301 	eor.w	r3, r3, #1
    6b58:	b2db      	uxtb	r3, r3
    6b5a:	2b00      	cmp	r3, #0
    6b5c:	d01a      	beq.n	6b94 <sliceable+0x5c>
		&& !z_is_prio_higher(thread->base.prio, slice_max_prio)
    6b5e:	687b      	ldr	r3, [r7, #4]
    6b60:	f993 300e 	ldrsb.w	r3, [r3, #14]
    6b64:	461a      	mov	r2, r3
    6b66:	4b11      	ldr	r3, [pc, #68]	; (6bac <sliceable+0x74>)
    6b68:	681b      	ldr	r3, [r3, #0]
    6b6a:	4619      	mov	r1, r3
    6b6c:	4610      	mov	r0, r2
    6b6e:	f004 f906 	bl	ad7e <z_is_prio_higher>
    6b72:	4603      	mov	r3, r0
    6b74:	f083 0301 	eor.w	r3, r3, #1
    6b78:	b2db      	uxtb	r3, r3
    6b7a:	2b00      	cmp	r3, #0
    6b7c:	d00a      	beq.n	6b94 <sliceable+0x5c>
		&& !z_is_idle_thread_object(thread);
    6b7e:	6878      	ldr	r0, [r7, #4]
    6b80:	f7ff fdb2 	bl	66e8 <z_is_idle_thread_object>
    6b84:	4603      	mov	r3, r0
    6b86:	f083 0301 	eor.w	r3, r3, #1
    6b8a:	b2db      	uxtb	r3, r3
    6b8c:	2b00      	cmp	r3, #0
    6b8e:	d001      	beq.n	6b94 <sliceable+0x5c>
    6b90:	2301      	movs	r3, #1
    6b92:	e000      	b.n	6b96 <sliceable+0x5e>
    6b94:	2300      	movs	r3, #0
	bool ret = is_preempt(thread)
    6b96:	73fb      	strb	r3, [r7, #15]
    6b98:	7bfb      	ldrb	r3, [r7, #15]
    6b9a:	f003 0301 	and.w	r3, r3, #1
    6b9e:	73fb      	strb	r3, [r7, #15]
	return ret;
    6ba0:	7bfb      	ldrb	r3, [r7, #15]
}
    6ba2:	4618      	mov	r0, r3
    6ba4:	3710      	adds	r7, #16
    6ba6:	46bd      	mov	sp, r7
    6ba8:	bd80      	pop	{r7, pc}
    6baa:	bf00      	nop
    6bac:	20000878 	.word	0x20000878

00006bb0 <slice_expired_locked>:
{
    6bb0:	b580      	push	{r7, lr}
    6bb2:	b084      	sub	sp, #16
    6bb4:	af00      	add	r7, sp, #0
    6bb6:	6078      	str	r0, [r7, #4]
	struct k_thread *curr = _current;
    6bb8:	4b0b      	ldr	r3, [pc, #44]	; (6be8 <slice_expired_locked+0x38>)
    6bba:	689b      	ldr	r3, [r3, #8]
    6bbc:	60fb      	str	r3, [r7, #12]
	if (!z_is_thread_prevented_from_running(curr)) {
    6bbe:	68f8      	ldr	r0, [r7, #12]
    6bc0:	f003 fffc 	bl	abbc <z_is_thread_prevented_from_running>
    6bc4:	4603      	mov	r3, r0
    6bc6:	f083 0301 	eor.w	r3, r3, #1
    6bca:	b2db      	uxtb	r3, r3
    6bcc:	2b00      	cmp	r3, #0
    6bce:	d002      	beq.n	6bd6 <slice_expired_locked+0x26>
		move_thread_to_end_of_prio_q(curr);
    6bd0:	68f8      	ldr	r0, [r7, #12]
    6bd2:	f7ff fe9f 	bl	6914 <move_thread_to_end_of_prio_q>
	z_reset_time_slice(curr);
    6bd6:	68f8      	ldr	r0, [r7, #12]
    6bd8:	f7ff ff36 	bl	6a48 <z_reset_time_slice>
	return sched_lock_key;
    6bdc:	687b      	ldr	r3, [r7, #4]
}
    6bde:	4618      	mov	r0, r3
    6be0:	3710      	adds	r7, #16
    6be2:	46bd      	mov	sp, r7
    6be4:	bd80      	pop	{r7, pc}
    6be6:	bf00      	nop
    6be8:	2000074c 	.word	0x2000074c

00006bec <z_time_slice>:
{
    6bec:	b580      	push	{r7, lr}
    6bee:	b08e      	sub	sp, #56	; 0x38
    6bf0:	af00      	add	r7, sp, #0
    6bf2:	6078      	str	r0, [r7, #4]
    6bf4:	4b2f      	ldr	r3, [pc, #188]	; (6cb4 <z_time_slice+0xc8>)
    6bf6:	637b      	str	r3, [r7, #52]	; 0x34
	__asm__ volatile(
    6bf8:	f04f 0320 	mov.w	r3, #32
    6bfc:	f3ef 8211 	mrs	r2, BASEPRI
    6c00:	f383 8812 	msr	BASEPRI_MAX, r3
    6c04:	f3bf 8f6f 	isb	sy
    6c08:	633a      	str	r2, [r7, #48]	; 0x30
    6c0a:	62fb      	str	r3, [r7, #44]	; 0x2c
	return key;
    6c0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
	k.key = arch_irq_lock();
    6c0e:	60fb      	str	r3, [r7, #12]
	return k;
    6c10:	68fb      	ldr	r3, [r7, #12]
    6c12:	61bb      	str	r3, [r7, #24]
	if (pending_current == _current) {
    6c14:	4b28      	ldr	r3, [pc, #160]	; (6cb8 <z_time_slice+0xcc>)
    6c16:	689a      	ldr	r2, [r3, #8]
    6c18:	4b28      	ldr	r3, [pc, #160]	; (6cbc <z_time_slice+0xd0>)
    6c1a:	681b      	ldr	r3, [r3, #0]
    6c1c:	429a      	cmp	r2, r3
    6c1e:	d111      	bne.n	6c44 <z_time_slice+0x58>
		z_reset_time_slice(_current);
    6c20:	4b25      	ldr	r3, [pc, #148]	; (6cb8 <z_time_slice+0xcc>)
    6c22:	689b      	ldr	r3, [r3, #8]
    6c24:	4618      	mov	r0, r3
    6c26:	f7ff ff0f 	bl	6a48 <z_reset_time_slice>
    6c2a:	4b22      	ldr	r3, [pc, #136]	; (6cb4 <z_time_slice+0xc8>)
    6c2c:	62bb      	str	r3, [r7, #40]	; 0x28
    6c2e:	69bb      	ldr	r3, [r7, #24]
    6c30:	613b      	str	r3, [r7, #16]
	arch_irq_unlock(key.key);
    6c32:	693b      	ldr	r3, [r7, #16]
    6c34:	627b      	str	r3, [r7, #36]	; 0x24
	__asm__ volatile(
    6c36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    6c38:	f383 8811 	msr	BASEPRI, r3
    6c3c:	f3bf 8f6f 	isb	sy
}
    6c40:	bf00      	nop
}
    6c42:	e034      	b.n	6cae <z_time_slice+0xc2>
	pending_current = NULL;
    6c44:	4b1d      	ldr	r3, [pc, #116]	; (6cbc <z_time_slice+0xd0>)
    6c46:	2200      	movs	r2, #0
    6c48:	601a      	str	r2, [r3, #0]
	if (slice_time(_current) && sliceable(_current)) {
    6c4a:	4b1b      	ldr	r3, [pc, #108]	; (6cb8 <z_time_slice+0xcc>)
    6c4c:	689b      	ldr	r3, [r3, #8]
    6c4e:	4618      	mov	r0, r3
    6c50:	f7ff feea 	bl	6a28 <slice_time>
    6c54:	4603      	mov	r3, r0
    6c56:	2b00      	cmp	r3, #0
    6c58:	d019      	beq.n	6c8e <z_time_slice+0xa2>
    6c5a:	4b17      	ldr	r3, [pc, #92]	; (6cb8 <z_time_slice+0xcc>)
    6c5c:	689b      	ldr	r3, [r3, #8]
    6c5e:	4618      	mov	r0, r3
    6c60:	f7ff ff6a 	bl	6b38 <sliceable>
    6c64:	4603      	mov	r3, r0
    6c66:	2b00      	cmp	r3, #0
    6c68:	d011      	beq.n	6c8e <z_time_slice+0xa2>
		if (ticks >= _current_cpu->slice_ticks) {
    6c6a:	4b13      	ldr	r3, [pc, #76]	; (6cb8 <z_time_slice+0xcc>)
    6c6c:	691b      	ldr	r3, [r3, #16]
    6c6e:	687a      	ldr	r2, [r7, #4]
    6c70:	429a      	cmp	r2, r3
    6c72:	db05      	blt.n	6c80 <z_time_slice+0x94>
			key = slice_expired_locked(key);
    6c74:	69b8      	ldr	r0, [r7, #24]
    6c76:	f7ff ff9b 	bl	6bb0 <slice_expired_locked>
    6c7a:	4603      	mov	r3, r0
    6c7c:	61bb      	str	r3, [r7, #24]
		if (ticks >= _current_cpu->slice_ticks) {
    6c7e:	e009      	b.n	6c94 <z_time_slice+0xa8>
			_current_cpu->slice_ticks -= ticks;
    6c80:	4b0d      	ldr	r3, [pc, #52]	; (6cb8 <z_time_slice+0xcc>)
    6c82:	691a      	ldr	r2, [r3, #16]
    6c84:	687b      	ldr	r3, [r7, #4]
    6c86:	1ad3      	subs	r3, r2, r3
    6c88:	4a0b      	ldr	r2, [pc, #44]	; (6cb8 <z_time_slice+0xcc>)
    6c8a:	6113      	str	r3, [r2, #16]
		if (ticks >= _current_cpu->slice_ticks) {
    6c8c:	e002      	b.n	6c94 <z_time_slice+0xa8>
		_current_cpu->slice_ticks = 0;
    6c8e:	4b0a      	ldr	r3, [pc, #40]	; (6cb8 <z_time_slice+0xcc>)
    6c90:	2200      	movs	r2, #0
    6c92:	611a      	str	r2, [r3, #16]
    6c94:	4b07      	ldr	r3, [pc, #28]	; (6cb4 <z_time_slice+0xc8>)
    6c96:	623b      	str	r3, [r7, #32]
    6c98:	69bb      	ldr	r3, [r7, #24]
    6c9a:	617b      	str	r3, [r7, #20]
	arch_irq_unlock(key.key);
    6c9c:	697b      	ldr	r3, [r7, #20]
    6c9e:	61fb      	str	r3, [r7, #28]
	__asm__ volatile(
    6ca0:	69fb      	ldr	r3, [r7, #28]
    6ca2:	f383 8811 	msr	BASEPRI, r3
    6ca6:	f3bf 8f6f 	isb	sy
}
    6caa:	bf00      	nop
}
    6cac:	bf00      	nop
}
    6cae:	3738      	adds	r7, #56	; 0x38
    6cb0:	46bd      	mov	sp, r7
    6cb2:	bd80      	pop	{r7, pc}
    6cb4:	20000870 	.word	0x20000870
    6cb8:	2000074c 	.word	0x2000074c
    6cbc:	2000087c 	.word	0x2000087c

00006cc0 <update_cache>:
{
    6cc0:	b580      	push	{r7, lr}
    6cc2:	b086      	sub	sp, #24
    6cc4:	af00      	add	r7, sp, #0
    6cc6:	6078      	str	r0, [r7, #4]
	return &_kernel.ready_q.runq;
    6cc8:	4b29      	ldr	r3, [pc, #164]	; (6d70 <update_cache+0xb0>)
	return _priq_run_best(curr_cpu_runq());
    6cca:	4618      	mov	r0, r3
    6ccc:	f004 fa37 	bl	b13e <z_priq_mq_best>
    6cd0:	4603      	mov	r3, r0
	struct k_thread *thread = runq_best();
    6cd2:	60bb      	str	r3, [r7, #8]
	return (thread != NULL) ? thread : _current_cpu->idle_thread;
    6cd4:	68bb      	ldr	r3, [r7, #8]
    6cd6:	2b00      	cmp	r3, #0
    6cd8:	d102      	bne.n	6ce0 <update_cache+0x20>
    6cda:	4b26      	ldr	r3, [pc, #152]	; (6d74 <update_cache+0xb4>)
    6cdc:	68db      	ldr	r3, [r3, #12]
    6cde:	e000      	b.n	6ce2 <update_cache+0x22>
    6ce0:	68bb      	ldr	r3, [r7, #8]
	struct k_thread *thread = next_up();
    6ce2:	617b      	str	r3, [r7, #20]
    6ce4:	697b      	ldr	r3, [r7, #20]
    6ce6:	613b      	str	r3, [r7, #16]
    6ce8:	687b      	ldr	r3, [r7, #4]
    6cea:	60fb      	str	r3, [r7, #12]
	if (preempt_ok != 0) {
    6cec:	68fb      	ldr	r3, [r7, #12]
    6cee:	2b00      	cmp	r3, #0
    6cf0:	d001      	beq.n	6cf6 <update_cache+0x36>
		return true;
    6cf2:	2301      	movs	r3, #1
    6cf4:	e022      	b.n	6d3c <update_cache+0x7c>
	if (z_is_thread_prevented_from_running(_current)) {
    6cf6:	4b1f      	ldr	r3, [pc, #124]	; (6d74 <update_cache+0xb4>)
    6cf8:	689b      	ldr	r3, [r3, #8]
    6cfa:	4618      	mov	r0, r3
    6cfc:	f003 ff5e 	bl	abbc <z_is_thread_prevented_from_running>
    6d00:	4603      	mov	r3, r0
    6d02:	2b00      	cmp	r3, #0
    6d04:	d001      	beq.n	6d0a <update_cache+0x4a>
		return true;
    6d06:	2301      	movs	r3, #1
    6d08:	e018      	b.n	6d3c <update_cache+0x7c>
	    && z_is_thread_timeout_active(thread)) {
    6d0a:	6938      	ldr	r0, [r7, #16]
    6d0c:	f003 ff6a 	bl	abe4 <z_is_thread_timeout_active>
    6d10:	4603      	mov	r3, r0
	if (IS_ENABLED(CONFIG_SWAP_NONATOMIC)
    6d12:	2b00      	cmp	r3, #0
    6d14:	d001      	beq.n	6d1a <update_cache+0x5a>
		return true;
    6d16:	2301      	movs	r3, #1
    6d18:	e010      	b.n	6d3c <update_cache+0x7c>
	if (is_preempt(_current) || is_metairq(thread)) {
    6d1a:	4b16      	ldr	r3, [pc, #88]	; (6d74 <update_cache+0xb4>)
    6d1c:	689b      	ldr	r3, [r3, #8]
    6d1e:	4618      	mov	r0, r3
    6d20:	f004 f893 	bl	ae4a <is_preempt>
    6d24:	4603      	mov	r3, r0
    6d26:	2b00      	cmp	r3, #0
    6d28:	d105      	bne.n	6d36 <update_cache+0x76>
    6d2a:	6938      	ldr	r0, [r7, #16]
    6d2c:	f004 f89d 	bl	ae6a <is_metairq>
    6d30:	4603      	mov	r3, r0
    6d32:	2b00      	cmp	r3, #0
    6d34:	d001      	beq.n	6d3a <update_cache+0x7a>
		return true;
    6d36:	2301      	movs	r3, #1
    6d38:	e000      	b.n	6d3c <update_cache+0x7c>
	return false;
    6d3a:	2300      	movs	r3, #0
	if (should_preempt(thread, preempt_ok)) {
    6d3c:	2b00      	cmp	r3, #0
    6d3e:	d00e      	beq.n	6d5e <update_cache+0x9e>
		if (thread != _current) {
    6d40:	4b0c      	ldr	r3, [pc, #48]	; (6d74 <update_cache+0xb4>)
    6d42:	689b      	ldr	r3, [r3, #8]
    6d44:	697a      	ldr	r2, [r7, #20]
    6d46:	429a      	cmp	r2, r3
    6d48:	d002      	beq.n	6d50 <update_cache+0x90>
			z_reset_time_slice(thread);
    6d4a:	6978      	ldr	r0, [r7, #20]
    6d4c:	f7ff fe7c 	bl	6a48 <z_reset_time_slice>
		update_metairq_preempt(thread);
    6d50:	6978      	ldr	r0, [r7, #20]
    6d52:	f004 f8bf 	bl	aed4 <update_metairq_preempt>
		_kernel.ready_q.cache = thread;
    6d56:	4a07      	ldr	r2, [pc, #28]	; (6d74 <update_cache+0xb4>)
    6d58:	697b      	ldr	r3, [r7, #20]
    6d5a:	6193      	str	r3, [r2, #24]
}
    6d5c:	e003      	b.n	6d66 <update_cache+0xa6>
		_kernel.ready_q.cache = _current;
    6d5e:	4b05      	ldr	r3, [pc, #20]	; (6d74 <update_cache+0xb4>)
    6d60:	689b      	ldr	r3, [r3, #8]
    6d62:	4a04      	ldr	r2, [pc, #16]	; (6d74 <update_cache+0xb4>)
    6d64:	6193      	str	r3, [r2, #24]
}
    6d66:	bf00      	nop
    6d68:	3718      	adds	r7, #24
    6d6a:	46bd      	mov	sp, r7
    6d6c:	bd80      	pop	{r7, pc}
    6d6e:	bf00      	nop
    6d70:	20000768 	.word	0x20000768
    6d74:	2000074c 	.word	0x2000074c

00006d78 <ready_thread>:
{
    6d78:	b580      	push	{r7, lr}
    6d7a:	b088      	sub	sp, #32
    6d7c:	af00      	add	r7, sp, #0
    6d7e:	6078      	str	r0, [r7, #4]
	if (!z_is_thread_queued(thread) && z_is_thread_ready(thread)) {
    6d80:	6878      	ldr	r0, [r7, #4]
    6d82:	f003 ff8e 	bl	aca2 <z_is_thread_queued>
    6d86:	4603      	mov	r3, r0
    6d88:	f083 0301 	eor.w	r3, r3, #1
    6d8c:	b2db      	uxtb	r3, r3
    6d8e:	2b00      	cmp	r3, #0
    6d90:	d03d      	beq.n	6e0e <ready_thread+0x96>
    6d92:	6878      	ldr	r0, [r7, #4]
    6d94:	f003 ff3f 	bl	ac16 <z_is_thread_ready>
    6d98:	4603      	mov	r3, r0
    6d9a:	2b00      	cmp	r3, #0
    6d9c:	d037      	beq.n	6e0e <ready_thread+0x96>
    6d9e:	687b      	ldr	r3, [r7, #4]
    6da0:	61fb      	str	r3, [r7, #28]
	thread->base.thread_state |= _THREAD_QUEUED;
    6da2:	69fb      	ldr	r3, [r7, #28]
    6da4:	7b5b      	ldrb	r3, [r3, #13]
    6da6:	f063 037f 	orn	r3, r3, #127	; 0x7f
    6daa:	b2da      	uxtb	r2, r3
    6dac:	69fb      	ldr	r3, [r7, #28]
    6dae:	735a      	strb	r2, [r3, #13]
	if (should_queue_thread(thread)) {
    6db0:	69f8      	ldr	r0, [r7, #28]
    6db2:	f004 f87f 	bl	aeb4 <should_queue_thread>
    6db6:	4603      	mov	r3, r0
    6db8:	2b00      	cmp	r3, #0
    6dba:	d022      	beq.n	6e02 <ready_thread+0x8a>
    6dbc:	69fb      	ldr	r3, [r7, #28]
    6dbe:	61bb      	str	r3, [r7, #24]
    6dc0:	69bb      	ldr	r3, [r7, #24]
    6dc2:	617b      	str	r3, [r7, #20]
	return &_kernel.ready_q.runq;
    6dc4:	4b14      	ldr	r3, [pc, #80]	; (6e18 <ready_thread+0xa0>)
    6dc6:	613b      	str	r3, [r7, #16]
    6dc8:	69bb      	ldr	r3, [r7, #24]
    6dca:	60fb      	str	r3, [r7, #12]
	int priority_bit = thread->base.prio - K_HIGHEST_THREAD_PRIO;
    6dcc:	68fb      	ldr	r3, [r7, #12]
    6dce:	f993 300e 	ldrsb.w	r3, [r3, #14]
    6dd2:	3310      	adds	r3, #16
    6dd4:	60bb      	str	r3, [r7, #8]
	sys_dlist_append(&pq->queues[priority_bit], &thread->base.qnode_dlist);
    6dd6:	68bb      	ldr	r3, [r7, #8]
    6dd8:	00db      	lsls	r3, r3, #3
    6dda:	693a      	ldr	r2, [r7, #16]
    6ddc:	4413      	add	r3, r2
    6dde:	68fa      	ldr	r2, [r7, #12]
    6de0:	4611      	mov	r1, r2
    6de2:	4618      	mov	r0, r3
    6de4:	f003 fe43 	bl	aa6e <sys_dlist_append>
	pq->bitmask |= BIT(priority_bit);
    6de8:	693b      	ldr	r3, [r7, #16]
    6dea:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    6dee:	2101      	movs	r1, #1
    6df0:	68bb      	ldr	r3, [r7, #8]
    6df2:	fa01 f303 	lsl.w	r3, r1, r3
    6df6:	431a      	orrs	r2, r3
    6df8:	693b      	ldr	r3, [r7, #16]
    6dfa:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
}
    6dfe:	bf00      	nop
}
    6e00:	bf00      	nop
}
    6e02:	bf00      	nop
		update_cache(0);
    6e04:	2000      	movs	r0, #0
    6e06:	f7ff ff5b 	bl	6cc0 <update_cache>
		flag_ipi();
    6e0a:	f004 f876 	bl	aefa <flag_ipi>
}
    6e0e:	bf00      	nop
    6e10:	3720      	adds	r7, #32
    6e12:	46bd      	mov	sp, r7
    6e14:	bd80      	pop	{r7, pc}
    6e16:	bf00      	nop
    6e18:	20000768 	.word	0x20000768

00006e1c <z_ready_thread>:
{
    6e1c:	b580      	push	{r7, lr}
    6e1e:	b08c      	sub	sp, #48	; 0x30
    6e20:	af00      	add	r7, sp, #0
    6e22:	6078      	str	r0, [r7, #4]
	LOCKED(&sched_spinlock) {
    6e24:	2300      	movs	r3, #0
    6e26:	61bb      	str	r3, [r7, #24]
    6e28:	4b19      	ldr	r3, [pc, #100]	; (6e90 <z_ready_thread+0x74>)
    6e2a:	62fb      	str	r3, [r7, #44]	; 0x2c
	__asm__ volatile(
    6e2c:	f04f 0320 	mov.w	r3, #32
    6e30:	f3ef 8211 	mrs	r2, BASEPRI
    6e34:	f383 8812 	msr	BASEPRI_MAX, r3
    6e38:	f3bf 8f6f 	isb	sy
    6e3c:	62ba      	str	r2, [r7, #40]	; 0x28
    6e3e:	627b      	str	r3, [r7, #36]	; 0x24
	return key;
    6e40:	6abb      	ldr	r3, [r7, #40]	; 0x28
	k.key = arch_irq_lock();
    6e42:	60fb      	str	r3, [r7, #12]
	return k;
    6e44:	68fb      	ldr	r3, [r7, #12]
    6e46:	617b      	str	r3, [r7, #20]
    6e48:	e01a      	b.n	6e80 <z_ready_thread+0x64>
		if (!thread_active_elsewhere(thread)) {
    6e4a:	6878      	ldr	r0, [r7, #4]
    6e4c:	f004 f84b 	bl	aee6 <thread_active_elsewhere>
    6e50:	4603      	mov	r3, r0
    6e52:	f083 0301 	eor.w	r3, r3, #1
    6e56:	b2db      	uxtb	r3, r3
    6e58:	2b00      	cmp	r3, #0
    6e5a:	d002      	beq.n	6e62 <z_ready_thread+0x46>
			ready_thread(thread);
    6e5c:	6878      	ldr	r0, [r7, #4]
    6e5e:	f7ff ff8b 	bl	6d78 <ready_thread>
    6e62:	4b0b      	ldr	r3, [pc, #44]	; (6e90 <z_ready_thread+0x74>)
    6e64:	623b      	str	r3, [r7, #32]
    6e66:	697b      	ldr	r3, [r7, #20]
    6e68:	613b      	str	r3, [r7, #16]
	arch_irq_unlock(key.key);
    6e6a:	693b      	ldr	r3, [r7, #16]
    6e6c:	61fb      	str	r3, [r7, #28]
	__asm__ volatile(
    6e6e:	69fb      	ldr	r3, [r7, #28]
    6e70:	f383 8811 	msr	BASEPRI, r3
    6e74:	f3bf 8f6f 	isb	sy
}
    6e78:	bf00      	nop
}
    6e7a:	bf00      	nop
	LOCKED(&sched_spinlock) {
    6e7c:	2301      	movs	r3, #1
    6e7e:	61bb      	str	r3, [r7, #24]
    6e80:	69bb      	ldr	r3, [r7, #24]
    6e82:	2b00      	cmp	r3, #0
    6e84:	d0e1      	beq.n	6e4a <z_ready_thread+0x2e>
}
    6e86:	bf00      	nop
    6e88:	bf00      	nop
    6e8a:	3730      	adds	r7, #48	; 0x30
    6e8c:	46bd      	mov	sp, r7
    6e8e:	bd80      	pop	{r7, pc}
    6e90:	20000870 	.word	0x20000870

00006e94 <z_sched_start>:
{
    6e94:	b580      	push	{r7, lr}
    6e96:	b08a      	sub	sp, #40	; 0x28
    6e98:	af00      	add	r7, sp, #0
    6e9a:	6078      	str	r0, [r7, #4]
    6e9c:	4b17      	ldr	r3, [pc, #92]	; (6efc <z_sched_start+0x68>)
    6e9e:	627b      	str	r3, [r7, #36]	; 0x24
	__asm__ volatile(
    6ea0:	f04f 0320 	mov.w	r3, #32
    6ea4:	f3ef 8211 	mrs	r2, BASEPRI
    6ea8:	f383 8812 	msr	BASEPRI_MAX, r3
    6eac:	f3bf 8f6f 	isb	sy
    6eb0:	623a      	str	r2, [r7, #32]
    6eb2:	61fb      	str	r3, [r7, #28]
	return key;
    6eb4:	6a3b      	ldr	r3, [r7, #32]
	k.key = arch_irq_lock();
    6eb6:	60bb      	str	r3, [r7, #8]
	return k;
    6eb8:	68bb      	ldr	r3, [r7, #8]
    6eba:	613b      	str	r3, [r7, #16]
	if (z_has_thread_started(thread)) {
    6ebc:	6878      	ldr	r0, [r7, #4]
    6ebe:	f003 feca 	bl	ac56 <z_has_thread_started>
    6ec2:	4603      	mov	r3, r0
    6ec4:	2b00      	cmp	r3, #0
    6ec6:	d00c      	beq.n	6ee2 <z_sched_start+0x4e>
    6ec8:	4b0c      	ldr	r3, [pc, #48]	; (6efc <z_sched_start+0x68>)
    6eca:	61bb      	str	r3, [r7, #24]
    6ecc:	693b      	ldr	r3, [r7, #16]
    6ece:	60fb      	str	r3, [r7, #12]
	arch_irq_unlock(key.key);
    6ed0:	68fb      	ldr	r3, [r7, #12]
    6ed2:	617b      	str	r3, [r7, #20]
	__asm__ volatile(
    6ed4:	697b      	ldr	r3, [r7, #20]
    6ed6:	f383 8811 	msr	BASEPRI, r3
    6eda:	f3bf 8f6f 	isb	sy
}
    6ede:	bf00      	nop
}
    6ee0:	e009      	b.n	6ef6 <z_sched_start+0x62>
	z_mark_thread_as_started(thread);
    6ee2:	6878      	ldr	r0, [r7, #4]
    6ee4:	f003 ff0a 	bl	acfc <z_mark_thread_as_started>
	ready_thread(thread);
    6ee8:	6878      	ldr	r0, [r7, #4]
    6eea:	f7ff ff45 	bl	6d78 <ready_thread>
	z_reschedule(&sched_spinlock, key);
    6eee:	6939      	ldr	r1, [r7, #16]
    6ef0:	4802      	ldr	r0, [pc, #8]	; (6efc <z_sched_start+0x68>)
    6ef2:	f004 f8bd 	bl	b070 <z_reschedule>
}
    6ef6:	3728      	adds	r7, #40	; 0x28
    6ef8:	46bd      	mov	sp, r7
    6efa:	bd80      	pop	{r7, pc}
    6efc:	20000870 	.word	0x20000870

00006f00 <z_impl_k_thread_suspend>:
{
    6f00:	b580      	push	{r7, lr}
    6f02:	b092      	sub	sp, #72	; 0x48
    6f04:	af00      	add	r7, sp, #0
    6f06:	6078      	str	r0, [r7, #4]
	(void)z_abort_thread_timeout(thread);
    6f08:	6878      	ldr	r0, [r7, #4]
    6f0a:	f003 fe34 	bl	ab76 <z_abort_thread_timeout>
	LOCKED(&sched_spinlock) {
    6f0e:	2300      	movs	r3, #0
    6f10:	61bb      	str	r3, [r7, #24]
    6f12:	4b3d      	ldr	r3, [pc, #244]	; (7008 <z_impl_k_thread_suspend+0x108>)
    6f14:	647b      	str	r3, [r7, #68]	; 0x44
	__asm__ volatile(
    6f16:	f04f 0320 	mov.w	r3, #32
    6f1a:	f3ef 8211 	mrs	r2, BASEPRI
    6f1e:	f383 8812 	msr	BASEPRI_MAX, r3
    6f22:	f3bf 8f6f 	isb	sy
    6f26:	643a      	str	r2, [r7, #64]	; 0x40
    6f28:	63fb      	str	r3, [r7, #60]	; 0x3c
	return key;
    6f2a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
	k.key = arch_irq_lock();
    6f2c:	60fb      	str	r3, [r7, #12]
	return k;
    6f2e:	68fb      	ldr	r3, [r7, #12]
    6f30:	617b      	str	r3, [r7, #20]
    6f32:	e05b      	b.n	6fec <z_impl_k_thread_suspend+0xec>
		if (z_is_thread_queued(thread)) {
    6f34:	6878      	ldr	r0, [r7, #4]
    6f36:	f003 feb4 	bl	aca2 <z_is_thread_queued>
    6f3a:	4603      	mov	r3, r0
    6f3c:	2b00      	cmp	r3, #0
    6f3e:	d038      	beq.n	6fb2 <z_impl_k_thread_suspend+0xb2>
    6f40:	687b      	ldr	r3, [r7, #4]
    6f42:	63bb      	str	r3, [r7, #56]	; 0x38
	thread->base.thread_state &= ~_THREAD_QUEUED;
    6f44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    6f46:	7b5b      	ldrb	r3, [r3, #13]
    6f48:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    6f4c:	b2da      	uxtb	r2, r3
    6f4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    6f50:	735a      	strb	r2, [r3, #13]
	if (should_queue_thread(thread)) {
    6f52:	6bb8      	ldr	r0, [r7, #56]	; 0x38
    6f54:	f003 ffae 	bl	aeb4 <should_queue_thread>
    6f58:	4603      	mov	r3, r0
    6f5a:	2b00      	cmp	r3, #0
    6f5c:	d028      	beq.n	6fb0 <z_impl_k_thread_suspend+0xb0>
    6f5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    6f60:	637b      	str	r3, [r7, #52]	; 0x34
    6f62:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    6f64:	633b      	str	r3, [r7, #48]	; 0x30
	return &_kernel.ready_q.runq;
    6f66:	4b29      	ldr	r3, [pc, #164]	; (700c <z_impl_k_thread_suspend+0x10c>)
    6f68:	62fb      	str	r3, [r7, #44]	; 0x2c
    6f6a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    6f6c:	62bb      	str	r3, [r7, #40]	; 0x28
	int priority_bit = thread->base.prio - K_HIGHEST_THREAD_PRIO;
    6f6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
    6f70:	f993 300e 	ldrsb.w	r3, [r3, #14]
    6f74:	3310      	adds	r3, #16
    6f76:	627b      	str	r3, [r7, #36]	; 0x24
	sys_dlist_remove(&thread->base.qnode_dlist);
    6f78:	6abb      	ldr	r3, [r7, #40]	; 0x28
    6f7a:	4618      	mov	r0, r3
    6f7c:	f003 fda9 	bl	aad2 <sys_dlist_remove>
	if (sys_dlist_is_empty(&pq->queues[priority_bit])) {
    6f80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    6f82:	00db      	lsls	r3, r3, #3
    6f84:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    6f86:	4413      	add	r3, r2
    6f88:	4618      	mov	r0, r3
    6f8a:	f003 fd27 	bl	a9dc <sys_dlist_is_empty>
    6f8e:	4603      	mov	r3, r0
    6f90:	2b00      	cmp	r3, #0
    6f92:	d00b      	beq.n	6fac <z_impl_k_thread_suspend+0xac>
		pq->bitmask &= ~BIT(priority_bit);
    6f94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    6f96:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    6f9a:	2101      	movs	r1, #1
    6f9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    6f9e:	fa01 f303 	lsl.w	r3, r1, r3
    6fa2:	43db      	mvns	r3, r3
    6fa4:	401a      	ands	r2, r3
    6fa6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    6fa8:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
}
    6fac:	bf00      	nop
}
    6fae:	bf00      	nop
}
    6fb0:	bf00      	nop
		z_mark_thread_as_suspended(thread);
    6fb2:	6878      	ldr	r0, [r7, #4]
    6fb4:	f003 fe82 	bl	acbc <z_mark_thread_as_suspended>
		update_cache(thread == _current);
    6fb8:	4b15      	ldr	r3, [pc, #84]	; (7010 <z_impl_k_thread_suspend+0x110>)
    6fba:	689b      	ldr	r3, [r3, #8]
    6fbc:	687a      	ldr	r2, [r7, #4]
    6fbe:	429a      	cmp	r2, r3
    6fc0:	bf0c      	ite	eq
    6fc2:	2301      	moveq	r3, #1
    6fc4:	2300      	movne	r3, #0
    6fc6:	b2db      	uxtb	r3, r3
    6fc8:	4618      	mov	r0, r3
    6fca:	f7ff fe79 	bl	6cc0 <update_cache>
    6fce:	4b0e      	ldr	r3, [pc, #56]	; (7008 <z_impl_k_thread_suspend+0x108>)
    6fd0:	623b      	str	r3, [r7, #32]
    6fd2:	697b      	ldr	r3, [r7, #20]
    6fd4:	613b      	str	r3, [r7, #16]
	arch_irq_unlock(key.key);
    6fd6:	693b      	ldr	r3, [r7, #16]
    6fd8:	61fb      	str	r3, [r7, #28]
	__asm__ volatile(
    6fda:	69fb      	ldr	r3, [r7, #28]
    6fdc:	f383 8811 	msr	BASEPRI, r3
    6fe0:	f3bf 8f6f 	isb	sy
}
    6fe4:	bf00      	nop
}
    6fe6:	bf00      	nop
	LOCKED(&sched_spinlock) {
    6fe8:	2301      	movs	r3, #1
    6fea:	61bb      	str	r3, [r7, #24]
    6fec:	69bb      	ldr	r3, [r7, #24]
    6fee:	2b00      	cmp	r3, #0
    6ff0:	d0a0      	beq.n	6f34 <z_impl_k_thread_suspend+0x34>
	if (thread == _current) {
    6ff2:	4b07      	ldr	r3, [pc, #28]	; (7010 <z_impl_k_thread_suspend+0x110>)
    6ff4:	689b      	ldr	r3, [r3, #8]
    6ff6:	687a      	ldr	r2, [r7, #4]
    6ff8:	429a      	cmp	r2, r3
    6ffa:	d101      	bne.n	7000 <z_impl_k_thread_suspend+0x100>
		z_reschedule_unlocked();
    6ffc:	f003 fdc9 	bl	ab92 <z_reschedule_unlocked>
}
    7000:	bf00      	nop
    7002:	3748      	adds	r7, #72	; 0x48
    7004:	46bd      	mov	sp, r7
    7006:	bd80      	pop	{r7, pc}
    7008:	20000870 	.word	0x20000870
    700c:	20000768 	.word	0x20000768
    7010:	2000074c 	.word	0x2000074c

00007014 <unready_thread>:
{
    7014:	b580      	push	{r7, lr}
    7016:	b088      	sub	sp, #32
    7018:	af00      	add	r7, sp, #0
    701a:	6078      	str	r0, [r7, #4]
	if (z_is_thread_queued(thread)) {
    701c:	6878      	ldr	r0, [r7, #4]
    701e:	f003 fe40 	bl	aca2 <z_is_thread_queued>
    7022:	4603      	mov	r3, r0
    7024:	2b00      	cmp	r3, #0
    7026:	d038      	beq.n	709a <unready_thread+0x86>
    7028:	687b      	ldr	r3, [r7, #4]
    702a:	61fb      	str	r3, [r7, #28]
	thread->base.thread_state &= ~_THREAD_QUEUED;
    702c:	69fb      	ldr	r3, [r7, #28]
    702e:	7b5b      	ldrb	r3, [r3, #13]
    7030:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    7034:	b2da      	uxtb	r2, r3
    7036:	69fb      	ldr	r3, [r7, #28]
    7038:	735a      	strb	r2, [r3, #13]
	if (should_queue_thread(thread)) {
    703a:	69f8      	ldr	r0, [r7, #28]
    703c:	f003 ff3a 	bl	aeb4 <should_queue_thread>
    7040:	4603      	mov	r3, r0
    7042:	2b00      	cmp	r3, #0
    7044:	d028      	beq.n	7098 <unready_thread+0x84>
    7046:	69fb      	ldr	r3, [r7, #28]
    7048:	61bb      	str	r3, [r7, #24]
    704a:	69bb      	ldr	r3, [r7, #24]
    704c:	617b      	str	r3, [r7, #20]
	return &_kernel.ready_q.runq;
    704e:	4b1a      	ldr	r3, [pc, #104]	; (70b8 <unready_thread+0xa4>)
    7050:	613b      	str	r3, [r7, #16]
    7052:	69bb      	ldr	r3, [r7, #24]
    7054:	60fb      	str	r3, [r7, #12]
	int priority_bit = thread->base.prio - K_HIGHEST_THREAD_PRIO;
    7056:	68fb      	ldr	r3, [r7, #12]
    7058:	f993 300e 	ldrsb.w	r3, [r3, #14]
    705c:	3310      	adds	r3, #16
    705e:	60bb      	str	r3, [r7, #8]
	sys_dlist_remove(&thread->base.qnode_dlist);
    7060:	68fb      	ldr	r3, [r7, #12]
    7062:	4618      	mov	r0, r3
    7064:	f003 fd35 	bl	aad2 <sys_dlist_remove>
	if (sys_dlist_is_empty(&pq->queues[priority_bit])) {
    7068:	68bb      	ldr	r3, [r7, #8]
    706a:	00db      	lsls	r3, r3, #3
    706c:	693a      	ldr	r2, [r7, #16]
    706e:	4413      	add	r3, r2
    7070:	4618      	mov	r0, r3
    7072:	f003 fcb3 	bl	a9dc <sys_dlist_is_empty>
    7076:	4603      	mov	r3, r0
    7078:	2b00      	cmp	r3, #0
    707a:	d00b      	beq.n	7094 <unready_thread+0x80>
		pq->bitmask &= ~BIT(priority_bit);
    707c:	693b      	ldr	r3, [r7, #16]
    707e:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    7082:	2101      	movs	r1, #1
    7084:	68bb      	ldr	r3, [r7, #8]
    7086:	fa01 f303 	lsl.w	r3, r1, r3
    708a:	43db      	mvns	r3, r3
    708c:	401a      	ands	r2, r3
    708e:	693b      	ldr	r3, [r7, #16]
    7090:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
}
    7094:	bf00      	nop
}
    7096:	bf00      	nop
}
    7098:	bf00      	nop
	update_cache(thread == _current);
    709a:	4b08      	ldr	r3, [pc, #32]	; (70bc <unready_thread+0xa8>)
    709c:	689b      	ldr	r3, [r3, #8]
    709e:	687a      	ldr	r2, [r7, #4]
    70a0:	429a      	cmp	r2, r3
    70a2:	bf0c      	ite	eq
    70a4:	2301      	moveq	r3, #1
    70a6:	2300      	movne	r3, #0
    70a8:	b2db      	uxtb	r3, r3
    70aa:	4618      	mov	r0, r3
    70ac:	f7ff fe08 	bl	6cc0 <update_cache>
}
    70b0:	bf00      	nop
    70b2:	3720      	adds	r7, #32
    70b4:	46bd      	mov	sp, r7
    70b6:	bd80      	pop	{r7, pc}
    70b8:	20000768 	.word	0x20000768
    70bc:	2000074c 	.word	0x2000074c

000070c0 <pend>:
{
    70c0:	b580      	push	{r7, lr}
    70c2:	b08e      	sub	sp, #56	; 0x38
    70c4:	af00      	add	r7, sp, #0
    70c6:	60f8      	str	r0, [r7, #12]
    70c8:	60b9      	str	r1, [r7, #8]
    70ca:	e9c7 2300 	strd	r2, r3, [r7]
	LOCKED(&sched_spinlock) {
    70ce:	2300      	movs	r3, #0
    70d0:	623b      	str	r3, [r7, #32]
    70d2:	4b18      	ldr	r3, [pc, #96]	; (7134 <pend+0x74>)
    70d4:	637b      	str	r3, [r7, #52]	; 0x34
	__asm__ volatile(
    70d6:	f04f 0320 	mov.w	r3, #32
    70da:	f3ef 8211 	mrs	r2, BASEPRI
    70de:	f383 8812 	msr	BASEPRI_MAX, r3
    70e2:	f3bf 8f6f 	isb	sy
    70e6:	633a      	str	r2, [r7, #48]	; 0x30
    70e8:	62fb      	str	r3, [r7, #44]	; 0x2c
	return key;
    70ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
	k.key = arch_irq_lock();
    70ec:	617b      	str	r3, [r7, #20]
	return k;
    70ee:	697b      	ldr	r3, [r7, #20]
    70f0:	61fb      	str	r3, [r7, #28]
    70f2:	e012      	b.n	711a <pend+0x5a>
		add_to_waitq_locked(thread, wait_q);
    70f4:	68b9      	ldr	r1, [r7, #8]
    70f6:	68f8      	ldr	r0, [r7, #12]
    70f8:	f003 ff10 	bl	af1c <add_to_waitq_locked>
    70fc:	4b0d      	ldr	r3, [pc, #52]	; (7134 <pend+0x74>)
    70fe:	62bb      	str	r3, [r7, #40]	; 0x28
    7100:	69fb      	ldr	r3, [r7, #28]
    7102:	61bb      	str	r3, [r7, #24]
	arch_irq_unlock(key.key);
    7104:	69bb      	ldr	r3, [r7, #24]
    7106:	627b      	str	r3, [r7, #36]	; 0x24
	__asm__ volatile(
    7108:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    710a:	f383 8811 	msr	BASEPRI, r3
    710e:	f3bf 8f6f 	isb	sy
}
    7112:	bf00      	nop
}
    7114:	bf00      	nop
	LOCKED(&sched_spinlock) {
    7116:	2301      	movs	r3, #1
    7118:	623b      	str	r3, [r7, #32]
    711a:	6a3b      	ldr	r3, [r7, #32]
    711c:	2b00      	cmp	r3, #0
    711e:	d0e9      	beq.n	70f4 <pend+0x34>
	add_thread_timeout(thread, timeout);
    7120:	e9d7 2300 	ldrd	r2, r3, [r7]
    7124:	68f8      	ldr	r0, [r7, #12]
    7126:	f003 ff4d 	bl	afc4 <add_thread_timeout>
}
    712a:	bf00      	nop
    712c:	3738      	adds	r7, #56	; 0x38
    712e:	46bd      	mov	sp, r7
    7130:	bd80      	pop	{r7, pc}
    7132:	bf00      	nop
    7134:	20000870 	.word	0x20000870

00007138 <z_unpend_thread_no_timeout>:
{
    7138:	b580      	push	{r7, lr}
    713a:	b08c      	sub	sp, #48	; 0x30
    713c:	af00      	add	r7, sp, #0
    713e:	6078      	str	r0, [r7, #4]
	LOCKED(&sched_spinlock) {
    7140:	2300      	movs	r3, #0
    7142:	61bb      	str	r3, [r7, #24]
    7144:	4b15      	ldr	r3, [pc, #84]	; (719c <z_unpend_thread_no_timeout+0x64>)
    7146:	62fb      	str	r3, [r7, #44]	; 0x2c
	__asm__ volatile(
    7148:	f04f 0320 	mov.w	r3, #32
    714c:	f3ef 8211 	mrs	r2, BASEPRI
    7150:	f383 8812 	msr	BASEPRI_MAX, r3
    7154:	f3bf 8f6f 	isb	sy
    7158:	62ba      	str	r2, [r7, #40]	; 0x28
    715a:	627b      	str	r3, [r7, #36]	; 0x24
	return key;
    715c:	6abb      	ldr	r3, [r7, #40]	; 0x28
	k.key = arch_irq_lock();
    715e:	60fb      	str	r3, [r7, #12]
	return k;
    7160:	68fb      	ldr	r3, [r7, #12]
    7162:	617b      	str	r3, [r7, #20]
    7164:	e011      	b.n	718a <z_unpend_thread_no_timeout+0x52>
		unpend_thread_no_timeout(thread);
    7166:	6878      	ldr	r0, [r7, #4]
    7168:	f003 ff45 	bl	aff6 <unpend_thread_no_timeout>
    716c:	4b0b      	ldr	r3, [pc, #44]	; (719c <z_unpend_thread_no_timeout+0x64>)
    716e:	623b      	str	r3, [r7, #32]
    7170:	697b      	ldr	r3, [r7, #20]
    7172:	613b      	str	r3, [r7, #16]
	arch_irq_unlock(key.key);
    7174:	693b      	ldr	r3, [r7, #16]
    7176:	61fb      	str	r3, [r7, #28]
	__asm__ volatile(
    7178:	69fb      	ldr	r3, [r7, #28]
    717a:	f383 8811 	msr	BASEPRI, r3
    717e:	f3bf 8f6f 	isb	sy
}
    7182:	bf00      	nop
}
    7184:	bf00      	nop
	LOCKED(&sched_spinlock) {
    7186:	2301      	movs	r3, #1
    7188:	61bb      	str	r3, [r7, #24]
    718a:	69bb      	ldr	r3, [r7, #24]
    718c:	2b00      	cmp	r3, #0
    718e:	d0ea      	beq.n	7166 <z_unpend_thread_no_timeout+0x2e>
}
    7190:	bf00      	nop
    7192:	bf00      	nop
    7194:	3730      	adds	r7, #48	; 0x30
    7196:	46bd      	mov	sp, r7
    7198:	bd80      	pop	{r7, pc}
    719a:	bf00      	nop
    719c:	20000870 	.word	0x20000870

000071a0 <z_thread_timeout>:
{
    71a0:	b580      	push	{r7, lr}
    71a2:	b08e      	sub	sp, #56	; 0x38
    71a4:	af00      	add	r7, sp, #0
    71a6:	6078      	str	r0, [r7, #4]
	struct k_thread *thread = CONTAINER_OF(timeout,
    71a8:	687b      	ldr	r3, [r7, #4]
    71aa:	3b18      	subs	r3, #24
    71ac:	637b      	str	r3, [r7, #52]	; 0x34
	LOCKED(&sched_spinlock) {
    71ae:	2300      	movs	r3, #0
    71b0:	61bb      	str	r3, [r7, #24]
    71b2:	4b2b      	ldr	r3, [pc, #172]	; (7260 <z_thread_timeout+0xc0>)
    71b4:	62fb      	str	r3, [r7, #44]	; 0x2c
	__asm__ volatile(
    71b6:	f04f 0320 	mov.w	r3, #32
    71ba:	f3ef 8211 	mrs	r2, BASEPRI
    71be:	f383 8812 	msr	BASEPRI_MAX, r3
    71c2:	f3bf 8f6f 	isb	sy
    71c6:	62ba      	str	r2, [r7, #40]	; 0x28
    71c8:	627b      	str	r3, [r7, #36]	; 0x24
	return key;
    71ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
	k.key = arch_irq_lock();
    71cc:	60fb      	str	r3, [r7, #12]
	return k;
    71ce:	68fb      	ldr	r3, [r7, #12]
    71d0:	617b      	str	r3, [r7, #20]
    71d2:	e03c      	b.n	724e <z_thread_timeout+0xae>
		bool killed = ((thread->base.thread_state & _THREAD_DEAD) ||
    71d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    71d6:	7b5b      	ldrb	r3, [r3, #13]
    71d8:	f003 0308 	and.w	r3, r3, #8
    71dc:	2b00      	cmp	r3, #0
    71de:	d105      	bne.n	71ec <z_thread_timeout+0x4c>
			       (thread->base.thread_state & _THREAD_ABORTING));
    71e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    71e2:	7b5b      	ldrb	r3, [r3, #13]
    71e4:	f003 0320 	and.w	r3, r3, #32
		bool killed = ((thread->base.thread_state & _THREAD_DEAD) ||
    71e8:	2b00      	cmp	r3, #0
    71ea:	d001      	beq.n	71f0 <z_thread_timeout+0x50>
    71ec:	2301      	movs	r3, #1
    71ee:	e000      	b.n	71f2 <z_thread_timeout+0x52>
    71f0:	2300      	movs	r3, #0
    71f2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    71f6:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
    71fa:	f003 0301 	and.w	r3, r3, #1
    71fe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
		if (!killed) {
    7202:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
    7206:	f083 0301 	eor.w	r3, r3, #1
    720a:	b2db      	uxtb	r3, r3
    720c:	2b00      	cmp	r3, #0
    720e:	d00f      	beq.n	7230 <z_thread_timeout+0x90>
			if (thread->base.pended_on != NULL) {
    7210:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    7212:	689b      	ldr	r3, [r3, #8]
    7214:	2b00      	cmp	r3, #0
    7216:	d002      	beq.n	721e <z_thread_timeout+0x7e>
				unpend_thread_no_timeout(thread);
    7218:	6b78      	ldr	r0, [r7, #52]	; 0x34
    721a:	f003 feec 	bl	aff6 <unpend_thread_no_timeout>
			z_mark_thread_as_started(thread);
    721e:	6b78      	ldr	r0, [r7, #52]	; 0x34
    7220:	f003 fd6c 	bl	acfc <z_mark_thread_as_started>
			z_mark_thread_as_not_suspended(thread);
    7224:	6b78      	ldr	r0, [r7, #52]	; 0x34
    7226:	f003 fd59 	bl	acdc <z_mark_thread_as_not_suspended>
			ready_thread(thread);
    722a:	6b78      	ldr	r0, [r7, #52]	; 0x34
    722c:	f7ff fda4 	bl	6d78 <ready_thread>
    7230:	4b0b      	ldr	r3, [pc, #44]	; (7260 <z_thread_timeout+0xc0>)
    7232:	623b      	str	r3, [r7, #32]
    7234:	697b      	ldr	r3, [r7, #20]
    7236:	613b      	str	r3, [r7, #16]
	arch_irq_unlock(key.key);
    7238:	693b      	ldr	r3, [r7, #16]
    723a:	61fb      	str	r3, [r7, #28]
	__asm__ volatile(
    723c:	69fb      	ldr	r3, [r7, #28]
    723e:	f383 8811 	msr	BASEPRI, r3
    7242:	f3bf 8f6f 	isb	sy
}
    7246:	bf00      	nop
}
    7248:	bf00      	nop
	LOCKED(&sched_spinlock) {
    724a:	2301      	movs	r3, #1
    724c:	61bb      	str	r3, [r7, #24]
    724e:	69bb      	ldr	r3, [r7, #24]
    7250:	2b00      	cmp	r3, #0
    7252:	d0bf      	beq.n	71d4 <z_thread_timeout+0x34>
}
    7254:	bf00      	nop
    7256:	bf00      	nop
    7258:	3738      	adds	r7, #56	; 0x38
    725a:	46bd      	mov	sp, r7
    725c:	bd80      	pop	{r7, pc}
    725e:	bf00      	nop
    7260:	20000870 	.word	0x20000870

00007264 <z_pend_curr>:
{
    7264:	b580      	push	{r7, lr}
    7266:	b084      	sub	sp, #16
    7268:	af00      	add	r7, sp, #0
    726a:	60f8      	str	r0, [r7, #12]
    726c:	60b9      	str	r1, [r7, #8]
    726e:	607a      	str	r2, [r7, #4]
	pending_current = _current;
    7270:	4b09      	ldr	r3, [pc, #36]	; (7298 <z_pend_curr+0x34>)
    7272:	689b      	ldr	r3, [r3, #8]
    7274:	4a09      	ldr	r2, [pc, #36]	; (729c <z_pend_curr+0x38>)
    7276:	6013      	str	r3, [r2, #0]
	pend(_current, wait_q, timeout);
    7278:	4b07      	ldr	r3, [pc, #28]	; (7298 <z_pend_curr+0x34>)
    727a:	6898      	ldr	r0, [r3, #8]
    727c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
    7280:	6879      	ldr	r1, [r7, #4]
    7282:	f7ff ff1d 	bl	70c0 <pend>
	return z_swap(lock, key);
    7286:	68b9      	ldr	r1, [r7, #8]
    7288:	68f8      	ldr	r0, [r7, #12]
    728a:	f7ff fac7 	bl	681c <z_swap>
    728e:	4603      	mov	r3, r0
}
    7290:	4618      	mov	r0, r3
    7292:	3710      	adds	r7, #16
    7294:	46bd      	mov	sp, r7
    7296:	bd80      	pop	{r7, pc}
    7298:	2000074c 	.word	0x2000074c
    729c:	2000087c 	.word	0x2000087c

000072a0 <z_unpend1_no_timeout>:
{
    72a0:	b580      	push	{r7, lr}
    72a2:	b08c      	sub	sp, #48	; 0x30
    72a4:	af00      	add	r7, sp, #0
    72a6:	6078      	str	r0, [r7, #4]
	struct k_thread *thread = NULL;
    72a8:	2300      	movs	r3, #0
    72aa:	62fb      	str	r3, [r7, #44]	; 0x2c
	LOCKED(&sched_spinlock) {
    72ac:	2300      	movs	r3, #0
    72ae:	617b      	str	r3, [r7, #20]
    72b0:	4b19      	ldr	r3, [pc, #100]	; (7318 <z_unpend1_no_timeout+0x78>)
    72b2:	62bb      	str	r3, [r7, #40]	; 0x28
	__asm__ volatile(
    72b4:	f04f 0320 	mov.w	r3, #32
    72b8:	f3ef 8211 	mrs	r2, BASEPRI
    72bc:	f383 8812 	msr	BASEPRI_MAX, r3
    72c0:	f3bf 8f6f 	isb	sy
    72c4:	627a      	str	r2, [r7, #36]	; 0x24
    72c6:	623b      	str	r3, [r7, #32]
	return key;
    72c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	k.key = arch_irq_lock();
    72ca:	60bb      	str	r3, [r7, #8]
	return k;
    72cc:	68bb      	ldr	r3, [r7, #8]
    72ce:	613b      	str	r3, [r7, #16]
    72d0:	e019      	b.n	7306 <z_unpend1_no_timeout+0x66>
		thread = _priq_wait_best(&wait_q->waitq);
    72d2:	687b      	ldr	r3, [r7, #4]
    72d4:	4618      	mov	r0, r3
    72d6:	f003 ff1e 	bl	b116 <z_priq_dumb_best>
    72da:	62f8      	str	r0, [r7, #44]	; 0x2c
		if (thread != NULL) {
    72dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    72de:	2b00      	cmp	r3, #0
    72e0:	d002      	beq.n	72e8 <z_unpend1_no_timeout+0x48>
			unpend_thread_no_timeout(thread);
    72e2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
    72e4:	f003 fe87 	bl	aff6 <unpend_thread_no_timeout>
    72e8:	4b0b      	ldr	r3, [pc, #44]	; (7318 <z_unpend1_no_timeout+0x78>)
    72ea:	61fb      	str	r3, [r7, #28]
    72ec:	693b      	ldr	r3, [r7, #16]
    72ee:	60fb      	str	r3, [r7, #12]
	arch_irq_unlock(key.key);
    72f0:	68fb      	ldr	r3, [r7, #12]
    72f2:	61bb      	str	r3, [r7, #24]
	__asm__ volatile(
    72f4:	69bb      	ldr	r3, [r7, #24]
    72f6:	f383 8811 	msr	BASEPRI, r3
    72fa:	f3bf 8f6f 	isb	sy
}
    72fe:	bf00      	nop
}
    7300:	bf00      	nop
	LOCKED(&sched_spinlock) {
    7302:	2301      	movs	r3, #1
    7304:	617b      	str	r3, [r7, #20]
    7306:	697b      	ldr	r3, [r7, #20]
    7308:	2b00      	cmp	r3, #0
    730a:	d0e2      	beq.n	72d2 <z_unpend1_no_timeout+0x32>
	return thread;
    730c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
    730e:	4618      	mov	r0, r3
    7310:	3730      	adds	r7, #48	; 0x30
    7312:	46bd      	mov	sp, r7
    7314:	bd80      	pop	{r7, pc}
    7316:	bf00      	nop
    7318:	20000870 	.word	0x20000870

0000731c <z_unpend_first_thread>:
{
    731c:	b580      	push	{r7, lr}
    731e:	b08c      	sub	sp, #48	; 0x30
    7320:	af00      	add	r7, sp, #0
    7322:	6078      	str	r0, [r7, #4]
	struct k_thread *thread = NULL;
    7324:	2300      	movs	r3, #0
    7326:	62fb      	str	r3, [r7, #44]	; 0x2c
	LOCKED(&sched_spinlock) {
    7328:	2300      	movs	r3, #0
    732a:	617b      	str	r3, [r7, #20]
    732c:	4b1a      	ldr	r3, [pc, #104]	; (7398 <z_unpend_first_thread+0x7c>)
    732e:	62bb      	str	r3, [r7, #40]	; 0x28
	__asm__ volatile(
    7330:	f04f 0320 	mov.w	r3, #32
    7334:	f3ef 8211 	mrs	r2, BASEPRI
    7338:	f383 8812 	msr	BASEPRI_MAX, r3
    733c:	f3bf 8f6f 	isb	sy
    7340:	627a      	str	r2, [r7, #36]	; 0x24
    7342:	623b      	str	r3, [r7, #32]
	return key;
    7344:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	k.key = arch_irq_lock();
    7346:	60bb      	str	r3, [r7, #8]
	return k;
    7348:	68bb      	ldr	r3, [r7, #8]
    734a:	613b      	str	r3, [r7, #16]
    734c:	e01c      	b.n	7388 <z_unpend_first_thread+0x6c>
		thread = _priq_wait_best(&wait_q->waitq);
    734e:	687b      	ldr	r3, [r7, #4]
    7350:	4618      	mov	r0, r3
    7352:	f003 fee0 	bl	b116 <z_priq_dumb_best>
    7356:	62f8      	str	r0, [r7, #44]	; 0x2c
		if (thread != NULL) {
    7358:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    735a:	2b00      	cmp	r3, #0
    735c:	d005      	beq.n	736a <z_unpend_first_thread+0x4e>
			unpend_thread_no_timeout(thread);
    735e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
    7360:	f003 fe49 	bl	aff6 <unpend_thread_no_timeout>
			(void)z_abort_thread_timeout(thread);
    7364:	6af8      	ldr	r0, [r7, #44]	; 0x2c
    7366:	f003 fc06 	bl	ab76 <z_abort_thread_timeout>
    736a:	4b0b      	ldr	r3, [pc, #44]	; (7398 <z_unpend_first_thread+0x7c>)
    736c:	61fb      	str	r3, [r7, #28]
    736e:	693b      	ldr	r3, [r7, #16]
    7370:	60fb      	str	r3, [r7, #12]
	arch_irq_unlock(key.key);
    7372:	68fb      	ldr	r3, [r7, #12]
    7374:	61bb      	str	r3, [r7, #24]
	__asm__ volatile(
    7376:	69bb      	ldr	r3, [r7, #24]
    7378:	f383 8811 	msr	BASEPRI, r3
    737c:	f3bf 8f6f 	isb	sy
}
    7380:	bf00      	nop
}
    7382:	bf00      	nop
	LOCKED(&sched_spinlock) {
    7384:	2301      	movs	r3, #1
    7386:	617b      	str	r3, [r7, #20]
    7388:	697b      	ldr	r3, [r7, #20]
    738a:	2b00      	cmp	r3, #0
    738c:	d0df      	beq.n	734e <z_unpend_first_thread+0x32>
	return thread;
    738e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
    7390:	4618      	mov	r0, r3
    7392:	3730      	adds	r7, #48	; 0x30
    7394:	46bd      	mov	sp, r7
    7396:	bd80      	pop	{r7, pc}
    7398:	20000870 	.word	0x20000870

0000739c <need_swap>:
{
    739c:	b480      	push	{r7}
    739e:	b083      	sub	sp, #12
    73a0:	af00      	add	r7, sp, #0
	new_thread = _kernel.ready_q.cache;
    73a2:	4b08      	ldr	r3, [pc, #32]	; (73c4 <need_swap+0x28>)
    73a4:	699b      	ldr	r3, [r3, #24]
    73a6:	607b      	str	r3, [r7, #4]
	return new_thread != _current;
    73a8:	4b06      	ldr	r3, [pc, #24]	; (73c4 <need_swap+0x28>)
    73aa:	689b      	ldr	r3, [r3, #8]
    73ac:	687a      	ldr	r2, [r7, #4]
    73ae:	429a      	cmp	r2, r3
    73b0:	bf14      	ite	ne
    73b2:	2301      	movne	r3, #1
    73b4:	2300      	moveq	r3, #0
    73b6:	b2db      	uxtb	r3, r3
}
    73b8:	4618      	mov	r0, r3
    73ba:	370c      	adds	r7, #12
    73bc:	46bd      	mov	sp, r7
    73be:	bc80      	pop	{r7}
    73c0:	4770      	bx	lr
    73c2:	bf00      	nop
    73c4:	2000074c 	.word	0x2000074c

000073c8 <k_sched_lock>:
{
    73c8:	b580      	push	{r7, lr}
    73ca:	b08a      	sub	sp, #40	; 0x28
    73cc:	af00      	add	r7, sp, #0
	LOCKED(&sched_spinlock) {
    73ce:	2300      	movs	r3, #0
    73d0:	613b      	str	r3, [r7, #16]
    73d2:	4b15      	ldr	r3, [pc, #84]	; (7428 <k_sched_lock+0x60>)
    73d4:	627b      	str	r3, [r7, #36]	; 0x24
	__asm__ volatile(
    73d6:	f04f 0320 	mov.w	r3, #32
    73da:	f3ef 8211 	mrs	r2, BASEPRI
    73de:	f383 8812 	msr	BASEPRI_MAX, r3
    73e2:	f3bf 8f6f 	isb	sy
    73e6:	623a      	str	r2, [r7, #32]
    73e8:	61fb      	str	r3, [r7, #28]
	return key;
    73ea:	6a3b      	ldr	r3, [r7, #32]
	k.key = arch_irq_lock();
    73ec:	607b      	str	r3, [r7, #4]
	return k;
    73ee:	687b      	ldr	r3, [r7, #4]
    73f0:	60fb      	str	r3, [r7, #12]
    73f2:	e010      	b.n	7416 <k_sched_lock+0x4e>
		z_sched_lock();
    73f4:	f7ff f98a 	bl	670c <z_sched_lock>
    73f8:	4b0b      	ldr	r3, [pc, #44]	; (7428 <k_sched_lock+0x60>)
    73fa:	61bb      	str	r3, [r7, #24]
    73fc:	68fb      	ldr	r3, [r7, #12]
    73fe:	60bb      	str	r3, [r7, #8]
	arch_irq_unlock(key.key);
    7400:	68bb      	ldr	r3, [r7, #8]
    7402:	617b      	str	r3, [r7, #20]
	__asm__ volatile(
    7404:	697b      	ldr	r3, [r7, #20]
    7406:	f383 8811 	msr	BASEPRI, r3
    740a:	f3bf 8f6f 	isb	sy
}
    740e:	bf00      	nop
}
    7410:	bf00      	nop
	LOCKED(&sched_spinlock) {
    7412:	2301      	movs	r3, #1
    7414:	613b      	str	r3, [r7, #16]
    7416:	693b      	ldr	r3, [r7, #16]
    7418:	2b00      	cmp	r3, #0
    741a:	d0eb      	beq.n	73f4 <k_sched_lock+0x2c>
}
    741c:	bf00      	nop
    741e:	bf00      	nop
    7420:	3728      	adds	r7, #40	; 0x28
    7422:	46bd      	mov	sp, r7
    7424:	bd80      	pop	{r7, pc}
    7426:	bf00      	nop
    7428:	20000870 	.word	0x20000870

0000742c <k_sched_unlock>:
{
    742c:	b580      	push	{r7, lr}
    742e:	b094      	sub	sp, #80	; 0x50
    7430:	af06      	add	r7, sp, #24
	LOCKED(&sched_spinlock) {
    7432:	2300      	movs	r3, #0
    7434:	617b      	str	r3, [r7, #20]
    7436:	4b2b      	ldr	r3, [pc, #172]	; (74e4 <k_sched_unlock+0xb8>)
    7438:	62bb      	str	r3, [r7, #40]	; 0x28
	__asm__ volatile(
    743a:	f04f 0320 	mov.w	r3, #32
    743e:	f3ef 8211 	mrs	r2, BASEPRI
    7442:	f383 8812 	msr	BASEPRI_MAX, r3
    7446:	f3bf 8f6f 	isb	sy
    744a:	62fa      	str	r2, [r7, #44]	; 0x2c
    744c:	633b      	str	r3, [r7, #48]	; 0x30
	return key;
    744e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	k.key = arch_irq_lock();
    7450:	60bb      	str	r3, [r7, #8]
	return k;
    7452:	68bb      	ldr	r3, [r7, #8]
    7454:	613b      	str	r3, [r7, #16]
    7456:	e017      	b.n	7488 <k_sched_unlock+0x5c>
		++_current->base.sched_locked;
    7458:	4b23      	ldr	r3, [pc, #140]	; (74e8 <k_sched_unlock+0xbc>)
    745a:	689b      	ldr	r3, [r3, #8]
    745c:	7bda      	ldrb	r2, [r3, #15]
    745e:	3201      	adds	r2, #1
    7460:	b2d2      	uxtb	r2, r2
    7462:	73da      	strb	r2, [r3, #15]
		update_cache(0);
    7464:	2000      	movs	r0, #0
    7466:	f7ff fc2b 	bl	6cc0 <update_cache>
    746a:	4b1e      	ldr	r3, [pc, #120]	; (74e4 <k_sched_unlock+0xb8>)
    746c:	637b      	str	r3, [r7, #52]	; 0x34
    746e:	693b      	ldr	r3, [r7, #16]
    7470:	60fb      	str	r3, [r7, #12]
	arch_irq_unlock(key.key);
    7472:	68fb      	ldr	r3, [r7, #12]
    7474:	61bb      	str	r3, [r7, #24]
	__asm__ volatile(
    7476:	69bb      	ldr	r3, [r7, #24]
    7478:	f383 8811 	msr	BASEPRI, r3
    747c:	f3bf 8f6f 	isb	sy
}
    7480:	bf00      	nop
}
    7482:	bf00      	nop
	LOCKED(&sched_spinlock) {
    7484:	2301      	movs	r3, #1
    7486:	617b      	str	r3, [r7, #20]
    7488:	697b      	ldr	r3, [r7, #20]
    748a:	2b00      	cmp	r3, #0
    748c:	d0e4      	beq.n	7458 <k_sched_unlock+0x2c>
	LOG_DBG("scheduler unlocked (%p:%d)",
    748e:	2303      	movs	r3, #3
    7490:	2b03      	cmp	r3, #3
    7492:	d920      	bls.n	74d6 <k_sched_unlock+0xaa>
    7494:	f003 fb34 	bl	ab00 <k_is_user_context>
    7498:	4603      	mov	r3, r0
    749a:	77fb      	strb	r3, [r7, #31]
    749c:	2300      	movs	r3, #0
    749e:	607b      	str	r3, [r7, #4]
    74a0:	4b12      	ldr	r3, [pc, #72]	; (74ec <k_sched_unlock+0xc0>)
    74a2:	681b      	ldr	r3, [r3, #0]
    74a4:	627b      	str	r3, [r7, #36]	; 0x24
    74a6:	4b10      	ldr	r3, [pc, #64]	; (74e8 <k_sched_unlock+0xbc>)
    74a8:	689b      	ldr	r3, [r3, #8]
    74aa:	4a0f      	ldr	r2, [pc, #60]	; (74e8 <k_sched_unlock+0xbc>)
    74ac:	6892      	ldr	r2, [r2, #8]
    74ae:	7bd2      	ldrb	r2, [r2, #15]
    74b0:	9205      	str	r2, [sp, #20]
    74b2:	9304      	str	r3, [sp, #16]
    74b4:	4b0e      	ldr	r3, [pc, #56]	; (74f0 <k_sched_unlock+0xc4>)
    74b6:	9303      	str	r3, [sp, #12]
    74b8:	4b0e      	ldr	r3, [pc, #56]	; (74f4 <k_sched_unlock+0xc8>)
    74ba:	9302      	str	r3, [sp, #8]
    74bc:	2308      	movs	r3, #8
    74be:	9301      	str	r3, [sp, #4]
    74c0:	2300      	movs	r3, #0
    74c2:	9300      	str	r3, [sp, #0]
    74c4:	2300      	movs	r3, #0
    74c6:	2204      	movs	r2, #4
    74c8:	6a79      	ldr	r1, [r7, #36]	; 0x24
    74ca:	2000      	movs	r0, #0
    74cc:	f003 fc84 	bl	add8 <z_log_msg2_runtime_create>
    74d0:	2300      	movs	r3, #0
    74d2:	623b      	str	r3, [r7, #32]
    74d4:	e000      	b.n	74d8 <k_sched_unlock+0xac>
    74d6:	bf00      	nop
	z_reschedule_unlocked();
    74d8:	f003 fb5b 	bl	ab92 <z_reschedule_unlocked>
}
    74dc:	bf00      	nop
    74de:	3738      	adds	r7, #56	; 0x38
    74e0:	46bd      	mov	sp, r7
    74e2:	bd80      	pop	{r7, pc}
    74e4:	20000870 	.word	0x20000870
    74e8:	2000074c 	.word	0x2000074c
    74ec:	20000048 	.word	0x20000048
    74f0:	0000c074 	.word	0x0000c074
    74f4:	0000bef4 	.word	0x0000bef4

000074f8 <z_swap_next_thread>:
{
    74f8:	b480      	push	{r7}
    74fa:	af00      	add	r7, sp, #0
	return _kernel.ready_q.cache;
    74fc:	4b02      	ldr	r3, [pc, #8]	; (7508 <z_swap_next_thread+0x10>)
    74fe:	699b      	ldr	r3, [r3, #24]
}
    7500:	4618      	mov	r0, r3
    7502:	46bd      	mov	sp, r7
    7504:	bc80      	pop	{r7}
    7506:	4770      	bx	lr
    7508:	2000074c 	.word	0x2000074c

0000750c <z_sched_init>:
	sys_dlist_init(&rq->runq);
#endif
}

void z_sched_init(void)
{
    750c:	b580      	push	{r7, lr}
    750e:	af00      	add	r7, sp, #0
#ifdef CONFIG_SCHED_CPU_MASK_PIN_ONLY
	for (int i = 0; i < CONFIG_MP_NUM_CPUS; i++) {
		init_ready_q(&_kernel.cpus[i].ready_q);
	}
#else
	init_ready_q(&_kernel.ready_q);
    7510:	4804      	ldr	r0, [pc, #16]	; (7524 <z_sched_init+0x18>)
    7512:	f003 fe3a 	bl	b18a <init_ready_q>
#endif

#ifdef CONFIG_TIMESLICING
	k_sched_time_slice_set(CONFIG_TIMESLICE_SIZE,
    7516:	2100      	movs	r1, #0
    7518:	2000      	movs	r0, #0
    751a:	f7ff fab9 	bl	6a90 <k_sched_time_slice_set>
		CONFIG_TIMESLICE_PRIORITY);
#endif
}
    751e:	bf00      	nop
    7520:	bd80      	pop	{r7, pc}
    7522:	bf00      	nop
    7524:	20000764 	.word	0x20000764

00007528 <z_impl_k_yield>:
	return !(k_is_pre_kernel() || k_is_in_isr() ||
		 z_is_idle_thread_object(_current));
}

void z_impl_k_yield(void)
{
    7528:	b580      	push	{r7, lr}
    752a:	b092      	sub	sp, #72	; 0x48
    752c:	af00      	add	r7, sp, #0
    752e:	4b44      	ldr	r3, [pc, #272]	; (7640 <z_impl_k_yield+0x118>)
    7530:	647b      	str	r3, [r7, #68]	; 0x44
	__asm__ volatile(
    7532:	f04f 0320 	mov.w	r3, #32
    7536:	f3ef 8211 	mrs	r2, BASEPRI
    753a:	f383 8812 	msr	BASEPRI_MAX, r3
    753e:	f3bf 8f6f 	isb	sy
    7542:	643a      	str	r2, [r7, #64]	; 0x40
    7544:	63fb      	str	r3, [r7, #60]	; 0x3c
	return key;
    7546:	6c3b      	ldr	r3, [r7, #64]	; 0x40
	k.key = arch_irq_lock();
    7548:	607b      	str	r3, [r7, #4]
	return k;
    754a:	687b      	ldr	r3, [r7, #4]
    754c:	60bb      	str	r3, [r7, #8]

	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if (!IS_ENABLED(CONFIG_SMP) ||
	    z_is_thread_queued(_current)) {
		dequeue_thread(_current);
    754e:	4b3d      	ldr	r3, [pc, #244]	; (7644 <z_impl_k_yield+0x11c>)
    7550:	689b      	ldr	r3, [r3, #8]
    7552:	623b      	str	r3, [r7, #32]
	thread->base.thread_state &= ~_THREAD_QUEUED;
    7554:	6a3b      	ldr	r3, [r7, #32]
    7556:	7b5b      	ldrb	r3, [r3, #13]
    7558:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    755c:	b2da      	uxtb	r2, r3
    755e:	6a3b      	ldr	r3, [r7, #32]
    7560:	735a      	strb	r2, [r3, #13]
	if (should_queue_thread(thread)) {
    7562:	6a38      	ldr	r0, [r7, #32]
    7564:	f003 fca6 	bl	aeb4 <should_queue_thread>
    7568:	4603      	mov	r3, r0
    756a:	2b00      	cmp	r3, #0
    756c:	d028      	beq.n	75c0 <z_impl_k_yield+0x98>
    756e:	6a3b      	ldr	r3, [r7, #32]
    7570:	61fb      	str	r3, [r7, #28]
    7572:	69fb      	ldr	r3, [r7, #28]
    7574:	61bb      	str	r3, [r7, #24]
	return &_kernel.ready_q.runq;
    7576:	4b34      	ldr	r3, [pc, #208]	; (7648 <z_impl_k_yield+0x120>)
    7578:	617b      	str	r3, [r7, #20]
    757a:	69fb      	ldr	r3, [r7, #28]
    757c:	613b      	str	r3, [r7, #16]
	int priority_bit = thread->base.prio - K_HIGHEST_THREAD_PRIO;
    757e:	693b      	ldr	r3, [r7, #16]
    7580:	f993 300e 	ldrsb.w	r3, [r3, #14]
    7584:	3310      	adds	r3, #16
    7586:	60fb      	str	r3, [r7, #12]
	sys_dlist_remove(&thread->base.qnode_dlist);
    7588:	693b      	ldr	r3, [r7, #16]
    758a:	4618      	mov	r0, r3
    758c:	f003 faa1 	bl	aad2 <sys_dlist_remove>
	if (sys_dlist_is_empty(&pq->queues[priority_bit])) {
    7590:	68fb      	ldr	r3, [r7, #12]
    7592:	00db      	lsls	r3, r3, #3
    7594:	697a      	ldr	r2, [r7, #20]
    7596:	4413      	add	r3, r2
    7598:	4618      	mov	r0, r3
    759a:	f003 fa1f 	bl	a9dc <sys_dlist_is_empty>
    759e:	4603      	mov	r3, r0
    75a0:	2b00      	cmp	r3, #0
    75a2:	d00b      	beq.n	75bc <z_impl_k_yield+0x94>
		pq->bitmask &= ~BIT(priority_bit);
    75a4:	697b      	ldr	r3, [r7, #20]
    75a6:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    75aa:	2101      	movs	r1, #1
    75ac:	68fb      	ldr	r3, [r7, #12]
    75ae:	fa01 f303 	lsl.w	r3, r1, r3
    75b2:	43db      	mvns	r3, r3
    75b4:	401a      	ands	r2, r3
    75b6:	697b      	ldr	r3, [r7, #20]
    75b8:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
}
    75bc:	bf00      	nop
}
    75be:	bf00      	nop
}
    75c0:	bf00      	nop
	}
	queue_thread(_current);
    75c2:	4b20      	ldr	r3, [pc, #128]	; (7644 <z_impl_k_yield+0x11c>)
    75c4:	689b      	ldr	r3, [r3, #8]
    75c6:	63bb      	str	r3, [r7, #56]	; 0x38
	thread->base.thread_state |= _THREAD_QUEUED;
    75c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    75ca:	7b5b      	ldrb	r3, [r3, #13]
    75cc:	f063 037f 	orn	r3, r3, #127	; 0x7f
    75d0:	b2da      	uxtb	r2, r3
    75d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    75d4:	735a      	strb	r2, [r3, #13]
	if (should_queue_thread(thread)) {
    75d6:	6bb8      	ldr	r0, [r7, #56]	; 0x38
    75d8:	f003 fc6c 	bl	aeb4 <should_queue_thread>
    75dc:	4603      	mov	r3, r0
    75de:	2b00      	cmp	r3, #0
    75e0:	d022      	beq.n	7628 <z_impl_k_yield+0x100>
    75e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    75e4:	637b      	str	r3, [r7, #52]	; 0x34
    75e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    75e8:	633b      	str	r3, [r7, #48]	; 0x30
	return &_kernel.ready_q.runq;
    75ea:	4b17      	ldr	r3, [pc, #92]	; (7648 <z_impl_k_yield+0x120>)
    75ec:	62fb      	str	r3, [r7, #44]	; 0x2c
    75ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    75f0:	62bb      	str	r3, [r7, #40]	; 0x28
	int priority_bit = thread->base.prio - K_HIGHEST_THREAD_PRIO;
    75f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
    75f4:	f993 300e 	ldrsb.w	r3, [r3, #14]
    75f8:	3310      	adds	r3, #16
    75fa:	627b      	str	r3, [r7, #36]	; 0x24
	sys_dlist_append(&pq->queues[priority_bit], &thread->base.qnode_dlist);
    75fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    75fe:	00db      	lsls	r3, r3, #3
    7600:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    7602:	4413      	add	r3, r2
    7604:	6aba      	ldr	r2, [r7, #40]	; 0x28
    7606:	4611      	mov	r1, r2
    7608:	4618      	mov	r0, r3
    760a:	f003 fa30 	bl	aa6e <sys_dlist_append>
	pq->bitmask |= BIT(priority_bit);
    760e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    7610:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    7614:	2101      	movs	r1, #1
    7616:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    7618:	fa01 f303 	lsl.w	r3, r1, r3
    761c:	431a      	orrs	r2, r3
    761e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    7620:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
}
    7624:	bf00      	nop
}
    7626:	bf00      	nop
}
    7628:	bf00      	nop
	update_cache(1);
    762a:	2001      	movs	r0, #1
    762c:	f7ff fb48 	bl	6cc0 <update_cache>
	z_swap(&sched_spinlock, key);
    7630:	68b9      	ldr	r1, [r7, #8]
    7632:	4803      	ldr	r0, [pc, #12]	; (7640 <z_impl_k_yield+0x118>)
    7634:	f7ff f8f2 	bl	681c <z_swap>
}
    7638:	bf00      	nop
    763a:	3748      	adds	r7, #72	; 0x48
    763c:	46bd      	mov	sp, r7
    763e:	bd80      	pop	{r7, pc}
    7640:	20000870 	.word	0x20000870
    7644:	2000074c 	.word	0x2000074c
    7648:	20000768 	.word	0x20000768

0000764c <z_tick_sleep>:
}
#include <syscalls/k_yield_mrsh.c>
#endif

static int32_t z_tick_sleep(k_ticks_t ticks)
{
    764c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    7650:	b08b      	sub	sp, #44	; 0x2c
    7652:	af00      	add	r7, sp, #0
    7654:	e9c7 0100 	strd	r0, r1, [r7]
	 */
	LOG_DBG("thread %p for %u ticks", _current, ticks);
#endif

	/* wait of 0 ms is treated as a 'yield' */
	if (ticks == 0) {
    7658:	e9d7 0100 	ldrd	r0, r1, [r7]
    765c:	4301      	orrs	r1, r0
    765e:	d103      	bne.n	7668 <z_tick_sleep+0x1c>
		k_yield();
    7660:	f003 fa60 	bl	ab24 <k_yield>
		return 0;
    7664:	2300      	movs	r3, #0
    7666:	e05f      	b.n	7728 <z_tick_sleep+0xdc>
	}

	k_timeout_t timeout = Z_TIMEOUT_TICKS(ticks);
    7668:	e9d7 0100 	ldrd	r0, r1, [r7]
    766c:	e9c7 0104 	strd	r0, r1, [r7, #16]
	if (Z_TICK_ABS(ticks) <= 0) {
    7670:	e9d7 0100 	ldrd	r0, r1, [r7]
    7674:	f06f 0c01 	mvn.w	ip, #1
    7678:	f04f 36ff 	mov.w	r6, #4294967295
    767c:	ebbc 0200 	subs.w	r2, ip, r0
    7680:	eb66 0301 	sbc.w	r3, r6, r1
    7684:	2a01      	cmp	r2, #1
    7686:	f173 0300 	sbcs.w	r3, r3, #0
    768a:	da06      	bge.n	769a <z_tick_sleep+0x4e>
		expected_wakeup_ticks = ticks + sys_clock_tick_get_32();
    768c:	f003 fe98 	bl	b3c0 <sys_clock_tick_get_32>
    7690:	4602      	mov	r2, r0
    7692:	683b      	ldr	r3, [r7, #0]
    7694:	4413      	add	r3, r2
    7696:	627b      	str	r3, [r7, #36]	; 0x24
    7698:	e004      	b.n	76a4 <z_tick_sleep+0x58>
	} else {
		expected_wakeup_ticks = Z_TICK_ABS(ticks);
    769a:	683a      	ldr	r2, [r7, #0]
    769c:	f06f 0301 	mvn.w	r3, #1
    76a0:	1a9b      	subs	r3, r3, r2
    76a2:	627b      	str	r3, [r7, #36]	; 0x24
    76a4:	4b23      	ldr	r3, [pc, #140]	; (7734 <z_tick_sleep+0xe8>)
    76a6:	623b      	str	r3, [r7, #32]
	__asm__ volatile(
    76a8:	f04f 0320 	mov.w	r3, #32
    76ac:	f3ef 8211 	mrs	r2, BASEPRI
    76b0:	f383 8812 	msr	BASEPRI_MAX, r3
    76b4:	f3bf 8f6f 	isb	sy
    76b8:	61fa      	str	r2, [r7, #28]
    76ba:	61bb      	str	r3, [r7, #24]
	return key;
    76bc:	69fb      	ldr	r3, [r7, #28]
	k.key = arch_irq_lock();
    76be:	60bb      	str	r3, [r7, #8]
	return k;
    76c0:	68bb      	ldr	r3, [r7, #8]
    76c2:	60fb      	str	r3, [r7, #12]
	}

	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

#if defined(CONFIG_TIMESLICING) && defined(CONFIG_SWAP_NONATOMIC)
	pending_current = _current;
    76c4:	4b1c      	ldr	r3, [pc, #112]	; (7738 <z_tick_sleep+0xec>)
    76c6:	689b      	ldr	r3, [r3, #8]
    76c8:	4a1c      	ldr	r2, [pc, #112]	; (773c <z_tick_sleep+0xf0>)
    76ca:	6013      	str	r3, [r2, #0]
#endif
	unready_thread(_current);
    76cc:	4b1a      	ldr	r3, [pc, #104]	; (7738 <z_tick_sleep+0xec>)
    76ce:	689b      	ldr	r3, [r3, #8]
    76d0:	4618      	mov	r0, r3
    76d2:	f7ff fc9f 	bl	7014 <unready_thread>
	z_add_thread_timeout(_current, timeout);
    76d6:	4b18      	ldr	r3, [pc, #96]	; (7738 <z_tick_sleep+0xec>)
    76d8:	6899      	ldr	r1, [r3, #8]
    76da:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
    76de:	4608      	mov	r0, r1
    76e0:	f7fe ffee 	bl	66c0 <z_add_thread_timeout>
	z_mark_thread_as_suspended(_current);
    76e4:	4b14      	ldr	r3, [pc, #80]	; (7738 <z_tick_sleep+0xec>)
    76e6:	689b      	ldr	r3, [r3, #8]
    76e8:	4618      	mov	r0, r3
    76ea:	f003 fae7 	bl	acbc <z_mark_thread_as_suspended>

	(void)z_swap(&sched_spinlock, key);
    76ee:	68f9      	ldr	r1, [r7, #12]
    76f0:	4810      	ldr	r0, [pc, #64]	; (7734 <z_tick_sleep+0xe8>)
    76f2:	f7ff f893 	bl	681c <z_swap>

	__ASSERT(!z_is_thread_state_set(_current, _THREAD_SUSPENDED), "");

	ticks = (k_ticks_t)expected_wakeup_ticks - sys_clock_tick_get_32();
    76f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    76f8:	2200      	movs	r2, #0
    76fa:	4698      	mov	r8, r3
    76fc:	4691      	mov	r9, r2
    76fe:	f003 fe5f 	bl	b3c0 <sys_clock_tick_get_32>
    7702:	4603      	mov	r3, r0
    7704:	2200      	movs	r2, #0
    7706:	461c      	mov	r4, r3
    7708:	4615      	mov	r5, r2
    770a:	ebb8 0a04 	subs.w	sl, r8, r4
    770e:	eb69 0b05 	sbc.w	fp, r9, r5
    7712:	e9c7 ab00 	strd	sl, fp, [r7]
	if (ticks > 0) {
    7716:	e9d7 2300 	ldrd	r2, r3, [r7]
    771a:	2a01      	cmp	r2, #1
    771c:	f173 0300 	sbcs.w	r3, r3, #0
    7720:	db01      	blt.n	7726 <z_tick_sleep+0xda>
		return ticks;
    7722:	683b      	ldr	r3, [r7, #0]
    7724:	e000      	b.n	7728 <z_tick_sleep+0xdc>
	}
#endif

	return 0;
    7726:	2300      	movs	r3, #0
}
    7728:	4618      	mov	r0, r3
    772a:	372c      	adds	r7, #44	; 0x2c
    772c:	46bd      	mov	sp, r7
    772e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    7732:	bf00      	nop
    7734:	20000870 	.word	0x20000870
    7738:	2000074c 	.word	0x2000074c
    773c:	2000087c 	.word	0x2000087c

00007740 <z_impl_k_sleep>:

int32_t z_impl_k_sleep(k_timeout_t timeout)
{
    7740:	b5b0      	push	{r4, r5, r7, lr}
    7742:	b086      	sub	sp, #24
    7744:	af00      	add	r7, sp, #0
    7746:	e9c7 0100 	strd	r0, r1, [r7]
	__ASSERT(!arch_is_in_isr(), "");

	SYS_PORT_TRACING_FUNC_ENTER(k_thread, sleep, timeout);

	/* in case of K_FOREVER, we suspend */
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    774a:	e9d7 2300 	ldrd	r2, r3, [r7]
    774e:	f04f 30ff 	mov.w	r0, #4294967295
    7752:	f04f 31ff 	mov.w	r1, #4294967295
    7756:	428b      	cmp	r3, r1
    7758:	bf08      	it	eq
    775a:	4282      	cmpeq	r2, r0
    775c:	d107      	bne.n	776e <z_impl_k_sleep+0x2e>
		k_thread_suspend(_current);
    775e:	4b12      	ldr	r3, [pc, #72]	; (77a8 <z_impl_k_sleep+0x68>)
    7760:	689b      	ldr	r3, [r3, #8]
    7762:	4618      	mov	r0, r3
    7764:	f003 f9e4 	bl	ab30 <k_thread_suspend>

		SYS_PORT_TRACING_FUNC_EXIT(k_thread, sleep, timeout, (int32_t) K_TICKS_FOREVER);

		return (int32_t) K_TICKS_FOREVER;
    7768:	f04f 33ff 	mov.w	r3, #4294967295
    776c:	e018      	b.n	77a0 <z_impl_k_sleep+0x60>
	}

	ticks = timeout.ticks;
    776e:	e9d7 2300 	ldrd	r2, r3, [r7]
    7772:	e9c7 2304 	strd	r2, r3, [r7, #16]

	ticks = z_tick_sleep(ticks);
    7776:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
    777a:	f7ff ff67 	bl	764c <z_tick_sleep>
    777e:	4603      	mov	r3, r0
    7780:	17da      	asrs	r2, r3, #31
    7782:	461c      	mov	r4, r3
    7784:	4615      	mov	r5, r2
    7786:	e9c7 4504 	strd	r4, r5, [r7, #16]

	int32_t ret = k_ticks_to_ms_floor64(ticks);
    778a:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
    778e:	4610      	mov	r0, r2
    7790:	4619      	mov	r1, r3
    7792:	f7fe fd21 	bl	61d8 <k_ticks_to_ms_floor64>
    7796:	4602      	mov	r2, r0
    7798:	460b      	mov	r3, r1
    779a:	4613      	mov	r3, r2
    779c:	60fb      	str	r3, [r7, #12]

	SYS_PORT_TRACING_FUNC_EXIT(k_thread, sleep, timeout, ret);

	return ret;
    779e:	68fb      	ldr	r3, [r7, #12]
}
    77a0:	4618      	mov	r0, r3
    77a2:	3718      	adds	r7, #24
    77a4:	46bd      	mov	sp, r7
    77a6:	bdb0      	pop	{r4, r5, r7, pc}
    77a8:	2000074c 	.word	0x2000074c

000077ac <z_impl_z_current_get>:
}
#include <syscalls/k_wakeup_mrsh.c>
#endif

k_tid_t z_impl_z_current_get(void)
{
    77ac:	b480      	push	{r7}
    77ae:	b083      	sub	sp, #12
    77b0:	af00      	add	r7, sp, #0
	 * local interrupts when reading it.
	 */
	unsigned int k = arch_irq_lock();
#endif

	k_tid_t ret = _current_cpu->current;
    77b2:	4b04      	ldr	r3, [pc, #16]	; (77c4 <z_impl_z_current_get+0x18>)
    77b4:	689b      	ldr	r3, [r3, #8]
    77b6:	607b      	str	r3, [r7, #4]

#ifdef CONFIG_SMP
	arch_irq_unlock(k);
#endif
	return ret;
    77b8:	687b      	ldr	r3, [r7, #4]
}
    77ba:	4618      	mov	r0, r3
    77bc:	370c      	adds	r7, #12
    77be:	46bd      	mov	sp, r7
    77c0:	bc80      	pop	{r7}
    77c2:	4770      	bx	lr
    77c4:	2000074c 	.word	0x2000074c

000077c8 <end_thread>:
#ifdef CONFIG_CMSIS_RTOS_V1
extern void z_thread_cmsis_status_mask_clear(struct k_thread *thread);
#endif

static void end_thread(struct k_thread *thread)
{
    77c8:	b580      	push	{r7, lr}
    77ca:	b088      	sub	sp, #32
    77cc:	af00      	add	r7, sp, #0
    77ce:	6078      	str	r0, [r7, #4]
	/* We hold the lock, and the thread is known not to be running
	 * anywhere.
	 */
	if ((thread->base.thread_state & _THREAD_DEAD) == 0U) {
    77d0:	687b      	ldr	r3, [r7, #4]
    77d2:	7b5b      	ldrb	r3, [r3, #13]
    77d4:	f003 0308 	and.w	r3, r3, #8
    77d8:	2b00      	cmp	r3, #0
    77da:	d15e      	bne.n	789a <end_thread+0xd2>
		thread->base.thread_state |= _THREAD_DEAD;
    77dc:	687b      	ldr	r3, [r7, #4]
    77de:	7b5b      	ldrb	r3, [r3, #13]
    77e0:	f043 0308 	orr.w	r3, r3, #8
    77e4:	b2da      	uxtb	r2, r3
    77e6:	687b      	ldr	r3, [r7, #4]
    77e8:	735a      	strb	r2, [r3, #13]
		thread->base.thread_state &= ~_THREAD_ABORTING;
    77ea:	687b      	ldr	r3, [r7, #4]
    77ec:	7b5b      	ldrb	r3, [r3, #13]
    77ee:	f023 0320 	bic.w	r3, r3, #32
    77f2:	b2da      	uxtb	r2, r3
    77f4:	687b      	ldr	r3, [r7, #4]
    77f6:	735a      	strb	r2, [r3, #13]
		if (z_is_thread_queued(thread)) {
    77f8:	6878      	ldr	r0, [r7, #4]
    77fa:	f003 fa52 	bl	aca2 <z_is_thread_queued>
    77fe:	4603      	mov	r3, r0
    7800:	2b00      	cmp	r3, #0
    7802:	d038      	beq.n	7876 <end_thread+0xae>
    7804:	687b      	ldr	r3, [r7, #4]
    7806:	61fb      	str	r3, [r7, #28]
	thread->base.thread_state &= ~_THREAD_QUEUED;
    7808:	69fb      	ldr	r3, [r7, #28]
    780a:	7b5b      	ldrb	r3, [r3, #13]
    780c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    7810:	b2da      	uxtb	r2, r3
    7812:	69fb      	ldr	r3, [r7, #28]
    7814:	735a      	strb	r2, [r3, #13]
	if (should_queue_thread(thread)) {
    7816:	69f8      	ldr	r0, [r7, #28]
    7818:	f003 fb4c 	bl	aeb4 <should_queue_thread>
    781c:	4603      	mov	r3, r0
    781e:	2b00      	cmp	r3, #0
    7820:	d028      	beq.n	7874 <end_thread+0xac>
    7822:	69fb      	ldr	r3, [r7, #28]
    7824:	61bb      	str	r3, [r7, #24]
    7826:	69bb      	ldr	r3, [r7, #24]
    7828:	617b      	str	r3, [r7, #20]
	return &_kernel.ready_q.runq;
    782a:	4b1e      	ldr	r3, [pc, #120]	; (78a4 <end_thread+0xdc>)
    782c:	613b      	str	r3, [r7, #16]
    782e:	69bb      	ldr	r3, [r7, #24]
    7830:	60fb      	str	r3, [r7, #12]
	int priority_bit = thread->base.prio - K_HIGHEST_THREAD_PRIO;
    7832:	68fb      	ldr	r3, [r7, #12]
    7834:	f993 300e 	ldrsb.w	r3, [r3, #14]
    7838:	3310      	adds	r3, #16
    783a:	60bb      	str	r3, [r7, #8]
	sys_dlist_remove(&thread->base.qnode_dlist);
    783c:	68fb      	ldr	r3, [r7, #12]
    783e:	4618      	mov	r0, r3
    7840:	f003 f947 	bl	aad2 <sys_dlist_remove>
	if (sys_dlist_is_empty(&pq->queues[priority_bit])) {
    7844:	68bb      	ldr	r3, [r7, #8]
    7846:	00db      	lsls	r3, r3, #3
    7848:	693a      	ldr	r2, [r7, #16]
    784a:	4413      	add	r3, r2
    784c:	4618      	mov	r0, r3
    784e:	f003 f8c5 	bl	a9dc <sys_dlist_is_empty>
    7852:	4603      	mov	r3, r0
    7854:	2b00      	cmp	r3, #0
    7856:	d00b      	beq.n	7870 <end_thread+0xa8>
		pq->bitmask &= ~BIT(priority_bit);
    7858:	693b      	ldr	r3, [r7, #16]
    785a:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    785e:	2101      	movs	r1, #1
    7860:	68bb      	ldr	r3, [r7, #8]
    7862:	fa01 f303 	lsl.w	r3, r1, r3
    7866:	43db      	mvns	r3, r3
    7868:	401a      	ands	r2, r3
    786a:	693b      	ldr	r3, [r7, #16]
    786c:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
}
    7870:	bf00      	nop
}
    7872:	bf00      	nop
}
    7874:	bf00      	nop
			dequeue_thread(thread);
		}
		if (thread->base.pended_on != NULL) {
    7876:	687b      	ldr	r3, [r7, #4]
    7878:	689b      	ldr	r3, [r3, #8]
    787a:	2b00      	cmp	r3, #0
    787c:	d002      	beq.n	7884 <end_thread+0xbc>
			unpend_thread_no_timeout(thread);
    787e:	6878      	ldr	r0, [r7, #4]
    7880:	f003 fbb9 	bl	aff6 <unpend_thread_no_timeout>
		}
		(void)z_abort_thread_timeout(thread);
    7884:	6878      	ldr	r0, [r7, #4]
    7886:	f003 f976 	bl	ab76 <z_abort_thread_timeout>
		unpend_all(&thread->join_queue);
    788a:	687b      	ldr	r3, [r7, #4]
    788c:	3358      	adds	r3, #88	; 0x58
    788e:	4618      	mov	r0, r3
    7890:	f003 fc95 	bl	b1be <unpend_all>
		update_cache(1);
    7894:	2001      	movs	r0, #1
    7896:	f7ff fa13 	bl	6cc0 <update_cache>
		z_thread_perms_all_clear(thread);
		z_object_uninit(thread->stack_obj);
		z_object_uninit(thread);
#endif
	}
}
    789a:	bf00      	nop
    789c:	3720      	adds	r7, #32
    789e:	46bd      	mov	sp, r7
    78a0:	bd80      	pop	{r7, pc}
    78a2:	bf00      	nop
    78a4:	20000768 	.word	0x20000768

000078a8 <z_thread_abort>:

void z_thread_abort(struct k_thread *thread)
{
    78a8:	b580      	push	{r7, lr}
    78aa:	b092      	sub	sp, #72	; 0x48
    78ac:	af00      	add	r7, sp, #0
    78ae:	6078      	str	r0, [r7, #4]
    78b0:	4b33      	ldr	r3, [pc, #204]	; (7980 <z_thread_abort+0xd8>)
    78b2:	647b      	str	r3, [r7, #68]	; 0x44
	__asm__ volatile(
    78b4:	f04f 0320 	mov.w	r3, #32
    78b8:	f3ef 8211 	mrs	r2, BASEPRI
    78bc:	f383 8812 	msr	BASEPRI_MAX, r3
    78c0:	f3bf 8f6f 	isb	sy
    78c4:	643a      	str	r2, [r7, #64]	; 0x40
    78c6:	63fb      	str	r3, [r7, #60]	; 0x3c
	return key;
    78c8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
	k.key = arch_irq_lock();
    78ca:	60fb      	str	r3, [r7, #12]
	return k;
    78cc:	68fb      	ldr	r3, [r7, #12]
    78ce:	61fb      	str	r3, [r7, #28]
	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if ((thread->base.user_options & K_ESSENTIAL) != 0) {
    78d0:	687b      	ldr	r3, [r7, #4]
    78d2:	7b1b      	ldrb	r3, [r3, #12]
    78d4:	f003 0301 	and.w	r3, r3, #1
    78d8:	2b00      	cmp	r3, #0
    78da:	d013      	beq.n	7904 <z_thread_abort+0x5c>
    78dc:	4b28      	ldr	r3, [pc, #160]	; (7980 <z_thread_abort+0xd8>)
    78de:	63bb      	str	r3, [r7, #56]	; 0x38
    78e0:	69fb      	ldr	r3, [r7, #28]
    78e2:	613b      	str	r3, [r7, #16]
	arch_irq_unlock(key.key);
    78e4:	693b      	ldr	r3, [r7, #16]
    78e6:	637b      	str	r3, [r7, #52]	; 0x34
	__asm__ volatile(
    78e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    78ea:	f383 8811 	msr	BASEPRI, r3
    78ee:	f3bf 8f6f 	isb	sy
}
    78f2:	bf00      	nop
}
    78f4:	bf00      	nop
		k_spin_unlock(&sched_spinlock, key);
		__ASSERT(false, "aborting essential thread %p", thread);
		k_panic();
    78f6:	4040      	eors	r0, r0
    78f8:	f380 8811 	msr	BASEPRI, r0
    78fc:	f04f 0004 	mov.w	r0, #4
    7900:	df02      	svc	2
		return;
    7902:	e03a      	b.n	797a <z_thread_abort+0xd2>
	}

	if ((thread->base.thread_state & _THREAD_DEAD) != 0U) {
    7904:	687b      	ldr	r3, [r7, #4]
    7906:	7b5b      	ldrb	r3, [r3, #13]
    7908:	f003 0308 	and.w	r3, r3, #8
    790c:	2b00      	cmp	r3, #0
    790e:	d00d      	beq.n	792c <z_thread_abort+0x84>
    7910:	4b1b      	ldr	r3, [pc, #108]	; (7980 <z_thread_abort+0xd8>)
    7912:	633b      	str	r3, [r7, #48]	; 0x30
    7914:	69fb      	ldr	r3, [r7, #28]
    7916:	617b      	str	r3, [r7, #20]
	arch_irq_unlock(key.key);
    7918:	697b      	ldr	r3, [r7, #20]
    791a:	62fb      	str	r3, [r7, #44]	; 0x2c
	__asm__ volatile(
    791c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    791e:	f383 8811 	msr	BASEPRI, r3
    7922:	f3bf 8f6f 	isb	sy
}
    7926:	bf00      	nop
}
    7928:	bf00      	nop
		k_spin_unlock(&sched_spinlock, key);
		return;
    792a:	e026      	b.n	797a <z_thread_abort+0xd2>
			z_swap(&sched_spinlock, key);
		}
		return; /* lock has been released */
	}
#endif
	end_thread(thread);
    792c:	6878      	ldr	r0, [r7, #4]
    792e:	f7ff ff4b 	bl	77c8 <end_thread>
	if (thread == _current && !arch_is_in_isr()) {
    7932:	4b14      	ldr	r3, [pc, #80]	; (7984 <z_thread_abort+0xdc>)
    7934:	689b      	ldr	r3, [r3, #8]
    7936:	687a      	ldr	r2, [r7, #4]
    7938:	429a      	cmp	r2, r3
    793a:	d111      	bne.n	7960 <z_thread_abort+0xb8>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    793c:	f3ef 8305 	mrs	r3, IPSR
    7940:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
    7942:	6abb      	ldr	r3, [r7, #40]	; 0x28
	return (__get_IPSR()) ? (true) : (false);
    7944:	2b00      	cmp	r3, #0
    7946:	bf14      	ite	ne
    7948:	2301      	movne	r3, #1
    794a:	2300      	moveq	r3, #0
    794c:	b2db      	uxtb	r3, r3
    794e:	f083 0301 	eor.w	r3, r3, #1
    7952:	b2db      	uxtb	r3, r3
    7954:	2b00      	cmp	r3, #0
    7956:	d003      	beq.n	7960 <z_thread_abort+0xb8>
		z_swap(&sched_spinlock, key);
    7958:	69f9      	ldr	r1, [r7, #28]
    795a:	4809      	ldr	r0, [pc, #36]	; (7980 <z_thread_abort+0xd8>)
    795c:	f7fe ff5e 	bl	681c <z_swap>
    7960:	4b07      	ldr	r3, [pc, #28]	; (7980 <z_thread_abort+0xd8>)
    7962:	627b      	str	r3, [r7, #36]	; 0x24
    7964:	69fb      	ldr	r3, [r7, #28]
    7966:	61bb      	str	r3, [r7, #24]
	arch_irq_unlock(key.key);
    7968:	69bb      	ldr	r3, [r7, #24]
    796a:	623b      	str	r3, [r7, #32]
	__asm__ volatile(
    796c:	6a3b      	ldr	r3, [r7, #32]
    796e:	f383 8811 	msr	BASEPRI, r3
    7972:	f3bf 8f6f 	isb	sy
}
    7976:	bf00      	nop
}
    7978:	bf00      	nop
		__ASSERT(false, "aborted _current back from dead");
	}
	k_spin_unlock(&sched_spinlock, key);
}
    797a:	3748      	adds	r7, #72	; 0x48
    797c:	46bd      	mov	sp, r7
    797e:	bd80      	pop	{r7, pc}
    7980:	20000870 	.word	0x20000870
    7984:	2000074c 	.word	0x2000074c

00007988 <z_data_copy>:
 * @brief Copy the data section from ROM to RAM
 *
 * This routine copies the data section from ROM to RAM.
 */
void z_data_copy(void)
{
    7988:	b580      	push	{r7, lr}
    798a:	af00      	add	r7, sp, #0
	z_early_memcpy(&__data_region_start, &__data_region_load_start,
		       __data_region_end - __data_region_start);
    798c:	4a07      	ldr	r2, [pc, #28]	; (79ac <z_data_copy+0x24>)
    798e:	4b08      	ldr	r3, [pc, #32]	; (79b0 <z_data_copy+0x28>)
    7990:	1ad3      	subs	r3, r2, r3
	z_early_memcpy(&__data_region_start, &__data_region_load_start,
    7992:	461a      	mov	r2, r3
    7994:	4907      	ldr	r1, [pc, #28]	; (79b4 <z_data_copy+0x2c>)
    7996:	4806      	ldr	r0, [pc, #24]	; (79b0 <z_data_copy+0x28>)
    7998:	f002 fe0a 	bl	a5b0 <z_early_memcpy>
#ifdef CONFIG_ARCH_HAS_RAMFUNC_SUPPORT
	z_early_memcpy(&__ramfunc_start, &__ramfunc_load_start,
    799c:	4b06      	ldr	r3, [pc, #24]	; (79b8 <z_data_copy+0x30>)
    799e:	461a      	mov	r2, r3
    79a0:	4906      	ldr	r1, [pc, #24]	; (79bc <z_data_copy+0x34>)
    79a2:	4807      	ldr	r0, [pc, #28]	; (79c0 <z_data_copy+0x38>)
    79a4:	f002 fe04 	bl	a5b0 <z_early_memcpy>
#else
	z_early_memcpy(&_app_smem_start, &_app_smem_rom_start,
		       _app_smem_end - _app_smem_start);
#endif /* CONFIG_STACK_CANARIES */
#endif /* CONFIG_USERSPACE */
}
    79a8:	bf00      	nop
    79aa:	bd80      	pop	{r7, pc}
    79ac:	200000a0 	.word	0x200000a0
    79b0:	20000000 	.word	0x20000000
    79b4:	0000c088 	.word	0x0000c088
    79b8:	00000000 	.word	0x00000000
    79bc:	0000c088 	.word	0x0000c088
    79c0:	20000000 	.word	0x20000000

000079c4 <sys_clock_hw_cycles_per_sec>:
{
    79c4:	b480      	push	{r7}
    79c6:	af00      	add	r7, sp, #0
	return CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC;
    79c8:	4b02      	ldr	r3, [pc, #8]	; (79d4 <sys_clock_hw_cycles_per_sec+0x10>)
}
    79ca:	4618      	mov	r0, r3
    79cc:	46bd      	mov	sp, r7
    79ce:	bc80      	pop	{r7}
    79d0:	4770      	bx	lr
    79d2:	bf00      	nop
    79d4:	00b71b00 	.word	0x00b71b00

000079d8 <first>:
#include <syscalls/sys_clock_hw_cycles_per_sec_runtime_get_mrsh.c>
#endif /* CONFIG_USERSPACE */
#endif /* CONFIG_TIMER_READS_ITS_FREQUENCY_AT_RUNTIME */

static struct _timeout *first(void)
{
    79d8:	b580      	push	{r7, lr}
    79da:	b082      	sub	sp, #8
    79dc:	af00      	add	r7, sp, #0
	sys_dnode_t *t = sys_dlist_peek_head(&timeout_list);
    79de:	4804      	ldr	r0, [pc, #16]	; (79f0 <first+0x18>)
    79e0:	f003 fc3f 	bl	b262 <sys_dlist_peek_head>
    79e4:	6078      	str	r0, [r7, #4]

	return t == NULL ? NULL : CONTAINER_OF(t, struct _timeout, node);
    79e6:	687b      	ldr	r3, [r7, #4]
}
    79e8:	4618      	mov	r0, r3
    79ea:	3708      	adds	r7, #8
    79ec:	46bd      	mov	sp, r7
    79ee:	bd80      	pop	{r7, pc}
    79f0:	2000004c 	.word	0x2000004c

000079f4 <next>:

static struct _timeout *next(struct _timeout *t)
{
    79f4:	b580      	push	{r7, lr}
    79f6:	b084      	sub	sp, #16
    79f8:	af00      	add	r7, sp, #0
    79fa:	6078      	str	r0, [r7, #4]
	sys_dnode_t *n = sys_dlist_peek_next(&timeout_list, &t->node);
    79fc:	687b      	ldr	r3, [r7, #4]
    79fe:	4619      	mov	r1, r3
    7a00:	4804      	ldr	r0, [pc, #16]	; (7a14 <next+0x20>)
    7a02:	f003 fc53 	bl	b2ac <sys_dlist_peek_next>
    7a06:	60f8      	str	r0, [r7, #12]

	return n == NULL ? NULL : CONTAINER_OF(n, struct _timeout, node);
    7a08:	68fb      	ldr	r3, [r7, #12]
}
    7a0a:	4618      	mov	r0, r3
    7a0c:	3710      	adds	r7, #16
    7a0e:	46bd      	mov	sp, r7
    7a10:	bd80      	pop	{r7, pc}
    7a12:	bf00      	nop
    7a14:	2000004c 	.word	0x2000004c

00007a18 <elapsed>:

	sys_dlist_remove(&t->node);
}

static int32_t elapsed(void)
{
    7a18:	b580      	push	{r7, lr}
    7a1a:	af00      	add	r7, sp, #0
	return announce_remaining == 0 ? sys_clock_elapsed() : 0U;
    7a1c:	4b05      	ldr	r3, [pc, #20]	; (7a34 <elapsed+0x1c>)
    7a1e:	681b      	ldr	r3, [r3, #0]
    7a20:	2b00      	cmp	r3, #0
    7a22:	d103      	bne.n	7a2c <elapsed+0x14>
    7a24:	f7fd f960 	bl	4ce8 <sys_clock_elapsed>
    7a28:	4603      	mov	r3, r0
    7a2a:	e000      	b.n	7a2e <elapsed+0x16>
    7a2c:	2300      	movs	r3, #0
}
    7a2e:	4618      	mov	r0, r3
    7a30:	bd80      	pop	{r7, pc}
    7a32:	bf00      	nop
    7a34:	20000884 	.word	0x20000884

00007a38 <next_timeout>:

static int32_t next_timeout(void)
{
    7a38:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
    7a3c:	b086      	sub	sp, #24
    7a3e:	af00      	add	r7, sp, #0
	struct _timeout *to = first();
    7a40:	f7ff ffca 	bl	79d8 <first>
    7a44:	6138      	str	r0, [r7, #16]
	int32_t ticks_elapsed = elapsed();
    7a46:	f7ff ffe7 	bl	7a18 <elapsed>
    7a4a:	60f8      	str	r0, [r7, #12]
	int32_t ret;

	if ((to == NULL) ||
    7a4c:	693b      	ldr	r3, [r7, #16]
    7a4e:	2b00      	cmp	r3, #0
    7a50:	d00f      	beq.n	7a72 <next_timeout+0x3a>
	    ((int64_t)(to->dticks - ticks_elapsed) > (int64_t)INT_MAX)) {
    7a52:	693b      	ldr	r3, [r7, #16]
    7a54:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
    7a58:	68f9      	ldr	r1, [r7, #12]
    7a5a:	17c8      	asrs	r0, r1, #31
    7a5c:	468a      	mov	sl, r1
    7a5e:	4683      	mov	fp, r0
    7a60:	ebb2 040a 	subs.w	r4, r2, sl
    7a64:	eb63 050b 	sbc.w	r5, r3, fp
	if ((to == NULL) ||
    7a68:	f1b4 4f00 	cmp.w	r4, #2147483648	; 0x80000000
    7a6c:	f175 0300 	sbcs.w	r3, r5, #0
    7a70:	db03      	blt.n	7a7a <next_timeout+0x42>
		ret = MAX_WAIT;
    7a72:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
    7a76:	617b      	str	r3, [r7, #20]
    7a78:	e016      	b.n	7aa8 <next_timeout+0x70>
	} else {
		ret = MAX(0, to->dticks - ticks_elapsed);
    7a7a:	693b      	ldr	r3, [r7, #16]
    7a7c:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
    7a80:	68f9      	ldr	r1, [r7, #12]
    7a82:	17c8      	asrs	r0, r1, #31
    7a84:	4688      	mov	r8, r1
    7a86:	4681      	mov	r9, r0
    7a88:	ebb2 0108 	subs.w	r1, r2, r8
    7a8c:	6039      	str	r1, [r7, #0]
    7a8e:	eb63 0309 	sbc.w	r3, r3, r9
    7a92:	607b      	str	r3, [r7, #4]
    7a94:	e9d7 2300 	ldrd	r2, r3, [r7]
    7a98:	2b00      	cmp	r3, #0
    7a9a:	da03      	bge.n	7aa4 <next_timeout+0x6c>
    7a9c:	f04f 0200 	mov.w	r2, #0
    7aa0:	f04f 0300 	mov.w	r3, #0
    7aa4:	4613      	mov	r3, r2
    7aa6:	617b      	str	r3, [r7, #20]
	}

#ifdef CONFIG_TIMESLICING
	if (_current_cpu->slice_ticks && _current_cpu->slice_ticks < ret) {
    7aa8:	4b08      	ldr	r3, [pc, #32]	; (7acc <next_timeout+0x94>)
    7aaa:	691b      	ldr	r3, [r3, #16]
    7aac:	2b00      	cmp	r3, #0
    7aae:	d007      	beq.n	7ac0 <next_timeout+0x88>
    7ab0:	4b06      	ldr	r3, [pc, #24]	; (7acc <next_timeout+0x94>)
    7ab2:	691b      	ldr	r3, [r3, #16]
    7ab4:	697a      	ldr	r2, [r7, #20]
    7ab6:	429a      	cmp	r2, r3
    7ab8:	dd02      	ble.n	7ac0 <next_timeout+0x88>
		ret = _current_cpu->slice_ticks;
    7aba:	4b04      	ldr	r3, [pc, #16]	; (7acc <next_timeout+0x94>)
    7abc:	691b      	ldr	r3, [r3, #16]
    7abe:	617b      	str	r3, [r7, #20]
	}
#endif
	return ret;
    7ac0:	697b      	ldr	r3, [r7, #20]
}
    7ac2:	4618      	mov	r0, r3
    7ac4:	3718      	adds	r7, #24
    7ac6:	46bd      	mov	sp, r7
    7ac8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
    7acc:	2000074c 	.word	0x2000074c

00007ad0 <z_add_timeout>:

void z_add_timeout(struct _timeout *to, _timeout_func_t fn,
		   k_timeout_t timeout)
{
    7ad0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
    7ad4:	b09c      	sub	sp, #112	; 0x70
    7ad6:	af00      	add	r7, sp, #0
    7ad8:	6378      	str	r0, [r7, #52]	; 0x34
    7ada:	6339      	str	r1, [r7, #48]	; 0x30
    7adc:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    7ae0:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
    7ae4:	f04f 32ff 	mov.w	r2, #4294967295
    7ae8:	f04f 33ff 	mov.w	r3, #4294967295
    7aec:	4299      	cmp	r1, r3
    7aee:	bf08      	it	eq
    7af0:	4290      	cmpeq	r0, r2
    7af2:	d100      	bne.n	7af6 <z_add_timeout+0x26>
    7af4:	e0ce      	b.n	7c94 <z_add_timeout+0x1c4>
#ifdef CONFIG_KERNEL_COHERENCE
	__ASSERT_NO_MSG(arch_mem_coherent(to));
#endif

	__ASSERT(!sys_dnode_is_linked(&to->node), "");
	to->fn = fn;
    7af6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
    7af8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    7afa:	6093      	str	r3, [r2, #8]

	LOCKED(&timeout_lock) {
    7afc:	2300      	movs	r3, #0
    7afe:	647b      	str	r3, [r7, #68]	; 0x44
    7b00:	4b66      	ldr	r3, [pc, #408]	; (7c9c <z_add_timeout+0x1cc>)
    7b02:	65bb      	str	r3, [r7, #88]	; 0x58
	__asm__ volatile(
    7b04:	f04f 0220 	mov.w	r2, #32
    7b08:	f3ef 8311 	mrs	r3, BASEPRI
    7b0c:	f382 8812 	msr	BASEPRI_MAX, r2
    7b10:	f3bf 8f6f 	isb	sy
    7b14:	657b      	str	r3, [r7, #84]	; 0x54
    7b16:	653a      	str	r2, [r7, #80]	; 0x50
	return key;
    7b18:	6d7b      	ldr	r3, [r7, #84]	; 0x54
	k.key = arch_irq_lock();
    7b1a:	63bb      	str	r3, [r7, #56]	; 0x38
	return k;
    7b1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    7b1e:	643b      	str	r3, [r7, #64]	; 0x40
    7b20:	e0b4      	b.n	7c8c <z_add_timeout+0x1bc>
		struct _timeout *t;

		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) &&
		    Z_TICK_ABS(timeout.ticks) >= 0) {
    7b22:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
    7b26:	f06f 0001 	mvn.w	r0, #1
    7b2a:	f04f 31ff 	mov.w	r1, #4294967295
    7b2e:	1a80      	subs	r0, r0, r2
    7b30:	6238      	str	r0, [r7, #32]
    7b32:	eb61 0303 	sbc.w	r3, r1, r3
    7b36:	627b      	str	r3, [r7, #36]	; 0x24
		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) &&
    7b38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    7b3a:	2b00      	cmp	r3, #0
    7b3c:	db24      	blt.n	7b88 <z_add_timeout+0xb8>
			k_ticks_t ticks = Z_TICK_ABS(timeout.ticks) - curr_tick;
    7b3e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
    7b42:	4610      	mov	r0, r2
    7b44:	4619      	mov	r1, r3
    7b46:	4b56      	ldr	r3, [pc, #344]	; (7ca0 <z_add_timeout+0x1d0>)
    7b48:	e9d3 2300 	ldrd	r2, r3, [r3]
    7b4c:	1884      	adds	r4, r0, r2
    7b4e:	eb41 0503 	adc.w	r5, r1, r3
    7b52:	f06f 0201 	mvn.w	r2, #1
    7b56:	f04f 33ff 	mov.w	r3, #4294967295
    7b5a:	1b12      	subs	r2, r2, r4
    7b5c:	61ba      	str	r2, [r7, #24]
    7b5e:	eb63 0305 	sbc.w	r3, r3, r5
    7b62:	61fb      	str	r3, [r7, #28]
    7b64:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
    7b68:	e9c7 2318 	strd	r2, r3, [r7, #96]	; 0x60

			to->dticks = MAX(1, ticks);
    7b6c:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
    7b70:	2a01      	cmp	r2, #1
    7b72:	f173 0100 	sbcs.w	r1, r3, #0
    7b76:	da03      	bge.n	7b80 <z_add_timeout+0xb0>
    7b78:	f04f 0201 	mov.w	r2, #1
    7b7c:	f04f 0300 	mov.w	r3, #0
    7b80:	6b79      	ldr	r1, [r7, #52]	; 0x34
    7b82:	e9c1 2304 	strd	r2, r3, [r1, #16]
    7b86:	e016      	b.n	7bb6 <z_add_timeout+0xe6>
		} else {
			to->dticks = timeout.ticks + 1 + elapsed();
    7b88:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
    7b8c:	f112 0801 	adds.w	r8, r2, #1
    7b90:	f143 0900 	adc.w	r9, r3, #0
    7b94:	f7ff ff40 	bl	7a18 <elapsed>
    7b98:	4603      	mov	r3, r0
    7b9a:	17da      	asrs	r2, r3, #31
    7b9c:	469a      	mov	sl, r3
    7b9e:	4693      	mov	fp, r2
    7ba0:	eb18 030a 	adds.w	r3, r8, sl
    7ba4:	613b      	str	r3, [r7, #16]
    7ba6:	eb49 030b 	adc.w	r3, r9, fp
    7baa:	617b      	str	r3, [r7, #20]
    7bac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    7bae:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
    7bb2:	e9c3 1204 	strd	r1, r2, [r3, #16]
		}

		for (t = first(); t != NULL; t = next(t)) {
    7bb6:	f7ff ff0f 	bl	79d8 <first>
    7bba:	66f8      	str	r0, [r7, #108]	; 0x6c
    7bbc:	e037      	b.n	7c2e <z_add_timeout+0x15e>
			if (t->dticks > to->dticks) {
    7bbe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    7bc0:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
    7bc4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    7bc6:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
    7bca:	4282      	cmp	r2, r0
    7bcc:	418b      	sbcs	r3, r1
    7bce:	da18      	bge.n	7c02 <z_add_timeout+0x132>
				t->dticks -= to->dticks;
    7bd0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    7bd2:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
    7bd6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    7bd8:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
    7bdc:	ebb0 0c02 	subs.w	ip, r0, r2
    7be0:	f8c7 c008 	str.w	ip, [r7, #8]
    7be4:	eb61 0303 	sbc.w	r3, r1, r3
    7be8:	60fb      	str	r3, [r7, #12]
    7bea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    7bec:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
    7bf0:	e9c3 1204 	strd	r1, r2, [r3, #16]
				sys_dlist_insert(&t->node, &to->node);
    7bf4:	6efa      	ldr	r2, [r7, #108]	; 0x6c
    7bf6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    7bf8:	4619      	mov	r1, r3
    7bfa:	4610      	mov	r0, r2
    7bfc:	f003 fb82 	bl	b304 <sys_dlist_insert>
				break;
    7c00:	e018      	b.n	7c34 <z_add_timeout+0x164>
			}
			to->dticks -= t->dticks;
    7c02:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    7c04:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
    7c08:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    7c0a:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
    7c0e:	ebb0 0c02 	subs.w	ip, r0, r2
    7c12:	f8c7 c000 	str.w	ip, [r7]
    7c16:	eb61 0303 	sbc.w	r3, r1, r3
    7c1a:	607b      	str	r3, [r7, #4]
    7c1c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    7c1e:	e9d7 1200 	ldrd	r1, r2, [r7]
    7c22:	e9c3 1204 	strd	r1, r2, [r3, #16]
		for (t = first(); t != NULL; t = next(t)) {
    7c26:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
    7c28:	f7ff fee4 	bl	79f4 <next>
    7c2c:	66f8      	str	r0, [r7, #108]	; 0x6c
    7c2e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    7c30:	2b00      	cmp	r3, #0
    7c32:	d1c4      	bne.n	7bbe <z_add_timeout+0xee>
		}

		if (t == NULL) {
    7c34:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    7c36:	2b00      	cmp	r3, #0
    7c38:	d104      	bne.n	7c44 <z_add_timeout+0x174>
			sys_dlist_append(&timeout_list, &to->node);
    7c3a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    7c3c:	4619      	mov	r1, r3
    7c3e:	4819      	ldr	r0, [pc, #100]	; (7ca4 <z_add_timeout+0x1d4>)
    7c40:	f003 fb47 	bl	b2d2 <sys_dlist_append>
		}

		if (to == first()) {
    7c44:	f7ff fec8 	bl	79d8 <first>
    7c48:	4602      	mov	r2, r0
    7c4a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    7c4c:	4293      	cmp	r3, r2
    7c4e:	d10e      	bne.n	7c6e <z_add_timeout+0x19e>
			 * last announcement, and slice_ticks is based
			 * on that. It means that the time remaining for
			 * the next announcement can be less than
			 * slice_ticks.
			 */
			int32_t next_time = next_timeout();
    7c50:	f7ff fef2 	bl	7a38 <next_timeout>
    7c54:	65f8      	str	r0, [r7, #92]	; 0x5c

			if (next_time == 0 ||
    7c56:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
    7c58:	2b00      	cmp	r3, #0
    7c5a:	d004      	beq.n	7c66 <z_add_timeout+0x196>
			    _current_cpu->slice_ticks != next_time) {
    7c5c:	4b12      	ldr	r3, [pc, #72]	; (7ca8 <z_add_timeout+0x1d8>)
    7c5e:	691a      	ldr	r2, [r3, #16]
			if (next_time == 0 ||
    7c60:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
    7c62:	4293      	cmp	r3, r2
    7c64:	d003      	beq.n	7c6e <z_add_timeout+0x19e>
				sys_clock_set_timeout(next_time, false);
    7c66:	2100      	movs	r1, #0
    7c68:	6df8      	ldr	r0, [r7, #92]	; 0x5c
    7c6a:	f7fc fec7 	bl	49fc <sys_clock_set_timeout>
    7c6e:	4b0b      	ldr	r3, [pc, #44]	; (7c9c <z_add_timeout+0x1cc>)
    7c70:	64fb      	str	r3, [r7, #76]	; 0x4c
    7c72:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    7c74:	63fb      	str	r3, [r7, #60]	; 0x3c
	arch_irq_unlock(key.key);
    7c76:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    7c78:	64bb      	str	r3, [r7, #72]	; 0x48
	__asm__ volatile(
    7c7a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    7c7c:	f383 8811 	msr	BASEPRI, r3
    7c80:	f3bf 8f6f 	isb	sy
}
    7c84:	bf00      	nop
}
    7c86:	bf00      	nop
	LOCKED(&timeout_lock) {
    7c88:	2301      	movs	r3, #1
    7c8a:	647b      	str	r3, [r7, #68]	; 0x44
    7c8c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    7c8e:	2b00      	cmp	r3, #0
    7c90:	f43f af47 	beq.w	7b22 <z_add_timeout+0x52>
#else
			sys_clock_set_timeout(next_timeout(), false);
#endif	/* CONFIG_TIMESLICING */
		}
	}
}
    7c94:	3770      	adds	r7, #112	; 0x70
    7c96:	46bd      	mov	sp, r7
    7c98:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
    7c9c:	20000880 	.word	0x20000880
    7ca0:	200006b8 	.word	0x200006b8
    7ca4:	2000004c 	.word	0x2000004c
    7ca8:	2000074c 	.word	0x2000074c

00007cac <z_abort_timeout>:

int z_abort_timeout(struct _timeout *to)
{
    7cac:	b580      	push	{r7, lr}
    7cae:	b08c      	sub	sp, #48	; 0x30
    7cb0:	af00      	add	r7, sp, #0
    7cb2:	6078      	str	r0, [r7, #4]
	int ret = -EINVAL;
    7cb4:	f06f 0315 	mvn.w	r3, #21
    7cb8:	62fb      	str	r3, [r7, #44]	; 0x2c

	LOCKED(&timeout_lock) {
    7cba:	2300      	movs	r3, #0
    7cbc:	617b      	str	r3, [r7, #20]
    7cbe:	4b1a      	ldr	r3, [pc, #104]	; (7d28 <z_abort_timeout+0x7c>)
    7cc0:	62bb      	str	r3, [r7, #40]	; 0x28
	__asm__ volatile(
    7cc2:	f04f 0320 	mov.w	r3, #32
    7cc6:	f3ef 8211 	mrs	r2, BASEPRI
    7cca:	f383 8812 	msr	BASEPRI_MAX, r3
    7cce:	f3bf 8f6f 	isb	sy
    7cd2:	627a      	str	r2, [r7, #36]	; 0x24
    7cd4:	623b      	str	r3, [r7, #32]
	return key;
    7cd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	k.key = arch_irq_lock();
    7cd8:	60bb      	str	r3, [r7, #8]
	return k;
    7cda:	68bb      	ldr	r3, [r7, #8]
    7cdc:	613b      	str	r3, [r7, #16]
    7cde:	e01a      	b.n	7d16 <z_abort_timeout+0x6a>
		if (sys_dnode_is_linked(&to->node)) {
    7ce0:	687b      	ldr	r3, [r7, #4]
    7ce2:	4618      	mov	r0, r3
    7ce4:	f003 fa9c 	bl	b220 <sys_dnode_is_linked>
    7ce8:	4603      	mov	r3, r0
    7cea:	2b00      	cmp	r3, #0
    7cec:	d004      	beq.n	7cf8 <z_abort_timeout+0x4c>
			remove_timeout(to);
    7cee:	6878      	ldr	r0, [r7, #4]
    7cf0:	f003 fb46 	bl	b380 <remove_timeout>
			ret = 0;
    7cf4:	2300      	movs	r3, #0
    7cf6:	62fb      	str	r3, [r7, #44]	; 0x2c
    7cf8:	4b0b      	ldr	r3, [pc, #44]	; (7d28 <z_abort_timeout+0x7c>)
    7cfa:	61fb      	str	r3, [r7, #28]
    7cfc:	693b      	ldr	r3, [r7, #16]
    7cfe:	60fb      	str	r3, [r7, #12]
	arch_irq_unlock(key.key);
    7d00:	68fb      	ldr	r3, [r7, #12]
    7d02:	61bb      	str	r3, [r7, #24]
	__asm__ volatile(
    7d04:	69bb      	ldr	r3, [r7, #24]
    7d06:	f383 8811 	msr	BASEPRI, r3
    7d0a:	f3bf 8f6f 	isb	sy
}
    7d0e:	bf00      	nop
}
    7d10:	bf00      	nop
	LOCKED(&timeout_lock) {
    7d12:	2301      	movs	r3, #1
    7d14:	617b      	str	r3, [r7, #20]
    7d16:	697b      	ldr	r3, [r7, #20]
    7d18:	2b00      	cmp	r3, #0
    7d1a:	d0e1      	beq.n	7ce0 <z_abort_timeout+0x34>
		}
	}

	return ret;
    7d1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
    7d1e:	4618      	mov	r0, r3
    7d20:	3730      	adds	r7, #48	; 0x30
    7d22:	46bd      	mov	sp, r7
    7d24:	bd80      	pop	{r7, pc}
    7d26:	bf00      	nop
    7d28:	20000880 	.word	0x20000880

00007d2c <z_set_timeout_expiry>:
	}
	return ret;
}

void z_set_timeout_expiry(int32_t ticks, bool is_idle)
{
    7d2c:	b580      	push	{r7, lr}
    7d2e:	b08e      	sub	sp, #56	; 0x38
    7d30:	af00      	add	r7, sp, #0
    7d32:	6078      	str	r0, [r7, #4]
    7d34:	460b      	mov	r3, r1
    7d36:	70fb      	strb	r3, [r7, #3]
	LOCKED(&timeout_lock) {
    7d38:	2300      	movs	r3, #0
    7d3a:	61bb      	str	r3, [r7, #24]
    7d3c:	4b2c      	ldr	r3, [pc, #176]	; (7df0 <z_set_timeout_expiry+0xc4>)
    7d3e:	62fb      	str	r3, [r7, #44]	; 0x2c
	__asm__ volatile(
    7d40:	f04f 0320 	mov.w	r3, #32
    7d44:	f3ef 8211 	mrs	r2, BASEPRI
    7d48:	f383 8812 	msr	BASEPRI_MAX, r3
    7d4c:	f3bf 8f6f 	isb	sy
    7d50:	62ba      	str	r2, [r7, #40]	; 0x28
    7d52:	627b      	str	r3, [r7, #36]	; 0x24
	return key;
    7d54:	6abb      	ldr	r3, [r7, #40]	; 0x28
	k.key = arch_irq_lock();
    7d56:	60fb      	str	r3, [r7, #12]
	return k;
    7d58:	68fb      	ldr	r3, [r7, #12]
    7d5a:	617b      	str	r3, [r7, #20]
    7d5c:	e040      	b.n	7de0 <z_set_timeout_expiry+0xb4>
		int next_to = next_timeout();
    7d5e:	f7ff fe6b 	bl	7a38 <next_timeout>
    7d62:	6378      	str	r0, [r7, #52]	; 0x34
		bool sooner = (next_to == K_TICKS_FOREVER)
			      || (ticks <= next_to);
    7d64:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    7d66:	f1b3 3fff 	cmp.w	r3, #4294967295
    7d6a:	d003      	beq.n	7d74 <z_set_timeout_expiry+0x48>
    7d6c:	687a      	ldr	r2, [r7, #4]
    7d6e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    7d70:	429a      	cmp	r2, r3
    7d72:	dc01      	bgt.n	7d78 <z_set_timeout_expiry+0x4c>
    7d74:	2301      	movs	r3, #1
    7d76:	e000      	b.n	7d7a <z_set_timeout_expiry+0x4e>
    7d78:	2300      	movs	r3, #0
		bool sooner = (next_to == K_TICKS_FOREVER)
    7d7a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    7d7e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
    7d82:	f003 0301 	and.w	r3, r3, #1
    7d86:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
		bool imminent = next_to <= 1;
    7d8a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    7d8c:	2b01      	cmp	r3, #1
    7d8e:	bfd4      	ite	le
    7d90:	2301      	movle	r3, #1
    7d92:	2300      	movgt	r3, #0
    7d94:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
		 * SMP can't use this optimization though: we don't
		 * know when context switches happen until interrupt
		 * exit and so can't get the timeslicing clamp folded
		 * in.
		 */
		if (!imminent && (sooner || IS_ENABLED(CONFIG_SMP))) {
    7d98:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
    7d9c:	f083 0301 	eor.w	r3, r3, #1
    7da0:	b2db      	uxtb	r3, r3
    7da2:	2b00      	cmp	r3, #0
    7da4:	d00d      	beq.n	7dc2 <z_set_timeout_expiry+0x96>
    7da6:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
    7daa:	2b00      	cmp	r3, #0
    7dac:	d009      	beq.n	7dc2 <z_set_timeout_expiry+0x96>
			sys_clock_set_timeout(MIN(ticks, next_to), is_idle);
    7dae:	6b7a      	ldr	r2, [r7, #52]	; 0x34
    7db0:	687b      	ldr	r3, [r7, #4]
    7db2:	4293      	cmp	r3, r2
    7db4:	bfa8      	it	ge
    7db6:	4613      	movge	r3, r2
    7db8:	78fa      	ldrb	r2, [r7, #3]
    7dba:	4611      	mov	r1, r2
    7dbc:	4618      	mov	r0, r3
    7dbe:	f7fc fe1d 	bl	49fc <sys_clock_set_timeout>
    7dc2:	4b0b      	ldr	r3, [pc, #44]	; (7df0 <z_set_timeout_expiry+0xc4>)
    7dc4:	623b      	str	r3, [r7, #32]
    7dc6:	697b      	ldr	r3, [r7, #20]
    7dc8:	613b      	str	r3, [r7, #16]
	arch_irq_unlock(key.key);
    7dca:	693b      	ldr	r3, [r7, #16]
    7dcc:	61fb      	str	r3, [r7, #28]
	__asm__ volatile(
    7dce:	69fb      	ldr	r3, [r7, #28]
    7dd0:	f383 8811 	msr	BASEPRI, r3
    7dd4:	f3bf 8f6f 	isb	sy
}
    7dd8:	bf00      	nop
}
    7dda:	bf00      	nop
	LOCKED(&timeout_lock) {
    7ddc:	2301      	movs	r3, #1
    7dde:	61bb      	str	r3, [r7, #24]
    7de0:	69bb      	ldr	r3, [r7, #24]
    7de2:	2b00      	cmp	r3, #0
    7de4:	d0bb      	beq.n	7d5e <z_set_timeout_expiry+0x32>
		}
	}
}
    7de6:	bf00      	nop
    7de8:	bf00      	nop
    7dea:	3738      	adds	r7, #56	; 0x38
    7dec:	46bd      	mov	sp, r7
    7dee:	bd80      	pop	{r7, pc}
    7df0:	20000880 	.word	0x20000880

00007df4 <sys_clock_announce>:

void sys_clock_announce(int32_t ticks)
{
    7df4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
    7df8:	b09c      	sub	sp, #112	; 0x70
    7dfa:	af00      	add	r7, sp, #0
    7dfc:	6278      	str	r0, [r7, #36]	; 0x24
#ifdef CONFIG_TIMESLICING
	z_time_slice(ticks);
    7dfe:	6a78      	ldr	r0, [r7, #36]	; 0x24
    7e00:	f7fe fef4 	bl	6bec <z_time_slice>
    7e04:	4b5c      	ldr	r3, [pc, #368]	; (7f78 <sys_clock_announce+0x184>)
    7e06:	667b      	str	r3, [r7, #100]	; 0x64
	__asm__ volatile(
    7e08:	f04f 0220 	mov.w	r2, #32
    7e0c:	f3ef 8311 	mrs	r3, BASEPRI
    7e10:	f382 8812 	msr	BASEPRI_MAX, r2
    7e14:	f3bf 8f6f 	isb	sy
    7e18:	663b      	str	r3, [r7, #96]	; 0x60
    7e1a:	65fa      	str	r2, [r7, #92]	; 0x5c
	return key;
    7e1c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
	k.key = arch_irq_lock();
    7e1e:	637b      	str	r3, [r7, #52]	; 0x34
	return k;
    7e20:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    7e22:	63fb      	str	r3, [r7, #60]	; 0x3c
		announce_remaining += ticks;
		k_spin_unlock(&timeout_lock, key);
		return;
	}

	announce_remaining = ticks;
    7e24:	4a55      	ldr	r2, [pc, #340]	; (7f7c <sys_clock_announce+0x188>)
    7e26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    7e28:	6013      	str	r3, [r2, #0]

	while (first() != NULL && first()->dticks <= announce_remaining) {
    7e2a:	e049      	b.n	7ec0 <sys_clock_announce+0xcc>
		struct _timeout *t = first();
    7e2c:	f7ff fdd4 	bl	79d8 <first>
    7e30:	66f8      	str	r0, [r7, #108]	; 0x6c
		int dt = t->dticks;
    7e32:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    7e34:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
    7e38:	4613      	mov	r3, r2
    7e3a:	66bb      	str	r3, [r7, #104]	; 0x68

		curr_tick += dt;
    7e3c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
    7e3e:	17da      	asrs	r2, r3, #31
    7e40:	461c      	mov	r4, r3
    7e42:	4615      	mov	r5, r2
    7e44:	4b4e      	ldr	r3, [pc, #312]	; (7f80 <sys_clock_announce+0x18c>)
    7e46:	e9d3 2300 	ldrd	r2, r3, [r3]
    7e4a:	18a1      	adds	r1, r4, r2
    7e4c:	61b9      	str	r1, [r7, #24]
    7e4e:	eb45 0303 	adc.w	r3, r5, r3
    7e52:	61fb      	str	r3, [r7, #28]
    7e54:	4b4a      	ldr	r3, [pc, #296]	; (7f80 <sys_clock_announce+0x18c>)
    7e56:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
    7e5a:	e9c3 1200 	strd	r1, r2, [r3]
		announce_remaining -= dt;
    7e5e:	4b47      	ldr	r3, [pc, #284]	; (7f7c <sys_clock_announce+0x188>)
    7e60:	681a      	ldr	r2, [r3, #0]
    7e62:	6ebb      	ldr	r3, [r7, #104]	; 0x68
    7e64:	1ad2      	subs	r2, r2, r3
    7e66:	4b45      	ldr	r3, [pc, #276]	; (7f7c <sys_clock_announce+0x188>)
    7e68:	601a      	str	r2, [r3, #0]
		t->dticks = 0;
    7e6a:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
    7e6c:	f04f 0200 	mov.w	r2, #0
    7e70:	f04f 0300 	mov.w	r3, #0
    7e74:	e9c1 2304 	strd	r2, r3, [r1, #16]
		remove_timeout(t);
    7e78:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
    7e7a:	f003 fa81 	bl	b380 <remove_timeout>
    7e7e:	4b3e      	ldr	r3, [pc, #248]	; (7f78 <sys_clock_announce+0x184>)
    7e80:	64fb      	str	r3, [r7, #76]	; 0x4c
    7e82:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    7e84:	633b      	str	r3, [r7, #48]	; 0x30
	arch_irq_unlock(key.key);
    7e86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    7e88:	64bb      	str	r3, [r7, #72]	; 0x48
	__asm__ volatile(
    7e8a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    7e8c:	f383 8811 	msr	BASEPRI, r3
    7e90:	f3bf 8f6f 	isb	sy
}
    7e94:	bf00      	nop
}
    7e96:	bf00      	nop

		k_spin_unlock(&timeout_lock, key);
		t->fn(t);
    7e98:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    7e9a:	689b      	ldr	r3, [r3, #8]
    7e9c:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
    7e9e:	4798      	blx	r3
    7ea0:	4b35      	ldr	r3, [pc, #212]	; (7f78 <sys_clock_announce+0x184>)
    7ea2:	65bb      	str	r3, [r7, #88]	; 0x58
	__asm__ volatile(
    7ea4:	f04f 0220 	mov.w	r2, #32
    7ea8:	f3ef 8311 	mrs	r3, BASEPRI
    7eac:	f382 8812 	msr	BASEPRI_MAX, r2
    7eb0:	f3bf 8f6f 	isb	sy
    7eb4:	657b      	str	r3, [r7, #84]	; 0x54
    7eb6:	653a      	str	r2, [r7, #80]	; 0x50
	return key;
    7eb8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
	k.key = arch_irq_lock();
    7eba:	62fb      	str	r3, [r7, #44]	; 0x2c
	return k;
    7ebc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    7ebe:	63fb      	str	r3, [r7, #60]	; 0x3c
	while (first() != NULL && first()->dticks <= announce_remaining) {
    7ec0:	f7ff fd8a 	bl	79d8 <first>
    7ec4:	4603      	mov	r3, r0
    7ec6:	2b00      	cmp	r3, #0
    7ec8:	d00f      	beq.n	7eea <sys_clock_announce+0xf6>
    7eca:	f7ff fd85 	bl	79d8 <first>
    7ece:	4603      	mov	r3, r0
    7ed0:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
    7ed4:	4b29      	ldr	r3, [pc, #164]	; (7f7c <sys_clock_announce+0x188>)
    7ed6:	681b      	ldr	r3, [r3, #0]
    7ed8:	17da      	asrs	r2, r3, #31
    7eda:	613b      	str	r3, [r7, #16]
    7edc:	617a      	str	r2, [r7, #20]
    7ede:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
    7ee2:	4694      	mov	ip, r2
    7ee4:	4584      	cmp	ip, r0
    7ee6:	418b      	sbcs	r3, r1
    7ee8:	daa0      	bge.n	7e2c <sys_clock_announce+0x38>
		key = k_spin_lock(&timeout_lock);
	}

	if (first() != NULL) {
    7eea:	f7ff fd75 	bl	79d8 <first>
    7eee:	4603      	mov	r3, r0
    7ef0:	2b00      	cmp	r3, #0
    7ef2:	d013      	beq.n	7f1c <sys_clock_announce+0x128>
		first()->dticks -= announce_remaining;
    7ef4:	f7ff fd70 	bl	79d8 <first>
    7ef8:	4601      	mov	r1, r0
    7efa:	e9d1 2304 	ldrd	r2, r3, [r1, #16]
    7efe:	481f      	ldr	r0, [pc, #124]	; (7f7c <sys_clock_announce+0x188>)
    7f00:	6800      	ldr	r0, [r0, #0]
    7f02:	17c4      	asrs	r4, r0, #31
    7f04:	4682      	mov	sl, r0
    7f06:	46a3      	mov	fp, r4
    7f08:	ebb2 000a 	subs.w	r0, r2, sl
    7f0c:	60b8      	str	r0, [r7, #8]
    7f0e:	eb63 030b 	sbc.w	r3, r3, fp
    7f12:	60fb      	str	r3, [r7, #12]
    7f14:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
    7f18:	e9c1 3404 	strd	r3, r4, [r1, #16]
	}

	curr_tick += announce_remaining;
    7f1c:	4b17      	ldr	r3, [pc, #92]	; (7f7c <sys_clock_announce+0x188>)
    7f1e:	681b      	ldr	r3, [r3, #0]
    7f20:	17da      	asrs	r2, r3, #31
    7f22:	4698      	mov	r8, r3
    7f24:	4691      	mov	r9, r2
    7f26:	4b16      	ldr	r3, [pc, #88]	; (7f80 <sys_clock_announce+0x18c>)
    7f28:	e9d3 2300 	ldrd	r2, r3, [r3]
    7f2c:	eb18 0102 	adds.w	r1, r8, r2
    7f30:	6039      	str	r1, [r7, #0]
    7f32:	eb49 0303 	adc.w	r3, r9, r3
    7f36:	607b      	str	r3, [r7, #4]
    7f38:	4b11      	ldr	r3, [pc, #68]	; (7f80 <sys_clock_announce+0x18c>)
    7f3a:	e9d7 1200 	ldrd	r1, r2, [r7]
    7f3e:	e9c3 1200 	strd	r1, r2, [r3]
	announce_remaining = 0;
    7f42:	4b0e      	ldr	r3, [pc, #56]	; (7f7c <sys_clock_announce+0x188>)
    7f44:	2200      	movs	r2, #0
    7f46:	601a      	str	r2, [r3, #0]

	sys_clock_set_timeout(next_timeout(), false);
    7f48:	f7ff fd76 	bl	7a38 <next_timeout>
    7f4c:	4603      	mov	r3, r0
    7f4e:	2100      	movs	r1, #0
    7f50:	4618      	mov	r0, r3
    7f52:	f7fc fd53 	bl	49fc <sys_clock_set_timeout>
    7f56:	4b08      	ldr	r3, [pc, #32]	; (7f78 <sys_clock_announce+0x184>)
    7f58:	647b      	str	r3, [r7, #68]	; 0x44
    7f5a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    7f5c:	63bb      	str	r3, [r7, #56]	; 0x38
	arch_irq_unlock(key.key);
    7f5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    7f60:	643b      	str	r3, [r7, #64]	; 0x40
	__asm__ volatile(
    7f62:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    7f64:	f383 8811 	msr	BASEPRI, r3
    7f68:	f3bf 8f6f 	isb	sy
}
    7f6c:	bf00      	nop
}
    7f6e:	bf00      	nop

	k_spin_unlock(&timeout_lock, key);
}
    7f70:	3770      	adds	r7, #112	; 0x70
    7f72:	46bd      	mov	sp, r7
    7f74:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
    7f78:	20000880 	.word	0x20000880
    7f7c:	20000884 	.word	0x20000884
    7f80:	200006b8 	.word	0x200006b8

00007f84 <sys_clock_tick_get>:

int64_t sys_clock_tick_get(void)
{
    7f84:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
    7f88:	b08c      	sub	sp, #48	; 0x30
    7f8a:	af00      	add	r7, sp, #0
	uint64_t t = 0U;
    7f8c:	f04f 0200 	mov.w	r2, #0
    7f90:	f04f 0300 	mov.w	r3, #0
    7f94:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28

	LOCKED(&timeout_lock) {
    7f98:	2300      	movs	r3, #0
    7f9a:	613b      	str	r3, [r7, #16]
    7f9c:	4b1c      	ldr	r3, [pc, #112]	; (8010 <sys_clock_tick_get+0x8c>)
    7f9e:	627b      	str	r3, [r7, #36]	; 0x24
	__asm__ volatile(
    7fa0:	f04f 0320 	mov.w	r3, #32
    7fa4:	f3ef 8211 	mrs	r2, BASEPRI
    7fa8:	f383 8812 	msr	BASEPRI_MAX, r3
    7fac:	f3bf 8f6f 	isb	sy
    7fb0:	623a      	str	r2, [r7, #32]
    7fb2:	61fb      	str	r3, [r7, #28]
	return key;
    7fb4:	6a3b      	ldr	r3, [r7, #32]
	k.key = arch_irq_lock();
    7fb6:	607b      	str	r3, [r7, #4]
	return k;
    7fb8:	687b      	ldr	r3, [r7, #4]
    7fba:	60fb      	str	r3, [r7, #12]
    7fbc:	e01d      	b.n	7ffa <sys_clock_tick_get+0x76>
		t = curr_tick + sys_clock_elapsed();
    7fbe:	f7fc fe93 	bl	4ce8 <sys_clock_elapsed>
    7fc2:	4603      	mov	r3, r0
    7fc4:	2200      	movs	r2, #0
    7fc6:	461c      	mov	r4, r3
    7fc8:	4615      	mov	r5, r2
    7fca:	4b12      	ldr	r3, [pc, #72]	; (8014 <sys_clock_tick_get+0x90>)
    7fcc:	e9d3 2300 	ldrd	r2, r3, [r3]
    7fd0:	eb14 0802 	adds.w	r8, r4, r2
    7fd4:	eb45 0903 	adc.w	r9, r5, r3
    7fd8:	e9c7 890a 	strd	r8, r9, [r7, #40]	; 0x28
    7fdc:	4b0c      	ldr	r3, [pc, #48]	; (8010 <sys_clock_tick_get+0x8c>)
    7fde:	61bb      	str	r3, [r7, #24]
    7fe0:	68fb      	ldr	r3, [r7, #12]
    7fe2:	60bb      	str	r3, [r7, #8]
	arch_irq_unlock(key.key);
    7fe4:	68bb      	ldr	r3, [r7, #8]
    7fe6:	617b      	str	r3, [r7, #20]
	__asm__ volatile(
    7fe8:	697b      	ldr	r3, [r7, #20]
    7fea:	f383 8811 	msr	BASEPRI, r3
    7fee:	f3bf 8f6f 	isb	sy
}
    7ff2:	bf00      	nop
}
    7ff4:	bf00      	nop
	LOCKED(&timeout_lock) {
    7ff6:	2301      	movs	r3, #1
    7ff8:	613b      	str	r3, [r7, #16]
    7ffa:	693b      	ldr	r3, [r7, #16]
    7ffc:	2b00      	cmp	r3, #0
    7ffe:	d0de      	beq.n	7fbe <sys_clock_tick_get+0x3a>
	}
	return t;
    8000:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
}
    8004:	4610      	mov	r0, r2
    8006:	4619      	mov	r1, r3
    8008:	3730      	adds	r7, #48	; 0x30
    800a:	46bd      	mov	sp, r7
    800c:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
    8010:	20000880 	.word	0x20000880
    8014:	200006b8 	.word	0x200006b8

00008018 <z_impl_k_busy_wait>:
}
#include <syscalls/k_uptime_ticks_mrsh.c>
#endif

void z_impl_k_busy_wait(uint32_t usec_to_wait)
{
    8018:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
    801c:	b086      	sub	sp, #24
    801e:	af00      	add	r7, sp, #0
    8020:	6078      	str	r0, [r7, #4]
	SYS_PORT_TRACING_FUNC_ENTER(k_thread, busy_wait, usec_to_wait);
	if (usec_to_wait == 0U) {
    8022:	687b      	ldr	r3, [r7, #4]
    8024:	2b00      	cmp	r3, #0
    8026:	d02a      	beq.n	807e <z_impl_k_busy_wait+0x66>
		SYS_PORT_TRACING_FUNC_EXIT(k_thread, busy_wait, usec_to_wait);
		return;
	}

#if !defined(CONFIG_ARCH_HAS_CUSTOM_BUSY_WAIT)
	uint32_t start_cycles = k_cycle_get_32();
    8028:	f003 f9a3 	bl	b372 <k_cycle_get_32>
    802c:	6178      	str	r0, [r7, #20]

	/* use 64-bit math to prevent overflow when multiplying */
	uint32_t cycles_to_wait = (uint32_t)(
		(uint64_t)usec_to_wait *
    802e:	687b      	ldr	r3, [r7, #4]
    8030:	2200      	movs	r2, #0
    8032:	469a      	mov	sl, r3
    8034:	4693      	mov	fp, r2
		(uint64_t)sys_clock_hw_cycles_per_sec() /
    8036:	f7ff fcc5 	bl	79c4 <sys_clock_hw_cycles_per_sec>
    803a:	4603      	mov	r3, r0
    803c:	17da      	asrs	r2, r3, #31
    803e:	4698      	mov	r8, r3
    8040:	4691      	mov	r9, r2
		(uint64_t)usec_to_wait *
    8042:	fb08 f20b 	mul.w	r2, r8, fp
    8046:	fb0a f309 	mul.w	r3, sl, r9
    804a:	4413      	add	r3, r2
    804c:	fbaa 4508 	umull	r4, r5, sl, r8
    8050:	442b      	add	r3, r5
    8052:	461d      	mov	r5, r3
		(uint64_t)sys_clock_hw_cycles_per_sec() /
    8054:	4a0d      	ldr	r2, [pc, #52]	; (808c <z_impl_k_busy_wait+0x74>)
    8056:	f04f 0300 	mov.w	r3, #0
    805a:	4620      	mov	r0, r4
    805c:	4629      	mov	r1, r5
    805e:	f7f8 f845 	bl	ec <__aeabi_uldivmod>
    8062:	4602      	mov	r2, r0
    8064:	460b      	mov	r3, r1
	uint32_t cycles_to_wait = (uint32_t)(
    8066:	4613      	mov	r3, r2
    8068:	613b      	str	r3, [r7, #16]
		(uint64_t)USEC_PER_SEC
	);

	for (;;) {
		uint32_t current_cycles = k_cycle_get_32();
    806a:	f003 f982 	bl	b372 <k_cycle_get_32>
    806e:	60f8      	str	r0, [r7, #12]

		/* this handles the rollover on an unsigned 32-bit value */
		if ((current_cycles - start_cycles) >= cycles_to_wait) {
    8070:	68fa      	ldr	r2, [r7, #12]
    8072:	697b      	ldr	r3, [r7, #20]
    8074:	1ad3      	subs	r3, r2, r3
    8076:	693a      	ldr	r2, [r7, #16]
    8078:	429a      	cmp	r2, r3
    807a:	d902      	bls.n	8082 <z_impl_k_busy_wait+0x6a>
	for (;;) {
    807c:	e7f5      	b.n	806a <z_impl_k_busy_wait+0x52>
		return;
    807e:	bf00      	nop
    8080:	e000      	b.n	8084 <z_impl_k_busy_wait+0x6c>
			break;
    8082:	bf00      	nop
	}
#else
	arch_busy_wait(usec_to_wait);
#endif /* CONFIG_ARCH_HAS_CUSTOM_BUSY_WAIT */
	SYS_PORT_TRACING_FUNC_EXIT(k_thread, busy_wait, usec_to_wait);
}
    8084:	3718      	adds	r7, #24
    8086:	46bd      	mov	sp, r7
    8088:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
    808c:	000f4240 	.word	0x000f4240

00008090 <z_timer_expiration_handler>:
 * @brief Handle expiration of a kernel timer object.
 *
 * @param t  Timeout used by the timer.
 */
void z_timer_expiration_handler(struct _timeout *t)
{
    8090:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
    8094:	b09e      	sub	sp, #120	; 0x78
    8096:	af00      	add	r7, sp, #0
    8098:	6178      	str	r0, [r7, #20]
	struct k_timer *timer = CONTAINER_OF(t, struct k_timer, timeout);
    809a:	697b      	ldr	r3, [r7, #20]
    809c:	677b      	str	r3, [r7, #116]	; 0x74
    809e:	4b65      	ldr	r3, [pc, #404]	; (8234 <z_timer_expiration_handler+0x1a4>)
    80a0:	66fb      	str	r3, [r7, #108]	; 0x6c
	__asm__ volatile(
    80a2:	f04f 0320 	mov.w	r3, #32
    80a6:	f3ef 8211 	mrs	r2, BASEPRI
    80aa:	f383 8812 	msr	BASEPRI_MAX, r3
    80ae:	f3bf 8f6f 	isb	sy
    80b2:	66ba      	str	r2, [r7, #104]	; 0x68
    80b4:	667b      	str	r3, [r7, #100]	; 0x64
	return key;
    80b6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
	k.key = arch_irq_lock();
    80b8:	623b      	str	r3, [r7, #32]
	return k;
    80ba:	6a3b      	ldr	r3, [r7, #32]
    80bc:	637b      	str	r3, [r7, #52]	; 0x34

	/*
	 * if the timer is periodic, start it again; don't add _TICK_ALIGN
	 * since we're already aligned to a tick boundary
	 */
	if (!K_TIMEOUT_EQ(timer->period, K_NO_WAIT) &&
    80be:	6f7b      	ldr	r3, [r7, #116]	; 0x74
    80c0:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
    80c4:	f04f 0200 	mov.w	r2, #0
    80c8:	f04f 0300 	mov.w	r3, #0
    80cc:	4299      	cmp	r1, r3
    80ce:	bf08      	it	eq
    80d0:	4290      	cmpeq	r0, r2
    80d2:	d050      	beq.n	8176 <z_timer_expiration_handler+0xe6>
	    !K_TIMEOUT_EQ(timer->period, K_FOREVER)) {
    80d4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
    80d6:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
    80da:	f04f 32ff 	mov.w	r2, #4294967295
    80de:	f04f 33ff 	mov.w	r3, #4294967295
	if (!K_TIMEOUT_EQ(timer->period, K_NO_WAIT) &&
    80e2:	4299      	cmp	r1, r3
    80e4:	bf08      	it	eq
    80e6:	4290      	cmpeq	r0, r2
    80e8:	d045      	beq.n	8176 <z_timer_expiration_handler+0xe6>
		k_timeout_t next = timer->period;
    80ea:	6f7b      	ldr	r3, [r7, #116]	; 0x74
    80ec:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
    80f0:	e9c7 2306 	strd	r2, r3, [r7, #24]
		 * we "should" have run.  Requires absolute timeouts.
		 * (Note offset by one: we're nominally at the
		 * beginning of a tick, so need to defeat the "round
		 * down" behavior on timeout addition).
		 */
		next = K_TIMEOUT_ABS_TICKS(k_uptime_ticks() + 1
    80f4:	f003 f9c0 	bl	b478 <k_uptime_ticks>
    80f8:	4602      	mov	r2, r0
    80fa:	460b      	mov	r3, r1
    80fc:	1c51      	adds	r1, r2, #1
    80fe:	6039      	str	r1, [r7, #0]
    8100:	f143 0300 	adc.w	r3, r3, #0
    8104:	607b      	str	r3, [r7, #4]
    8106:	6f7b      	ldr	r3, [r7, #116]	; 0x74
    8108:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
    810c:	e9d7 0100 	ldrd	r0, r1, [r7]
    8110:	4684      	mov	ip, r0
    8112:	eb1c 0a02 	adds.w	sl, ip, r2
    8116:	eb41 0b03 	adc.w	fp, r1, r3
    811a:	f1ba 0f01 	cmp.w	sl, #1
    811e:	f17b 0300 	sbcs.w	r3, fp, #0
    8122:	db18      	blt.n	8156 <z_timer_expiration_handler+0xc6>
    8124:	f003 f9a8 	bl	b478 <k_uptime_ticks>
    8128:	4602      	mov	r2, r0
    812a:	460b      	mov	r3, r1
    812c:	f112 0801 	adds.w	r8, r2, #1
    8130:	f143 0900 	adc.w	r9, r3, #0
    8134:	6f7b      	ldr	r3, [r7, #116]	; 0x74
    8136:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
    813a:	eb18 0402 	adds.w	r4, r8, r2
    813e:	eb49 0503 	adc.w	r5, r9, r3
    8142:	f06f 0201 	mvn.w	r2, #1
    8146:	f04f 33ff 	mov.w	r3, #4294967295
    814a:	1b12      	subs	r2, r2, r4
    814c:	60ba      	str	r2, [r7, #8]
    814e:	eb63 0305 	sbc.w	r3, r3, r5
    8152:	60fb      	str	r3, [r7, #12]
    8154:	e005      	b.n	8162 <z_timer_expiration_handler+0xd2>
    8156:	f06f 0301 	mvn.w	r3, #1
    815a:	f04f 34ff 	mov.w	r4, #4294967295
    815e:	e9c7 3402 	strd	r3, r4, [r7, #8]
    8162:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
    8166:	e9c7 3406 	strd	r3, r4, [r7, #24]
					   + timer->period.ticks);
#endif
		z_add_timeout(&timer->timeout, z_timer_expiration_handler,
    816a:	6f78      	ldr	r0, [r7, #116]	; 0x74
    816c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
    8170:	4931      	ldr	r1, [pc, #196]	; (8238 <z_timer_expiration_handler+0x1a8>)
    8172:	f7ff fcad 	bl	7ad0 <z_add_timeout>
			      next);
	}

	/* update timer's status */
	timer->status += 1U;
    8176:	6f7b      	ldr	r3, [r7, #116]	; 0x74
    8178:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    817a:	1c5a      	adds	r2, r3, #1
    817c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
    817e:	631a      	str	r2, [r3, #48]	; 0x30

	/* invoke timer expiry function */
	if (timer->expiry_fn != NULL) {
    8180:	6f7b      	ldr	r3, [r7, #116]	; 0x74
    8182:	6a1b      	ldr	r3, [r3, #32]
    8184:	2b00      	cmp	r3, #0
    8186:	d020      	beq.n	81ca <z_timer_expiration_handler+0x13a>
    8188:	4b2a      	ldr	r3, [pc, #168]	; (8234 <z_timer_expiration_handler+0x1a4>)
    818a:	657b      	str	r3, [r7, #84]	; 0x54
    818c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    818e:	62bb      	str	r3, [r7, #40]	; 0x28
	arch_irq_unlock(key.key);
    8190:	6abb      	ldr	r3, [r7, #40]	; 0x28
    8192:	653b      	str	r3, [r7, #80]	; 0x50
	__asm__ volatile(
    8194:	6d3b      	ldr	r3, [r7, #80]	; 0x50
    8196:	f383 8811 	msr	BASEPRI, r3
    819a:	f3bf 8f6f 	isb	sy
}
    819e:	bf00      	nop
}
    81a0:	bf00      	nop
		/* Unlock for user handler. */
		k_spin_unlock(&lock, key);
		timer->expiry_fn(timer);
    81a2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
    81a4:	6a1b      	ldr	r3, [r3, #32]
    81a6:	6f78      	ldr	r0, [r7, #116]	; 0x74
    81a8:	4798      	blx	r3
    81aa:	4b22      	ldr	r3, [pc, #136]	; (8234 <z_timer_expiration_handler+0x1a4>)
    81ac:	663b      	str	r3, [r7, #96]	; 0x60
	__asm__ volatile(
    81ae:	f04f 0320 	mov.w	r3, #32
    81b2:	f3ef 8211 	mrs	r2, BASEPRI
    81b6:	f383 8812 	msr	BASEPRI_MAX, r3
    81ba:	f3bf 8f6f 	isb	sy
    81be:	65fa      	str	r2, [r7, #92]	; 0x5c
    81c0:	65bb      	str	r3, [r7, #88]	; 0x58
	return key;
    81c2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
	k.key = arch_irq_lock();
    81c4:	627b      	str	r3, [r7, #36]	; 0x24
	return k;
    81c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    81c8:	637b      	str	r3, [r7, #52]	; 0x34
	if (!IS_ENABLED(CONFIG_MULTITHREADING)) {
		k_spin_unlock(&lock, key);
		return;
	}

	thread = z_waitq_head(&timer->wait_q);
    81ca:	6f7b      	ldr	r3, [r7, #116]	; 0x74
    81cc:	3318      	adds	r3, #24
    81ce:	4618      	mov	r0, r3
    81d0:	f003 f988 	bl	b4e4 <z_waitq_head>
    81d4:	6738      	str	r0, [r7, #112]	; 0x70

	if (thread == NULL) {
    81d6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
    81d8:	2b00      	cmp	r3, #0
    81da:	d10c      	bne.n	81f6 <z_timer_expiration_handler+0x166>
    81dc:	4b15      	ldr	r3, [pc, #84]	; (8234 <z_timer_expiration_handler+0x1a4>)
    81de:	64fb      	str	r3, [r7, #76]	; 0x4c
    81e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    81e2:	62fb      	str	r3, [r7, #44]	; 0x2c
	arch_irq_unlock(key.key);
    81e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    81e6:	64bb      	str	r3, [r7, #72]	; 0x48
	__asm__ volatile(
    81e8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    81ea:	f383 8811 	msr	BASEPRI, r3
    81ee:	f3bf 8f6f 	isb	sy
}
    81f2:	bf00      	nop
}
    81f4:	e01a      	b.n	822c <z_timer_expiration_handler+0x19c>
		k_spin_unlock(&lock, key);
		return;
	}

	z_unpend_thread_no_timeout(thread);
    81f6:	6f38      	ldr	r0, [r7, #112]	; 0x70
    81f8:	f7fe ff9e 	bl	7138 <z_unpend_thread_no_timeout>
    81fc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
    81fe:	63fb      	str	r3, [r7, #60]	; 0x3c
    8200:	2300      	movs	r3, #0
    8202:	63bb      	str	r3, [r7, #56]	; 0x38
	thread->swap_retval = value;
    8204:	6bba      	ldr	r2, [r7, #56]	; 0x38
    8206:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    8208:	665a      	str	r2, [r3, #100]	; 0x64
}
    820a:	bf00      	nop
    820c:	4b09      	ldr	r3, [pc, #36]	; (8234 <z_timer_expiration_handler+0x1a4>)
    820e:	647b      	str	r3, [r7, #68]	; 0x44
    8210:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    8212:	633b      	str	r3, [r7, #48]	; 0x30
	arch_irq_unlock(key.key);
    8214:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    8216:	643b      	str	r3, [r7, #64]	; 0x40
	__asm__ volatile(
    8218:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    821a:	f383 8811 	msr	BASEPRI, r3
    821e:	f3bf 8f6f 	isb	sy
}
    8222:	bf00      	nop
}
    8224:	bf00      	nop

	arch_thread_return_value_set(thread, 0);

	k_spin_unlock(&lock, key);

	z_ready_thread(thread);
    8226:	6f38      	ldr	r0, [r7, #112]	; 0x70
    8228:	f7fe fdf8 	bl	6e1c <z_ready_thread>
}
    822c:	3778      	adds	r7, #120	; 0x78
    822e:	46bd      	mov	sp, r7
    8230:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
    8234:	20000888 	.word	0x20000888
    8238:	00008091 	.word	0x00008091

0000823c <z_impl_k_timer_start>:
}


void z_impl_k_timer_start(struct k_timer *timer, k_timeout_t duration,
			  k_timeout_t period)
{
    823c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
    8240:	b086      	sub	sp, #24
    8242:	af00      	add	r7, sp, #0
    8244:	6178      	str	r0, [r7, #20]
    8246:	e9c7 2302 	strd	r2, r3, [r7, #8]
	SYS_PORT_TRACING_OBJ_FUNC(k_timer, start, timer);

	if (K_TIMEOUT_EQ(duration, K_FOREVER)) {
    824a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
    824e:	f04f 30ff 	mov.w	r0, #4294967295
    8252:	f04f 31ff 	mov.w	r1, #4294967295
    8256:	428b      	cmp	r3, r1
    8258:	bf08      	it	eq
    825a:	4282      	cmpeq	r2, r0
    825c:	d100      	bne.n	8260 <z_impl_k_timer_start+0x24>
    825e:	e059      	b.n	8314 <z_impl_k_timer_start+0xd8>
	 * for backwards compatibility.  This is unfortunate
	 * (i.e. k_timer_start() doesn't treat its initial sleep
	 * argument the same way k_sleep() does), but historical.  The
	 * timer_api test relies on this behavior.
	 */
	if (!K_TIMEOUT_EQ(period, K_FOREVER) && period.ticks != 0 &&
    8260:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
    8264:	f04f 30ff 	mov.w	r0, #4294967295
    8268:	f04f 31ff 	mov.w	r1, #4294967295
    826c:	428b      	cmp	r3, r1
    826e:	bf08      	it	eq
    8270:	4282      	cmpeq	r2, r0
    8272:	d021      	beq.n	82b8 <z_impl_k_timer_start+0x7c>
    8274:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
    8278:	4313      	orrs	r3, r2
    827a:	d01d      	beq.n	82b8 <z_impl_k_timer_start+0x7c>
	    Z_TICK_ABS(period.ticks) < 0) {
    827c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
    8280:	f06f 0001 	mvn.w	r0, #1
    8284:	f04f 31ff 	mov.w	r1, #4294967295
    8288:	1a80      	subs	r0, r0, r2
    828a:	6038      	str	r0, [r7, #0]
    828c:	eb61 0303 	sbc.w	r3, r1, r3
    8290:	607b      	str	r3, [r7, #4]
	if (!K_TIMEOUT_EQ(period, K_FOREVER) && period.ticks != 0 &&
    8292:	687b      	ldr	r3, [r7, #4]
    8294:	2b00      	cmp	r3, #0
    8296:	da0f      	bge.n	82b8 <z_impl_k_timer_start+0x7c>
		period.ticks = MAX(period.ticks - 1, 1);
    8298:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
    829c:	2a02      	cmp	r2, #2
    829e:	f173 0100 	sbcs.w	r1, r3, #0
    82a2:	da03      	bge.n	82ac <z_impl_k_timer_start+0x70>
    82a4:	f04f 0202 	mov.w	r2, #2
    82a8:	f04f 0300 	mov.w	r3, #0
    82ac:	f112 3aff 	adds.w	sl, r2, #4294967295
    82b0:	f143 3bff 	adc.w	fp, r3, #4294967295
    82b4:	e9c7 ab0e 	strd	sl, fp, [r7, #56]	; 0x38
	}
	if (Z_TICK_ABS(duration.ticks) < 0) {
    82b8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
    82bc:	f06f 0001 	mvn.w	r0, #1
    82c0:	f04f 31ff 	mov.w	r1, #4294967295
    82c4:	ebb0 0802 	subs.w	r8, r0, r2
    82c8:	eb61 0903 	sbc.w	r9, r1, r3
    82cc:	f1b9 0f00 	cmp.w	r9, #0
    82d0:	da0e      	bge.n	82f0 <z_impl_k_timer_start+0xb4>
		duration.ticks = MAX(duration.ticks - 1, 0);
    82d2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
    82d6:	2a01      	cmp	r2, #1
    82d8:	f173 0100 	sbcs.w	r1, r3, #0
    82dc:	da03      	bge.n	82e6 <z_impl_k_timer_start+0xaa>
    82de:	f04f 0201 	mov.w	r2, #1
    82e2:	f04f 0300 	mov.w	r3, #0
    82e6:	1e54      	subs	r4, r2, #1
    82e8:	f143 35ff 	adc.w	r5, r3, #4294967295
    82ec:	e9c7 4502 	strd	r4, r5, [r7, #8]
	}

	(void)z_abort_timeout(&timer->timeout);
    82f0:	697b      	ldr	r3, [r7, #20]
    82f2:	4618      	mov	r0, r3
    82f4:	f7ff fcda 	bl	7cac <z_abort_timeout>
	timer->period = period;
    82f8:	6979      	ldr	r1, [r7, #20]
    82fa:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
    82fe:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
	timer->status = 0U;
    8302:	697b      	ldr	r3, [r7, #20]
    8304:	2200      	movs	r2, #0
    8306:	631a      	str	r2, [r3, #48]	; 0x30

	z_add_timeout(&timer->timeout, z_timer_expiration_handler,
    8308:	6978      	ldr	r0, [r7, #20]
    830a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
    830e:	4903      	ldr	r1, [pc, #12]	; (831c <z_impl_k_timer_start+0xe0>)
    8310:	f7ff fbde 	bl	7ad0 <z_add_timeout>
		     duration);
}
    8314:	3718      	adds	r7, #24
    8316:	46bd      	mov	sp, r7
    8318:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
    831c:	00008091 	.word	0x00008091

00008320 <boot_banner>:
#define BOOT_DELAY_BANNER ""
#endif

#if defined(CONFIG_BOOT_DELAY) || CONFIG_BOOT_DELAY > 0
void boot_banner(void)
{
    8320:	b580      	push	{r7, lr}
    8322:	af00      	add	r7, sp, #0
	static const unsigned int boot_delay = CONFIG_BOOT_DELAY;
#else
	static const unsigned int boot_delay;
#endif

	if (boot_delay > 0 && IS_ENABLED(CONFIG_MULTITHREADING)) {
    8324:	4b08      	ldr	r3, [pc, #32]	; (8348 <boot_banner+0x28>)
    8326:	681b      	ldr	r3, [r3, #0]
    8328:	2b00      	cmp	r3, #0
    832a:	d005      	beq.n	8338 <boot_banner+0x18>
		printk("***** delaying boot " STRINGIFY(
    832c:	4807      	ldr	r0, [pc, #28]	; (834c <boot_banner+0x2c>)
    832e:	f000 f950 	bl	85d2 <printk>
			CONFIG_BOOT_DELAY) "ms (per build configuration) *****\n");
		k_busy_wait(CONFIG_BOOT_DELAY * USEC_PER_MSEC);
    8332:	2000      	movs	r0, #0
    8334:	f003 f932 	bl	b59c <k_busy_wait>
	}

#if defined(CONFIG_BOOT_BANNER)
#ifdef BUILD_VERSION
	printk("*** Booting Zephyr OS build %s %s ***\n",
    8338:	4a05      	ldr	r2, [pc, #20]	; (8350 <boot_banner+0x30>)
    833a:	4906      	ldr	r1, [pc, #24]	; (8354 <boot_banner+0x34>)
    833c:	4806      	ldr	r0, [pc, #24]	; (8358 <boot_banner+0x38>)
    833e:	f000 f948 	bl	85d2 <printk>
#else
	printk("*** Booting Zephyr OS version %s %s ***\n",
	       KERNEL_VERSION_STRING, BOOT_DELAY_BANNER);
#endif
#endif
}
    8342:	bf00      	nop
    8344:	bd80      	pop	{r7, pc}
    8346:	bf00      	nop
    8348:	0000c084 	.word	0x0000c084
    834c:	0000bf14 	.word	0x0000bf14
    8350:	0000bf50 	.word	0x0000bf50
    8354:	0000bf54 	.word	0x0000bf54
    8358:	0000bf74 	.word	0x0000bf74

0000835c <_OffsetAbsSyms>:
/*
 * The final link step uses the symbol _OffsetAbsSyms to force the linkage of
 * offsets.o into the ELF image.
 */

GEN_ABS_SYM_BEGIN(_OffsetAbsSyms)
    835c:	b480      	push	{r7}
    835e:	af00      	add	r7, sp, #0

#include <gen_offset.h>

#include "offsets_aarch32.c"

GEN_ABS_SYM_END
    8360:	bf00      	nop
    8362:	46bd      	mov	sp, r7
    8364:	bc80      	pop	{r7}
    8366:	4770      	bx	lr

00008368 <k_is_user_context>:
 *
 * @return true if the CPU is currently running with user permissions
 */
__pinned_func
static inline bool k_is_user_context(void)
{
    8368:	b480      	push	{r7}
    836a:	af00      	add	r7, sp, #0
#ifdef CONFIG_USERSPACE
	return arch_is_user_context();
#else
	return false;
    836c:	2300      	movs	r3, #0
#endif
}
    836e:	4618      	mov	r0, r3
    8370:	46bd      	mov	sp, r7
    8372:	bc80      	pop	{r7}
    8374:	4770      	bx	lr

00008376 <k_msleep>:
 *
 * @return Zero if the requested time has elapsed or the number of milliseconds
 * left to sleep, if thread was woken up by \ref k_wakeup call.
 */
static inline int32_t k_msleep(int32_t ms)
{
    8376:	b5b0      	push	{r4, r5, r7, lr}
    8378:	b082      	sub	sp, #8
    837a:	af00      	add	r7, sp, #0
    837c:	6078      	str	r0, [r7, #4]
	return k_sleep(Z_TIMEOUT_MS(ms));
    837e:	687b      	ldr	r3, [r7, #4]
    8380:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
    8384:	17da      	asrs	r2, r3, #31
    8386:	461c      	mov	r4, r3
    8388:	4615      	mov	r5, r2
    838a:	4620      	mov	r0, r4
    838c:	4629      	mov	r1, r5
    838e:	f7f8 f81b 	bl	3c8 <k_ms_to_ticks_ceil64>
    8392:	4602      	mov	r2, r0
    8394:	460b      	mov	r3, r1
    8396:	4610      	mov	r0, r2
    8398:	4619      	mov	r1, r3
    839a:	f000 f805 	bl	83a8 <k_sleep>
    839e:	4603      	mov	r3, r0
}
    83a0:	4618      	mov	r0, r3
    83a2:	3708      	adds	r7, #8
    83a4:	46bd      	mov	sp, r7
    83a6:	bdb0      	pop	{r4, r5, r7, pc}

000083a8 <k_sleep>:

extern int32_t z_impl_k_sleep(k_timeout_t timeout);

__pinned_func
static inline int32_t k_sleep(k_timeout_t timeout)
{
    83a8:	b580      	push	{r7, lr}
    83aa:	b082      	sub	sp, #8
    83ac:	af00      	add	r7, sp, #0
    83ae:	e9c7 0100 	strd	r0, r1, [r7]
		union { struct { uintptr_t lo, hi; } split; k_timeout_t val; } parm0 = { .val = timeout };
		return (int32_t) arch_syscall_invoke2(parm0.split.lo, parm0.split.hi, K_SYSCALL_K_SLEEP);
	}
#endif
	compiler_barrier();
	return z_impl_k_sleep(timeout);
    83b2:	e9d7 0100 	ldrd	r0, r1, [r7]
    83b6:	f7ff f9c3 	bl	7740 <z_impl_k_sleep>
    83ba:	4603      	mov	r3, r0
}
    83bc:	4618      	mov	r0, r3
    83be:	3708      	adds	r7, #8
    83c0:	46bd      	mov	sp, r7
    83c2:	bd80      	pop	{r7, pc}

000083c4 <z_log_msg2_runtime_create>:
static inline void z_log_msg2_runtime_create(uint8_t domain_id,
					     const void *source,
					     uint8_t level, const void *data,
					     size_t dlen, uint32_t package_flags,
					     const char *fmt, ...)
{
    83c4:	b580      	push	{r7, lr}
    83c6:	b08a      	sub	sp, #40	; 0x28
    83c8:	af04      	add	r7, sp, #16
    83ca:	60b9      	str	r1, [r7, #8]
    83cc:	607b      	str	r3, [r7, #4]
    83ce:	4603      	mov	r3, r0
    83d0:	73fb      	strb	r3, [r7, #15]
    83d2:	4613      	mov	r3, r2
    83d4:	73bb      	strb	r3, [r7, #14]
	va_list ap;

	va_start(ap, fmt);
    83d6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
    83da:	617b      	str	r3, [r7, #20]
	z_log_msg2_runtime_vcreate(domain_id, source, level,
    83dc:	7bba      	ldrb	r2, [r7, #14]
    83de:	7bf8      	ldrb	r0, [r7, #15]
    83e0:	697b      	ldr	r3, [r7, #20]
    83e2:	9303      	str	r3, [sp, #12]
    83e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
    83e6:	9302      	str	r3, [sp, #8]
    83e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    83ea:	9301      	str	r3, [sp, #4]
    83ec:	6a3b      	ldr	r3, [r7, #32]
    83ee:	9300      	str	r3, [sp, #0]
    83f0:	687b      	ldr	r3, [r7, #4]
    83f2:	68b9      	ldr	r1, [r7, #8]
    83f4:	f000 f804 	bl	8400 <z_log_msg2_runtime_vcreate>
				   data, dlen, package_flags, fmt, ap);
	va_end(ap);
}
    83f8:	bf00      	nop
    83fa:	3718      	adds	r7, #24
    83fc:	46bd      	mov	sp, r7
    83fe:	bd80      	pop	{r7, pc}

00008400 <z_log_msg2_runtime_vcreate>:

extern void z_impl_z_log_msg2_runtime_vcreate(uint8_t domain_id, const void * source, uint8_t level, const void * data, size_t dlen, uint32_t package_flags, const char * fmt, va_list ap);

__pinned_func
static inline void z_log_msg2_runtime_vcreate(uint8_t domain_id, const void * source, uint8_t level, const void * data, size_t dlen, uint32_t package_flags, const char * fmt, va_list ap)
{
    8400:	b580      	push	{r7, lr}
    8402:	b088      	sub	sp, #32
    8404:	af04      	add	r7, sp, #16
    8406:	60b9      	str	r1, [r7, #8]
    8408:	607b      	str	r3, [r7, #4]
    840a:	4603      	mov	r3, r0
    840c:	73fb      	strb	r3, [r7, #15]
    840e:	4613      	mov	r3, r2
    8410:	73bb      	strb	r3, [r7, #14]
		va_end(parm7.val);
		return;
	}
#endif
	compiler_barrier();
	z_impl_z_log_msg2_runtime_vcreate(domain_id, source, level, data, dlen, package_flags, fmt, ap);
    8412:	7bba      	ldrb	r2, [r7, #14]
    8414:	7bf8      	ldrb	r0, [r7, #15]
    8416:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    8418:	9303      	str	r3, [sp, #12]
    841a:	6a3b      	ldr	r3, [r7, #32]
    841c:	9302      	str	r3, [sp, #8]
    841e:	69fb      	ldr	r3, [r7, #28]
    8420:	9301      	str	r3, [sp, #4]
    8422:	69bb      	ldr	r3, [r7, #24]
    8424:	9300      	str	r3, [sp, #0]
    8426:	687b      	ldr	r3, [r7, #4]
    8428:	68b9      	ldr	r1, [r7, #8]
    842a:	f001 fbf8 	bl	9c1e <z_impl_z_log_msg2_runtime_vcreate>
}
    842e:	bf00      	nop
    8430:	3710      	adds	r7, #16
    8432:	46bd      	mov	sp, r7
    8434:	bd80      	pop	{r7, pc}

00008436 <ptr_in_rodata>:
{
    8436:	b580      	push	{r7, lr}
    8438:	b082      	sub	sp, #8
    843a:	af00      	add	r7, sp, #0
    843c:	6078      	str	r0, [r7, #4]
	return linker_is_in_rodata(addr);
    843e:	6878      	ldr	r0, [r7, #4]
    8440:	f7f8 fa5c 	bl	8fc <linker_is_in_rodata>
    8444:	4603      	mov	r3, r0
}
    8446:	4618      	mov	r0, r3
    8448:	3708      	adds	r7, #8
    844a:	46bd      	mov	sp, r7
    844c:	bd80      	pop	{r7, pc}

0000844e <cbprintf_via_va_list>:
{
    844e:	b590      	push	{r4, r7, lr}
    8450:	b087      	sub	sp, #28
    8452:	af00      	add	r7, sp, #0
    8454:	60f8      	str	r0, [r7, #12]
    8456:	60b9      	str	r1, [r7, #8]
    8458:	607a      	str	r2, [r7, #4]
    845a:	603b      	str	r3, [r7, #0]
	u.ptr = buf;
    845c:	6abb      	ldr	r3, [r7, #40]	; 0x28
    845e:	617b      	str	r3, [r7, #20]
	return formatter(out, ctx, fmt, u.ap);
    8460:	68bc      	ldr	r4, [r7, #8]
    8462:	697b      	ldr	r3, [r7, #20]
    8464:	683a      	ldr	r2, [r7, #0]
    8466:	6879      	ldr	r1, [r7, #4]
    8468:	68f8      	ldr	r0, [r7, #12]
    846a:	47a0      	blx	r4
    846c:	4603      	mov	r3, r0
}
    846e:	4618      	mov	r0, r3
    8470:	371c      	adds	r7, #28
    8472:	46bd      	mov	sp, r7
    8474:	bd90      	pop	{r4, r7, pc}

00008476 <cbpprintf_external>:
}

int cbpprintf_external(cbprintf_cb out,
		       cbvprintf_exteral_formatter_func formatter,
		       void *ctx, void *packaged)
{
    8476:	b580      	push	{r7, lr}
    8478:	b090      	sub	sp, #64	; 0x40
    847a:	af02      	add	r7, sp, #8
    847c:	60f8      	str	r0, [r7, #12]
    847e:	60b9      	str	r1, [r7, #8]
    8480:	607a      	str	r2, [r7, #4]
    8482:	603b      	str	r3, [r7, #0]
	uint8_t *buf = packaged;
    8484:	683b      	ldr	r3, [r7, #0]
    8486:	62fb      	str	r3, [r7, #44]	; 0x2c
	char *fmt, *s, **ps;
	unsigned int i, args_size, s_nbr, ros_nbr, rws_nbr, s_idx;

	if (buf == NULL) {
    8488:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    848a:	2b00      	cmp	r3, #0
    848c:	d102      	bne.n	8494 <cbpprintf_external+0x1e>
		return -EINVAL;
    848e:	f06f 0315 	mvn.w	r3, #21
    8492:	e045      	b.n	8520 <cbpprintf_external+0xaa>
	}

	/* Retrieve the size of the arg list and number of strings. */
	args_size = buf[0] * sizeof(int);
    8494:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    8496:	781b      	ldrb	r3, [r3, #0]
    8498:	009b      	lsls	r3, r3, #2
    849a:	62bb      	str	r3, [r7, #40]	; 0x28
	s_nbr     = buf[1];
    849c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    849e:	3301      	adds	r3, #1
    84a0:	781b      	ldrb	r3, [r3, #0]
    84a2:	627b      	str	r3, [r7, #36]	; 0x24
	ros_nbr   = buf[2];
    84a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    84a6:	3302      	adds	r3, #2
    84a8:	781b      	ldrb	r3, [r3, #0]
    84aa:	623b      	str	r3, [r7, #32]
	rws_nbr   = buf[3];
    84ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    84ae:	3303      	adds	r3, #3
    84b0:	781b      	ldrb	r3, [r3, #0]
    84b2:	61fb      	str	r3, [r7, #28]

	/* Locate the string table */
	s = (char *)(buf + args_size + ros_nbr + rws_nbr);
    84b4:	6aba      	ldr	r2, [r7, #40]	; 0x28
    84b6:	6a3b      	ldr	r3, [r7, #32]
    84b8:	441a      	add	r2, r3
    84ba:	69fb      	ldr	r3, [r7, #28]
    84bc:	4413      	add	r3, r2
    84be:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    84c0:	4413      	add	r3, r2
    84c2:	637b      	str	r3, [r7, #52]	; 0x34

	/*
	 * Patch in string pointers.
	 */
	for (i = 0; i < s_nbr; i++) {
    84c4:	2300      	movs	r3, #0
    84c6:	633b      	str	r3, [r7, #48]	; 0x30
    84c8:	e017      	b.n	84fa <cbpprintf_external+0x84>
		/* Locate pointer location for this string */
		s_idx = *(uint8_t *)s++;
    84ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    84cc:	1c5a      	adds	r2, r3, #1
    84ce:	637a      	str	r2, [r7, #52]	; 0x34
    84d0:	781b      	ldrb	r3, [r3, #0]
    84d2:	617b      	str	r3, [r7, #20]
		ps = (char **)(buf + s_idx * sizeof(int));
    84d4:	697b      	ldr	r3, [r7, #20]
    84d6:	009b      	lsls	r3, r3, #2
    84d8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    84da:	4413      	add	r3, r2
    84dc:	613b      	str	r3, [r7, #16]
		/* update the pointer with current string location */
		*ps = s;
    84de:	693b      	ldr	r3, [r7, #16]
    84e0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
    84e2:	601a      	str	r2, [r3, #0]
		/* move to next string */
		s += strlen(s) + 1;
    84e4:	6b78      	ldr	r0, [r7, #52]	; 0x34
    84e6:	f001 fd7a 	bl	9fde <strlen>
    84ea:	4603      	mov	r3, r0
    84ec:	3301      	adds	r3, #1
    84ee:	6b7a      	ldr	r2, [r7, #52]	; 0x34
    84f0:	4413      	add	r3, r2
    84f2:	637b      	str	r3, [r7, #52]	; 0x34
	for (i = 0; i < s_nbr; i++) {
    84f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    84f6:	3301      	adds	r3, #1
    84f8:	633b      	str	r3, [r7, #48]	; 0x30
    84fa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
    84fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    84fe:	429a      	cmp	r2, r3
    8500:	d3e3      	bcc.n	84ca <cbpprintf_external+0x54>
	}

	/* Retrieve format string */
	fmt = ((char **)buf)[1];
    8502:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    8504:	685b      	ldr	r3, [r3, #4]
    8506:	61bb      	str	r3, [r7, #24]

	/* skip past format string pointer */
	buf += sizeof(char *) * 2;
    8508:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    850a:	3308      	adds	r3, #8
    850c:	62fb      	str	r3, [r7, #44]	; 0x2c

	/* Turn this into a va_list and  print it */
	return cbprintf_via_va_list(out, formatter, ctx, fmt, buf);
    850e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    8510:	9300      	str	r3, [sp, #0]
    8512:	69bb      	ldr	r3, [r7, #24]
    8514:	687a      	ldr	r2, [r7, #4]
    8516:	68b9      	ldr	r1, [r7, #8]
    8518:	68f8      	ldr	r0, [r7, #12]
    851a:	f7ff ff98 	bl	844e <cbprintf_via_va_list>
    851e:	4603      	mov	r3, r0
}
    8520:	4618      	mov	r0, r3
    8522:	3738      	adds	r7, #56	; 0x38
    8524:	46bd      	mov	sp, r7
    8526:	bd80      	pop	{r7, pc}

00008528 <k_is_user_context>:
{
    8528:	b480      	push	{r7}
    852a:	af00      	add	r7, sp, #0
	return false;
    852c:	2300      	movs	r3, #0
}
    852e:	4618      	mov	r0, r3
    8530:	46bd      	mov	sp, r7
    8532:	bc80      	pop	{r7}
    8534:	4770      	bx	lr

00008536 <k_str_out>:

extern void z_impl_k_str_out(char * c, size_t n);

__pinned_func
static inline void k_str_out(char * c, size_t n)
{
    8536:	b580      	push	{r7, lr}
    8538:	b082      	sub	sp, #8
    853a:	af00      	add	r7, sp, #0
    853c:	6078      	str	r0, [r7, #4]
    853e:	6039      	str	r1, [r7, #0]
		(void) arch_syscall_invoke2(parm0.x, parm1.x, K_SYSCALL_K_STR_OUT);
		return;
	}
#endif
	compiler_barrier();
	z_impl_k_str_out(c, n);
    8540:	6839      	ldr	r1, [r7, #0]
    8542:	6878      	ldr	r0, [r7, #4]
    8544:	f7f8 fdaa 	bl	109c <z_impl_k_str_out>
}
    8548:	bf00      	nop
    854a:	3708      	adds	r7, #8
    854c:	46bd      	mov	sp, r7
    854e:	bd80      	pop	{r7, pc}

00008550 <arch_printk_char_out>:
{
    8550:	b480      	push	{r7}
    8552:	b083      	sub	sp, #12
    8554:	af00      	add	r7, sp, #0
    8556:	6078      	str	r0, [r7, #4]
	return 0;
    8558:	2300      	movs	r3, #0
}
    855a:	4618      	mov	r0, r3
    855c:	370c      	adds	r7, #12
    855e:	46bd      	mov	sp, r7
    8560:	bc80      	pop	{r7}
    8562:	4770      	bx	lr

00008564 <buf_flush>:
{
    8564:	b580      	push	{r7, lr}
    8566:	b082      	sub	sp, #8
    8568:	af00      	add	r7, sp, #0
    856a:	6078      	str	r0, [r7, #4]
	k_str_out(ctx->buf, ctx->buf_count);
    856c:	687b      	ldr	r3, [r7, #4]
    856e:	f103 0208 	add.w	r2, r3, #8
    8572:	687b      	ldr	r3, [r7, #4]
    8574:	685b      	ldr	r3, [r3, #4]
    8576:	4619      	mov	r1, r3
    8578:	4610      	mov	r0, r2
    857a:	f7ff ffdc 	bl	8536 <k_str_out>
	ctx->buf_count = 0U;
    857e:	687b      	ldr	r3, [r7, #4]
    8580:	2200      	movs	r2, #0
    8582:	605a      	str	r2, [r3, #4]
}
    8584:	bf00      	nop
    8586:	3708      	adds	r7, #8
    8588:	46bd      	mov	sp, r7
    858a:	bd80      	pop	{r7, pc}

0000858c <buf_char_out>:
{
    858c:	b580      	push	{r7, lr}
    858e:	b084      	sub	sp, #16
    8590:	af00      	add	r7, sp, #0
    8592:	6078      	str	r0, [r7, #4]
    8594:	6039      	str	r1, [r7, #0]
	struct buf_out_context *ctx = ctx_p;
    8596:	683b      	ldr	r3, [r7, #0]
    8598:	60fb      	str	r3, [r7, #12]
	ctx->count++;
    859a:	68fb      	ldr	r3, [r7, #12]
    859c:	681b      	ldr	r3, [r3, #0]
    859e:	1c5a      	adds	r2, r3, #1
    85a0:	68fb      	ldr	r3, [r7, #12]
    85a2:	601a      	str	r2, [r3, #0]
	ctx->buf[ctx->buf_count++] = c;
    85a4:	68fb      	ldr	r3, [r7, #12]
    85a6:	685b      	ldr	r3, [r3, #4]
    85a8:	1c59      	adds	r1, r3, #1
    85aa:	68fa      	ldr	r2, [r7, #12]
    85ac:	6051      	str	r1, [r2, #4]
    85ae:	687a      	ldr	r2, [r7, #4]
    85b0:	b2d1      	uxtb	r1, r2
    85b2:	68fa      	ldr	r2, [r7, #12]
    85b4:	4413      	add	r3, r2
    85b6:	460a      	mov	r2, r1
    85b8:	721a      	strb	r2, [r3, #8]
	if (ctx->buf_count == CONFIG_PRINTK_BUFFER_SIZE) {
    85ba:	68fb      	ldr	r3, [r7, #12]
    85bc:	685b      	ldr	r3, [r3, #4]
    85be:	2b00      	cmp	r3, #0
    85c0:	d102      	bne.n	85c8 <buf_char_out+0x3c>
		buf_flush(ctx);
    85c2:	68f8      	ldr	r0, [r7, #12]
    85c4:	f7ff ffce 	bl	8564 <buf_flush>
	return c;
    85c8:	687b      	ldr	r3, [r7, #4]
}
    85ca:	4618      	mov	r0, r3
    85cc:	3710      	adds	r7, #16
    85ce:	46bd      	mov	sp, r7
    85d0:	bd80      	pop	{r7, pc}

000085d2 <printk>:
{
    85d2:	b40f      	push	{r0, r1, r2, r3}
    85d4:	b580      	push	{r7, lr}
    85d6:	b082      	sub	sp, #8
    85d8:	af00      	add	r7, sp, #0
	va_start(ap, fmt);
    85da:	f107 0314 	add.w	r3, r7, #20
    85de:	607b      	str	r3, [r7, #4]
	vprintk(fmt, ap);
    85e0:	6879      	ldr	r1, [r7, #4]
    85e2:	6938      	ldr	r0, [r7, #16]
    85e4:	f7f8 fd2a 	bl	103c <vprintk>
}
    85e8:	bf00      	nop
    85ea:	3708      	adds	r7, #8
    85ec:	46bd      	mov	sp, r7
    85ee:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
    85f2:	b004      	add	sp, #16
    85f4:	4770      	bx	lr

000085f6 <str_out>:
{
    85f6:	b480      	push	{r7}
    85f8:	b083      	sub	sp, #12
    85fa:	af00      	add	r7, sp, #0
    85fc:	6078      	str	r0, [r7, #4]
    85fe:	6039      	str	r1, [r7, #0]
	if (ctx->str == NULL || ctx->count >= ctx->max) {
    8600:	683b      	ldr	r3, [r7, #0]
    8602:	681b      	ldr	r3, [r3, #0]
    8604:	2b00      	cmp	r3, #0
    8606:	d005      	beq.n	8614 <str_out+0x1e>
    8608:	683b      	ldr	r3, [r7, #0]
    860a:	689a      	ldr	r2, [r3, #8]
    860c:	683b      	ldr	r3, [r7, #0]
    860e:	685b      	ldr	r3, [r3, #4]
    8610:	429a      	cmp	r2, r3
    8612:	db06      	blt.n	8622 <str_out+0x2c>
		ctx->count++;
    8614:	683b      	ldr	r3, [r7, #0]
    8616:	689b      	ldr	r3, [r3, #8]
    8618:	1c5a      	adds	r2, r3, #1
    861a:	683b      	ldr	r3, [r7, #0]
    861c:	609a      	str	r2, [r3, #8]
		return c;
    861e:	687b      	ldr	r3, [r7, #4]
    8620:	e01d      	b.n	865e <str_out+0x68>
	if (ctx->count == ctx->max - 1) {
    8622:	683b      	ldr	r3, [r7, #0]
    8624:	689a      	ldr	r2, [r3, #8]
    8626:	683b      	ldr	r3, [r7, #0]
    8628:	685b      	ldr	r3, [r3, #4]
    862a:	3b01      	subs	r3, #1
    862c:	429a      	cmp	r2, r3
    862e:	d10a      	bne.n	8646 <str_out+0x50>
		ctx->str[ctx->count++] = '\0';
    8630:	683b      	ldr	r3, [r7, #0]
    8632:	681a      	ldr	r2, [r3, #0]
    8634:	683b      	ldr	r3, [r7, #0]
    8636:	689b      	ldr	r3, [r3, #8]
    8638:	1c58      	adds	r0, r3, #1
    863a:	6839      	ldr	r1, [r7, #0]
    863c:	6088      	str	r0, [r1, #8]
    863e:	4413      	add	r3, r2
    8640:	2200      	movs	r2, #0
    8642:	701a      	strb	r2, [r3, #0]
    8644:	e00a      	b.n	865c <str_out+0x66>
		ctx->str[ctx->count++] = c;
    8646:	683b      	ldr	r3, [r7, #0]
    8648:	681a      	ldr	r2, [r3, #0]
    864a:	683b      	ldr	r3, [r7, #0]
    864c:	689b      	ldr	r3, [r3, #8]
    864e:	1c58      	adds	r0, r3, #1
    8650:	6839      	ldr	r1, [r7, #0]
    8652:	6088      	str	r0, [r1, #8]
    8654:	4413      	add	r3, r2
    8656:	687a      	ldr	r2, [r7, #4]
    8658:	b2d2      	uxtb	r2, r2
    865a:	701a      	strb	r2, [r3, #0]
	return c;
    865c:	687b      	ldr	r3, [r7, #4]
}
    865e:	4618      	mov	r0, r3
    8660:	370c      	adds	r7, #12
    8662:	46bd      	mov	sp, r7
    8664:	bc80      	pop	{r7}
    8666:	4770      	bx	lr

00008668 <snprintk>:
{
    8668:	b40c      	push	{r2, r3}
    866a:	b580      	push	{r7, lr}
    866c:	b084      	sub	sp, #16
    866e:	af00      	add	r7, sp, #0
    8670:	6078      	str	r0, [r7, #4]
    8672:	6039      	str	r1, [r7, #0]
	va_start(ap, fmt);
    8674:	f107 031c 	add.w	r3, r7, #28
    8678:	60bb      	str	r3, [r7, #8]
	ret = vsnprintk(str, size, fmt, ap);
    867a:	68bb      	ldr	r3, [r7, #8]
    867c:	69ba      	ldr	r2, [r7, #24]
    867e:	6839      	ldr	r1, [r7, #0]
    8680:	6878      	ldr	r0, [r7, #4]
    8682:	f7f8 fd29 	bl	10d8 <vsnprintk>
    8686:	60f8      	str	r0, [r7, #12]
	return ret;
    8688:	68fb      	ldr	r3, [r7, #12]
}
    868a:	4618      	mov	r0, r3
    868c:	3710      	adds	r7, #16
    868e:	46bd      	mov	sp, r7
    8690:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
    8694:	b002      	add	sp, #8
    8696:	4770      	bx	lr

00008698 <k_current_get>:
 * @return ID of current thread.
 *
 */
__attribute_const__
static inline k_tid_t k_current_get(void)
{
    8698:	b580      	push	{r7, lr}
    869a:	af00      	add	r7, sp, #0
#ifdef CONFIG_THREAD_LOCAL_STORAGE
	return z_tls_current;
#else
	return z_current_get();
    869c:	f000 f803 	bl	86a6 <z_current_get>
    86a0:	4603      	mov	r3, r0
#endif
}
    86a2:	4618      	mov	r0, r3
    86a4:	bd80      	pop	{r7, pc}

000086a6 <z_current_get>:
{
    86a6:	b580      	push	{r7, lr}
    86a8:	af00      	add	r7, sp, #0
	return z_impl_z_current_get();
    86aa:	f7ff f87f 	bl	77ac <z_impl_z_current_get>
    86ae:	4603      	mov	r3, r0
}
    86b0:	4618      	mov	r0, r3
    86b2:	bd80      	pop	{r7, pc}

000086b4 <k_thread_abort>:
{
    86b4:	b580      	push	{r7, lr}
    86b6:	b082      	sub	sp, #8
    86b8:	af00      	add	r7, sp, #0
    86ba:	6078      	str	r0, [r7, #4]
	z_impl_k_thread_abort(thread);
    86bc:	6878      	ldr	r0, [r7, #4]
    86be:	f7fc f853 	bl	4768 <z_impl_k_thread_abort>
}
    86c2:	bf00      	nop
    86c4:	3708      	adds	r7, #8
    86c6:	46bd      	mov	sp, r7
    86c8:	bd80      	pop	{r7, pc}

000086ca <z_thread_entry>:
 * This routine does not return, and is marked as such so the compiler won't
 * generate preamble code that is only used by functions that actually return.
 */
FUNC_NORETURN void z_thread_entry(k_thread_entry_t entry,
				 void *p1, void *p2, void *p3)
{
    86ca:	b580      	push	{r7, lr}
    86cc:	b084      	sub	sp, #16
    86ce:	af00      	add	r7, sp, #0
    86d0:	60f8      	str	r0, [r7, #12]
    86d2:	60b9      	str	r1, [r7, #8]
    86d4:	607a      	str	r2, [r7, #4]
    86d6:	603b      	str	r3, [r7, #0]
#ifdef CONFIG_THREAD_LOCAL_STORAGE
	z_tls_current = z_current_get();
#endif
	entry(p1, p2, p3);
    86d8:	68fb      	ldr	r3, [r7, #12]
    86da:	683a      	ldr	r2, [r7, #0]
    86dc:	6879      	ldr	r1, [r7, #4]
    86de:	68b8      	ldr	r0, [r7, #8]
    86e0:	4798      	blx	r3

	k_thread_abort(k_current_get());
    86e2:	f7ff ffd9 	bl	8698 <k_current_get>
    86e6:	4603      	mov	r3, r0
    86e8:	4618      	mov	r0, r3
    86ea:	f7ff ffe3 	bl	86b4 <k_thread_abort>

000086ee <isupper>:
#ifdef __cplusplus
extern "C" {
#endif

static inline int isupper(int a)
{
    86ee:	b480      	push	{r7}
    86f0:	b083      	sub	sp, #12
    86f2:	af00      	add	r7, sp, #0
    86f4:	6078      	str	r0, [r7, #4]
	return (int)(((unsigned)(a)-(unsigned)'A') < 26U);
    86f6:	687b      	ldr	r3, [r7, #4]
    86f8:	3b41      	subs	r3, #65	; 0x41
    86fa:	2b19      	cmp	r3, #25
    86fc:	bf94      	ite	ls
    86fe:	2301      	movls	r3, #1
    8700:	2300      	movhi	r3, #0
    8702:	b2db      	uxtb	r3, r3
}
    8704:	4618      	mov	r0, r3
    8706:	370c      	adds	r7, #12
    8708:	46bd      	mov	sp, r7
    870a:	bc80      	pop	{r7}
    870c:	4770      	bx	lr

0000870e <isdigit>:
	return (int)((((unsigned)c) >= ' ') &&
			(((unsigned)c) <= (unsigned)'~'));
}

static inline int isdigit(int a)
{
    870e:	b480      	push	{r7}
    8710:	b083      	sub	sp, #12
    8712:	af00      	add	r7, sp, #0
    8714:	6078      	str	r0, [r7, #4]
	return (int)(((unsigned)(a)-(unsigned)'0') < 10U);
    8716:	687b      	ldr	r3, [r7, #4]
    8718:	3b30      	subs	r3, #48	; 0x30
    871a:	2b09      	cmp	r3, #9
    871c:	bf94      	ite	ls
    871e:	2301      	movls	r3, #1
    8720:	2300      	movhi	r3, #0
    8722:	b2db      	uxtb	r3, r3
}
    8724:	4618      	mov	r0, r3
    8726:	370c      	adds	r7, #12
    8728:	46bd      	mov	sp, r7
    872a:	bc80      	pop	{r7}
    872c:	4770      	bx	lr

0000872e <extract_decimal>:
{
    872e:	b580      	push	{r7, lr}
    8730:	b084      	sub	sp, #16
    8732:	af00      	add	r7, sp, #0
    8734:	6078      	str	r0, [r7, #4]
	const char *sp = *str;
    8736:	687b      	ldr	r3, [r7, #4]
    8738:	681b      	ldr	r3, [r3, #0]
    873a:	60fb      	str	r3, [r7, #12]
	size_t val = 0;
    873c:	2300      	movs	r3, #0
    873e:	60bb      	str	r3, [r7, #8]
	while (isdigit((int)(unsigned char)*sp)) {
    8740:	e00c      	b.n	875c <extract_decimal+0x2e>
		val = 10U * val + *sp++ - '0';
    8742:	68ba      	ldr	r2, [r7, #8]
    8744:	4613      	mov	r3, r2
    8746:	009b      	lsls	r3, r3, #2
    8748:	4413      	add	r3, r2
    874a:	005b      	lsls	r3, r3, #1
    874c:	4619      	mov	r1, r3
    874e:	68fb      	ldr	r3, [r7, #12]
    8750:	1c5a      	adds	r2, r3, #1
    8752:	60fa      	str	r2, [r7, #12]
    8754:	781b      	ldrb	r3, [r3, #0]
    8756:	440b      	add	r3, r1
    8758:	3b30      	subs	r3, #48	; 0x30
    875a:	60bb      	str	r3, [r7, #8]
	while (isdigit((int)(unsigned char)*sp)) {
    875c:	68fb      	ldr	r3, [r7, #12]
    875e:	781b      	ldrb	r3, [r3, #0]
    8760:	4618      	mov	r0, r3
    8762:	f7ff ffd4 	bl	870e <isdigit>
    8766:	4603      	mov	r3, r0
    8768:	2b00      	cmp	r3, #0
    876a:	d1ea      	bne.n	8742 <extract_decimal+0x14>
	*str = sp;
    876c:	687b      	ldr	r3, [r7, #4]
    876e:	68fa      	ldr	r2, [r7, #12]
    8770:	601a      	str	r2, [r3, #0]
	return val;
    8772:	68bb      	ldr	r3, [r7, #8]
}
    8774:	4618      	mov	r0, r3
    8776:	3710      	adds	r7, #16
    8778:	46bd      	mov	sp, r7
    877a:	bd80      	pop	{r7, pc}

0000877c <extract_width>:
{
    877c:	b580      	push	{r7, lr}
    877e:	b084      	sub	sp, #16
    8780:	af00      	add	r7, sp, #0
    8782:	6078      	str	r0, [r7, #4]
    8784:	6039      	str	r1, [r7, #0]
	conv->width_present = true;
    8786:	687a      	ldr	r2, [r7, #4]
    8788:	7813      	ldrb	r3, [r2, #0]
    878a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    878e:	7013      	strb	r3, [r2, #0]
	if (*sp == '*') {
    8790:	683b      	ldr	r3, [r7, #0]
    8792:	781b      	ldrb	r3, [r3, #0]
    8794:	2b2a      	cmp	r3, #42	; 0x2a
    8796:	d109      	bne.n	87ac <extract_width+0x30>
		conv->width_star = true;
    8798:	687a      	ldr	r2, [r7, #4]
    879a:	7853      	ldrb	r3, [r2, #1]
    879c:	f043 0301 	orr.w	r3, r3, #1
    87a0:	7053      	strb	r3, [r2, #1]
		return ++sp;
    87a2:	683b      	ldr	r3, [r7, #0]
    87a4:	3301      	adds	r3, #1
    87a6:	603b      	str	r3, [r7, #0]
    87a8:	683b      	ldr	r3, [r7, #0]
    87aa:	e031      	b.n	8810 <extract_width+0x94>
	const char *wp = sp;
    87ac:	683b      	ldr	r3, [r7, #0]
    87ae:	60fb      	str	r3, [r7, #12]
	size_t width = extract_decimal(&sp);
    87b0:	463b      	mov	r3, r7
    87b2:	4618      	mov	r0, r3
    87b4:	f7ff ffbb 	bl	872e <extract_decimal>
    87b8:	60b8      	str	r0, [r7, #8]
	if (sp != wp) {
    87ba:	683b      	ldr	r3, [r7, #0]
    87bc:	68fa      	ldr	r2, [r7, #12]
    87be:	429a      	cmp	r2, r3
    87c0:	d025      	beq.n	880e <extract_width+0x92>
		conv->width_present = true;
    87c2:	687a      	ldr	r2, [r7, #4]
    87c4:	7813      	ldrb	r3, [r2, #0]
    87c6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    87ca:	7013      	strb	r3, [r2, #0]
		conv->width_value = width;
    87cc:	68ba      	ldr	r2, [r7, #8]
    87ce:	687b      	ldr	r3, [r7, #4]
    87d0:	605a      	str	r2, [r3, #4]
		conv->unsupported |= ((conv->width_value < 0)
    87d2:	687b      	ldr	r3, [r7, #4]
    87d4:	781b      	ldrb	r3, [r3, #0]
    87d6:	f3c3 0340 	ubfx	r3, r3, #1, #1
    87da:	b2db      	uxtb	r3, r3
    87dc:	461a      	mov	r2, r3
    87de:	687b      	ldr	r3, [r7, #4]
    87e0:	685b      	ldr	r3, [r3, #4]
				      || (width != (size_t)conv->width_value));
    87e2:	2b00      	cmp	r3, #0
    87e4:	db05      	blt.n	87f2 <extract_width+0x76>
    87e6:	687b      	ldr	r3, [r7, #4]
    87e8:	685b      	ldr	r3, [r3, #4]
    87ea:	4619      	mov	r1, r3
    87ec:	68bb      	ldr	r3, [r7, #8]
    87ee:	428b      	cmp	r3, r1
    87f0:	d001      	beq.n	87f6 <extract_width+0x7a>
    87f2:	2301      	movs	r3, #1
    87f4:	e000      	b.n	87f8 <extract_width+0x7c>
    87f6:	2300      	movs	r3, #0
		conv->unsupported |= ((conv->width_value < 0)
    87f8:	4313      	orrs	r3, r2
    87fa:	2b00      	cmp	r3, #0
    87fc:	bf14      	ite	ne
    87fe:	2301      	movne	r3, #1
    8800:	2300      	moveq	r3, #0
    8802:	b2d9      	uxtb	r1, r3
    8804:	687a      	ldr	r2, [r7, #4]
    8806:	7813      	ldrb	r3, [r2, #0]
    8808:	f361 0341 	bfi	r3, r1, #1, #1
    880c:	7013      	strb	r3, [r2, #0]
	return sp;
    880e:	683b      	ldr	r3, [r7, #0]
}
    8810:	4618      	mov	r0, r3
    8812:	3710      	adds	r7, #16
    8814:	46bd      	mov	sp, r7
    8816:	bd80      	pop	{r7, pc}

00008818 <extract_prec>:
{
    8818:	b580      	push	{r7, lr}
    881a:	b084      	sub	sp, #16
    881c:	af00      	add	r7, sp, #0
    881e:	6078      	str	r0, [r7, #4]
    8820:	6039      	str	r1, [r7, #0]
	conv->prec_present = (*sp == '.');
    8822:	683b      	ldr	r3, [r7, #0]
    8824:	781b      	ldrb	r3, [r3, #0]
    8826:	2b2e      	cmp	r3, #46	; 0x2e
    8828:	bf0c      	ite	eq
    882a:	2301      	moveq	r3, #1
    882c:	2300      	movne	r3, #0
    882e:	b2d9      	uxtb	r1, r3
    8830:	687a      	ldr	r2, [r7, #4]
    8832:	7853      	ldrb	r3, [r2, #1]
    8834:	f361 0341 	bfi	r3, r1, #1, #1
    8838:	7053      	strb	r3, [r2, #1]
	if (!conv->prec_present) {
    883a:	687b      	ldr	r3, [r7, #4]
    883c:	785b      	ldrb	r3, [r3, #1]
    883e:	f3c3 0340 	ubfx	r3, r3, #1, #1
    8842:	b2db      	uxtb	r3, r3
    8844:	f083 0301 	eor.w	r3, r3, #1
    8848:	b2db      	uxtb	r3, r3
    884a:	2b00      	cmp	r3, #0
    884c:	d001      	beq.n	8852 <extract_prec+0x3a>
		return sp;
    884e:	683b      	ldr	r3, [r7, #0]
    8850:	e037      	b.n	88c2 <extract_prec+0xaa>
	++sp;
    8852:	683b      	ldr	r3, [r7, #0]
    8854:	3301      	adds	r3, #1
    8856:	603b      	str	r3, [r7, #0]
	if (*sp == '*') {
    8858:	683b      	ldr	r3, [r7, #0]
    885a:	781b      	ldrb	r3, [r3, #0]
    885c:	2b2a      	cmp	r3, #42	; 0x2a
    885e:	d109      	bne.n	8874 <extract_prec+0x5c>
		conv->prec_star = true;
    8860:	687a      	ldr	r2, [r7, #4]
    8862:	7853      	ldrb	r3, [r2, #1]
    8864:	f043 0304 	orr.w	r3, r3, #4
    8868:	7053      	strb	r3, [r2, #1]
		return ++sp;
    886a:	683b      	ldr	r3, [r7, #0]
    886c:	3301      	adds	r3, #1
    886e:	603b      	str	r3, [r7, #0]
    8870:	683b      	ldr	r3, [r7, #0]
    8872:	e026      	b.n	88c2 <extract_prec+0xaa>
	size_t prec = extract_decimal(&sp);
    8874:	463b      	mov	r3, r7
    8876:	4618      	mov	r0, r3
    8878:	f7ff ff59 	bl	872e <extract_decimal>
    887c:	60f8      	str	r0, [r7, #12]
	conv->prec_value = prec;
    887e:	68fa      	ldr	r2, [r7, #12]
    8880:	687b      	ldr	r3, [r7, #4]
    8882:	609a      	str	r2, [r3, #8]
	conv->unsupported |= ((conv->prec_value < 0)
    8884:	687b      	ldr	r3, [r7, #4]
    8886:	781b      	ldrb	r3, [r3, #0]
    8888:	f3c3 0340 	ubfx	r3, r3, #1, #1
    888c:	b2db      	uxtb	r3, r3
    888e:	461a      	mov	r2, r3
    8890:	687b      	ldr	r3, [r7, #4]
    8892:	689b      	ldr	r3, [r3, #8]
			      || (prec != (size_t)conv->prec_value));
    8894:	2b00      	cmp	r3, #0
    8896:	db05      	blt.n	88a4 <extract_prec+0x8c>
    8898:	687b      	ldr	r3, [r7, #4]
    889a:	689b      	ldr	r3, [r3, #8]
    889c:	4619      	mov	r1, r3
    889e:	68fb      	ldr	r3, [r7, #12]
    88a0:	428b      	cmp	r3, r1
    88a2:	d001      	beq.n	88a8 <extract_prec+0x90>
    88a4:	2301      	movs	r3, #1
    88a6:	e000      	b.n	88aa <extract_prec+0x92>
    88a8:	2300      	movs	r3, #0
	conv->unsupported |= ((conv->prec_value < 0)
    88aa:	4313      	orrs	r3, r2
    88ac:	2b00      	cmp	r3, #0
    88ae:	bf14      	ite	ne
    88b0:	2301      	movne	r3, #1
    88b2:	2300      	moveq	r3, #0
    88b4:	b2d9      	uxtb	r1, r3
    88b6:	687a      	ldr	r2, [r7, #4]
    88b8:	7813      	ldrb	r3, [r2, #0]
    88ba:	f361 0341 	bfi	r3, r1, #1, #1
    88be:	7013      	strb	r3, [r2, #0]
	return sp;
    88c0:	683b      	ldr	r3, [r7, #0]
}
    88c2:	4618      	mov	r0, r3
    88c4:	3710      	adds	r7, #16
    88c6:	46bd      	mov	sp, r7
    88c8:	bd80      	pop	{r7, pc}

000088ca <extract_conversion>:
{
    88ca:	b580      	push	{r7, lr}
    88cc:	b086      	sub	sp, #24
    88ce:	af00      	add	r7, sp, #0
    88d0:	6078      	str	r0, [r7, #4]
    88d2:	6039      	str	r1, [r7, #0]
	*conv = (struct conversion) {
    88d4:	687b      	ldr	r3, [r7, #4]
    88d6:	461a      	mov	r2, r3
    88d8:	2300      	movs	r3, #0
    88da:	6013      	str	r3, [r2, #0]
    88dc:	6053      	str	r3, [r2, #4]
    88de:	6093      	str	r3, [r2, #8]
	++sp;
    88e0:	683b      	ldr	r3, [r7, #0]
    88e2:	3301      	adds	r3, #1
    88e4:	603b      	str	r3, [r7, #0]
	if (*sp == '%') {
    88e6:	683b      	ldr	r3, [r7, #0]
    88e8:	781b      	ldrb	r3, [r3, #0]
    88ea:	2b25      	cmp	r3, #37	; 0x25
    88ec:	d107      	bne.n	88fe <extract_conversion+0x34>
		conv->specifier = *sp++;
    88ee:	683b      	ldr	r3, [r7, #0]
    88f0:	1c5a      	adds	r2, r3, #1
    88f2:	603a      	str	r2, [r7, #0]
    88f4:	781a      	ldrb	r2, [r3, #0]
    88f6:	687b      	ldr	r3, [r7, #4]
    88f8:	70da      	strb	r2, [r3, #3]
		return sp;
    88fa:	683b      	ldr	r3, [r7, #0]
    88fc:	e019      	b.n	8932 <extract_conversion+0x68>
	sp = extract_flags(conv, sp);
    88fe:	6839      	ldr	r1, [r7, #0]
    8900:	6878      	ldr	r0, [r7, #4]
    8902:	f7f8 fc0f 	bl	1124 <extract_flags>
    8906:	6038      	str	r0, [r7, #0]
	sp = extract_width(conv, sp);
    8908:	6839      	ldr	r1, [r7, #0]
    890a:	6878      	ldr	r0, [r7, #4]
    890c:	f7ff ff36 	bl	877c <extract_width>
    8910:	6038      	str	r0, [r7, #0]
	sp = extract_prec(conv, sp);
    8912:	6839      	ldr	r1, [r7, #0]
    8914:	6878      	ldr	r0, [r7, #4]
    8916:	f7ff ff7f 	bl	8818 <extract_prec>
    891a:	6038      	str	r0, [r7, #0]
	sp = extract_length(conv, sp);
    891c:	6839      	ldr	r1, [r7, #0]
    891e:	6878      	ldr	r0, [r7, #4]
    8920:	f7f8 fc74 	bl	120c <extract_length>
    8924:	6038      	str	r0, [r7, #0]
	sp = extract_specifier(conv, sp);
    8926:	6839      	ldr	r1, [r7, #0]
    8928:	6878      	ldr	r0, [r7, #4]
    892a:	f7f8 fd45 	bl	13b8 <extract_specifier>
    892e:	6038      	str	r0, [r7, #0]
	return sp;
    8930:	683b      	ldr	r3, [r7, #0]
}
    8932:	4618      	mov	r0, r3
    8934:	3718      	adds	r7, #24
    8936:	46bd      	mov	sp, r7
    8938:	bd80      	pop	{r7, pc}

0000893a <conversion_radix>:
{
    893a:	b480      	push	{r7}
    893c:	b083      	sub	sp, #12
    893e:	af00      	add	r7, sp, #0
    8940:	4603      	mov	r3, r0
    8942:	71fb      	strb	r3, [r7, #7]
	switch (specifier) {
    8944:	79fb      	ldrb	r3, [r7, #7]
    8946:	2b78      	cmp	r3, #120	; 0x78
    8948:	d00d      	beq.n	8966 <conversion_radix+0x2c>
    894a:	2b78      	cmp	r3, #120	; 0x78
    894c:	dc07      	bgt.n	895e <conversion_radix+0x24>
    894e:	2b70      	cmp	r3, #112	; 0x70
    8950:	d009      	beq.n	8966 <conversion_radix+0x2c>
    8952:	2b70      	cmp	r3, #112	; 0x70
    8954:	dc03      	bgt.n	895e <conversion_radix+0x24>
    8956:	2b58      	cmp	r3, #88	; 0x58
    8958:	d005      	beq.n	8966 <conversion_radix+0x2c>
    895a:	2b6f      	cmp	r3, #111	; 0x6f
    895c:	d001      	beq.n	8962 <conversion_radix+0x28>
		return 10;
    895e:	230a      	movs	r3, #10
    8960:	e002      	b.n	8968 <conversion_radix+0x2e>
		return 8;
    8962:	2308      	movs	r3, #8
    8964:	e000      	b.n	8968 <conversion_radix+0x2e>
		return 16;
    8966:	2310      	movs	r3, #16
}
    8968:	4618      	mov	r0, r3
    896a:	370c      	adds	r7, #12
    896c:	46bd      	mov	sp, r7
    896e:	bc80      	pop	{r7}
    8970:	4770      	bx	lr

00008972 <encode_uint>:
{
    8972:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
    8976:	b088      	sub	sp, #32
    8978:	af00      	add	r7, sp, #0
    897a:	e9c7 0102 	strd	r0, r1, [r7, #8]
    897e:	607a      	str	r2, [r7, #4]
    8980:	603b      	str	r3, [r7, #0]
	bool upcase = isupper((int)conv->specifier);
    8982:	687b      	ldr	r3, [r7, #4]
    8984:	78db      	ldrb	r3, [r3, #3]
    8986:	4618      	mov	r0, r3
    8988:	f7ff feb1 	bl	86ee <isupper>
    898c:	4603      	mov	r3, r0
    898e:	2b00      	cmp	r3, #0
    8990:	bf14      	ite	ne
    8992:	2301      	movne	r3, #1
    8994:	2300      	moveq	r3, #0
    8996:	76fb      	strb	r3, [r7, #27]
	const unsigned int radix = conversion_radix(conv->specifier);
    8998:	687b      	ldr	r3, [r7, #4]
    899a:	78db      	ldrb	r3, [r3, #3]
    899c:	4618      	mov	r0, r3
    899e:	f7ff ffcc 	bl	893a <conversion_radix>
    89a2:	6178      	str	r0, [r7, #20]
	char *bp = bps + (bpe - bps);
    89a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    89a6:	61fb      	str	r3, [r7, #28]
		unsigned int lsv = (unsigned int)(value % radix);
    89a8:	697b      	ldr	r3, [r7, #20]
    89aa:	2200      	movs	r2, #0
    89ac:	461c      	mov	r4, r3
    89ae:	4615      	mov	r5, r2
    89b0:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
    89b4:	4622      	mov	r2, r4
    89b6:	462b      	mov	r3, r5
    89b8:	f7f7 fb98 	bl	ec <__aeabi_uldivmod>
    89bc:	4613      	mov	r3, r2
    89be:	613b      	str	r3, [r7, #16]
		*--bp = (lsv <= 9) ? ('0' + lsv)
    89c0:	693b      	ldr	r3, [r7, #16]
    89c2:	2b09      	cmp	r3, #9
    89c4:	d804      	bhi.n	89d0 <encode_uint+0x5e>
    89c6:	693b      	ldr	r3, [r7, #16]
    89c8:	b2db      	uxtb	r3, r3
    89ca:	3330      	adds	r3, #48	; 0x30
    89cc:	b2db      	uxtb	r3, r3
    89ce:	e00b      	b.n	89e8 <encode_uint+0x76>
    89d0:	7efb      	ldrb	r3, [r7, #27]
    89d2:	2b00      	cmp	r3, #0
    89d4:	d004      	beq.n	89e0 <encode_uint+0x6e>
			: upcase ? ('A' + lsv - 10) : ('a' + lsv - 10);
    89d6:	693b      	ldr	r3, [r7, #16]
    89d8:	b2db      	uxtb	r3, r3
		*--bp = (lsv <= 9) ? ('0' + lsv)
    89da:	3337      	adds	r3, #55	; 0x37
    89dc:	b2db      	uxtb	r3, r3
    89de:	e003      	b.n	89e8 <encode_uint+0x76>
			: upcase ? ('A' + lsv - 10) : ('a' + lsv - 10);
    89e0:	693b      	ldr	r3, [r7, #16]
    89e2:	b2db      	uxtb	r3, r3
		*--bp = (lsv <= 9) ? ('0' + lsv)
    89e4:	3357      	adds	r3, #87	; 0x57
    89e6:	b2db      	uxtb	r3, r3
    89e8:	69fa      	ldr	r2, [r7, #28]
    89ea:	3a01      	subs	r2, #1
    89ec:	61fa      	str	r2, [r7, #28]
    89ee:	69fa      	ldr	r2, [r7, #28]
    89f0:	7013      	strb	r3, [r2, #0]
		value /= radix;
    89f2:	697b      	ldr	r3, [r7, #20]
    89f4:	2200      	movs	r2, #0
    89f6:	4698      	mov	r8, r3
    89f8:	4691      	mov	r9, r2
    89fa:	4642      	mov	r2, r8
    89fc:	464b      	mov	r3, r9
    89fe:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
    8a02:	f7f7 fb73 	bl	ec <__aeabi_uldivmod>
    8a06:	4602      	mov	r2, r0
    8a08:	460b      	mov	r3, r1
    8a0a:	e9c7 2302 	strd	r2, r3, [r7, #8]
	} while ((value != 0) && (bps < bp));
    8a0e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
    8a12:	4313      	orrs	r3, r2
    8a14:	d003      	beq.n	8a1e <encode_uint+0xac>
    8a16:	683a      	ldr	r2, [r7, #0]
    8a18:	69fb      	ldr	r3, [r7, #28]
    8a1a:	429a      	cmp	r2, r3
    8a1c:	d3c4      	bcc.n	89a8 <encode_uint+0x36>
	if (conv->flag_hash) {
    8a1e:	687b      	ldr	r3, [r7, #4]
    8a20:	781b      	ldrb	r3, [r3, #0]
    8a22:	f003 0320 	and.w	r3, r3, #32
    8a26:	b2db      	uxtb	r3, r3
    8a28:	2b00      	cmp	r3, #0
    8a2a:	d010      	beq.n	8a4e <encode_uint+0xdc>
		if (radix == 8) {
    8a2c:	697b      	ldr	r3, [r7, #20]
    8a2e:	2b08      	cmp	r3, #8
    8a30:	d105      	bne.n	8a3e <encode_uint+0xcc>
			conv->altform_0 = true;
    8a32:	687a      	ldr	r2, [r7, #4]
    8a34:	7893      	ldrb	r3, [r2, #2]
    8a36:	f043 0308 	orr.w	r3, r3, #8
    8a3a:	7093      	strb	r3, [r2, #2]
    8a3c:	e007      	b.n	8a4e <encode_uint+0xdc>
		} else if (radix == 16) {
    8a3e:	697b      	ldr	r3, [r7, #20]
    8a40:	2b10      	cmp	r3, #16
    8a42:	d104      	bne.n	8a4e <encode_uint+0xdc>
			conv->altform_0c = true;
    8a44:	687a      	ldr	r2, [r7, #4]
    8a46:	7893      	ldrb	r3, [r2, #2]
    8a48:	f043 0310 	orr.w	r3, r3, #16
    8a4c:	7093      	strb	r3, [r2, #2]
	return bp;
    8a4e:	69fb      	ldr	r3, [r7, #28]
}
    8a50:	4618      	mov	r0, r3
    8a52:	3720      	adds	r7, #32
    8a54:	46bd      	mov	sp, r7
    8a56:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}

00008a5a <outs>:
{
    8a5a:	b580      	push	{r7, lr}
    8a5c:	b086      	sub	sp, #24
    8a5e:	af00      	add	r7, sp, #0
    8a60:	60f8      	str	r0, [r7, #12]
    8a62:	60b9      	str	r1, [r7, #8]
    8a64:	607a      	str	r2, [r7, #4]
    8a66:	603b      	str	r3, [r7, #0]
	size_t count = 0;
    8a68:	2300      	movs	r3, #0
    8a6a:	617b      	str	r3, [r7, #20]
	while ((sp < ep) || ((ep == NULL) && *sp)) {
    8a6c:	e011      	b.n	8a92 <outs+0x38>
		int rc = out((int)*sp++, ctx);
    8a6e:	687b      	ldr	r3, [r7, #4]
    8a70:	1c5a      	adds	r2, r3, #1
    8a72:	607a      	str	r2, [r7, #4]
    8a74:	781b      	ldrb	r3, [r3, #0]
    8a76:	461a      	mov	r2, r3
    8a78:	68fb      	ldr	r3, [r7, #12]
    8a7a:	68b9      	ldr	r1, [r7, #8]
    8a7c:	4610      	mov	r0, r2
    8a7e:	4798      	blx	r3
    8a80:	6138      	str	r0, [r7, #16]
		if (rc < 0) {
    8a82:	693b      	ldr	r3, [r7, #16]
    8a84:	2b00      	cmp	r3, #0
    8a86:	da01      	bge.n	8a8c <outs+0x32>
			return rc;
    8a88:	693b      	ldr	r3, [r7, #16]
    8a8a:	e00e      	b.n	8aaa <outs+0x50>
		++count;
    8a8c:	697b      	ldr	r3, [r7, #20]
    8a8e:	3301      	adds	r3, #1
    8a90:	617b      	str	r3, [r7, #20]
	while ((sp < ep) || ((ep == NULL) && *sp)) {
    8a92:	687a      	ldr	r2, [r7, #4]
    8a94:	683b      	ldr	r3, [r7, #0]
    8a96:	429a      	cmp	r2, r3
    8a98:	d3e9      	bcc.n	8a6e <outs+0x14>
    8a9a:	683b      	ldr	r3, [r7, #0]
    8a9c:	2b00      	cmp	r3, #0
    8a9e:	d103      	bne.n	8aa8 <outs+0x4e>
    8aa0:	687b      	ldr	r3, [r7, #4]
    8aa2:	781b      	ldrb	r3, [r3, #0]
    8aa4:	2b00      	cmp	r3, #0
    8aa6:	d1e2      	bne.n	8a6e <outs+0x14>
	return (int)count;
    8aa8:	697b      	ldr	r3, [r7, #20]
}
    8aaa:	4618      	mov	r0, r3
    8aac:	3718      	adds	r7, #24
    8aae:	46bd      	mov	sp, r7
    8ab0:	bd80      	pop	{r7, pc}

00008ab2 <is_power_of_two>:
 * @brief Is @p x a power of two?
 * @param x value to check
 * @return true if @p x is a power of two, false otherwise
 */
static inline bool is_power_of_two(unsigned int x)
{
    8ab2:	b480      	push	{r7}
    8ab4:	b083      	sub	sp, #12
    8ab6:	af00      	add	r7, sp, #0
    8ab8:	6078      	str	r0, [r7, #4]
	return (x != 0U) && ((x & (x - 1U)) == 0U);
    8aba:	687b      	ldr	r3, [r7, #4]
    8abc:	2b00      	cmp	r3, #0
    8abe:	d007      	beq.n	8ad0 <is_power_of_two+0x1e>
    8ac0:	687b      	ldr	r3, [r7, #4]
    8ac2:	1e5a      	subs	r2, r3, #1
    8ac4:	687b      	ldr	r3, [r7, #4]
    8ac6:	4013      	ands	r3, r2
    8ac8:	2b00      	cmp	r3, #0
    8aca:	d101      	bne.n	8ad0 <is_power_of_two+0x1e>
    8acc:	2301      	movs	r3, #1
    8ace:	e000      	b.n	8ad2 <is_power_of_two+0x20>
    8ad0:	2300      	movs	r3, #0
    8ad2:	f003 0301 	and.w	r3, r3, #1
    8ad6:	b2db      	uxtb	r3, r3
}
    8ad8:	4618      	mov	r0, r3
    8ada:	370c      	adds	r7, #12
    8adc:	46bd      	mov	sp, r7
    8ade:	bc80      	pop	{r7}
    8ae0:	4770      	bx	lr

00008ae2 <k_sem_init>:
{
    8ae2:	b580      	push	{r7, lr}
    8ae4:	b084      	sub	sp, #16
    8ae6:	af00      	add	r7, sp, #0
    8ae8:	60f8      	str	r0, [r7, #12]
    8aea:	60b9      	str	r1, [r7, #8]
    8aec:	607a      	str	r2, [r7, #4]
	return z_impl_k_sem_init(sem, initial_count, limit);
    8aee:	687a      	ldr	r2, [r7, #4]
    8af0:	68b9      	ldr	r1, [r7, #8]
    8af2:	68f8      	ldr	r0, [r7, #12]
    8af4:	f001 ff19 	bl	a92a <z_impl_k_sem_init>
    8af8:	4603      	mov	r3, r0
}
    8afa:	4618      	mov	r0, r3
    8afc:	3710      	adds	r7, #16
    8afe:	46bd      	mov	sp, r7
    8b00:	bd80      	pop	{r7, pc}

00008b02 <k_sem_take>:
{
    8b02:	b580      	push	{r7, lr}
    8b04:	b084      	sub	sp, #16
    8b06:	af00      	add	r7, sp, #0
    8b08:	60f8      	str	r0, [r7, #12]
    8b0a:	e9c7 2300 	strd	r2, r3, [r7]
	return z_impl_k_sem_take(sem, timeout);
    8b0e:	e9d7 2300 	ldrd	r2, r3, [r7]
    8b12:	68f8      	ldr	r0, [r7, #12]
    8b14:	f7fd f898 	bl	5c48 <z_impl_k_sem_take>
    8b18:	4603      	mov	r3, r0
}
    8b1a:	4618      	mov	r0, r3
    8b1c:	3710      	adds	r7, #16
    8b1e:	46bd      	mov	sp, r7
    8b20:	bd80      	pop	{r7, pc}

00008b22 <k_sem_give>:
{
    8b22:	b580      	push	{r7, lr}
    8b24:	b082      	sub	sp, #8
    8b26:	af00      	add	r7, sp, #0
    8b28:	6078      	str	r0, [r7, #4]
	z_impl_k_sem_give(sem);
    8b2a:	6878      	ldr	r0, [r7, #4]
    8b2c:	f7fd f848 	bl	5bc0 <z_impl_k_sem_give>
}
    8b30:	bf00      	nop
    8b32:	3708      	adds	r7, #8
    8b34:	46bd      	mov	sp, r7
    8b36:	bd80      	pop	{r7, pc}

00008b38 <mpsc_pbuf_init>:
	}
}

void mpsc_pbuf_init(struct mpsc_pbuf_buffer *buffer,
		    const struct mpsc_pbuf_buffer_config *cfg)
{
    8b38:	b580      	push	{r7, lr}
    8b3a:	b084      	sub	sp, #16
    8b3c:	af00      	add	r7, sp, #0
    8b3e:	6078      	str	r0, [r7, #4]
    8b40:	6039      	str	r1, [r7, #0]
	int err;

	memset(buffer, 0, offsetof(struct mpsc_pbuf_buffer, buf));
    8b42:	2220      	movs	r2, #32
    8b44:	2100      	movs	r1, #0
    8b46:	6878      	ldr	r0, [r7, #4]
    8b48:	f001 fad1 	bl	a0ee <memset>
	buffer->get_wlen = cfg->get_wlen;
    8b4c:	683b      	ldr	r3, [r7, #0]
    8b4e:	68da      	ldr	r2, [r3, #12]
    8b50:	687b      	ldr	r3, [r7, #4]
    8b52:	61da      	str	r2, [r3, #28]
	buffer->notify_drop = cfg->notify_drop;
    8b54:	683b      	ldr	r3, [r7, #0]
    8b56:	689a      	ldr	r2, [r3, #8]
    8b58:	687b      	ldr	r3, [r7, #4]
    8b5a:	619a      	str	r2, [r3, #24]
	buffer->buf = cfg->buf;
    8b5c:	683b      	ldr	r3, [r7, #0]
    8b5e:	681a      	ldr	r2, [r3, #0]
    8b60:	687b      	ldr	r3, [r7, #4]
    8b62:	621a      	str	r2, [r3, #32]
	buffer->size = cfg->size;
    8b64:	683b      	ldr	r3, [r7, #0]
    8b66:	685a      	ldr	r2, [r3, #4]
    8b68:	687b      	ldr	r3, [r7, #4]
    8b6a:	625a      	str	r2, [r3, #36]	; 0x24
	buffer->max_usage = 0;
    8b6c:	687b      	ldr	r3, [r7, #4]
    8b6e:	2200      	movs	r2, #0
    8b70:	629a      	str	r2, [r3, #40]	; 0x28
	buffer->flags = cfg->flags;
    8b72:	683b      	ldr	r3, [r7, #0]
    8b74:	691a      	ldr	r2, [r3, #16]
    8b76:	687b      	ldr	r3, [r7, #4]
    8b78:	611a      	str	r2, [r3, #16]

	if (is_power_of_two(buffer->size)) {
    8b7a:	687b      	ldr	r3, [r7, #4]
    8b7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    8b7e:	4618      	mov	r0, r3
    8b80:	f7ff ff97 	bl	8ab2 <is_power_of_two>
    8b84:	4603      	mov	r3, r0
    8b86:	2b00      	cmp	r3, #0
    8b88:	d005      	beq.n	8b96 <mpsc_pbuf_init+0x5e>
		buffer->flags |= MPSC_PBUF_SIZE_POW2;
    8b8a:	687b      	ldr	r3, [r7, #4]
    8b8c:	691b      	ldr	r3, [r3, #16]
    8b8e:	f043 0201 	orr.w	r2, r3, #1
    8b92:	687b      	ldr	r3, [r7, #4]
    8b94:	611a      	str	r2, [r3, #16]
	}

	err = k_sem_init(&buffer->sem, 0, 1);
    8b96:	687b      	ldr	r3, [r7, #4]
    8b98:	332c      	adds	r3, #44	; 0x2c
    8b9a:	2201      	movs	r2, #1
    8b9c:	2100      	movs	r1, #0
    8b9e:	4618      	mov	r0, r3
    8ba0:	f7ff ff9f 	bl	8ae2 <k_sem_init>
    8ba4:	60f8      	str	r0, [r7, #12]
	__ASSERT_NO_MSG(err == 0);
}
    8ba6:	bf00      	nop
    8ba8:	3710      	adds	r7, #16
    8baa:	46bd      	mov	sp, r7
    8bac:	bd80      	pop	{r7, pc}

00008bae <free_space>:

static inline bool free_space(struct mpsc_pbuf_buffer *buffer, uint32_t *res)
{
    8bae:	b480      	push	{r7}
    8bb0:	b083      	sub	sp, #12
    8bb2:	af00      	add	r7, sp, #0
    8bb4:	6078      	str	r0, [r7, #4]
    8bb6:	6039      	str	r1, [r7, #0]
	if (buffer->rd_idx > buffer->tmp_wr_idx) {
    8bb8:	687b      	ldr	r3, [r7, #4]
    8bba:	68da      	ldr	r2, [r3, #12]
    8bbc:	687b      	ldr	r3, [r7, #4]
    8bbe:	681b      	ldr	r3, [r3, #0]
    8bc0:	429a      	cmp	r2, r3
    8bc2:	d909      	bls.n	8bd8 <free_space+0x2a>
		*res =  buffer->rd_idx - buffer->tmp_wr_idx - 1;
    8bc4:	687b      	ldr	r3, [r7, #4]
    8bc6:	68da      	ldr	r2, [r3, #12]
    8bc8:	687b      	ldr	r3, [r7, #4]
    8bca:	681b      	ldr	r3, [r3, #0]
    8bcc:	1ad3      	subs	r3, r2, r3
    8bce:	1e5a      	subs	r2, r3, #1
    8bd0:	683b      	ldr	r3, [r7, #0]
    8bd2:	601a      	str	r2, [r3, #0]

		return false;
    8bd4:	2300      	movs	r3, #0
    8bd6:	e015      	b.n	8c04 <free_space+0x56>
	} else if (!buffer->rd_idx) {
    8bd8:	687b      	ldr	r3, [r7, #4]
    8bda:	68db      	ldr	r3, [r3, #12]
    8bdc:	2b00      	cmp	r3, #0
    8bde:	d109      	bne.n	8bf4 <free_space+0x46>
		*res = buffer->size - buffer->tmp_wr_idx - 1;
    8be0:	687b      	ldr	r3, [r7, #4]
    8be2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    8be4:	687b      	ldr	r3, [r7, #4]
    8be6:	681b      	ldr	r3, [r3, #0]
    8be8:	1ad3      	subs	r3, r2, r3
    8bea:	1e5a      	subs	r2, r3, #1
    8bec:	683b      	ldr	r3, [r7, #0]
    8bee:	601a      	str	r2, [r3, #0]
		return false;
    8bf0:	2300      	movs	r3, #0
    8bf2:	e007      	b.n	8c04 <free_space+0x56>
	}

	*res = buffer->size - buffer->tmp_wr_idx;
    8bf4:	687b      	ldr	r3, [r7, #4]
    8bf6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    8bf8:	687b      	ldr	r3, [r7, #4]
    8bfa:	681b      	ldr	r3, [r3, #0]
    8bfc:	1ad2      	subs	r2, r2, r3
    8bfe:	683b      	ldr	r3, [r7, #0]
    8c00:	601a      	str	r2, [r3, #0]

	return true;
    8c02:	2301      	movs	r3, #1
}
    8c04:	4618      	mov	r0, r3
    8c06:	370c      	adds	r7, #12
    8c08:	46bd      	mov	sp, r7
    8c0a:	bc80      	pop	{r7}
    8c0c:	4770      	bx	lr

00008c0e <available>:

static inline bool available(struct mpsc_pbuf_buffer *buffer, uint32_t *res)
{
    8c0e:	b480      	push	{r7}
    8c10:	b083      	sub	sp, #12
    8c12:	af00      	add	r7, sp, #0
    8c14:	6078      	str	r0, [r7, #4]
    8c16:	6039      	str	r1, [r7, #0]
	if (buffer->tmp_rd_idx <= buffer->wr_idx) {
    8c18:	687b      	ldr	r3, [r7, #4]
    8c1a:	689a      	ldr	r2, [r3, #8]
    8c1c:	687b      	ldr	r3, [r7, #4]
    8c1e:	685b      	ldr	r3, [r3, #4]
    8c20:	429a      	cmp	r2, r3
    8c22:	d808      	bhi.n	8c36 <available+0x28>
		*res = (buffer->wr_idx - buffer->tmp_rd_idx);
    8c24:	687b      	ldr	r3, [r7, #4]
    8c26:	685a      	ldr	r2, [r3, #4]
    8c28:	687b      	ldr	r3, [r7, #4]
    8c2a:	689b      	ldr	r3, [r3, #8]
    8c2c:	1ad2      	subs	r2, r2, r3
    8c2e:	683b      	ldr	r3, [r7, #0]
    8c30:	601a      	str	r2, [r3, #0]

		return false;
    8c32:	2300      	movs	r3, #0
    8c34:	e007      	b.n	8c46 <available+0x38>
	}

	*res = buffer->size - buffer->tmp_rd_idx;
    8c36:	687b      	ldr	r3, [r7, #4]
    8c38:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    8c3a:	687b      	ldr	r3, [r7, #4]
    8c3c:	689b      	ldr	r3, [r3, #8]
    8c3e:	1ad2      	subs	r2, r2, r3
    8c40:	683b      	ldr	r3, [r7, #0]
    8c42:	601a      	str	r2, [r3, #0]

	return true;
    8c44:	2301      	movs	r3, #1
}
    8c46:	4618      	mov	r0, r3
    8c48:	370c      	adds	r7, #12
    8c4a:	46bd      	mov	sp, r7
    8c4c:	bc80      	pop	{r7}
    8c4e:	4770      	bx	lr

00008c50 <get_usage>:

static inline uint32_t get_usage(struct mpsc_pbuf_buffer *buffer)
{
    8c50:	b580      	push	{r7, lr}
    8c52:	b084      	sub	sp, #16
    8c54:	af00      	add	r7, sp, #0
    8c56:	6078      	str	r0, [r7, #4]
	uint32_t f;

	if (free_space(buffer, &f)) {
    8c58:	f107 030c 	add.w	r3, r7, #12
    8c5c:	4619      	mov	r1, r3
    8c5e:	6878      	ldr	r0, [r7, #4]
    8c60:	f7ff ffa5 	bl	8bae <free_space>
    8c64:	4603      	mov	r3, r0
    8c66:	2b00      	cmp	r3, #0
    8c68:	d005      	beq.n	8c76 <get_usage+0x26>
		f += (buffer->rd_idx - 1);
    8c6a:	687b      	ldr	r3, [r7, #4]
    8c6c:	68da      	ldr	r2, [r3, #12]
    8c6e:	68fb      	ldr	r3, [r7, #12]
    8c70:	4413      	add	r3, r2
    8c72:	3b01      	subs	r3, #1
    8c74:	60fb      	str	r3, [r7, #12]
	}

	return buffer->size - 1 - f;
    8c76:	687b      	ldr	r3, [r7, #4]
    8c78:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    8c7a:	68fb      	ldr	r3, [r7, #12]
    8c7c:	1ad3      	subs	r3, r2, r3
    8c7e:	3b01      	subs	r3, #1
}
    8c80:	4618      	mov	r0, r3
    8c82:	3710      	adds	r7, #16
    8c84:	46bd      	mov	sp, r7
    8c86:	bd80      	pop	{r7, pc}

00008c88 <max_utilization_update>:

static inline void max_utilization_update(struct mpsc_pbuf_buffer *buffer)
{
    8c88:	b590      	push	{r4, r7, lr}
    8c8a:	b083      	sub	sp, #12
    8c8c:	af00      	add	r7, sp, #0
    8c8e:	6078      	str	r0, [r7, #4]
	if (!(buffer->flags & MPSC_PBUF_MAX_UTILIZATION)) {
    8c90:	687b      	ldr	r3, [r7, #4]
    8c92:	691b      	ldr	r3, [r3, #16]
    8c94:	f003 0304 	and.w	r3, r3, #4
    8c98:	2b00      	cmp	r3, #0
    8c9a:	d011      	beq.n	8cc0 <max_utilization_update+0x38>
		return;
	}

	buffer->max_usage = MAX(buffer->max_usage, get_usage(buffer));
    8c9c:	687b      	ldr	r3, [r7, #4]
    8c9e:	6a9c      	ldr	r4, [r3, #40]	; 0x28
    8ca0:	6878      	ldr	r0, [r7, #4]
    8ca2:	f7ff ffd5 	bl	8c50 <get_usage>
    8ca6:	4603      	mov	r3, r0
    8ca8:	429c      	cmp	r4, r3
    8caa:	d902      	bls.n	8cb2 <max_utilization_update+0x2a>
    8cac:	687b      	ldr	r3, [r7, #4]
    8cae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    8cb0:	e003      	b.n	8cba <max_utilization_update+0x32>
    8cb2:	6878      	ldr	r0, [r7, #4]
    8cb4:	f7ff ffcc 	bl	8c50 <get_usage>
    8cb8:	4603      	mov	r3, r0
    8cba:	687a      	ldr	r2, [r7, #4]
    8cbc:	6293      	str	r3, [r2, #40]	; 0x28
    8cbe:	e000      	b.n	8cc2 <max_utilization_update+0x3a>
		return;
    8cc0:	bf00      	nop
}
    8cc2:	370c      	adds	r7, #12
    8cc4:	46bd      	mov	sp, r7
    8cc6:	bd90      	pop	{r4, r7, pc}

00008cc8 <is_valid>:

static inline bool is_valid(union mpsc_pbuf_generic *item)
{
    8cc8:	b480      	push	{r7}
    8cca:	b083      	sub	sp, #12
    8ccc:	af00      	add	r7, sp, #0
    8cce:	6078      	str	r0, [r7, #4]
	return item->hdr.valid;
    8cd0:	687b      	ldr	r3, [r7, #4]
    8cd2:	781b      	ldrb	r3, [r3, #0]
    8cd4:	f3c3 0300 	ubfx	r3, r3, #0, #1
    8cd8:	b2db      	uxtb	r3, r3
    8cda:	2b00      	cmp	r3, #0
    8cdc:	bf14      	ite	ne
    8cde:	2301      	movne	r3, #1
    8ce0:	2300      	moveq	r3, #0
    8ce2:	b2db      	uxtb	r3, r3
}
    8ce4:	4618      	mov	r0, r3
    8ce6:	370c      	adds	r7, #12
    8ce8:	46bd      	mov	sp, r7
    8cea:	bc80      	pop	{r7}
    8cec:	4770      	bx	lr

00008cee <is_invalid>:

static inline bool is_invalid(union mpsc_pbuf_generic *item)
{
    8cee:	b480      	push	{r7}
    8cf0:	b083      	sub	sp, #12
    8cf2:	af00      	add	r7, sp, #0
    8cf4:	6078      	str	r0, [r7, #4]
	return !item->hdr.valid && !item->hdr.busy;
    8cf6:	687b      	ldr	r3, [r7, #4]
    8cf8:	781b      	ldrb	r3, [r3, #0]
    8cfa:	f003 0301 	and.w	r3, r3, #1
    8cfe:	b2db      	uxtb	r3, r3
    8d00:	2b00      	cmp	r3, #0
    8d02:	d108      	bne.n	8d16 <is_invalid+0x28>
    8d04:	687b      	ldr	r3, [r7, #4]
    8d06:	781b      	ldrb	r3, [r3, #0]
    8d08:	f003 0302 	and.w	r3, r3, #2
    8d0c:	b2db      	uxtb	r3, r3
    8d0e:	2b00      	cmp	r3, #0
    8d10:	d101      	bne.n	8d16 <is_invalid+0x28>
    8d12:	2301      	movs	r3, #1
    8d14:	e000      	b.n	8d18 <is_invalid+0x2a>
    8d16:	2300      	movs	r3, #0
    8d18:	f003 0301 	and.w	r3, r3, #1
    8d1c:	b2db      	uxtb	r3, r3
}
    8d1e:	4618      	mov	r0, r3
    8d20:	370c      	adds	r7, #12
    8d22:	46bd      	mov	sp, r7
    8d24:	bc80      	pop	{r7}
    8d26:	4770      	bx	lr

00008d28 <idx_inc>:

static inline uint32_t idx_inc(struct mpsc_pbuf_buffer *buffer,
				uint32_t idx, uint32_t val)
{
    8d28:	b480      	push	{r7}
    8d2a:	b087      	sub	sp, #28
    8d2c:	af00      	add	r7, sp, #0
    8d2e:	60f8      	str	r0, [r7, #12]
    8d30:	60b9      	str	r1, [r7, #8]
    8d32:	607a      	str	r2, [r7, #4]
	uint32_t i = idx + val;
    8d34:	68ba      	ldr	r2, [r7, #8]
    8d36:	687b      	ldr	r3, [r7, #4]
    8d38:	4413      	add	r3, r2
    8d3a:	617b      	str	r3, [r7, #20]

	if (buffer->flags & MPSC_PBUF_SIZE_POW2) {
    8d3c:	68fb      	ldr	r3, [r7, #12]
    8d3e:	691b      	ldr	r3, [r3, #16]
    8d40:	f003 0301 	and.w	r3, r3, #1
    8d44:	2b00      	cmp	r3, #0
    8d46:	d005      	beq.n	8d54 <idx_inc+0x2c>
		return i & (buffer->size - 1);
    8d48:	68fb      	ldr	r3, [r7, #12]
    8d4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    8d4c:	1e5a      	subs	r2, r3, #1
    8d4e:	697b      	ldr	r3, [r7, #20]
    8d50:	4013      	ands	r3, r2
    8d52:	e00a      	b.n	8d6a <idx_inc+0x42>
	}

	return (i >= buffer->size) ? i - buffer->size : i;
    8d54:	68fb      	ldr	r3, [r7, #12]
    8d56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    8d58:	697a      	ldr	r2, [r7, #20]
    8d5a:	429a      	cmp	r2, r3
    8d5c:	d304      	bcc.n	8d68 <idx_inc+0x40>
    8d5e:	68fb      	ldr	r3, [r7, #12]
    8d60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    8d62:	697a      	ldr	r2, [r7, #20]
    8d64:	1ad3      	subs	r3, r2, r3
    8d66:	e000      	b.n	8d6a <idx_inc+0x42>
    8d68:	697b      	ldr	r3, [r7, #20]
}
    8d6a:	4618      	mov	r0, r3
    8d6c:	371c      	adds	r7, #28
    8d6e:	46bd      	mov	sp, r7
    8d70:	bc80      	pop	{r7}
    8d72:	4770      	bx	lr

00008d74 <get_skip>:

static inline uint32_t get_skip(union mpsc_pbuf_generic *item)
{
    8d74:	b480      	push	{r7}
    8d76:	b083      	sub	sp, #12
    8d78:	af00      	add	r7, sp, #0
    8d7a:	6078      	str	r0, [r7, #4]
	if (item->hdr.busy && !item->hdr.valid) {
    8d7c:	687b      	ldr	r3, [r7, #4]
    8d7e:	781b      	ldrb	r3, [r3, #0]
    8d80:	f003 0302 	and.w	r3, r3, #2
    8d84:	b2db      	uxtb	r3, r3
    8d86:	2b00      	cmp	r3, #0
    8d88:	d00b      	beq.n	8da2 <get_skip+0x2e>
    8d8a:	687b      	ldr	r3, [r7, #4]
    8d8c:	781b      	ldrb	r3, [r3, #0]
    8d8e:	f003 0301 	and.w	r3, r3, #1
    8d92:	b2db      	uxtb	r3, r3
    8d94:	2b00      	cmp	r3, #0
    8d96:	d104      	bne.n	8da2 <get_skip+0x2e>
		return item->skip.len;
    8d98:	687b      	ldr	r3, [r7, #4]
    8d9a:	681b      	ldr	r3, [r3, #0]
    8d9c:	f3c3 039d 	ubfx	r3, r3, #2, #30
    8da0:	e000      	b.n	8da4 <get_skip+0x30>
	}

	return 0;
    8da2:	2300      	movs	r3, #0
}
    8da4:	4618      	mov	r0, r3
    8da6:	370c      	adds	r7, #12
    8da8:	46bd      	mov	sp, r7
    8daa:	bc80      	pop	{r7}
    8dac:	4770      	bx	lr

00008dae <add_skip_item>:

static void add_skip_item(struct mpsc_pbuf_buffer *buffer, uint32_t wlen)
{
    8dae:	b580      	push	{r7, lr}
    8db0:	b084      	sub	sp, #16
    8db2:	af00      	add	r7, sp, #0
    8db4:	6078      	str	r0, [r7, #4]
    8db6:	6039      	str	r1, [r7, #0]
	union mpsc_pbuf_generic skip = {
    8db8:	7b3b      	ldrb	r3, [r7, #12]
    8dba:	f36f 0300 	bfc	r3, #0, #1
    8dbe:	733b      	strb	r3, [r7, #12]
    8dc0:	7b3b      	ldrb	r3, [r7, #12]
    8dc2:	f043 0302 	orr.w	r3, r3, #2
    8dc6:	733b      	strb	r3, [r7, #12]
    8dc8:	683b      	ldr	r3, [r7, #0]
    8dca:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
    8dce:	68fb      	ldr	r3, [r7, #12]
    8dd0:	f362 039f 	bfi	r3, r2, #2, #30
    8dd4:	60fb      	str	r3, [r7, #12]
		.skip = { .valid = 0, .busy = 1, .len = wlen }
	};

	buffer->buf[buffer->tmp_wr_idx] = skip.raw;
    8dd6:	687b      	ldr	r3, [r7, #4]
    8dd8:	6a1a      	ldr	r2, [r3, #32]
    8dda:	687b      	ldr	r3, [r7, #4]
    8ddc:	681b      	ldr	r3, [r3, #0]
    8dde:	009b      	lsls	r3, r3, #2
    8de0:	4413      	add	r3, r2
    8de2:	68fa      	ldr	r2, [r7, #12]
    8de4:	601a      	str	r2, [r3, #0]
	buffer->tmp_wr_idx = idx_inc(buffer, buffer->tmp_wr_idx, wlen);
    8de6:	687b      	ldr	r3, [r7, #4]
    8de8:	681b      	ldr	r3, [r3, #0]
    8dea:	683a      	ldr	r2, [r7, #0]
    8dec:	4619      	mov	r1, r3
    8dee:	6878      	ldr	r0, [r7, #4]
    8df0:	f7ff ff9a 	bl	8d28 <idx_inc>
    8df4:	4602      	mov	r2, r0
    8df6:	687b      	ldr	r3, [r7, #4]
    8df8:	601a      	str	r2, [r3, #0]
	buffer->wr_idx = idx_inc(buffer, buffer->wr_idx, wlen);
    8dfa:	687b      	ldr	r3, [r7, #4]
    8dfc:	685b      	ldr	r3, [r3, #4]
    8dfe:	683a      	ldr	r2, [r7, #0]
    8e00:	4619      	mov	r1, r3
    8e02:	6878      	ldr	r0, [r7, #4]
    8e04:	f7ff ff90 	bl	8d28 <idx_inc>
    8e08:	4602      	mov	r2, r0
    8e0a:	687b      	ldr	r3, [r7, #4]
    8e0c:	605a      	str	r2, [r3, #4]
}
    8e0e:	bf00      	nop
    8e10:	3710      	adds	r7, #16
    8e12:	46bd      	mov	sp, r7
    8e14:	bd80      	pop	{r7, pc}

00008e16 <drop_item_locked>:
 */
static union mpsc_pbuf_generic *drop_item_locked(struct mpsc_pbuf_buffer *buffer,
						 uint32_t free_wlen,
						 bool allow_drop,
						 bool *user_packet)
{
    8e16:	b580      	push	{r7, lr}
    8e18:	b088      	sub	sp, #32
    8e1a:	af00      	add	r7, sp, #0
    8e1c:	60f8      	str	r0, [r7, #12]
    8e1e:	60b9      	str	r1, [r7, #8]
    8e20:	603b      	str	r3, [r7, #0]
    8e22:	4613      	mov	r3, r2
    8e24:	71fb      	strb	r3, [r7, #7]
	union mpsc_pbuf_generic *item;
	uint32_t rd_wlen;
	uint32_t skip_wlen;

	*user_packet = false;
    8e26:	683b      	ldr	r3, [r7, #0]
    8e28:	2200      	movs	r2, #0
    8e2a:	701a      	strb	r2, [r3, #0]
	item = (union mpsc_pbuf_generic *)&buffer->buf[buffer->rd_idx];
    8e2c:	68fb      	ldr	r3, [r7, #12]
    8e2e:	6a1a      	ldr	r2, [r3, #32]
    8e30:	68fb      	ldr	r3, [r7, #12]
    8e32:	68db      	ldr	r3, [r3, #12]
    8e34:	009b      	lsls	r3, r3, #2
    8e36:	4413      	add	r3, r2
    8e38:	61fb      	str	r3, [r7, #28]
	skip_wlen = get_skip(item);
    8e3a:	69f8      	ldr	r0, [r7, #28]
    8e3c:	f7ff ff9a 	bl	8d74 <get_skip>
    8e40:	6178      	str	r0, [r7, #20]

	rd_wlen = skip_wlen ? skip_wlen : buffer->get_wlen(item);
    8e42:	697b      	ldr	r3, [r7, #20]
    8e44:	2b00      	cmp	r3, #0
    8e46:	d105      	bne.n	8e54 <drop_item_locked+0x3e>
    8e48:	68fb      	ldr	r3, [r7, #12]
    8e4a:	69db      	ldr	r3, [r3, #28]
    8e4c:	69f8      	ldr	r0, [r7, #28]
    8e4e:	4798      	blx	r3
    8e50:	4603      	mov	r3, r0
    8e52:	e000      	b.n	8e56 <drop_item_locked+0x40>
    8e54:	697b      	ldr	r3, [r7, #20]
    8e56:	61bb      	str	r3, [r7, #24]
	if (skip_wlen) {
    8e58:	697b      	ldr	r3, [r7, #20]
    8e5a:	2b00      	cmp	r3, #0
    8e5c:	d002      	beq.n	8e64 <drop_item_locked+0x4e>
		allow_drop = true;
    8e5e:	2301      	movs	r3, #1
    8e60:	71fb      	strb	r3, [r7, #7]
    8e62:	e04f      	b.n	8f04 <drop_item_locked+0xee>
	} else if (allow_drop) {
    8e64:	79fb      	ldrb	r3, [r7, #7]
    8e66:	2b00      	cmp	r3, #0
    8e68:	d04a      	beq.n	8f00 <drop_item_locked+0xea>
		if (item->hdr.busy) {
    8e6a:	69fb      	ldr	r3, [r7, #28]
    8e6c:	781b      	ldrb	r3, [r3, #0]
    8e6e:	f003 0302 	and.w	r3, r3, #2
    8e72:	b2db      	uxtb	r3, r3
    8e74:	2b00      	cmp	r3, #0
    8e76:	d03f      	beq.n	8ef8 <drop_item_locked+0xe2>
			/* item is currently processed and cannot be overwritten. */
			add_skip_item(buffer, free_wlen + 1);
    8e78:	68bb      	ldr	r3, [r7, #8]
    8e7a:	3301      	adds	r3, #1
    8e7c:	4619      	mov	r1, r3
    8e7e:	68f8      	ldr	r0, [r7, #12]
    8e80:	f7ff ff95 	bl	8dae <add_skip_item>
			buffer->wr_idx = idx_inc(buffer, buffer->wr_idx, rd_wlen);
    8e84:	68fb      	ldr	r3, [r7, #12]
    8e86:	685b      	ldr	r3, [r3, #4]
    8e88:	69ba      	ldr	r2, [r7, #24]
    8e8a:	4619      	mov	r1, r3
    8e8c:	68f8      	ldr	r0, [r7, #12]
    8e8e:	f7ff ff4b 	bl	8d28 <idx_inc>
    8e92:	4602      	mov	r2, r0
    8e94:	68fb      	ldr	r3, [r7, #12]
    8e96:	605a      	str	r2, [r3, #4]
			buffer->tmp_wr_idx = idx_inc(buffer, buffer->tmp_wr_idx, rd_wlen);
    8e98:	68fb      	ldr	r3, [r7, #12]
    8e9a:	681b      	ldr	r3, [r3, #0]
    8e9c:	69ba      	ldr	r2, [r7, #24]
    8e9e:	4619      	mov	r1, r3
    8ea0:	68f8      	ldr	r0, [r7, #12]
    8ea2:	f7ff ff41 	bl	8d28 <idx_inc>
    8ea6:	4602      	mov	r2, r0
    8ea8:	68fb      	ldr	r3, [r7, #12]
    8eaa:	601a      	str	r2, [r3, #0]

			/* Get next itme followed the busy one. */
			uint32_t next_rd_idx = idx_inc(buffer, buffer->rd_idx, rd_wlen);
    8eac:	68fb      	ldr	r3, [r7, #12]
    8eae:	68db      	ldr	r3, [r3, #12]
    8eb0:	69ba      	ldr	r2, [r7, #24]
    8eb2:	4619      	mov	r1, r3
    8eb4:	68f8      	ldr	r0, [r7, #12]
    8eb6:	f7ff ff37 	bl	8d28 <idx_inc>
    8eba:	6138      	str	r0, [r7, #16]

			item = (union mpsc_pbuf_generic *)&buffer->buf[next_rd_idx];
    8ebc:	68fb      	ldr	r3, [r7, #12]
    8ebe:	6a1a      	ldr	r2, [r3, #32]
    8ec0:	693b      	ldr	r3, [r7, #16]
    8ec2:	009b      	lsls	r3, r3, #2
    8ec4:	4413      	add	r3, r2
    8ec6:	61fb      	str	r3, [r7, #28]
			skip_wlen = get_skip(item);
    8ec8:	69f8      	ldr	r0, [r7, #28]
    8eca:	f7ff ff53 	bl	8d74 <get_skip>
    8ece:	6178      	str	r0, [r7, #20]
			if (skip_wlen) {
    8ed0:	697b      	ldr	r3, [r7, #20]
    8ed2:	2b00      	cmp	r3, #0
    8ed4:	d004      	beq.n	8ee0 <drop_item_locked+0xca>
				rd_wlen += skip_wlen;
    8ed6:	69ba      	ldr	r2, [r7, #24]
    8ed8:	697b      	ldr	r3, [r7, #20]
    8eda:	4413      	add	r3, r2
    8edc:	61bb      	str	r3, [r7, #24]
    8ede:	e011      	b.n	8f04 <drop_item_locked+0xee>
			} else {
				rd_wlen += buffer->get_wlen(item);
    8ee0:	68fb      	ldr	r3, [r7, #12]
    8ee2:	69db      	ldr	r3, [r3, #28]
    8ee4:	69f8      	ldr	r0, [r7, #28]
    8ee6:	4798      	blx	r3
    8ee8:	4602      	mov	r2, r0
    8eea:	69bb      	ldr	r3, [r7, #24]
    8eec:	4413      	add	r3, r2
    8eee:	61bb      	str	r3, [r7, #24]
				*user_packet = true;
    8ef0:	683b      	ldr	r3, [r7, #0]
    8ef2:	2201      	movs	r2, #1
    8ef4:	701a      	strb	r2, [r3, #0]
    8ef6:	e005      	b.n	8f04 <drop_item_locked+0xee>
			}
		} else {
			*user_packet = true;
    8ef8:	683b      	ldr	r3, [r7, #0]
    8efa:	2201      	movs	r2, #1
    8efc:	701a      	strb	r2, [r3, #0]
    8efe:	e001      	b.n	8f04 <drop_item_locked+0xee>
		}
	} else {
		item = NULL;
    8f00:	2300      	movs	r3, #0
    8f02:	61fb      	str	r3, [r7, #28]
	}

	if (allow_drop) {
    8f04:	79fb      	ldrb	r3, [r7, #7]
    8f06:	2b00      	cmp	r3, #0
    8f08:	d00d      	beq.n	8f26 <drop_item_locked+0x110>
		buffer->rd_idx = idx_inc(buffer, buffer->rd_idx, rd_wlen);
    8f0a:	68fb      	ldr	r3, [r7, #12]
    8f0c:	68db      	ldr	r3, [r3, #12]
    8f0e:	69ba      	ldr	r2, [r7, #24]
    8f10:	4619      	mov	r1, r3
    8f12:	68f8      	ldr	r0, [r7, #12]
    8f14:	f7ff ff08 	bl	8d28 <idx_inc>
    8f18:	4602      	mov	r2, r0
    8f1a:	68fb      	ldr	r3, [r7, #12]
    8f1c:	60da      	str	r2, [r3, #12]
		buffer->tmp_rd_idx = buffer->rd_idx;
    8f1e:	68fb      	ldr	r3, [r7, #12]
    8f20:	68da      	ldr	r2, [r3, #12]
    8f22:	68fb      	ldr	r3, [r7, #12]
    8f24:	609a      	str	r2, [r3, #8]
	}

	return item;
    8f26:	69fb      	ldr	r3, [r7, #28]
}
    8f28:	4618      	mov	r0, r3
    8f2a:	3720      	adds	r7, #32
    8f2c:	46bd      	mov	sp, r7
    8f2e:	bd80      	pop	{r7, pc}

00008f30 <mpsc_pbuf_alloc>:

}

union mpsc_pbuf_generic *mpsc_pbuf_alloc(struct mpsc_pbuf_buffer *buffer,
					 size_t wlen, k_timeout_t timeout)
{
    8f30:	b580      	push	{r7, lr}
    8f32:	b09a      	sub	sp, #104	; 0x68
    8f34:	af00      	add	r7, sp, #0
    8f36:	60f8      	str	r0, [r7, #12]
    8f38:	60b9      	str	r1, [r7, #8]
    8f3a:	e9c7 2300 	strd	r2, r3, [r7]
	union mpsc_pbuf_generic *item = NULL;
    8f3e:	2300      	movs	r3, #0
    8f40:	667b      	str	r3, [r7, #100]	; 0x64
	union mpsc_pbuf_generic *dropped_item = NULL;
    8f42:	2300      	movs	r3, #0
    8f44:	663b      	str	r3, [r7, #96]	; 0x60
	uint32_t free_wlen;
	bool valid_drop;

	MPSC_PBUF_DBG(buffer, "alloc %d words, ", (int)wlen);

	if (wlen > (buffer->size - 1)) {
    8f46:	68fb      	ldr	r3, [r7, #12]
    8f48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    8f4a:	3b01      	subs	r3, #1
    8f4c:	68ba      	ldr	r2, [r7, #8]
    8f4e:	429a      	cmp	r2, r3
    8f50:	d901      	bls.n	8f56 <mpsc_pbuf_alloc+0x26>
		MPSC_PBUF_DBG(buffer, "Failed to alloc, ");
		return NULL;
    8f52:	2300      	movs	r3, #0
    8f54:	e0d0      	b.n	90f8 <mpsc_pbuf_alloc+0x1c8>

	do {
		k_spinlock_key_t key;
		bool wrap;

		cont = false;
    8f56:	2300      	movs	r3, #0
    8f58:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		key = k_spin_lock(&buffer->lock);
    8f5c:	68fb      	ldr	r3, [r7, #12]
    8f5e:	3314      	adds	r3, #20
    8f60:	653b      	str	r3, [r7, #80]	; 0x50
	__asm__ volatile(
    8f62:	f04f 0320 	mov.w	r3, #32
    8f66:	f3ef 8211 	mrs	r2, BASEPRI
    8f6a:	f383 8812 	msr	BASEPRI_MAX, r3
    8f6e:	f3bf 8f6f 	isb	sy
    8f72:	64fa      	str	r2, [r7, #76]	; 0x4c
    8f74:	64bb      	str	r3, [r7, #72]	; 0x48
	return key;
    8f76:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
	k.key = arch_irq_lock();
    8f78:	61bb      	str	r3, [r7, #24]
	return k;
    8f7a:	69bb      	ldr	r3, [r7, #24]
    8f7c:	623b      	str	r3, [r7, #32]
		wrap = free_space(buffer, &free_wlen);
    8f7e:	f107 0328 	add.w	r3, r7, #40	; 0x28
    8f82:	4619      	mov	r1, r3
    8f84:	68f8      	ldr	r0, [r7, #12]
    8f86:	f7ff fe12 	bl	8bae <free_space>
    8f8a:	4603      	mov	r3, r0
    8f8c:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e

		if (free_wlen >= wlen) {
    8f90:	6abb      	ldr	r3, [r7, #40]	; 0x28
    8f92:	68ba      	ldr	r2, [r7, #8]
    8f94:	429a      	cmp	r2, r3
    8f96:	d81b      	bhi.n	8fd0 <mpsc_pbuf_alloc+0xa0>
			item =
			    (union mpsc_pbuf_generic *)&buffer->buf[buffer->tmp_wr_idx];
    8f98:	68fb      	ldr	r3, [r7, #12]
    8f9a:	6a1a      	ldr	r2, [r3, #32]
    8f9c:	68fb      	ldr	r3, [r7, #12]
    8f9e:	681b      	ldr	r3, [r3, #0]
    8fa0:	009b      	lsls	r3, r3, #2
			item =
    8fa2:	4413      	add	r3, r2
    8fa4:	667b      	str	r3, [r7, #100]	; 0x64
			item->hdr.valid = 0;
    8fa6:	6e7a      	ldr	r2, [r7, #100]	; 0x64
    8fa8:	7813      	ldrb	r3, [r2, #0]
    8faa:	f36f 0300 	bfc	r3, #0, #1
    8fae:	7013      	strb	r3, [r2, #0]
			item->hdr.busy = 0;
    8fb0:	6e7a      	ldr	r2, [r7, #100]	; 0x64
    8fb2:	7813      	ldrb	r3, [r2, #0]
    8fb4:	f36f 0341 	bfc	r3, #1, #1
    8fb8:	7013      	strb	r3, [r2, #0]
			buffer->tmp_wr_idx = idx_inc(buffer,
    8fba:	68fb      	ldr	r3, [r7, #12]
    8fbc:	681b      	ldr	r3, [r3, #0]
    8fbe:	68ba      	ldr	r2, [r7, #8]
    8fc0:	4619      	mov	r1, r3
    8fc2:	68f8      	ldr	r0, [r7, #12]
    8fc4:	f7ff feb0 	bl	8d28 <idx_inc>
    8fc8:	4602      	mov	r2, r0
    8fca:	68fb      	ldr	r3, [r7, #12]
    8fcc:	601a      	str	r2, [r3, #0]
    8fce:	e069      	b.n	90a4 <mpsc_pbuf_alloc+0x174>
						     buffer->tmp_wr_idx, wlen);
		} else if (wrap) {
    8fd0:	f897 305e 	ldrb.w	r3, [r7, #94]	; 0x5e
    8fd4:	2b00      	cmp	r3, #0
    8fd6:	d008      	beq.n	8fea <mpsc_pbuf_alloc+0xba>
			add_skip_item(buffer, free_wlen);
    8fd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
    8fda:	4619      	mov	r1, r3
    8fdc:	68f8      	ldr	r0, [r7, #12]
    8fde:	f7ff fee6 	bl	8dae <add_skip_item>
			cont = true;
    8fe2:	2301      	movs	r3, #1
    8fe4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
    8fe8:	e05c      	b.n	90a4 <mpsc_pbuf_alloc+0x174>
		} else if (!K_TIMEOUT_EQ(timeout, K_NO_WAIT) &&
    8fea:	e9d7 2300 	ldrd	r2, r3, [r7]
    8fee:	f04f 0000 	mov.w	r0, #0
    8ff2:	f04f 0100 	mov.w	r1, #0
    8ff6:	428b      	cmp	r3, r1
    8ff8:	bf08      	it	eq
    8ffa:	4282      	cmpeq	r2, r0
    8ffc:	d036      	beq.n	906c <mpsc_pbuf_alloc+0x13c>
			   !k_is_in_isr()) {
    8ffe:	f001 fbba 	bl	a776 <k_is_in_isr>
    9002:	4603      	mov	r3, r0
    9004:	f083 0301 	eor.w	r3, r3, #1
    9008:	b2db      	uxtb	r3, r3
		} else if (!K_TIMEOUT_EQ(timeout, K_NO_WAIT) &&
    900a:	2b00      	cmp	r3, #0
    900c:	d02e      	beq.n	906c <mpsc_pbuf_alloc+0x13c>
			int err;

			k_spin_unlock(&buffer->lock, key);
    900e:	68fb      	ldr	r3, [r7, #12]
    9010:	3314      	adds	r3, #20
    9012:	63bb      	str	r3, [r7, #56]	; 0x38
    9014:	6a3b      	ldr	r3, [r7, #32]
    9016:	617b      	str	r3, [r7, #20]
	arch_irq_unlock(key.key);
    9018:	697b      	ldr	r3, [r7, #20]
    901a:	637b      	str	r3, [r7, #52]	; 0x34
	__asm__ volatile(
    901c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    901e:	f383 8811 	msr	BASEPRI, r3
    9022:	f3bf 8f6f 	isb	sy
}
    9026:	bf00      	nop
}
    9028:	bf00      	nop
			err = k_sem_take(&buffer->sem, timeout);
    902a:	68fb      	ldr	r3, [r7, #12]
    902c:	f103 012c 	add.w	r1, r3, #44	; 0x2c
    9030:	e9d7 2300 	ldrd	r2, r3, [r7]
    9034:	4608      	mov	r0, r1
    9036:	f7ff fd64 	bl	8b02 <k_sem_take>
    903a:	65b8      	str	r0, [r7, #88]	; 0x58
			key = k_spin_lock(&buffer->lock);
    903c:	68fb      	ldr	r3, [r7, #12]
    903e:	3314      	adds	r3, #20
    9040:	647b      	str	r3, [r7, #68]	; 0x44
	__asm__ volatile(
    9042:	f04f 0320 	mov.w	r3, #32
    9046:	f3ef 8211 	mrs	r2, BASEPRI
    904a:	f383 8812 	msr	BASEPRI_MAX, r3
    904e:	f3bf 8f6f 	isb	sy
    9052:	643a      	str	r2, [r7, #64]	; 0x40
    9054:	63fb      	str	r3, [r7, #60]	; 0x3c
	return key;
    9056:	6c3b      	ldr	r3, [r7, #64]	; 0x40
	k.key = arch_irq_lock();
    9058:	613b      	str	r3, [r7, #16]
	return k;
    905a:	693b      	ldr	r3, [r7, #16]
    905c:	623b      	str	r3, [r7, #32]
			if (err == 0) {
    905e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
    9060:	2b00      	cmp	r3, #0
    9062:	d11e      	bne.n	90a2 <mpsc_pbuf_alloc+0x172>
				cont = true;
    9064:	2301      	movs	r3, #1
    9066:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			   !k_is_in_isr()) {
    906a:	e01a      	b.n	90a2 <mpsc_pbuf_alloc+0x172>
			}
		} else {
			bool user_drop = buffer->flags & MPSC_PBUF_MODE_OVERWRITE;
    906c:	68fb      	ldr	r3, [r7, #12]
    906e:	691b      	ldr	r3, [r3, #16]
    9070:	f003 0302 	and.w	r3, r3, #2
    9074:	2b00      	cmp	r3, #0
    9076:	bf14      	ite	ne
    9078:	2301      	movne	r3, #1
    907a:	2300      	moveq	r3, #0
    907c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

			dropped_item = drop_item_locked(buffer, free_wlen,
    9080:	6ab9      	ldr	r1, [r7, #40]	; 0x28
    9082:	f107 0327 	add.w	r3, r7, #39	; 0x27
    9086:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
    908a:	68f8      	ldr	r0, [r7, #12]
    908c:	f7ff fec3 	bl	8e16 <drop_item_locked>
    9090:	6638      	str	r0, [r7, #96]	; 0x60
							user_drop, &valid_drop);
			cont = dropped_item != NULL;
    9092:	6e3b      	ldr	r3, [r7, #96]	; 0x60
    9094:	2b00      	cmp	r3, #0
    9096:	bf14      	ite	ne
    9098:	2301      	movne	r3, #1
    909a:	2300      	moveq	r3, #0
    909c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
    90a0:	e000      	b.n	90a4 <mpsc_pbuf_alloc+0x174>
			   !k_is_in_isr()) {
    90a2:	bf00      	nop
		}

		k_spin_unlock(&buffer->lock, key);
    90a4:	68fb      	ldr	r3, [r7, #12]
    90a6:	3314      	adds	r3, #20
    90a8:	633b      	str	r3, [r7, #48]	; 0x30
    90aa:	6a3b      	ldr	r3, [r7, #32]
    90ac:	61fb      	str	r3, [r7, #28]
	arch_irq_unlock(key.key);
    90ae:	69fb      	ldr	r3, [r7, #28]
    90b0:	62fb      	str	r3, [r7, #44]	; 0x2c
	__asm__ volatile(
    90b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    90b4:	f383 8811 	msr	BASEPRI, r3
    90b8:	f3bf 8f6f 	isb	sy
}
    90bc:	bf00      	nop
}
    90be:	bf00      	nop

		if (cont && dropped_item && valid_drop) {
    90c0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
    90c4:	2b00      	cmp	r3, #0
    90c6:	d011      	beq.n	90ec <mpsc_pbuf_alloc+0x1bc>
    90c8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
    90ca:	2b00      	cmp	r3, #0
    90cc:	d00e      	beq.n	90ec <mpsc_pbuf_alloc+0x1bc>
    90ce:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
    90d2:	2b00      	cmp	r3, #0
    90d4:	d00a      	beq.n	90ec <mpsc_pbuf_alloc+0x1bc>
			/* Notify about item being dropped. */
			if (buffer->notify_drop) {
    90d6:	68fb      	ldr	r3, [r7, #12]
    90d8:	699b      	ldr	r3, [r3, #24]
    90da:	2b00      	cmp	r3, #0
    90dc:	d004      	beq.n	90e8 <mpsc_pbuf_alloc+0x1b8>
				buffer->notify_drop(buffer, dropped_item);
    90de:	68fb      	ldr	r3, [r7, #12]
    90e0:	699b      	ldr	r3, [r3, #24]
    90e2:	6e39      	ldr	r1, [r7, #96]	; 0x60
    90e4:	68f8      	ldr	r0, [r7, #12]
    90e6:	4798      	blx	r3
			}
			dropped_item = NULL;
    90e8:	2300      	movs	r3, #0
    90ea:	663b      	str	r3, [r7, #96]	; 0x60
		}
	} while (cont);
    90ec:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
    90f0:	2b00      	cmp	r3, #0
    90f2:	f47f af30 	bne.w	8f56 <mpsc_pbuf_alloc+0x26>
	if (IS_ENABLED(CONFIG_MPSC_CLEAR_ALLOCATED) && item) {
		/* During test fill with 0's to simplify message comparison */
		memset(item, 0, sizeof(int) * wlen);
	}

	return item;
    90f6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
}
    90f8:	4618      	mov	r0, r3
    90fa:	3768      	adds	r7, #104	; 0x68
    90fc:	46bd      	mov	sp, r7
    90fe:	bd80      	pop	{r7, pc}

00009100 <mpsc_pbuf_commit>:

void mpsc_pbuf_commit(struct mpsc_pbuf_buffer *buffer,
		       union mpsc_pbuf_generic *item)
{
    9100:	b580      	push	{r7, lr}
    9102:	b08c      	sub	sp, #48	; 0x30
    9104:	af00      	add	r7, sp, #0
    9106:	6078      	str	r0, [r7, #4]
    9108:	6039      	str	r1, [r7, #0]
	uint32_t wlen = buffer->get_wlen(item);
    910a:	687b      	ldr	r3, [r7, #4]
    910c:	69db      	ldr	r3, [r3, #28]
    910e:	6838      	ldr	r0, [r7, #0]
    9110:	4798      	blx	r3
    9112:	62f8      	str	r0, [r7, #44]	; 0x2c

	k_spinlock_key_t key = k_spin_lock(&buffer->lock);
    9114:	687b      	ldr	r3, [r7, #4]
    9116:	3314      	adds	r3, #20
    9118:	623b      	str	r3, [r7, #32]
	__asm__ volatile(
    911a:	f04f 0320 	mov.w	r3, #32
    911e:	f3ef 8211 	mrs	r2, BASEPRI
    9122:	f383 8812 	msr	BASEPRI_MAX, r3
    9126:	f3bf 8f6f 	isb	sy
    912a:	61fa      	str	r2, [r7, #28]
    912c:	61bb      	str	r3, [r7, #24]
	return key;
    912e:	69fb      	ldr	r3, [r7, #28]
	k.key = arch_irq_lock();
    9130:	613b      	str	r3, [r7, #16]
	return k;
    9132:	693b      	ldr	r3, [r7, #16]
    9134:	617b      	str	r3, [r7, #20]

	item->hdr.valid = 1;
    9136:	683a      	ldr	r2, [r7, #0]
    9138:	7813      	ldrb	r3, [r2, #0]
    913a:	f043 0301 	orr.w	r3, r3, #1
    913e:	7013      	strb	r3, [r2, #0]
	buffer->wr_idx = idx_inc(buffer, buffer->wr_idx, wlen);
    9140:	687b      	ldr	r3, [r7, #4]
    9142:	685b      	ldr	r3, [r3, #4]
    9144:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    9146:	4619      	mov	r1, r3
    9148:	6878      	ldr	r0, [r7, #4]
    914a:	f7ff fded 	bl	8d28 <idx_inc>
    914e:	4602      	mov	r2, r0
    9150:	687b      	ldr	r3, [r7, #4]
    9152:	605a      	str	r2, [r3, #4]
	max_utilization_update(buffer);
    9154:	6878      	ldr	r0, [r7, #4]
    9156:	f7ff fd97 	bl	8c88 <max_utilization_update>
	k_spin_unlock(&buffer->lock, key);
    915a:	687b      	ldr	r3, [r7, #4]
    915c:	3314      	adds	r3, #20
    915e:	62bb      	str	r3, [r7, #40]	; 0x28
    9160:	697b      	ldr	r3, [r7, #20]
    9162:	60fb      	str	r3, [r7, #12]
	arch_irq_unlock(key.key);
    9164:	68fb      	ldr	r3, [r7, #12]
    9166:	627b      	str	r3, [r7, #36]	; 0x24
	__asm__ volatile(
    9168:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    916a:	f383 8811 	msr	BASEPRI, r3
    916e:	f3bf 8f6f 	isb	sy
}
    9172:	bf00      	nop
}
    9174:	bf00      	nop
	MPSC_PBUF_DBG(buffer, "committed %p ", item);
}
    9176:	bf00      	nop
    9178:	3730      	adds	r7, #48	; 0x30
    917a:	46bd      	mov	sp, r7
    917c:	bd80      	pop	{r7, pc}

0000917e <mpsc_pbuf_claim>:
		}
	} while (cont);
}

const union mpsc_pbuf_generic *mpsc_pbuf_claim(struct mpsc_pbuf_buffer *buffer)
{
    917e:	b590      	push	{r4, r7, lr}
    9180:	b091      	sub	sp, #68	; 0x44
    9182:	af00      	add	r7, sp, #0
    9184:	6078      	str	r0, [r7, #4]
	do {
		uint32_t a;
		k_spinlock_key_t key;
		bool wrap;

		cont = false;
    9186:	2300      	movs	r3, #0
    9188:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
		key = k_spin_lock(&buffer->lock);
    918c:	687b      	ldr	r3, [r7, #4]
    918e:	3314      	adds	r3, #20
    9190:	62fb      	str	r3, [r7, #44]	; 0x2c
	__asm__ volatile(
    9192:	f04f 0320 	mov.w	r3, #32
    9196:	f3ef 8211 	mrs	r2, BASEPRI
    919a:	f383 8812 	msr	BASEPRI_MAX, r3
    919e:	f3bf 8f6f 	isb	sy
    91a2:	62ba      	str	r2, [r7, #40]	; 0x28
    91a4:	627b      	str	r3, [r7, #36]	; 0x24
	return key;
    91a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
	k.key = arch_irq_lock();
    91a8:	60fb      	str	r3, [r7, #12]
	return k;
    91aa:	68fb      	ldr	r3, [r7, #12]
    91ac:	617b      	str	r3, [r7, #20]
		wrap = available(buffer, &a);
    91ae:	f107 0318 	add.w	r3, r7, #24
    91b2:	4619      	mov	r1, r3
    91b4:	6878      	ldr	r0, [r7, #4]
    91b6:	f7ff fd2a 	bl	8c0e <available>
    91ba:	4603      	mov	r3, r0
    91bc:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
		item = (union mpsc_pbuf_generic *)
			&buffer->buf[buffer->tmp_rd_idx];
    91c0:	687b      	ldr	r3, [r7, #4]
    91c2:	6a1a      	ldr	r2, [r3, #32]
    91c4:	687b      	ldr	r3, [r7, #4]
    91c6:	689b      	ldr	r3, [r3, #8]
    91c8:	009b      	lsls	r3, r3, #2
		item = (union mpsc_pbuf_generic *)
    91ca:	4413      	add	r3, r2
    91cc:	63fb      	str	r3, [r7, #60]	; 0x3c

		if (!a || is_invalid(item)) {
    91ce:	69bb      	ldr	r3, [r7, #24]
    91d0:	2b00      	cmp	r3, #0
    91d2:	d005      	beq.n	91e0 <mpsc_pbuf_claim+0x62>
    91d4:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
    91d6:	f7ff fd8a 	bl	8cee <is_invalid>
    91da:	4603      	mov	r3, r0
    91dc:	2b00      	cmp	r3, #0
    91de:	d002      	beq.n	91e6 <mpsc_pbuf_claim+0x68>
			item = NULL;
    91e0:	2300      	movs	r3, #0
    91e2:	63fb      	str	r3, [r7, #60]	; 0x3c
    91e4:	e046      	b.n	9274 <mpsc_pbuf_claim+0xf6>
		} else {
			uint32_t skip = get_skip(item);
    91e6:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
    91e8:	f7ff fdc4 	bl	8d74 <get_skip>
    91ec:	6378      	str	r0, [r7, #52]	; 0x34

			if (skip || !is_valid(item)) {
    91ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    91f0:	2b00      	cmp	r3, #0
    91f2:	d108      	bne.n	9206 <mpsc_pbuf_claim+0x88>
    91f4:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
    91f6:	f7ff fd67 	bl	8cc8 <is_valid>
    91fa:	4603      	mov	r3, r0
    91fc:	f083 0301 	eor.w	r3, r3, #1
    9200:	b2db      	uxtb	r3, r3
    9202:	2b00      	cmp	r3, #0
    9204:	d022      	beq.n	924c <mpsc_pbuf_claim+0xce>
				uint32_t inc =
					skip ? skip : buffer->get_wlen(item);
    9206:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    9208:	2b00      	cmp	r3, #0
    920a:	d105      	bne.n	9218 <mpsc_pbuf_claim+0x9a>
    920c:	687b      	ldr	r3, [r7, #4]
    920e:	69db      	ldr	r3, [r3, #28]
    9210:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
    9212:	4798      	blx	r3
    9214:	4603      	mov	r3, r0
    9216:	e000      	b.n	921a <mpsc_pbuf_claim+0x9c>
    9218:	6b7b      	ldr	r3, [r7, #52]	; 0x34
				uint32_t inc =
    921a:	633b      	str	r3, [r7, #48]	; 0x30

				buffer->tmp_rd_idx =
				      idx_inc(buffer, buffer->tmp_rd_idx, inc);
    921c:	687b      	ldr	r3, [r7, #4]
    921e:	689b      	ldr	r3, [r3, #8]
    9220:	6b3a      	ldr	r2, [r7, #48]	; 0x30
    9222:	4619      	mov	r1, r3
    9224:	6878      	ldr	r0, [r7, #4]
    9226:	f7ff fd7f 	bl	8d28 <idx_inc>
    922a:	4602      	mov	r2, r0
				buffer->tmp_rd_idx =
    922c:	687b      	ldr	r3, [r7, #4]
    922e:	609a      	str	r2, [r3, #8]
				buffer->rd_idx =
					idx_inc(buffer, buffer->rd_idx, inc);
    9230:	687b      	ldr	r3, [r7, #4]
    9232:	68db      	ldr	r3, [r3, #12]
    9234:	6b3a      	ldr	r2, [r7, #48]	; 0x30
    9236:	4619      	mov	r1, r3
    9238:	6878      	ldr	r0, [r7, #4]
    923a:	f7ff fd75 	bl	8d28 <idx_inc>
    923e:	4602      	mov	r2, r0
				buffer->rd_idx =
    9240:	687b      	ldr	r3, [r7, #4]
    9242:	60da      	str	r2, [r3, #12]
				cont = true;
    9244:	2301      	movs	r3, #1
    9246:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
			if (skip || !is_valid(item)) {
    924a:	e013      	b.n	9274 <mpsc_pbuf_claim+0xf6>
			} else {
				item->hdr.busy = 1;
    924c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    924e:	7813      	ldrb	r3, [r2, #0]
    9250:	f043 0302 	orr.w	r3, r3, #2
    9254:	7013      	strb	r3, [r2, #0]
				buffer->tmp_rd_idx =
					idx_inc(buffer, buffer->tmp_rd_idx,
    9256:	687b      	ldr	r3, [r7, #4]
    9258:	689c      	ldr	r4, [r3, #8]
						buffer->get_wlen(item));
    925a:	687b      	ldr	r3, [r7, #4]
    925c:	69db      	ldr	r3, [r3, #28]
					idx_inc(buffer, buffer->tmp_rd_idx,
    925e:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
    9260:	4798      	blx	r3
    9262:	4603      	mov	r3, r0
    9264:	461a      	mov	r2, r3
    9266:	4621      	mov	r1, r4
    9268:	6878      	ldr	r0, [r7, #4]
    926a:	f7ff fd5d 	bl	8d28 <idx_inc>
    926e:	4602      	mov	r2, r0
				buffer->tmp_rd_idx =
    9270:	687b      	ldr	r3, [r7, #4]
    9272:	609a      	str	r2, [r3, #8]
		}

		if (!cont) {
			MPSC_PBUF_DBG(buffer, "claimed: %p ", item);
		}
		k_spin_unlock(&buffer->lock, key);
    9274:	687b      	ldr	r3, [r7, #4]
    9276:	3314      	adds	r3, #20
    9278:	623b      	str	r3, [r7, #32]
    927a:	697b      	ldr	r3, [r7, #20]
    927c:	613b      	str	r3, [r7, #16]
	arch_irq_unlock(key.key);
    927e:	693b      	ldr	r3, [r7, #16]
    9280:	61fb      	str	r3, [r7, #28]
	__asm__ volatile(
    9282:	69fb      	ldr	r3, [r7, #28]
    9284:	f383 8811 	msr	BASEPRI, r3
    9288:	f3bf 8f6f 	isb	sy
}
    928c:	bf00      	nop
}
    928e:	bf00      	nop
	} while (cont);
    9290:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
    9294:	2b00      	cmp	r3, #0
    9296:	f47f af76 	bne.w	9186 <mpsc_pbuf_claim+0x8>

	return item;
    929a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
    929c:	4618      	mov	r0, r3
    929e:	3744      	adds	r7, #68	; 0x44
    92a0:	46bd      	mov	sp, r7
    92a2:	bd90      	pop	{r4, r7, pc}

000092a4 <mpsc_pbuf_free>:

void mpsc_pbuf_free(struct mpsc_pbuf_buffer *buffer,
		     const union mpsc_pbuf_generic *item)
{
    92a4:	b580      	push	{r7, lr}
    92a6:	b08c      	sub	sp, #48	; 0x30
    92a8:	af00      	add	r7, sp, #0
    92aa:	6078      	str	r0, [r7, #4]
    92ac:	6039      	str	r1, [r7, #0]
	uint32_t wlen = buffer->get_wlen(item);
    92ae:	687b      	ldr	r3, [r7, #4]
    92b0:	69db      	ldr	r3, [r3, #28]
    92b2:	6838      	ldr	r0, [r7, #0]
    92b4:	4798      	blx	r3
    92b6:	62f8      	str	r0, [r7, #44]	; 0x2c
	k_spinlock_key_t key = k_spin_lock(&buffer->lock);
    92b8:	687b      	ldr	r3, [r7, #4]
    92ba:	3314      	adds	r3, #20
    92bc:	627b      	str	r3, [r7, #36]	; 0x24
	__asm__ volatile(
    92be:	f04f 0320 	mov.w	r3, #32
    92c2:	f3ef 8211 	mrs	r2, BASEPRI
    92c6:	f383 8812 	msr	BASEPRI_MAX, r3
    92ca:	f3bf 8f6f 	isb	sy
    92ce:	623a      	str	r2, [r7, #32]
    92d0:	61fb      	str	r3, [r7, #28]
	return key;
    92d2:	6a3b      	ldr	r3, [r7, #32]
	k.key = arch_irq_lock();
    92d4:	60bb      	str	r3, [r7, #8]
	return k;
    92d6:	68bb      	ldr	r3, [r7, #8]
    92d8:	613b      	str	r3, [r7, #16]
	union mpsc_pbuf_generic *witem = (union mpsc_pbuf_generic *)item;
    92da:	683b      	ldr	r3, [r7, #0]
    92dc:	62bb      	str	r3, [r7, #40]	; 0x28

	witem->hdr.valid = 0;
    92de:	6aba      	ldr	r2, [r7, #40]	; 0x28
    92e0:	7813      	ldrb	r3, [r2, #0]
    92e2:	f36f 0300 	bfc	r3, #0, #1
    92e6:	7013      	strb	r3, [r2, #0]
	if (!(buffer->flags & MPSC_PBUF_MODE_OVERWRITE) ||
    92e8:	687b      	ldr	r3, [r7, #4]
    92ea:	691b      	ldr	r3, [r3, #16]
    92ec:	f003 0302 	and.w	r3, r3, #2
    92f0:	2b00      	cmp	r3, #0
    92f2:	d008      	beq.n	9306 <mpsc_pbuf_free+0x62>
		 ((uint32_t *)item == &buffer->buf[buffer->rd_idx])) {
    92f4:	687b      	ldr	r3, [r7, #4]
    92f6:	6a1a      	ldr	r2, [r3, #32]
    92f8:	687b      	ldr	r3, [r7, #4]
    92fa:	68db      	ldr	r3, [r3, #12]
    92fc:	009b      	lsls	r3, r3, #2
    92fe:	4413      	add	r3, r2
	if (!(buffer->flags & MPSC_PBUF_MODE_OVERWRITE) ||
    9300:	683a      	ldr	r2, [r7, #0]
    9302:	429a      	cmp	r2, r3
    9304:	d10f      	bne.n	9326 <mpsc_pbuf_free+0x82>
		witem->hdr.busy = 0;
    9306:	6aba      	ldr	r2, [r7, #40]	; 0x28
    9308:	7813      	ldrb	r3, [r2, #0]
    930a:	f36f 0341 	bfc	r3, #1, #1
    930e:	7013      	strb	r3, [r2, #0]
		buffer->rd_idx = idx_inc(buffer, buffer->rd_idx, wlen);
    9310:	687b      	ldr	r3, [r7, #4]
    9312:	68db      	ldr	r3, [r3, #12]
    9314:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    9316:	4619      	mov	r1, r3
    9318:	6878      	ldr	r0, [r7, #4]
    931a:	f7ff fd05 	bl	8d28 <idx_inc>
    931e:	4602      	mov	r2, r0
    9320:	687b      	ldr	r3, [r7, #4]
    9322:	60da      	str	r2, [r3, #12]
    9324:	e007      	b.n	9336 <mpsc_pbuf_free+0x92>
	} else {
		witem->skip.len = wlen;
    9326:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    9328:	f023 4140 	bic.w	r1, r3, #3221225472	; 0xc0000000
    932c:	6aba      	ldr	r2, [r7, #40]	; 0x28
    932e:	6813      	ldr	r3, [r2, #0]
    9330:	f361 039f 	bfi	r3, r1, #2, #30
    9334:	6013      	str	r3, [r2, #0]
	}
	MPSC_PBUF_DBG(buffer, "freed: %p ", item);

	k_spin_unlock(&buffer->lock, key);
    9336:	687b      	ldr	r3, [r7, #4]
    9338:	3314      	adds	r3, #20
    933a:	61bb      	str	r3, [r7, #24]
    933c:	693b      	ldr	r3, [r7, #16]
    933e:	60fb      	str	r3, [r7, #12]
	arch_irq_unlock(key.key);
    9340:	68fb      	ldr	r3, [r7, #12]
    9342:	617b      	str	r3, [r7, #20]
	__asm__ volatile(
    9344:	697b      	ldr	r3, [r7, #20]
    9346:	f383 8811 	msr	BASEPRI, r3
    934a:	f3bf 8f6f 	isb	sy
}
    934e:	bf00      	nop
}
    9350:	bf00      	nop
	k_sem_give(&buffer->sem);
    9352:	687b      	ldr	r3, [r7, #4]
    9354:	332c      	adds	r3, #44	; 0x2c
    9356:	4618      	mov	r0, r3
    9358:	f7ff fbe3 	bl	8b22 <k_sem_give>
}
    935c:	bf00      	nop
    935e:	3730      	adds	r7, #48	; 0x30
    9360:	46bd      	mov	sp, r7
    9362:	bd80      	pop	{r7, pc}

00009364 <mpsc_pbuf_is_pending>:

bool mpsc_pbuf_is_pending(struct mpsc_pbuf_buffer *buffer)
{
    9364:	b580      	push	{r7, lr}
    9366:	b084      	sub	sp, #16
    9368:	af00      	add	r7, sp, #0
    936a:	6078      	str	r0, [r7, #4]
	uint32_t a;

	(void)available(buffer, &a);
    936c:	f107 030c 	add.w	r3, r7, #12
    9370:	4619      	mov	r1, r3
    9372:	6878      	ldr	r0, [r7, #4]
    9374:	f7ff fc4b 	bl	8c0e <available>

	return a ? true : false;
    9378:	68fb      	ldr	r3, [r7, #12]
    937a:	2b00      	cmp	r3, #0
    937c:	bf14      	ite	ne
    937e:	2301      	movne	r3, #1
    9380:	2300      	moveq	r3, #0
    9382:	b2db      	uxtb	r3, r3
}
    9384:	4618      	mov	r0, r3
    9386:	3710      	adds	r7, #16
    9388:	46bd      	mov	sp, r7
    938a:	bd80      	pop	{r7, pc}

0000938c <_ConfigAbsSyms>:

/* file is auto-generated, do not modify ! */

#include <zephyr/toolchain.h>

GEN_ABS_SYM_BEGIN (_ConfigAbsSyms)
    938c:	b480      	push	{r7}
    938e:	af00      	add	r7, sp, #0
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_OUTPUT_DISASSEMBLY, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_OUTPUT_PRINT_MEMORY_USAGE, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_COMPAT_INCLUDES, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_LEGACY_INCLUDE_PATH, 1);

GEN_ABS_SYM_END
    9390:	bf00      	nop
    9392:	46bd      	mov	sp, r7
    9394:	bc80      	pop	{r7}
    9396:	4770      	bx	lr

00009398 <atomic_add>:
 * @param value Value to add.
 *
 * @return Previous value of @a target.
 */
static inline atomic_val_t atomic_add(atomic_t *target, atomic_val_t value)
{
    9398:	b480      	push	{r7}
    939a:	b083      	sub	sp, #12
    939c:	af00      	add	r7, sp, #0
    939e:	6078      	str	r0, [r7, #4]
    93a0:	6039      	str	r1, [r7, #0]
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
    93a2:	683a      	ldr	r2, [r7, #0]
    93a4:	687b      	ldr	r3, [r7, #4]
    93a6:	f3bf 8f5b 	dmb	ish
    93aa:	e853 1f00 	ldrex	r1, [r3]
    93ae:	eb01 0002 	add.w	r0, r1, r2
    93b2:	e843 0c00 	strex	ip, r0, [r3]
    93b6:	f1bc 0f00 	cmp.w	ip, #0
    93ba:	d1f6      	bne.n	93aa <atomic_add+0x12>
    93bc:	f3bf 8f5b 	dmb	ish
    93c0:	460b      	mov	r3, r1
}
    93c2:	4618      	mov	r0, r3
    93c4:	370c      	adds	r7, #12
    93c6:	46bd      	mov	sp, r7
    93c8:	bc80      	pop	{r7}
    93ca:	4770      	bx	lr

000093cc <atomic_sub>:
 * @param value Value to subtract.
 *
 * @return Previous value of @a target.
 */
static inline atomic_val_t atomic_sub(atomic_t *target, atomic_val_t value)
{
    93cc:	b480      	push	{r7}
    93ce:	b083      	sub	sp, #12
    93d0:	af00      	add	r7, sp, #0
    93d2:	6078      	str	r0, [r7, #4]
    93d4:	6039      	str	r1, [r7, #0]
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
    93d6:	683a      	ldr	r2, [r7, #0]
    93d8:	687b      	ldr	r3, [r7, #4]
    93da:	f3bf 8f5b 	dmb	ish
    93de:	e853 1f00 	ldrex	r1, [r3]
    93e2:	eba1 0002 	sub.w	r0, r1, r2
    93e6:	e843 0c00 	strex	ip, r0, [r3]
    93ea:	f1bc 0f00 	cmp.w	ip, #0
    93ee:	d1f6      	bne.n	93de <atomic_sub+0x12>
    93f0:	f3bf 8f5b 	dmb	ish
    93f4:	460b      	mov	r3, r1
}
    93f6:	4618      	mov	r0, r3
    93f8:	370c      	adds	r7, #12
    93fa:	46bd      	mov	sp, r7
    93fc:	bc80      	pop	{r7}
    93fe:	4770      	bx	lr

00009400 <atomic_inc>:
 * @param target Address of atomic variable.
 *
 * @return Previous value of @a target.
 */
static inline atomic_val_t atomic_inc(atomic_t *target)
{
    9400:	b580      	push	{r7, lr}
    9402:	b082      	sub	sp, #8
    9404:	af00      	add	r7, sp, #0
    9406:	6078      	str	r0, [r7, #4]
	return atomic_add(target, 1);
    9408:	2101      	movs	r1, #1
    940a:	6878      	ldr	r0, [r7, #4]
    940c:	f7ff ffc4 	bl	9398 <atomic_add>
    9410:	4603      	mov	r3, r0
}
    9412:	4618      	mov	r0, r3
    9414:	3708      	adds	r7, #8
    9416:	46bd      	mov	sp, r7
    9418:	bd80      	pop	{r7, pc}

0000941a <atomic_dec>:
 * @param target Address of atomic variable.
 *
 * @return Previous value of @a target.
 */
static inline atomic_val_t atomic_dec(atomic_t *target)
{
    941a:	b580      	push	{r7, lr}
    941c:	b082      	sub	sp, #8
    941e:	af00      	add	r7, sp, #0
    9420:	6078      	str	r0, [r7, #4]
	return atomic_sub(target, 1);
    9422:	2101      	movs	r1, #1
    9424:	6878      	ldr	r0, [r7, #4]
    9426:	f7ff ffd1 	bl	93cc <atomic_sub>
    942a:	4603      	mov	r3, r0
}
    942c:	4618      	mov	r0, r3
    942e:	3708      	adds	r7, #8
    9430:	46bd      	mov	sp, r7
    9432:	bd80      	pop	{r7, pc}

00009434 <atomic_set>:
 * @param value Value to write to @a target.
 *
 * @return Previous value of @a target.
 */
static inline atomic_val_t atomic_set(atomic_t *target, atomic_val_t value)
{
    9434:	b480      	push	{r7}
    9436:	b083      	sub	sp, #12
    9438:	af00      	add	r7, sp, #0
    943a:	6078      	str	r0, [r7, #4]
    943c:	6039      	str	r1, [r7, #0]
	/* This builtin, as described by Intel, is not a traditional
	 * test-and-set operation, but rather an atomic exchange operation. It
	 * writes value into *ptr, and returns the previous contents of *ptr.
	 */
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    943e:	683a      	ldr	r2, [r7, #0]
    9440:	687b      	ldr	r3, [r7, #4]
    9442:	f3bf 8f5b 	dmb	ish
    9446:	e853 1f00 	ldrex	r1, [r3]
    944a:	e843 2000 	strex	r0, r2, [r3]
    944e:	2800      	cmp	r0, #0
    9450:	d1f9      	bne.n	9446 <atomic_set+0x12>
    9452:	f3bf 8f5b 	dmb	ish
    9456:	460b      	mov	r3, r1
}
    9458:	4618      	mov	r0, r3
    945a:	370c      	adds	r7, #12
    945c:	46bd      	mov	sp, r7
    945e:	bc80      	pop	{r7}
    9460:	4770      	bx	lr

00009462 <z_log_item_is_msg>:

static inline bool z_log_item_is_msg(const union log_msg2_generic *msg)
{
    9462:	b480      	push	{r7}
    9464:	b083      	sub	sp, #12
    9466:	af00      	add	r7, sp, #0
    9468:	6078      	str	r0, [r7, #4]
	return msg->generic.type == Z_LOG_MSG2_LOG;
    946a:	687b      	ldr	r3, [r7, #4]
    946c:	781b      	ldrb	r3, [r3, #0]
    946e:	f003 0304 	and.w	r3, r3, #4
    9472:	b2db      	uxtb	r3, r3
    9474:	2b00      	cmp	r3, #0
    9476:	bf0c      	ite	eq
    9478:	2301      	moveq	r3, #1
    947a:	2300      	movne	r3, #0
    947c:	b2db      	uxtb	r3, r3
}
    947e:	4618      	mov	r0, r3
    9480:	370c      	adds	r7, #12
    9482:	46bd      	mov	sp, r7
    9484:	bc80      	pop	{r7}
    9486:	4770      	bx	lr

00009488 <log_msg2_get_total_wlen>:
 * @param desc Log message descriptor.
 *
 * @return Length.
 */
static inline uint32_t log_msg2_get_total_wlen(const struct log_msg2_desc desc)
{
    9488:	b480      	push	{r7}
    948a:	b083      	sub	sp, #12
    948c:	af00      	add	r7, sp, #0
    948e:	6078      	str	r0, [r7, #4]
	return Z_LOG_MSG2_ALIGNED_WLEN(desc.package_len, desc.data_len);
    9490:	687b      	ldr	r3, [r7, #4]
    9492:	f3c3 2349 	ubfx	r3, r3, #9, #10
    9496:	b29b      	uxth	r3, r3
    9498:	461a      	mov	r2, r3
    949a:	88fb      	ldrh	r3, [r7, #6]
    949c:	f3c3 03cb 	ubfx	r3, r3, #3, #12
    94a0:	b29b      	uxth	r3, r3
    94a2:	4413      	add	r3, r2
    94a4:	3317      	adds	r3, #23
    94a6:	f023 0307 	bic.w	r3, r3, #7
    94aa:	3303      	adds	r3, #3
    94ac:	089b      	lsrs	r3, r3, #2
}
    94ae:	4618      	mov	r0, r3
    94b0:	370c      	adds	r7, #12
    94b2:	46bd      	mov	sp, r7
    94b4:	bc80      	pop	{r7}
    94b6:	4770      	bx	lr

000094b8 <log_msg2_generic_get_wlen>:
 * @param item Item.
 *
 * @return Length in 32 bit words.
 */
static inline uint32_t log_msg2_generic_get_wlen(const union mpsc_pbuf_generic *item)
{
    94b8:	b580      	push	{r7, lr}
    94ba:	b084      	sub	sp, #16
    94bc:	af00      	add	r7, sp, #0
    94be:	6078      	str	r0, [r7, #4]
	const union log_msg2_generic *generic_msg = (const union log_msg2_generic *)item;
    94c0:	687b      	ldr	r3, [r7, #4]
    94c2:	60fb      	str	r3, [r7, #12]

	if (z_log_item_is_msg(generic_msg)) {
    94c4:	68f8      	ldr	r0, [r7, #12]
    94c6:	f7ff ffcc 	bl	9462 <z_log_item_is_msg>
    94ca:	4603      	mov	r3, r0
    94cc:	2b00      	cmp	r3, #0
    94ce:	d007      	beq.n	94e0 <log_msg2_generic_get_wlen+0x28>
		const struct log_msg2 *msg = (const struct log_msg2 *)generic_msg;
    94d0:	68fb      	ldr	r3, [r7, #12]
    94d2:	60bb      	str	r3, [r7, #8]

		return log_msg2_get_total_wlen(msg->hdr.desc);
    94d4:	68bb      	ldr	r3, [r7, #8]
    94d6:	6818      	ldr	r0, [r3, #0]
    94d8:	f7ff ffd6 	bl	9488 <log_msg2_get_total_wlen>
    94dc:	4603      	mov	r3, r0
    94de:	e000      	b.n	94e2 <log_msg2_generic_get_wlen+0x2a>
	}

	return 0;
    94e0:	2300      	movs	r3, #0
}
    94e2:	4618      	mov	r0, r3
    94e4:	3710      	adds	r7, #16
    94e6:	46bd      	mov	sp, r7
    94e8:	bd80      	pop	{r7, pc}

000094ea <log_backend_msg2_process>:
{
    94ea:	b580      	push	{r7, lr}
    94ec:	b082      	sub	sp, #8
    94ee:	af00      	add	r7, sp, #0
    94f0:	6078      	str	r0, [r7, #4]
    94f2:	6039      	str	r1, [r7, #0]
	backend->api->process(backend, msg);
    94f4:	687b      	ldr	r3, [r7, #4]
    94f6:	681b      	ldr	r3, [r3, #0]
    94f8:	681b      	ldr	r3, [r3, #0]
    94fa:	6839      	ldr	r1, [r7, #0]
    94fc:	6878      	ldr	r0, [r7, #4]
    94fe:	4798      	blx	r3
}
    9500:	bf00      	nop
    9502:	3708      	adds	r7, #8
    9504:	46bd      	mov	sp, r7
    9506:	bd80      	pop	{r7, pc}

00009508 <log_backend_dropped>:
{
    9508:	b580      	push	{r7, lr}
    950a:	b082      	sub	sp, #8
    950c:	af00      	add	r7, sp, #0
    950e:	6078      	str	r0, [r7, #4]
    9510:	6039      	str	r1, [r7, #0]
	if (backend->api->dropped != NULL) {
    9512:	687b      	ldr	r3, [r7, #4]
    9514:	681b      	ldr	r3, [r3, #0]
    9516:	691b      	ldr	r3, [r3, #16]
    9518:	2b00      	cmp	r3, #0
    951a:	d005      	beq.n	9528 <log_backend_dropped+0x20>
		backend->api->dropped(backend, cnt);
    951c:	687b      	ldr	r3, [r7, #4]
    951e:	681b      	ldr	r3, [r3, #0]
    9520:	691b      	ldr	r3, [r3, #16]
    9522:	6839      	ldr	r1, [r7, #0]
    9524:	6878      	ldr	r0, [r7, #4]
    9526:	4798      	blx	r3
}
    9528:	bf00      	nop
    952a:	3708      	adds	r7, #8
    952c:	46bd      	mov	sp, r7
    952e:	bd80      	pop	{r7, pc}

00009530 <log_backend_panic>:
{
    9530:	b580      	push	{r7, lr}
    9532:	b082      	sub	sp, #8
    9534:	af00      	add	r7, sp, #0
    9536:	6078      	str	r0, [r7, #4]
	backend->api->panic(backend);
    9538:	687b      	ldr	r3, [r7, #4]
    953a:	681b      	ldr	r3, [r3, #0]
    953c:	695b      	ldr	r3, [r3, #20]
    953e:	6878      	ldr	r0, [r7, #4]
    9540:	4798      	blx	r3
}
    9542:	bf00      	nop
    9544:	3708      	adds	r7, #8
    9546:	46bd      	mov	sp, r7
    9548:	bd80      	pop	{r7, pc}

0000954a <log_backend_is_active>:
 *
 * @return True if backend is active, false otherwise.
 */
static inline bool log_backend_is_active(
				const struct log_backend *const backend)
{
    954a:	b480      	push	{r7}
    954c:	b083      	sub	sp, #12
    954e:	af00      	add	r7, sp, #0
    9550:	6078      	str	r0, [r7, #4]
	__ASSERT_NO_MSG(backend != NULL);
	return backend->cb->active;
    9552:	687b      	ldr	r3, [r7, #4]
    9554:	685b      	ldr	r3, [r3, #4]
    9556:	795b      	ldrb	r3, [r3, #5]
}
    9558:	4618      	mov	r0, r3
    955a:	370c      	adds	r7, #12
    955c:	46bd      	mov	sp, r7
    955e:	bc80      	pop	{r7}
    9560:	4770      	bx	lr

00009562 <arch_k_cycle_get_32>:

#ifndef _ASMLANGUAGE
extern uint32_t sys_clock_cycle_get_32(void);

static inline uint32_t arch_k_cycle_get_32(void)
{
    9562:	b580      	push	{r7, lr}
    9564:	af00      	add	r7, sp, #0
	return sys_clock_cycle_get_32();
    9566:	f7fb fc03 	bl	4d70 <sys_clock_cycle_get_32>
    956a:	4603      	mov	r3, r0
}
    956c:	4618      	mov	r0, r3
    956e:	bd80      	pop	{r7, pc}

00009570 <k_current_get>:
{
    9570:	b580      	push	{r7, lr}
    9572:	af00      	add	r7, sp, #0
	return z_current_get();
    9574:	f000 f842 	bl	95fc <z_current_get>
    9578:	4603      	mov	r3, r0
}
    957a:	4618      	mov	r0, r3
    957c:	bd80      	pop	{r7, pc}

0000957e <k_uptime_get>:
 *    @kconfig{CONFIG_SYS_CLOCK_TICKS_PER_SEC} config option.
 *
 * @return Current uptime in milliseconds.
 */
static inline int64_t k_uptime_get(void)
{
    957e:	b580      	push	{r7, lr}
    9580:	af00      	add	r7, sp, #0
	return k_ticks_to_ms_floor64(k_uptime_ticks());
    9582:	f000 f86e 	bl	9662 <k_uptime_ticks>
    9586:	4602      	mov	r2, r0
    9588:	460b      	mov	r3, r1
    958a:	4610      	mov	r0, r2
    958c:	4619      	mov	r1, r3
    958e:	f7f9 f817 	bl	25c0 <k_ticks_to_ms_floor64>
    9592:	4602      	mov	r2, r0
    9594:	460b      	mov	r3, r1
}
    9596:	4610      	mov	r0, r2
    9598:	4619      	mov	r1, r3
    959a:	bd80      	pop	{r7, pc}

0000959c <k_uptime_get_32>:
 *    @kconfig{CONFIG_SYS_CLOCK_TICKS_PER_SEC} config option
 *
 * @return The low 32 bits of the current uptime, in milliseconds.
 */
static inline uint32_t k_uptime_get_32(void)
{
    959c:	b580      	push	{r7, lr}
    959e:	af00      	add	r7, sp, #0
	return (uint32_t)k_uptime_get();
    95a0:	f7ff ffed 	bl	957e <k_uptime_get>
    95a4:	4602      	mov	r2, r0
    95a6:	460b      	mov	r3, r1
    95a8:	4613      	mov	r3, r2
}
    95aa:	4618      	mov	r0, r3
    95ac:	bd80      	pop	{r7, pc}

000095ae <k_cycle_get_32>:
 * clock.
 *
 * @return Current hardware clock up-counter (in cycles).
 */
static inline uint32_t k_cycle_get_32(void)
{
    95ae:	b580      	push	{r7, lr}
    95b0:	af00      	add	r7, sp, #0
	return arch_k_cycle_get_32();
    95b2:	f7ff ffd6 	bl	9562 <arch_k_cycle_get_32>
    95b6:	4603      	mov	r3, r0
}
    95b8:	4618      	mov	r0, r3
    95ba:	bd80      	pop	{r7, pc}

000095bc <k_thread_create>:
{
    95bc:	b580      	push	{r7, lr}
    95be:	b08c      	sub	sp, #48	; 0x30
    95c0:	af08      	add	r7, sp, #32
    95c2:	60f8      	str	r0, [r7, #12]
    95c4:	60b9      	str	r1, [r7, #8]
    95c6:	607a      	str	r2, [r7, #4]
    95c8:	603b      	str	r3, [r7, #0]
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
    95ca:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
    95ce:	e9cd 2306 	strd	r2, r3, [sp, #24]
    95d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
    95d4:	9304      	str	r3, [sp, #16]
    95d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    95d8:	9303      	str	r3, [sp, #12]
    95da:	6a3b      	ldr	r3, [r7, #32]
    95dc:	9302      	str	r3, [sp, #8]
    95de:	69fb      	ldr	r3, [r7, #28]
    95e0:	9301      	str	r3, [sp, #4]
    95e2:	69bb      	ldr	r3, [r7, #24]
    95e4:	9300      	str	r3, [sp, #0]
    95e6:	683b      	ldr	r3, [r7, #0]
    95e8:	687a      	ldr	r2, [r7, #4]
    95ea:	68b9      	ldr	r1, [r7, #8]
    95ec:	68f8      	ldr	r0, [r7, #12]
    95ee:	f001 f911 	bl	a814 <z_impl_k_thread_create>
    95f2:	4603      	mov	r3, r0
}
    95f4:	4618      	mov	r0, r3
    95f6:	3710      	adds	r7, #16
    95f8:	46bd      	mov	sp, r7
    95fa:	bd80      	pop	{r7, pc}

000095fc <z_current_get>:
{
    95fc:	b580      	push	{r7, lr}
    95fe:	af00      	add	r7, sp, #0
	return z_impl_z_current_get();
    9600:	f7fe f8d4 	bl	77ac <z_impl_z_current_get>
    9604:	4603      	mov	r3, r0
}
    9606:	4618      	mov	r0, r3
    9608:	bd80      	pop	{r7, pc}

0000960a <k_thread_name_set>:
{
    960a:	b580      	push	{r7, lr}
    960c:	b082      	sub	sp, #8
    960e:	af00      	add	r7, sp, #0
    9610:	6078      	str	r0, [r7, #4]
    9612:	6039      	str	r1, [r7, #0]
	return z_impl_k_thread_name_set(thread, str);
    9614:	6839      	ldr	r1, [r7, #0]
    9616:	6878      	ldr	r0, [r7, #4]
    9618:	f001 f8be 	bl	a798 <z_impl_k_thread_name_set>
    961c:	4603      	mov	r3, r0
}
    961e:	4618      	mov	r0, r3
    9620:	3708      	adds	r7, #8
    9622:	46bd      	mov	sp, r7
    9624:	bd80      	pop	{r7, pc}

00009626 <k_timer_start>:
{
    9626:	b580      	push	{r7, lr}
    9628:	b086      	sub	sp, #24
    962a:	af02      	add	r7, sp, #8
    962c:	60f8      	str	r0, [r7, #12]
    962e:	e9c7 2300 	strd	r2, r3, [r7]
	z_impl_k_timer_start(timer, duration, period);
    9632:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
    9636:	e9cd 2300 	strd	r2, r3, [sp]
    963a:	e9d7 2300 	ldrd	r2, r3, [r7]
    963e:	68f8      	ldr	r0, [r7, #12]
    9640:	f7fe fdfc 	bl	823c <z_impl_k_timer_start>
}
    9644:	bf00      	nop
    9646:	3710      	adds	r7, #16
    9648:	46bd      	mov	sp, r7
    964a:	bd80      	pop	{r7, pc}

0000964c <k_timer_stop>:
{
    964c:	b580      	push	{r7, lr}
    964e:	b082      	sub	sp, #8
    9650:	af00      	add	r7, sp, #0
    9652:	6078      	str	r0, [r7, #4]
	z_impl_k_timer_stop(timer);
    9654:	6878      	ldr	r0, [r7, #4]
    9656:	f001 ff74 	bl	b542 <z_impl_k_timer_stop>
}
    965a:	bf00      	nop
    965c:	3708      	adds	r7, #8
    965e:	46bd      	mov	sp, r7
    9660:	bd80      	pop	{r7, pc}

00009662 <k_uptime_ticks>:
{
    9662:	b580      	push	{r7, lr}
    9664:	af00      	add	r7, sp, #0
	return z_impl_k_uptime_ticks();
    9666:	f001 feb4 	bl	b3d2 <z_impl_k_uptime_ticks>
    966a:	4602      	mov	r2, r0
    966c:	460b      	mov	r3, r1
}
    966e:	4610      	mov	r0, r2
    9670:	4619      	mov	r1, r3
    9672:	bd80      	pop	{r7, pc}

00009674 <k_sem_take>:
{
    9674:	b580      	push	{r7, lr}
    9676:	b084      	sub	sp, #16
    9678:	af00      	add	r7, sp, #0
    967a:	60f8      	str	r0, [r7, #12]
    967c:	e9c7 2300 	strd	r2, r3, [r7]
	return z_impl_k_sem_take(sem, timeout);
    9680:	e9d7 2300 	ldrd	r2, r3, [r7]
    9684:	68f8      	ldr	r0, [r7, #12]
    9686:	f7fc fadf 	bl	5c48 <z_impl_k_sem_take>
    968a:	4603      	mov	r3, r0
}
    968c:	4618      	mov	r0, r3
    968e:	3710      	adds	r7, #16
    9690:	46bd      	mov	sp, r7
    9692:	bd80      	pop	{r7, pc}

00009694 <k_sem_give>:
{
    9694:	b580      	push	{r7, lr}
    9696:	b082      	sub	sp, #8
    9698:	af00      	add	r7, sp, #0
    969a:	6078      	str	r0, [r7, #4]
	z_impl_k_sem_give(sem);
    969c:	6878      	ldr	r0, [r7, #4]
    969e:	f7fc fa8f 	bl	5bc0 <z_impl_k_sem_give>
}
    96a2:	bf00      	nop
    96a4:	3708      	adds	r7, #8
    96a6:	46bd      	mov	sp, r7
    96a8:	bd80      	pop	{r7, pc}

000096aa <log_process>:

extern bool z_impl_log_process(bool bypass);

__pinned_func
static inline bool log_process(bool bypass)
{
    96aa:	b580      	push	{r7, lr}
    96ac:	b082      	sub	sp, #8
    96ae:	af00      	add	r7, sp, #0
    96b0:	4603      	mov	r3, r0
    96b2:	71fb      	strb	r3, [r7, #7]
		union { uintptr_t x; bool val; } parm0 = { .val = bypass };
		return (bool) arch_syscall_invoke1(parm0.x, K_SYSCALL_LOG_PROCESS);
	}
#endif
	compiler_barrier();
	return z_impl_log_process(bypass);
    96b4:	79fb      	ldrb	r3, [r7, #7]
    96b6:	4618      	mov	r0, r3
    96b8:	f7f9 fb2c 	bl	2d14 <z_impl_log_process>
    96bc:	4603      	mov	r3, r0
}
    96be:	4618      	mov	r0, r3
    96c0:	3708      	adds	r7, #8
    96c2:	46bd      	mov	sp, r7
    96c4:	bd80      	pop	{r7, pc}

000096c6 <dummy_timestamp>:
{
    96c6:	b480      	push	{r7}
    96c8:	af00      	add	r7, sp, #0
	return 0;
    96ca:	2300      	movs	r3, #0
}
    96cc:	4618      	mov	r0, r3
    96ce:	46bd      	mov	sp, r7
    96d0:	bc80      	pop	{r7}
    96d2:	4770      	bx	lr

000096d4 <default_get_timestamp>:
{
    96d4:	b580      	push	{r7, lr}
    96d6:	af00      	add	r7, sp, #0
		sys_clock_tick_get() : k_cycle_get_32();
    96d8:	f7ff ff69 	bl	95ae <k_cycle_get_32>
    96dc:	4603      	mov	r3, r0
}
    96de:	4618      	mov	r0, r3
    96e0:	bd80      	pop	{r7, pc}

000096e2 <default_lf_get_timestamp>:
{
    96e2:	b580      	push	{r7, lr}
    96e4:	af00      	add	r7, sp, #0
		k_uptime_get() : k_uptime_get_32();
    96e6:	f7ff ff59 	bl	959c <k_uptime_get_32>
    96ea:	4603      	mov	r3, r0
}
    96ec:	4618      	mov	r0, r3
    96ee:	bd80      	pop	{r7, pc}

000096f0 <msg_filter_check>:
{
    96f0:	b580      	push	{r7, lr}
    96f2:	b082      	sub	sp, #8
    96f4:	af00      	add	r7, sp, #0
    96f6:	6078      	str	r0, [r7, #4]
    96f8:	6039      	str	r1, [r7, #0]
	if (IS_ENABLED(CONFIG_LOG2) && !z_log_item_is_msg(msg.msg2)) {
    96fa:	683b      	ldr	r3, [r7, #0]
    96fc:	4618      	mov	r0, r3
    96fe:	f7ff feb0 	bl	9462 <z_log_item_is_msg>
    9702:	4603      	mov	r3, r0
    9704:	f083 0301 	eor.w	r3, r3, #1
    9708:	b2db      	uxtb	r3, r3
    970a:	2b00      	cmp	r3, #0
    970c:	d001      	beq.n	9712 <msg_filter_check+0x22>
		return true;
    970e:	2301      	movs	r3, #1
    9710:	e000      	b.n	9714 <msg_filter_check+0x24>
		return true;
    9712:	2301      	movs	r3, #1
}
    9714:	4618      	mov	r0, r3
    9716:	3708      	adds	r7, #8
    9718:	46bd      	mov	sp, r7
    971a:	bd80      	pop	{r7, pc}

0000971c <msg_process>:
{
    971c:	b580      	push	{r7, lr}
    971e:	b084      	sub	sp, #16
    9720:	af00      	add	r7, sp, #0
    9722:	6078      	str	r0, [r7, #4]
    9724:	460b      	mov	r3, r1
    9726:	70fb      	strb	r3, [r7, #3]
	if (!bypass) {
    9728:	78fb      	ldrb	r3, [r7, #3]
    972a:	f083 0301 	eor.w	r3, r3, #1
    972e:	b2db      	uxtb	r3, r3
    9730:	2b00      	cmp	r3, #0
    9732:	d022      	beq.n	977a <msg_process+0x5e>
		for (int i = 0; i < log_backend_count_get(); i++) {
    9734:	2300      	movs	r3, #0
    9736:	60fb      	str	r3, [r7, #12]
    9738:	e019      	b.n	976e <msg_process+0x52>
			backend = log_backend_get(i);
    973a:	68fb      	ldr	r3, [r7, #12]
    973c:	4618      	mov	r0, r3
    973e:	f7f8 fcbd 	bl	20bc <log_backend_get>
    9742:	60b8      	str	r0, [r7, #8]
			if (log_backend_is_active(backend) &&
    9744:	68b8      	ldr	r0, [r7, #8]
    9746:	f7ff ff00 	bl	954a <log_backend_is_active>
    974a:	4603      	mov	r3, r0
    974c:	2b00      	cmp	r3, #0
    974e:	d00b      	beq.n	9768 <msg_process+0x4c>
			    msg_filter_check(backend, msg)) {
    9750:	6879      	ldr	r1, [r7, #4]
    9752:	68b8      	ldr	r0, [r7, #8]
    9754:	f7ff ffcc 	bl	96f0 <msg_filter_check>
    9758:	4603      	mov	r3, r0
			if (log_backend_is_active(backend) &&
    975a:	2b00      	cmp	r3, #0
    975c:	d004      	beq.n	9768 <msg_process+0x4c>
					log_backend_msg2_process(backend,
    975e:	687b      	ldr	r3, [r7, #4]
    9760:	4619      	mov	r1, r3
    9762:	68b8      	ldr	r0, [r7, #8]
    9764:	f7ff fec1 	bl	94ea <log_backend_msg2_process>
		for (int i = 0; i < log_backend_count_get(); i++) {
    9768:	68fb      	ldr	r3, [r7, #12]
    976a:	3301      	adds	r3, #1
    976c:	60fb      	str	r3, [r7, #12]
    976e:	f7f8 fcb5 	bl	20dc <log_backend_count_get>
    9772:	4602      	mov	r2, r0
    9774:	68fb      	ldr	r3, [r7, #12]
    9776:	4293      	cmp	r3, r2
    9778:	dbdf      	blt.n	973a <msg_process+0x1e>
		z_log_msg2_free(msg.msg2);
    977a:	687b      	ldr	r3, [r7, #4]
    977c:	4618      	mov	r0, r3
    977e:	f7f9 fb85 	bl	2e8c <z_log_msg2_free>
}
    9782:	bf00      	nop
    9784:	3710      	adds	r7, #16
    9786:	46bd      	mov	sp, r7
    9788:	bd80      	pop	{r7, pc}

0000978a <dropped_notify>:
{
    978a:	b580      	push	{r7, lr}
    978c:	b084      	sub	sp, #16
    978e:	af00      	add	r7, sp, #0
	uint32_t dropped = z_log_dropped_read_and_clear();
    9790:	f7f9 fb18 	bl	2dc4 <z_log_dropped_read_and_clear>
    9794:	60b8      	str	r0, [r7, #8]
	for (int i = 0; i < log_backend_count_get(); i++) {
    9796:	2300      	movs	r3, #0
    9798:	60fb      	str	r3, [r7, #12]
    979a:	e011      	b.n	97c0 <dropped_notify+0x36>
		struct log_backend const *backend = log_backend_get(i);
    979c:	68fb      	ldr	r3, [r7, #12]
    979e:	4618      	mov	r0, r3
    97a0:	f7f8 fc8c 	bl	20bc <log_backend_get>
    97a4:	6078      	str	r0, [r7, #4]
		if (log_backend_is_active(backend)) {
    97a6:	6878      	ldr	r0, [r7, #4]
    97a8:	f7ff fecf 	bl	954a <log_backend_is_active>
    97ac:	4603      	mov	r3, r0
    97ae:	2b00      	cmp	r3, #0
    97b0:	d003      	beq.n	97ba <dropped_notify+0x30>
			log_backend_dropped(backend, dropped);
    97b2:	68b9      	ldr	r1, [r7, #8]
    97b4:	6878      	ldr	r0, [r7, #4]
    97b6:	f7ff fea7 	bl	9508 <log_backend_dropped>
	for (int i = 0; i < log_backend_count_get(); i++) {
    97ba:	68fb      	ldr	r3, [r7, #12]
    97bc:	3301      	adds	r3, #1
    97be:	60fb      	str	r3, [r7, #12]
    97c0:	f7f8 fc8c 	bl	20dc <log_backend_count_get>
    97c4:	4602      	mov	r2, r0
    97c6:	68fb      	ldr	r3, [r7, #12]
    97c8:	4293      	cmp	r3, r2
    97ca:	dbe7      	blt.n	979c <dropped_notify+0x12>
}
    97cc:	bf00      	nop
    97ce:	bf00      	nop
    97d0:	3710      	adds	r7, #16
    97d2:	46bd      	mov	sp, r7
    97d4:	bd80      	pop	{r7, pc}

000097d6 <get_msg>:
{
    97d6:	b580      	push	{r7, lr}
    97d8:	b082      	sub	sp, #8
    97da:	af00      	add	r7, sp, #0
		msg.msg2 = z_log_msg2_claim();
    97dc:	f7f9 fb4c 	bl	2e78 <z_log_msg2_claim>
    97e0:	4603      	mov	r3, r0
    97e2:	607b      	str	r3, [r7, #4]
		return msg;
    97e4:	687b      	ldr	r3, [r7, #4]
}
    97e6:	4618      	mov	r0, r3
    97e8:	3708      	adds	r7, #8
    97ea:	46bd      	mov	sp, r7
    97ec:	bd80      	pop	{r7, pc}

000097ee <next_pending>:
{
    97ee:	b580      	push	{r7, lr}
    97f0:	af00      	add	r7, sp, #0
		return z_log_msg2_pending();
    97f2:	f7f9 fb59 	bl	2ea8 <z_log_msg2_pending>
    97f6:	4603      	mov	r3, r0
}
    97f8:	4618      	mov	r0, r3
    97fa:	bd80      	pop	{r7, pc}

000097fc <notify_drop>:
{
    97fc:	b580      	push	{r7, lr}
    97fe:	b082      	sub	sp, #8
    9800:	af00      	add	r7, sp, #0
    9802:	6078      	str	r0, [r7, #4]
    9804:	6039      	str	r1, [r7, #0]
	z_log_dropped(true);
    9806:	2001      	movs	r0, #1
    9808:	f7f9 fac6 	bl	2d98 <z_log_dropped>
}
    980c:	bf00      	nop
    980e:	3708      	adds	r7, #8
    9810:	46bd      	mov	sp, r7
    9812:	bd80      	pop	{r7, pc}

00009814 <z_log_get_tag>:
{
    9814:	b480      	push	{r7}
    9816:	af00      	add	r7, sp, #0
	return CONFIG_LOG_TAG_MAX_LEN > 0 ? tag : NULL;
    9818:	2300      	movs	r3, #0
}
    981a:	4618      	mov	r0, r3
    981c:	46bd      	mov	sp, r7
    981e:	bc80      	pop	{r7}
    9820:	4770      	bx	lr

00009822 <log_backend_id_set>:
{
    9822:	b480      	push	{r7}
    9824:	b083      	sub	sp, #12
    9826:	af00      	add	r7, sp, #0
    9828:	6078      	str	r0, [r7, #4]
    982a:	460b      	mov	r3, r1
    982c:	70fb      	strb	r3, [r7, #3]
	backend->cb->id = id;
    982e:	687b      	ldr	r3, [r7, #4]
    9830:	685b      	ldr	r3, [r3, #4]
    9832:	78fa      	ldrb	r2, [r7, #3]
    9834:	711a      	strb	r2, [r3, #4]
}
    9836:	bf00      	nop
    9838:	370c      	adds	r7, #12
    983a:	46bd      	mov	sp, r7
    983c:	bc80      	pop	{r7}
    983e:	4770      	bx	lr

00009840 <log_backend_activate>:
{
    9840:	b480      	push	{r7}
    9842:	b083      	sub	sp, #12
    9844:	af00      	add	r7, sp, #0
    9846:	6078      	str	r0, [r7, #4]
    9848:	6039      	str	r1, [r7, #0]
	backend->cb->ctx = ctx;
    984a:	687b      	ldr	r3, [r7, #4]
    984c:	685b      	ldr	r3, [r3, #4]
    984e:	683a      	ldr	r2, [r7, #0]
    9850:	601a      	str	r2, [r3, #0]
	backend->cb->active = true;
    9852:	687b      	ldr	r3, [r7, #4]
    9854:	685b      	ldr	r3, [r3, #4]
    9856:	2201      	movs	r2, #1
    9858:	715a      	strb	r2, [r3, #5]
}
    985a:	bf00      	nop
    985c:	370c      	adds	r7, #12
    985e:	46bd      	mov	sp, r7
    9860:	bc80      	pop	{r7}
    9862:	4770      	bx	lr

00009864 <log_source_name_get>:

const char *log_source_name_get(uint32_t domain_id, uint32_t src_id)
{
    9864:	b580      	push	{r7, lr}
    9866:	b082      	sub	sp, #8
    9868:	af00      	add	r7, sp, #0
    986a:	6078      	str	r0, [r7, #4]
    986c:	6039      	str	r1, [r7, #0]
	return src_id < z_log_sources_count() ? log_name_get(src_id) : NULL;
    986e:	f7f9 fb9f 	bl	2fb0 <z_log_sources_count>
    9872:	4602      	mov	r2, r0
    9874:	683b      	ldr	r3, [r7, #0]
    9876:	4293      	cmp	r3, r2
    9878:	d204      	bcs.n	9884 <log_source_name_get+0x20>
    987a:	6838      	ldr	r0, [r7, #0]
    987c:	f7f9 fbb2 	bl	2fe4 <log_name_get>
    9880:	4603      	mov	r3, r0
    9882:	e000      	b.n	9886 <log_source_name_get+0x22>
    9884:	2300      	movs	r3, #0
}
    9886:	4618      	mov	r0, r3
    9888:	3708      	adds	r7, #8
    988a:	46bd      	mov	sp, r7
    988c:	bd80      	pop	{r7, pc}

0000988e <backend_filter_set>:
#include <syscalls/log_filter_set_mrsh.c>
#endif

static void backend_filter_set(struct log_backend const *const backend,
			       uint32_t level)
{
    988e:	b480      	push	{r7}
    9890:	b083      	sub	sp, #12
    9892:	af00      	add	r7, sp, #0
    9894:	6078      	str	r0, [r7, #4]
    9896:	6039      	str	r1, [r7, #0]
	if (IS_ENABLED(CONFIG_LOG_RUNTIME_FILTERING)) {
		for (int i = 0; i < z_log_sources_count(); i++) {
			log_filter_set(backend, CONFIG_LOG_DOMAIN_ID, i, level);
		}
	}
}
    9898:	bf00      	nop
    989a:	370c      	adds	r7, #12
    989c:	46bd      	mov	sp, r7
    989e:	bc80      	pop	{r7}
    98a0:	4770      	bx	lr

000098a2 <log_backend_enable>:
}

void log_backend_enable(struct log_backend const *const backend,
			void *ctx,
			uint32_t level)
{
    98a2:	b580      	push	{r7, lr}
    98a4:	b086      	sub	sp, #24
    98a6:	af00      	add	r7, sp, #0
    98a8:	60f8      	str	r0, [r7, #12]
    98aa:	60b9      	str	r1, [r7, #8]
    98ac:	607a      	str	r2, [r7, #4]
	/* As first slot in filtering mask is reserved, backend ID has offset.*/
	uint32_t id = LOG_FILTER_FIRST_BACKEND_SLOT_IDX;
    98ae:	2301      	movs	r3, #1
    98b0:	617b      	str	r3, [r7, #20]

	id += backend - log_backend_get(0);
    98b2:	2000      	movs	r0, #0
    98b4:	f7f9 fb86 	bl	2fc4 <log_backend_get>
    98b8:	4602      	mov	r2, r0
    98ba:	68fb      	ldr	r3, [r7, #12]
    98bc:	1a9b      	subs	r3, r3, r2
    98be:	111b      	asrs	r3, r3, #4
    98c0:	461a      	mov	r2, r3
    98c2:	697b      	ldr	r3, [r7, #20]
    98c4:	4413      	add	r3, r2
    98c6:	617b      	str	r3, [r7, #20]

	if (!IS_ENABLED(CONFIG_LOG1)) {
		__ASSERT(backend->api->process, "Backend does not support v2 API");
	}

	log_backend_id_set(backend, id);
    98c8:	697b      	ldr	r3, [r7, #20]
    98ca:	b2db      	uxtb	r3, r3
    98cc:	4619      	mov	r1, r3
    98ce:	68f8      	ldr	r0, [r7, #12]
    98d0:	f7ff ffa7 	bl	9822 <log_backend_id_set>
	backend_filter_set(backend, level);
    98d4:	6879      	ldr	r1, [r7, #4]
    98d6:	68f8      	ldr	r0, [r7, #12]
    98d8:	f7ff ffd9 	bl	988e <backend_filter_set>
	log_backend_activate(backend, ctx);
    98dc:	68b9      	ldr	r1, [r7, #8]
    98de:	68f8      	ldr	r0, [r7, #12]
    98e0:	f7ff ffae 	bl	9840 <log_backend_activate>

	z_log_notify_backend_enabled();
    98e4:	f7f9 fa00 	bl	2ce8 <z_log_notify_backend_enabled>
}
    98e8:	bf00      	nop
    98ea:	3718      	adds	r7, #24
    98ec:	46bd      	mov	sp, r7
    98ee:	bd80      	pop	{r7, pc}

000098f0 <atomic_add>:
{
    98f0:	b480      	push	{r7}
    98f2:	b083      	sub	sp, #12
    98f4:	af00      	add	r7, sp, #0
    98f6:	6078      	str	r0, [r7, #4]
    98f8:	6039      	str	r1, [r7, #0]
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
    98fa:	683a      	ldr	r2, [r7, #0]
    98fc:	687b      	ldr	r3, [r7, #4]
    98fe:	f3bf 8f5b 	dmb	ish
    9902:	e853 1f00 	ldrex	r1, [r3]
    9906:	eb01 0002 	add.w	r0, r1, r2
    990a:	e843 0c00 	strex	ip, r0, [r3]
    990e:	f1bc 0f00 	cmp.w	ip, #0
    9912:	d1f6      	bne.n	9902 <atomic_add+0x12>
    9914:	f3bf 8f5b 	dmb	ish
    9918:	460b      	mov	r3, r1
}
    991a:	4618      	mov	r0, r3
    991c:	370c      	adds	r7, #12
    991e:	46bd      	mov	sp, r7
    9920:	bc80      	pop	{r7}
    9922:	4770      	bx	lr

00009924 <atomic_inc>:
{
    9924:	b580      	push	{r7, lr}
    9926:	b082      	sub	sp, #8
    9928:	af00      	add	r7, sp, #0
    992a:	6078      	str	r0, [r7, #4]
	return atomic_add(target, 1);
    992c:	2101      	movs	r1, #1
    992e:	6878      	ldr	r0, [r7, #4]
    9930:	f7ff ffde 	bl	98f0 <atomic_add>
    9934:	4603      	mov	r3, r0
}
    9936:	4618      	mov	r0, r3
    9938:	3708      	adds	r7, #8
    993a:	46bd      	mov	sp, r7
    993c:	bd80      	pop	{r7, pc}

0000993e <log_msg2_get_domain>:
 * @param msg Log message.
 *
 * @return Domain ID
 */
static inline uint8_t log_msg2_get_domain(struct log_msg2 *msg)
{
    993e:	b480      	push	{r7}
    9940:	b083      	sub	sp, #12
    9942:	af00      	add	r7, sp, #0
    9944:	6078      	str	r0, [r7, #4]
	return msg->hdr.desc.domain;
    9946:	687b      	ldr	r3, [r7, #4]
    9948:	781b      	ldrb	r3, [r3, #0]
    994a:	f3c3 03c2 	ubfx	r3, r3, #3, #3
    994e:	b2db      	uxtb	r3, r3
}
    9950:	4618      	mov	r0, r3
    9952:	370c      	adds	r7, #12
    9954:	46bd      	mov	sp, r7
    9956:	bc80      	pop	{r7}
    9958:	4770      	bx	lr

0000995a <log_msg2_get_level>:
 * @param msg Log message.
 *
 * @return Log level.
 */
static inline uint8_t log_msg2_get_level(struct log_msg2 *msg)
{
    995a:	b480      	push	{r7}
    995c:	b083      	sub	sp, #12
    995e:	af00      	add	r7, sp, #0
    9960:	6078      	str	r0, [r7, #4]
	return msg->hdr.desc.level;
    9962:	687b      	ldr	r3, [r7, #4]
    9964:	881b      	ldrh	r3, [r3, #0]
    9966:	f3c3 1382 	ubfx	r3, r3, #6, #3
    996a:	b2db      	uxtb	r3, r3
}
    996c:	4618      	mov	r0, r3
    996e:	370c      	adds	r7, #12
    9970:	46bd      	mov	sp, r7
    9972:	bc80      	pop	{r7}
    9974:	4770      	bx	lr

00009976 <log_msg2_get_source>:
 * @param msg Log message.
 *
 * @return Pointer to the source data.
 */
static inline const void *log_msg2_get_source(struct log_msg2 *msg)
{
    9976:	b480      	push	{r7}
    9978:	b083      	sub	sp, #12
    997a:	af00      	add	r7, sp, #0
    997c:	6078      	str	r0, [r7, #4]
	return msg->hdr.source;
    997e:	687b      	ldr	r3, [r7, #4]
    9980:	685b      	ldr	r3, [r3, #4]
}
    9982:	4618      	mov	r0, r3
    9984:	370c      	adds	r7, #12
    9986:	46bd      	mov	sp, r7
    9988:	bc80      	pop	{r7}
    998a:	4770      	bx	lr

0000998c <log_msg2_get_timestamp>:
 * @param msg Log message.
 *
 * @return Timestamp.
 */
static inline log_timestamp_t log_msg2_get_timestamp(struct log_msg2 *msg)
{
    998c:	b480      	push	{r7}
    998e:	b083      	sub	sp, #12
    9990:	af00      	add	r7, sp, #0
    9992:	6078      	str	r0, [r7, #4]
	return msg->hdr.timestamp;
    9994:	687b      	ldr	r3, [r7, #4]
    9996:	689b      	ldr	r3, [r3, #8]
}
    9998:	4618      	mov	r0, r3
    999a:	370c      	adds	r7, #12
    999c:	46bd      	mov	sp, r7
    999e:	bc80      	pop	{r7}
    99a0:	4770      	bx	lr

000099a2 <log_msg2_get_data>:
 * @param len location where data length is written.
 *
 * @return pointer to the data buffer.
 */
static inline uint8_t *log_msg2_get_data(struct log_msg2 *msg, size_t *len)
{
    99a2:	b480      	push	{r7}
    99a4:	b083      	sub	sp, #12
    99a6:	af00      	add	r7, sp, #0
    99a8:	6078      	str	r0, [r7, #4]
    99aa:	6039      	str	r1, [r7, #0]
	*len = msg->hdr.desc.data_len;
    99ac:	687b      	ldr	r3, [r7, #4]
    99ae:	885b      	ldrh	r3, [r3, #2]
    99b0:	f3c3 03cb 	ubfx	r3, r3, #3, #12
    99b4:	b29b      	uxth	r3, r3
    99b6:	461a      	mov	r2, r3
    99b8:	683b      	ldr	r3, [r7, #0]
    99ba:	601a      	str	r2, [r3, #0]

	return msg->data + msg->hdr.desc.package_len;
    99bc:	687b      	ldr	r3, [r7, #4]
    99be:	3310      	adds	r3, #16
    99c0:	687a      	ldr	r2, [r7, #4]
    99c2:	6812      	ldr	r2, [r2, #0]
    99c4:	f3c2 2249 	ubfx	r2, r2, #9, #10
    99c8:	b292      	uxth	r2, r2
    99ca:	4413      	add	r3, r2
}
    99cc:	4618      	mov	r0, r3
    99ce:	370c      	adds	r7, #12
    99d0:	46bd      	mov	sp, r7
    99d2:	bc80      	pop	{r7}
    99d4:	4770      	bx	lr

000099d6 <log_msg2_get_package>:
 * @param len location where string package length is written.
 *
 * @return pointer to the package.
 */
static inline uint8_t *log_msg2_get_package(struct log_msg2 *msg, size_t *len)
{
    99d6:	b480      	push	{r7}
    99d8:	b083      	sub	sp, #12
    99da:	af00      	add	r7, sp, #0
    99dc:	6078      	str	r0, [r7, #4]
    99de:	6039      	str	r1, [r7, #0]
	*len = msg->hdr.desc.package_len;
    99e0:	687b      	ldr	r3, [r7, #4]
    99e2:	681b      	ldr	r3, [r3, #0]
    99e4:	f3c3 2349 	ubfx	r3, r3, #9, #10
    99e8:	b29b      	uxth	r3, r3
    99ea:	461a      	mov	r2, r3
    99ec:	683b      	ldr	r3, [r7, #0]
    99ee:	601a      	str	r2, [r3, #0]

	return msg->data;
    99f0:	687b      	ldr	r3, [r7, #4]
    99f2:	3310      	adds	r3, #16
}
    99f4:	4618      	mov	r0, r3
    99f6:	370c      	adds	r7, #12
    99f8:	46bd      	mov	sp, r7
    99fa:	bc80      	pop	{r7}
    99fc:	4770      	bx	lr

000099fe <isprint>:
{
    99fe:	b480      	push	{r7}
    9a00:	b083      	sub	sp, #12
    9a02:	af00      	add	r7, sp, #0
    9a04:	6078      	str	r0, [r7, #4]
	return (int)((((unsigned)c) >= ' ') &&
    9a06:	687b      	ldr	r3, [r7, #4]
    9a08:	2b1f      	cmp	r3, #31
    9a0a:	d904      	bls.n	9a16 <isprint+0x18>
			(((unsigned)c) <= (unsigned)'~'));
    9a0c:	687b      	ldr	r3, [r7, #4]
	return (int)((((unsigned)c) >= ' ') &&
    9a0e:	2b7e      	cmp	r3, #126	; 0x7e
    9a10:	d801      	bhi.n	9a16 <isprint+0x18>
    9a12:	2301      	movs	r3, #1
    9a14:	e000      	b.n	9a18 <isprint+0x1a>
    9a16:	2300      	movs	r3, #0
}
    9a18:	4618      	mov	r0, r3
    9a1a:	370c      	adds	r7, #12
    9a1c:	46bd      	mov	sp, r7
    9a1e:	bc80      	pop	{r7}
    9a20:	4770      	bx	lr

00009a22 <out_func>:
{
    9a22:	b580      	push	{r7, lr}
    9a24:	b086      	sub	sp, #24
    9a26:	af00      	add	r7, sp, #0
    9a28:	6078      	str	r0, [r7, #4]
    9a2a:	6039      	str	r1, [r7, #0]
	const struct log_output *out_ctx = (const struct log_output *)ctx;
    9a2c:	683b      	ldr	r3, [r7, #0]
    9a2e:	617b      	str	r3, [r7, #20]
	if (out_ctx->control_block->offset == out_ctx->size) {
    9a30:	697b      	ldr	r3, [r7, #20]
    9a32:	685b      	ldr	r3, [r3, #4]
    9a34:	681b      	ldr	r3, [r3, #0]
    9a36:	697a      	ldr	r2, [r7, #20]
    9a38:	68d2      	ldr	r2, [r2, #12]
    9a3a:	4293      	cmp	r3, r2
    9a3c:	d102      	bne.n	9a44 <out_func+0x22>
		log_output_flush(out_ctx);
    9a3e:	6978      	ldr	r0, [r7, #20]
    9a40:	f000 f844 	bl	9acc <log_output_flush>
	idx = atomic_inc(&out_ctx->control_block->offset);
    9a44:	697b      	ldr	r3, [r7, #20]
    9a46:	685b      	ldr	r3, [r3, #4]
    9a48:	4618      	mov	r0, r3
    9a4a:	f7ff ff6b 	bl	9924 <atomic_inc>
    9a4e:	6138      	str	r0, [r7, #16]
	out_ctx->buf[idx] = (uint8_t)c;
    9a50:	697b      	ldr	r3, [r7, #20]
    9a52:	689a      	ldr	r2, [r3, #8]
    9a54:	693b      	ldr	r3, [r7, #16]
    9a56:	4413      	add	r3, r2
    9a58:	687a      	ldr	r2, [r7, #4]
    9a5a:	b2d2      	uxtb	r2, r2
    9a5c:	701a      	strb	r2, [r3, #0]
	return 0;
    9a5e:	2300      	movs	r3, #0
}
    9a60:	4618      	mov	r0, r3
    9a62:	3718      	adds	r7, #24
    9a64:	46bd      	mov	sp, r7
    9a66:	bd80      	pop	{r7, pc}

00009a68 <cr_out_func>:
{
    9a68:	b580      	push	{r7, lr}
    9a6a:	b082      	sub	sp, #8
    9a6c:	af00      	add	r7, sp, #0
    9a6e:	6078      	str	r0, [r7, #4]
    9a70:	6039      	str	r1, [r7, #0]
	out_func(c, ctx);
    9a72:	6839      	ldr	r1, [r7, #0]
    9a74:	6878      	ldr	r0, [r7, #4]
    9a76:	f7ff ffd4 	bl	9a22 <out_func>
	if (c == '\n') {
    9a7a:	687b      	ldr	r3, [r7, #4]
    9a7c:	2b0a      	cmp	r3, #10
    9a7e:	d103      	bne.n	9a88 <cr_out_func+0x20>
		out_func((int)'\r', ctx);
    9a80:	6839      	ldr	r1, [r7, #0]
    9a82:	200d      	movs	r0, #13
    9a84:	f7ff ffcd 	bl	9a22 <out_func>
	return 0;
    9a88:	2300      	movs	r3, #0
}
    9a8a:	4618      	mov	r0, r3
    9a8c:	3708      	adds	r7, #8
    9a8e:	46bd      	mov	sp, r7
    9a90:	bd80      	pop	{r7, pc}

00009a92 <buffer_write>:
{
    9a92:	b580      	push	{r7, lr}
    9a94:	b086      	sub	sp, #24
    9a96:	af00      	add	r7, sp, #0
    9a98:	60f8      	str	r0, [r7, #12]
    9a9a:	60b9      	str	r1, [r7, #8]
    9a9c:	607a      	str	r2, [r7, #4]
    9a9e:	603b      	str	r3, [r7, #0]
		processed = outf(buf, len, ctx);
    9aa0:	68fb      	ldr	r3, [r7, #12]
    9aa2:	683a      	ldr	r2, [r7, #0]
    9aa4:	6879      	ldr	r1, [r7, #4]
    9aa6:	68b8      	ldr	r0, [r7, #8]
    9aa8:	4798      	blx	r3
    9aaa:	6178      	str	r0, [r7, #20]
		len -= processed;
    9aac:	697b      	ldr	r3, [r7, #20]
    9aae:	687a      	ldr	r2, [r7, #4]
    9ab0:	1ad3      	subs	r3, r2, r3
    9ab2:	607b      	str	r3, [r7, #4]
		buf += processed;
    9ab4:	697b      	ldr	r3, [r7, #20]
    9ab6:	68ba      	ldr	r2, [r7, #8]
    9ab8:	4413      	add	r3, r2
    9aba:	60bb      	str	r3, [r7, #8]
	} while (len != 0);
    9abc:	687b      	ldr	r3, [r7, #4]
    9abe:	2b00      	cmp	r3, #0
    9ac0:	d1ee      	bne.n	9aa0 <buffer_write+0xe>
}
    9ac2:	bf00      	nop
    9ac4:	bf00      	nop
    9ac6:	3718      	adds	r7, #24
    9ac8:	46bd      	mov	sp, r7
    9aca:	bd80      	pop	{r7, pc}

00009acc <log_output_flush>:
{
    9acc:	b580      	push	{r7, lr}
    9ace:	b082      	sub	sp, #8
    9ad0:	af00      	add	r7, sp, #0
    9ad2:	6078      	str	r0, [r7, #4]
	buffer_write(output->func, output->buf,
    9ad4:	687b      	ldr	r3, [r7, #4]
    9ad6:	6818      	ldr	r0, [r3, #0]
    9ad8:	687b      	ldr	r3, [r7, #4]
    9ada:	6899      	ldr	r1, [r3, #8]
		     output->control_block->offset,
    9adc:	687b      	ldr	r3, [r7, #4]
    9ade:	685b      	ldr	r3, [r3, #4]
    9ae0:	681b      	ldr	r3, [r3, #0]
	buffer_write(output->func, output->buf,
    9ae2:	461a      	mov	r2, r3
		     output->control_block->ctx);
    9ae4:	687b      	ldr	r3, [r7, #4]
    9ae6:	685b      	ldr	r3, [r3, #4]
	buffer_write(output->func, output->buf,
    9ae8:	685b      	ldr	r3, [r3, #4]
    9aea:	f7ff ffd2 	bl	9a92 <buffer_write>
	output->control_block->offset = 0;
    9aee:	687b      	ldr	r3, [r7, #4]
    9af0:	685b      	ldr	r3, [r3, #4]
    9af2:	2200      	movs	r2, #0
    9af4:	601a      	str	r2, [r3, #0]
}
    9af6:	bf00      	nop
    9af8:	3708      	adds	r7, #8
    9afa:	46bd      	mov	sp, r7
    9afc:	bd80      	pop	{r7, pc}

00009afe <color_prefix>:
{
    9afe:	b580      	push	{r7, lr}
    9b00:	b084      	sub	sp, #16
    9b02:	af00      	add	r7, sp, #0
    9b04:	60f8      	str	r0, [r7, #12]
    9b06:	460b      	mov	r3, r1
    9b08:	607a      	str	r2, [r7, #4]
    9b0a:	72fb      	strb	r3, [r7, #11]
	color_print(output, color, true, level);
    9b0c:	7af9      	ldrb	r1, [r7, #11]
    9b0e:	687b      	ldr	r3, [r7, #4]
    9b10:	2201      	movs	r2, #1
    9b12:	68f8      	ldr	r0, [r7, #12]
    9b14:	f7f9 fb4a 	bl	31ac <color_print>
}
    9b18:	bf00      	nop
    9b1a:	3710      	adds	r7, #16
    9b1c:	46bd      	mov	sp, r7
    9b1e:	bd80      	pop	{r7, pc}

00009b20 <color_postfix>:
{
    9b20:	b580      	push	{r7, lr}
    9b22:	b084      	sub	sp, #16
    9b24:	af00      	add	r7, sp, #0
    9b26:	60f8      	str	r0, [r7, #12]
    9b28:	460b      	mov	r3, r1
    9b2a:	607a      	str	r2, [r7, #4]
    9b2c:	72fb      	strb	r3, [r7, #11]
	color_print(output, color, false, level);
    9b2e:	7af9      	ldrb	r1, [r7, #11]
    9b30:	687b      	ldr	r3, [r7, #4]
    9b32:	2200      	movs	r2, #0
    9b34:	68f8      	ldr	r0, [r7, #12]
    9b36:	f7f9 fb39 	bl	31ac <color_print>
}
    9b3a:	bf00      	nop
    9b3c:	3710      	adds	r7, #16
    9b3e:	46bd      	mov	sp, r7
    9b40:	bd80      	pop	{r7, pc}

00009b42 <log_msg2_hexdump>:
{
    9b42:	b580      	push	{r7, lr}
    9b44:	b088      	sub	sp, #32
    9b46:	af02      	add	r7, sp, #8
    9b48:	60f8      	str	r0, [r7, #12]
    9b4a:	60b9      	str	r1, [r7, #8]
    9b4c:	607a      	str	r2, [r7, #4]
    9b4e:	603b      	str	r3, [r7, #0]
		length = MIN(len, HEXDUMP_BYTES_IN_LINE);
    9b50:	687b      	ldr	r3, [r7, #4]
    9b52:	2b10      	cmp	r3, #16
    9b54:	bf28      	it	cs
    9b56:	2310      	movcs	r3, #16
    9b58:	617b      	str	r3, [r7, #20]
		hexdump_line_print(output, data, length,
    9b5a:	6a3b      	ldr	r3, [r7, #32]
    9b5c:	9300      	str	r3, [sp, #0]
    9b5e:	683b      	ldr	r3, [r7, #0]
    9b60:	697a      	ldr	r2, [r7, #20]
    9b62:	68b9      	ldr	r1, [r7, #8]
    9b64:	68f8      	ldr	r0, [r7, #12]
    9b66:	f7f9 fbb9 	bl	32dc <hexdump_line_print>
		data += length;
    9b6a:	68ba      	ldr	r2, [r7, #8]
    9b6c:	697b      	ldr	r3, [r7, #20]
    9b6e:	4413      	add	r3, r2
    9b70:	60bb      	str	r3, [r7, #8]
		len -= length;
    9b72:	687a      	ldr	r2, [r7, #4]
    9b74:	697b      	ldr	r3, [r7, #20]
    9b76:	1ad3      	subs	r3, r2, r3
    9b78:	607b      	str	r3, [r7, #4]
	} while (len);
    9b7a:	687b      	ldr	r3, [r7, #4]
    9b7c:	2b00      	cmp	r3, #0
    9b7e:	d1e7      	bne.n	9b50 <log_msg2_hexdump+0xe>
}
    9b80:	bf00      	nop
    9b82:	bf00      	nop
    9b84:	3718      	adds	r7, #24
    9b86:	46bd      	mov	sp, r7
    9b88:	bd80      	pop	{r7, pc}

00009b8a <postfix_print>:
{
    9b8a:	b580      	push	{r7, lr}
    9b8c:	b084      	sub	sp, #16
    9b8e:	af00      	add	r7, sp, #0
    9b90:	60f8      	str	r0, [r7, #12]
    9b92:	60b9      	str	r1, [r7, #8]
    9b94:	4613      	mov	r3, r2
    9b96:	71fb      	strb	r3, [r7, #7]
	color_postfix(output, (flags & LOG_OUTPUT_FLAG_COLORS),
    9b98:	68bb      	ldr	r3, [r7, #8]
    9b9a:	f003 0301 	and.w	r3, r3, #1
    9b9e:	2b00      	cmp	r3, #0
    9ba0:	bf14      	ite	ne
    9ba2:	2301      	movne	r3, #1
    9ba4:	2300      	moveq	r3, #0
    9ba6:	b2db      	uxtb	r3, r3
    9ba8:	79fa      	ldrb	r2, [r7, #7]
    9baa:	4619      	mov	r1, r3
    9bac:	68f8      	ldr	r0, [r7, #12]
    9bae:	f7ff ffb7 	bl	9b20 <color_postfix>
	newline_print(output, flags);
    9bb2:	68b9      	ldr	r1, [r7, #8]
    9bb4:	68f8      	ldr	r0, [r7, #12]
    9bb6:	f7f9 fb6f 	bl	3298 <newline_print>
}
    9bba:	bf00      	nop
    9bbc:	3710      	adds	r7, #16
    9bbe:	46bd      	mov	sp, r7
    9bc0:	bd80      	pop	{r7, pc}

00009bc2 <z_log_msg2_finalize>:
	!(IS_ENABLED(CONFIG_LOG_FRONTEND) && \
	 (IS_ENABLED(CONFIG_LOG_FRONTEND_ONLY) || log_backend_count_get() == 0))

void z_log_msg2_finalize(struct log_msg2 *msg, const void *source,
			 const struct log_msg2_desc desc, const void *data)
{
    9bc2:	b580      	push	{r7, lr}
    9bc4:	b086      	sub	sp, #24
    9bc6:	af00      	add	r7, sp, #0
    9bc8:	60f8      	str	r0, [r7, #12]
    9bca:	60b9      	str	r1, [r7, #8]
    9bcc:	607a      	str	r2, [r7, #4]
    9bce:	603b      	str	r3, [r7, #0]
	if (!msg) {
    9bd0:	68fb      	ldr	r3, [r7, #12]
    9bd2:	2b00      	cmp	r3, #0
    9bd4:	d103      	bne.n	9bde <z_log_msg2_finalize+0x1c>
		z_log_dropped(false);
    9bd6:	2000      	movs	r0, #0
    9bd8:	f7f9 f8de 	bl	2d98 <z_log_dropped>

		return;
    9bdc:	e01c      	b.n	9c18 <z_log_msg2_finalize+0x56>
	}

	if (data) {
    9bde:	683b      	ldr	r3, [r7, #0]
    9be0:	2b00      	cmp	r3, #0
    9be2:	d010      	beq.n	9c06 <z_log_msg2_finalize+0x44>
		uint8_t *d = msg->data + desc.package_len;
    9be4:	68fb      	ldr	r3, [r7, #12]
    9be6:	3310      	adds	r3, #16
    9be8:	687a      	ldr	r2, [r7, #4]
    9bea:	f3c2 2249 	ubfx	r2, r2, #9, #10
    9bee:	b292      	uxth	r2, r2
    9bf0:	4413      	add	r3, r2
    9bf2:	617b      	str	r3, [r7, #20]

		memcpy(d, data, desc.data_len);
    9bf4:	88fb      	ldrh	r3, [r7, #6]
    9bf6:	f3c3 03cb 	ubfx	r3, r3, #3, #12
    9bfa:	b29b      	uxth	r3, r3
    9bfc:	461a      	mov	r2, r3
    9bfe:	6839      	ldr	r1, [r7, #0]
    9c00:	6978      	ldr	r0, [r7, #20]
    9c02:	f000 fa1f 	bl	a044 <memcpy>
	}

	msg->hdr.desc = desc;
    9c06:	68fb      	ldr	r3, [r7, #12]
    9c08:	687a      	ldr	r2, [r7, #4]
    9c0a:	601a      	str	r2, [r3, #0]
	msg->hdr.source = source;
    9c0c:	68fb      	ldr	r3, [r7, #12]
    9c0e:	68ba      	ldr	r2, [r7, #8]
    9c10:	605a      	str	r2, [r3, #4]
	z_log_msg2_commit(msg);
    9c12:	68f8      	ldr	r0, [r7, #12]
    9c14:	f7f9 f918 	bl	2e48 <z_log_msg2_commit>
}
    9c18:	3718      	adds	r7, #24
    9c1a:	46bd      	mov	sp, r7
    9c1c:	bd80      	pop	{r7, pc}

00009c1e <z_impl_z_log_msg2_runtime_vcreate>:
#endif

void z_impl_z_log_msg2_runtime_vcreate(uint8_t domain_id, const void *source,
				uint8_t level, const void *data, size_t dlen,
				uint32_t package_flags, const char *fmt, va_list ap)
{
    9c1e:	b580      	push	{r7, lr}
    9c20:	b08c      	sub	sp, #48	; 0x30
    9c22:	af02      	add	r7, sp, #8
    9c24:	60b9      	str	r1, [r7, #8]
    9c26:	607b      	str	r3, [r7, #4]
    9c28:	4603      	mov	r3, r0
    9c2a:	73fb      	strb	r3, [r7, #15]
    9c2c:	4613      	mov	r3, r2
    9c2e:	73bb      	strb	r3, [r7, #14]
	int plen;

	if (fmt) {
    9c30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    9c32:	2b00      	cmp	r3, #0
    9c34:	d00b      	beq.n	9c4e <z_impl_z_log_msg2_runtime_vcreate+0x30>
		va_list ap2;

		va_copy(ap2, ap);
    9c36:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    9c38:	613b      	str	r3, [r7, #16]
		plen = cbvprintf_package(NULL, Z_LOG_MSG2_ALIGN_OFFSET,
    9c3a:	693b      	ldr	r3, [r7, #16]
    9c3c:	9300      	str	r3, [sp, #0]
    9c3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    9c40:	6b7a      	ldr	r2, [r7, #52]	; 0x34
    9c42:	2110      	movs	r1, #16
    9c44:	2000      	movs	r0, #0
    9c46:	f7f6 fe75 	bl	934 <cbvprintf_package>
    9c4a:	6278      	str	r0, [r7, #36]	; 0x24
    9c4c:	e001      	b.n	9c52 <z_impl_z_log_msg2_runtime_vcreate+0x34>
					 package_flags, fmt, ap2);
		__ASSERT_NO_MSG(plen >= 0);
		va_end(ap2);
	} else {
		plen = 0;
    9c4e:	2300      	movs	r3, #0
    9c50:	627b      	str	r3, [r7, #36]	; 0x24
	}

	size_t msg_wlen = Z_LOG_MSG2_ALIGNED_WLEN(plen, dlen);
    9c52:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    9c54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    9c56:	4413      	add	r3, r2
    9c58:	3317      	adds	r3, #23
    9c5a:	f023 0307 	bic.w	r3, r3, #7
    9c5e:	3303      	adds	r3, #3
    9c60:	089b      	lsrs	r3, r3, #2
    9c62:	623b      	str	r3, [r7, #32]
	struct log_msg2 *msg;
	uint8_t *pkg;
	struct log_msg2_desc desc =
    9c64:	7d3b      	ldrb	r3, [r7, #20]
    9c66:	f36f 0300 	bfc	r3, #0, #1
    9c6a:	753b      	strb	r3, [r7, #20]
    9c6c:	7d3b      	ldrb	r3, [r7, #20]
    9c6e:	f36f 0341 	bfc	r3, #1, #1
    9c72:	753b      	strb	r3, [r7, #20]
    9c74:	7d3b      	ldrb	r3, [r7, #20]
    9c76:	f36f 0382 	bfc	r3, #2, #1
    9c7a:	753b      	strb	r3, [r7, #20]
    9c7c:	7bfb      	ldrb	r3, [r7, #15]
    9c7e:	f003 0307 	and.w	r3, r3, #7
    9c82:	b2da      	uxtb	r2, r3
    9c84:	7d3b      	ldrb	r3, [r7, #20]
    9c86:	f362 03c5 	bfi	r3, r2, #3, #3
    9c8a:	753b      	strb	r3, [r7, #20]
    9c8c:	7bbb      	ldrb	r3, [r7, #14]
    9c8e:	f003 0307 	and.w	r3, r3, #7
    9c92:	b2da      	uxtb	r2, r3
    9c94:	8abb      	ldrh	r3, [r7, #20]
    9c96:	f362 1388 	bfi	r3, r2, #6, #3
    9c9a:	82bb      	strh	r3, [r7, #20]
    9c9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    9c9e:	f3c3 0309 	ubfx	r3, r3, #0, #10
    9ca2:	b29a      	uxth	r2, r3
    9ca4:	697b      	ldr	r3, [r7, #20]
    9ca6:	f362 2352 	bfi	r3, r2, #9, #10
    9caa:	617b      	str	r3, [r7, #20]
    9cac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    9cae:	f3c3 030b 	ubfx	r3, r3, #0, #12
    9cb2:	b29a      	uxth	r2, r3
    9cb4:	8afb      	ldrh	r3, [r7, #22]
    9cb6:	f362 03ce 	bfi	r3, r2, #3, #12
    9cba:	82fb      	strh	r3, [r7, #22]
    9cbc:	7dfb      	ldrb	r3, [r7, #23]
    9cbe:	f36f 13c7 	bfc	r3, #7, #1
    9cc2:	75fb      	strb	r3, [r7, #23]
		Z_LOG_MSG_DESC_INITIALIZER(domain_id, level, plen, dlen);

	if (IS_ENABLED(CONFIG_LOG_MODE_DEFERRED) && BACKENDS_IN_USE()) {
		msg = z_log_msg2_alloc(msg_wlen);
    9cc4:	6a38      	ldr	r0, [r7, #32]
    9cc6:	f7f9 f8a5 	bl	2e14 <z_log_msg2_alloc>
    9cca:	61f8      	str	r0, [r7, #28]
		if (IS_ENABLED(CONFIG_LOG_FRONTEND) && msg == NULL) {
			pkg = alloca(plen);
		} else {
			pkg = msg ? msg->data : NULL;
    9ccc:	69fb      	ldr	r3, [r7, #28]
    9cce:	2b00      	cmp	r3, #0
    9cd0:	d002      	beq.n	9cd8 <z_impl_z_log_msg2_runtime_vcreate+0xba>
    9cd2:	69fb      	ldr	r3, [r7, #28]
    9cd4:	3310      	adds	r3, #16
    9cd6:	e000      	b.n	9cda <z_impl_z_log_msg2_runtime_vcreate+0xbc>
    9cd8:	2300      	movs	r3, #0
    9cda:	61bb      	str	r3, [r7, #24]
	} else {
		msg = alloca(msg_wlen * sizeof(int));
		pkg = msg->data;
	}

	if (pkg && fmt) {
    9cdc:	69bb      	ldr	r3, [r7, #24]
    9cde:	2b00      	cmp	r3, #0
    9ce0:	d00b      	beq.n	9cfa <z_impl_z_log_msg2_runtime_vcreate+0xdc>
    9ce2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    9ce4:	2b00      	cmp	r3, #0
    9ce6:	d008      	beq.n	9cfa <z_impl_z_log_msg2_runtime_vcreate+0xdc>
		plen = cbvprintf_package(pkg, (size_t)plen, package_flags, fmt, ap);
    9ce8:	6a79      	ldr	r1, [r7, #36]	; 0x24
    9cea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    9cec:	9300      	str	r3, [sp, #0]
    9cee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    9cf0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
    9cf2:	69b8      	ldr	r0, [r7, #24]
    9cf4:	f7f6 fe1e 	bl	934 <cbvprintf_package>
    9cf8:	6278      	str	r0, [r7, #36]	; 0x24
	if (IS_ENABLED(CONFIG_LOG_FRONTEND)) {
		log_frontend_msg(source, desc, pkg, data);
	}

	if (BACKENDS_IN_USE()) {
		z_log_msg2_finalize(msg, source, desc, data);
    9cfa:	687b      	ldr	r3, [r7, #4]
    9cfc:	697a      	ldr	r2, [r7, #20]
    9cfe:	68b9      	ldr	r1, [r7, #8]
    9d00:	69f8      	ldr	r0, [r7, #28]
    9d02:	f7ff ff5e 	bl	9bc2 <z_log_msg2_finalize>
	}
}
    9d06:	bf00      	nop
    9d08:	3728      	adds	r7, #40	; 0x28
    9d0a:	46bd      	mov	sp, r7
    9d0c:	bd80      	pop	{r7, pc}

00009d0e <log_backend_std_get_flags>:
 * @ingroup logger
 * @{
 */

static inline uint32_t log_backend_std_get_flags(void)
{
    9d0e:	b480      	push	{r7}
    9d10:	b083      	sub	sp, #12
    9d12:	af00      	add	r7, sp, #0
	uint32_t flags = (LOG_OUTPUT_FLAG_LEVEL | LOG_OUTPUT_FLAG_TIMESTAMP);
    9d14:	230a      	movs	r3, #10
    9d16:	607b      	str	r3, [r7, #4]

	if (IS_ENABLED(CONFIG_LOG_BACKEND_SHOW_COLOR)) {
		flags |= LOG_OUTPUT_FLAG_COLORS;
    9d18:	687b      	ldr	r3, [r7, #4]
    9d1a:	f043 0301 	orr.w	r3, r3, #1
    9d1e:	607b      	str	r3, [r7, #4]
	}

	if (IS_ENABLED(CONFIG_LOG_BACKEND_FORMAT_TIMESTAMP)) {
		flags |= LOG_OUTPUT_FLAG_FORMAT_TIMESTAMP;
    9d20:	687b      	ldr	r3, [r7, #4]
    9d22:	f043 0304 	orr.w	r3, r3, #4
    9d26:	607b      	str	r3, [r7, #4]
	}

	return flags;
    9d28:	687b      	ldr	r3, [r7, #4]
}
    9d2a:	4618      	mov	r0, r3
    9d2c:	370c      	adds	r7, #12
    9d2e:	46bd      	mov	sp, r7
    9d30:	bc80      	pop	{r7}
    9d32:	4770      	bx	lr

00009d34 <log_backend_std_panic>:
 *
 * @param output	Log output instance.
 */
static inline void
log_backend_std_panic(const struct log_output *const output)
{
    9d34:	b580      	push	{r7, lr}
    9d36:	b082      	sub	sp, #8
    9d38:	af00      	add	r7, sp, #0
    9d3a:	6078      	str	r0, [r7, #4]
	log_output_flush(output);
    9d3c:	6878      	ldr	r0, [r7, #4]
    9d3e:	f7ff fec5 	bl	9acc <log_output_flush>
}
    9d42:	bf00      	nop
    9d44:	3708      	adds	r7, #8
    9d46:	46bd      	mov	sp, r7
    9d48:	bd80      	pop	{r7, pc}

00009d4a <log_backend_std_dropped>:
 * @param output	Log output instance.
 * @param cnt		Number of dropped messages.
 */
static inline void
log_backend_std_dropped(const struct log_output *const output, uint32_t cnt)
{
    9d4a:	b580      	push	{r7, lr}
    9d4c:	b082      	sub	sp, #8
    9d4e:	af00      	add	r7, sp, #0
    9d50:	6078      	str	r0, [r7, #4]
    9d52:	6039      	str	r1, [r7, #0]
	log_output_dropped_process(output, cnt);
    9d54:	6839      	ldr	r1, [r7, #0]
    9d56:	6878      	ldr	r0, [r7, #4]
    9d58:	f7f9 fc30 	bl	35bc <log_output_dropped_process>
}
    9d5c:	bf00      	nop
    9d5e:	3708      	adds	r7, #8
    9d60:	46bd      	mov	sp, r7
    9d62:	bd80      	pop	{r7, pc}

00009d64 <z_impl_uart_poll_out>:
__syscall void uart_poll_out(const struct device *dev,
			     unsigned char out_char);

static inline void z_impl_uart_poll_out(const struct device *dev,
					unsigned char out_char)
{
    9d64:	b580      	push	{r7, lr}
    9d66:	b084      	sub	sp, #16
    9d68:	af00      	add	r7, sp, #0
    9d6a:	6078      	str	r0, [r7, #4]
    9d6c:	460b      	mov	r3, r1
    9d6e:	70fb      	strb	r3, [r7, #3]
	const struct uart_driver_api *api =
    9d70:	687b      	ldr	r3, [r7, #4]
    9d72:	689b      	ldr	r3, [r3, #8]
    9d74:	60fb      	str	r3, [r7, #12]
		(const struct uart_driver_api *)dev->api;

	api->poll_out(dev, out_char);
    9d76:	68fb      	ldr	r3, [r7, #12]
    9d78:	685b      	ldr	r3, [r3, #4]
    9d7a:	78fa      	ldrb	r2, [r7, #3]
    9d7c:	4611      	mov	r1, r2
    9d7e:	6878      	ldr	r0, [r7, #4]
    9d80:	4798      	blx	r3
}
    9d82:	bf00      	nop
    9d84:	3710      	adds	r7, #16
    9d86:	46bd      	mov	sp, r7
    9d88:	bd80      	pop	{r7, pc}

00009d8a <uart_poll_out>:

extern void z_impl_uart_poll_out(const struct device * dev, unsigned char out_char);

__pinned_func
static inline void uart_poll_out(const struct device * dev, unsigned char out_char)
{
    9d8a:	b580      	push	{r7, lr}
    9d8c:	b082      	sub	sp, #8
    9d8e:	af00      	add	r7, sp, #0
    9d90:	6078      	str	r0, [r7, #4]
    9d92:	460b      	mov	r3, r1
    9d94:	70fb      	strb	r3, [r7, #3]
		(void) arch_syscall_invoke2(parm0.x, parm1.x, K_SYSCALL_UART_POLL_OUT);
		return;
	}
#endif
	compiler_barrier();
	z_impl_uart_poll_out(dev, out_char);
    9d96:	78fb      	ldrb	r3, [r7, #3]
    9d98:	4619      	mov	r1, r3
    9d9a:	6878      	ldr	r0, [r7, #4]
    9d9c:	f7ff ffe2 	bl	9d64 <z_impl_uart_poll_out>
}
    9da0:	bf00      	nop
    9da2:	3708      	adds	r7, #8
    9da4:	46bd      	mov	sp, r7
    9da6:	bd80      	pop	{r7, pc}

00009da8 <z_cpp_init_static>:

void __do_global_ctors_aux(void);
void __do_init_array_aux(void);

void z_cpp_init_static(void)
{
    9da8:	b580      	push	{r7, lr}
    9daa:	af00      	add	r7, sp, #0
	__do_global_ctors_aux();
    9dac:	f7f9 fcfa 	bl	37a4 <__do_global_ctors_aux>
	__do_init_array_aux();
    9db0:	f7f9 fcde 	bl	3770 <__do_init_array_aux>
}
    9db4:	bf00      	nop
    9db6:	bd80      	pop	{r7, pc}

00009db8 <k_is_user_context>:
{
    9db8:	b480      	push	{r7}
    9dba:	af00      	add	r7, sp, #0
	return false;
    9dbc:	2300      	movs	r3, #0
}
    9dbe:	4618      	mov	r0, r3
    9dc0:	46bd      	mov	sp, r7
    9dc2:	bc80      	pop	{r7}
    9dc4:	4770      	bx	lr

00009dc6 <z_log_msg2_runtime_create>:
{
    9dc6:	b580      	push	{r7, lr}
    9dc8:	b08a      	sub	sp, #40	; 0x28
    9dca:	af04      	add	r7, sp, #16
    9dcc:	60b9      	str	r1, [r7, #8]
    9dce:	607b      	str	r3, [r7, #4]
    9dd0:	4603      	mov	r3, r0
    9dd2:	73fb      	strb	r3, [r7, #15]
    9dd4:	4613      	mov	r3, r2
    9dd6:	73bb      	strb	r3, [r7, #14]
	va_start(ap, fmt);
    9dd8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
    9ddc:	617b      	str	r3, [r7, #20]
	z_log_msg2_runtime_vcreate(domain_id, source, level,
    9dde:	7bba      	ldrb	r2, [r7, #14]
    9de0:	7bf8      	ldrb	r0, [r7, #15]
    9de2:	697b      	ldr	r3, [r7, #20]
    9de4:	9303      	str	r3, [sp, #12]
    9de6:	6abb      	ldr	r3, [r7, #40]	; 0x28
    9de8:	9302      	str	r3, [sp, #8]
    9dea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    9dec:	9301      	str	r3, [sp, #4]
    9dee:	6a3b      	ldr	r3, [r7, #32]
    9df0:	9300      	str	r3, [sp, #0]
    9df2:	687b      	ldr	r3, [r7, #4]
    9df4:	68b9      	ldr	r1, [r7, #8]
    9df6:	f000 f804 	bl	9e02 <z_log_msg2_runtime_vcreate>
}
    9dfa:	bf00      	nop
    9dfc:	3718      	adds	r7, #24
    9dfe:	46bd      	mov	sp, r7
    9e00:	bd80      	pop	{r7, pc}

00009e02 <z_log_msg2_runtime_vcreate>:
{
    9e02:	b580      	push	{r7, lr}
    9e04:	b088      	sub	sp, #32
    9e06:	af04      	add	r7, sp, #16
    9e08:	60b9      	str	r1, [r7, #8]
    9e0a:	607b      	str	r3, [r7, #4]
    9e0c:	4603      	mov	r3, r0
    9e0e:	73fb      	strb	r3, [r7, #15]
    9e10:	4613      	mov	r3, r2
    9e12:	73bb      	strb	r3, [r7, #14]
	z_impl_z_log_msg2_runtime_vcreate(domain_id, source, level, data, dlen, package_flags, fmt, ap);
    9e14:	7bba      	ldrb	r2, [r7, #14]
    9e16:	7bf8      	ldrb	r0, [r7, #15]
    9e18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    9e1a:	9303      	str	r3, [sp, #12]
    9e1c:	6a3b      	ldr	r3, [r7, #32]
    9e1e:	9302      	str	r3, [sp, #8]
    9e20:	69fb      	ldr	r3, [r7, #28]
    9e22:	9301      	str	r3, [sp, #4]
    9e24:	69bb      	ldr	r3, [r7, #24]
    9e26:	9300      	str	r3, [sp, #0]
    9e28:	687b      	ldr	r3, [r7, #4]
    9e2a:	68b9      	ldr	r1, [r7, #8]
    9e2c:	f7ff fef7 	bl	9c1e <z_impl_z_log_msg2_runtime_vcreate>
}
    9e30:	bf00      	nop
    9e32:	3710      	adds	r7, #16
    9e34:	46bd      	mov	sp, r7
    9e36:	bd80      	pop	{r7, pc}

00009e38 <z_arm_fatal_error>:

void z_arm_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
    9e38:	b580      	push	{r7, lr}
    9e3a:	b082      	sub	sp, #8
    9e3c:	af00      	add	r7, sp, #0
    9e3e:	6078      	str	r0, [r7, #4]
    9e40:	6039      	str	r1, [r7, #0]

	if (esf != NULL) {
    9e42:	683b      	ldr	r3, [r7, #0]
    9e44:	2b00      	cmp	r3, #0
    9e46:	d002      	beq.n	9e4e <z_arm_fatal_error+0x16>
		esf_dump(esf);
    9e48:	6838      	ldr	r0, [r7, #0]
    9e4a:	f7f9 fcd7 	bl	37fc <esf_dump>
	}
	z_fatal_error(reason, esf);
    9e4e:	6839      	ldr	r1, [r7, #0]
    9e50:	6878      	ldr	r0, [r7, #4]
    9e52:	f7fb f8c3 	bl	4fdc <z_fatal_error>
}
    9e56:	bf00      	nop
    9e58:	3708      	adds	r7, #8
    9e5a:	46bd      	mov	sp, r7
    9e5c:	bd80      	pop	{r7, pc}

00009e5e <z_do_kernel_oops>:
 *
 * @param esf exception frame
 * @param callee_regs Callee-saved registers (R4-R11)
 */
void z_do_kernel_oops(const z_arch_esf_t *esf, _callee_saved_t *callee_regs)
{
    9e5e:	b580      	push	{r7, lr}
    9e60:	b084      	sub	sp, #16
    9e62:	af00      	add	r7, sp, #0
    9e64:	6078      	str	r0, [r7, #4]
    9e66:	6039      	str	r1, [r7, #0]
#if !(defined(CONFIG_EXTRA_EXCEPTION_INFO) && defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE))
	ARG_UNUSED(callee_regs);
#endif
	/* Stacked R0 holds the exception reason. */
	unsigned int reason = esf->basic.r0;
    9e68:	687b      	ldr	r3, [r7, #4]
    9e6a:	681b      	ldr	r3, [r3, #0]
    9e6c:	60fb      	str	r3, [r7, #12]
	}

#endif /* CONFIG_USERSPACE */

#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	z_arm_fatal_error(reason, esf);
    9e6e:	6879      	ldr	r1, [r7, #4]
    9e70:	68f8      	ldr	r0, [r7, #12]
    9e72:	f7ff ffe1 	bl	9e38 <z_arm_fatal_error>
	esf_copy.extra_info = (struct __extra_esf_info) { 0 };
#endif /* CONFIG_ARMV7_M_ARMV8_M_MAINLINE */

	z_arm_fatal_error(reason, &esf_copy);
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
}
    9e76:	bf00      	nop
    9e78:	3710      	adds	r7, #16
    9e7a:	46bd      	mov	sp, r7
    9e7c:	bd80      	pop	{r7, pc}

00009e7e <z_irq_spurious>:
 * Installed in all _sw_isr_table slots at boot time. Throws an error if
 * called.
 *
 */
void z_irq_spurious(const void *unused)
{
    9e7e:	b580      	push	{r7, lr}
    9e80:	b082      	sub	sp, #8
    9e82:	af00      	add	r7, sp, #0
    9e84:	6078      	str	r0, [r7, #4]
	ARG_UNUSED(unused);

	z_arm_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
    9e86:	2100      	movs	r1, #0
    9e88:	2001      	movs	r0, #1
    9e8a:	f7ff ffd5 	bl	9e38 <z_arm_fatal_error>
}
    9e8e:	bf00      	nop
    9e90:	3708      	adds	r7, #8
    9e92:	46bd      	mov	sp, r7
    9e94:	bd80      	pop	{r7, pc}

00009e96 <z_arm_nmi>:
 * Simply call what is installed in 'static void(*handler)(void)'.
 *
 */

void z_arm_nmi(void)
{
    9e96:	b580      	push	{r7, lr}
    9e98:	af00      	add	r7, sp, #0
	handler();
    9e9a:	f7f9 fd4d 	bl	3938 <z_SysNmiOnReset>
	z_arm_int_exit();
    9e9e:	f7f9 fe29 	bl	3af4 <z_arm_exc_exit>
}
    9ea2:	bf00      	nop
    9ea4:	bd80      	pop	{r7, pc}

00009ea6 <z_arm_prep_c>:
 *
 * This routine prepares for the execution of and runs C code.
 *
 */
void z_arm_prep_c(void)
{
    9ea6:	b580      	push	{r7, lr}
    9ea8:	af00      	add	r7, sp, #0
	relocate_vector_table();
    9eaa:	f7f9 fd49 	bl	3940 <relocate_vector_table>
#if defined(CONFIG_CPU_HAS_FPU)
	z_arm_floating_point_init();
#endif
	z_bss_zero();
    9eae:	f7fb f991 	bl	51d4 <z_bss_zero>
	z_data_copy();
    9eb2:	f7fd fd69 	bl	7988 <z_data_copy>
#if ((defined(CONFIG_ARMV7_R) || defined(CONFIG_ARMV7_A)) && defined(CONFIG_INIT_STACKS))
	z_arm_init_stacks();
#endif
	z_arm_interrupt_init();
    9eb6:	f000 f87b 	bl	9fb0 <z_arm_interrupt_init>
	z_cstart();
    9eba:	f7fb fa7f 	bl	53bc <z_cstart>

00009ebe <z_arm_prepare_switch_to_main>:
{
    9ebe:	b480      	push	{r7}
    9ec0:	af00      	add	r7, sp, #0
}
    9ec2:	bf00      	nop
    9ec4:	46bd      	mov	sp, r7
    9ec6:	bc80      	pop	{r7}
    9ec8:	4770      	bx	lr

00009eca <k_is_user_context>:
{
    9eca:	b480      	push	{r7}
    9ecc:	af00      	add	r7, sp, #0
	return false;
    9ece:	2300      	movs	r3, #0
}
    9ed0:	4618      	mov	r0, r3
    9ed2:	46bd      	mov	sp, r7
    9ed4:	bc80      	pop	{r7}
    9ed6:	4770      	bx	lr

00009ed8 <z_log_msg2_runtime_create>:
{
    9ed8:	b580      	push	{r7, lr}
    9eda:	b08a      	sub	sp, #40	; 0x28
    9edc:	af04      	add	r7, sp, #16
    9ede:	60b9      	str	r1, [r7, #8]
    9ee0:	607b      	str	r3, [r7, #4]
    9ee2:	4603      	mov	r3, r0
    9ee4:	73fb      	strb	r3, [r7, #15]
    9ee6:	4613      	mov	r3, r2
    9ee8:	73bb      	strb	r3, [r7, #14]
	va_start(ap, fmt);
    9eea:	f107 032c 	add.w	r3, r7, #44	; 0x2c
    9eee:	617b      	str	r3, [r7, #20]
	z_log_msg2_runtime_vcreate(domain_id, source, level,
    9ef0:	7bba      	ldrb	r2, [r7, #14]
    9ef2:	7bf8      	ldrb	r0, [r7, #15]
    9ef4:	697b      	ldr	r3, [r7, #20]
    9ef6:	9303      	str	r3, [sp, #12]
    9ef8:	6abb      	ldr	r3, [r7, #40]	; 0x28
    9efa:	9302      	str	r3, [sp, #8]
    9efc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    9efe:	9301      	str	r3, [sp, #4]
    9f00:	6a3b      	ldr	r3, [r7, #32]
    9f02:	9300      	str	r3, [sp, #0]
    9f04:	687b      	ldr	r3, [r7, #4]
    9f06:	68b9      	ldr	r1, [r7, #8]
    9f08:	f000 f804 	bl	9f14 <z_log_msg2_runtime_vcreate>
}
    9f0c:	bf00      	nop
    9f0e:	3718      	adds	r7, #24
    9f10:	46bd      	mov	sp, r7
    9f12:	bd80      	pop	{r7, pc}

00009f14 <z_log_msg2_runtime_vcreate>:
{
    9f14:	b580      	push	{r7, lr}
    9f16:	b088      	sub	sp, #32
    9f18:	af04      	add	r7, sp, #16
    9f1a:	60b9      	str	r1, [r7, #8]
    9f1c:	607b      	str	r3, [r7, #4]
    9f1e:	4603      	mov	r3, r0
    9f20:	73fb      	strb	r3, [r7, #15]
    9f22:	4613      	mov	r3, r2
    9f24:	73bb      	strb	r3, [r7, #14]
	z_impl_z_log_msg2_runtime_vcreate(domain_id, source, level, data, dlen, package_flags, fmt, ap);
    9f26:	7bba      	ldrb	r2, [r7, #14]
    9f28:	7bf8      	ldrb	r0, [r7, #15]
    9f2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    9f2c:	9303      	str	r3, [sp, #12]
    9f2e:	6a3b      	ldr	r3, [r7, #32]
    9f30:	9302      	str	r3, [sp, #8]
    9f32:	69fb      	ldr	r3, [r7, #28]
    9f34:	9301      	str	r3, [sp, #4]
    9f36:	69bb      	ldr	r3, [r7, #24]
    9f38:	9300      	str	r3, [sp, #0]
    9f3a:	687b      	ldr	r3, [r7, #4]
    9f3c:	68b9      	ldr	r1, [r7, #8]
    9f3e:	f7ff fe6e 	bl	9c1e <z_impl_z_log_msg2_runtime_vcreate>
}
    9f42:	bf00      	nop
    9f44:	3710      	adds	r7, #16
    9f46:	46bd      	mov	sp, r7
    9f48:	bd80      	pop	{r7, pc}

00009f4a <fault_show>:
{
    9f4a:	b480      	push	{r7}
    9f4c:	b083      	sub	sp, #12
    9f4e:	af00      	add	r7, sp, #0
    9f50:	6078      	str	r0, [r7, #4]
    9f52:	6039      	str	r1, [r7, #0]
}
    9f54:	bf00      	nop
    9f56:	370c      	adds	r7, #12
    9f58:	46bd      	mov	sp, r7
    9f5a:	bc80      	pop	{r7}
    9f5c:	4770      	bx	lr

00009f5e <memory_fault_recoverable>:
{
    9f5e:	b480      	push	{r7}
    9f60:	b083      	sub	sp, #12
    9f62:	af00      	add	r7, sp, #0
    9f64:	6078      	str	r0, [r7, #4]
    9f66:	460b      	mov	r3, r1
    9f68:	70fb      	strb	r3, [r7, #3]
	return false;
    9f6a:	2300      	movs	r3, #0
}
    9f6c:	4618      	mov	r0, r3
    9f6e:	370c      	adds	r7, #12
    9f70:	46bd      	mov	sp, r7
    9f72:	bc80      	pop	{r7}
    9f74:	4770      	bx	lr

00009f76 <z_arm_is_synchronous_svc>:
{
    9f76:	b480      	push	{r7}
    9f78:	b085      	sub	sp, #20
    9f7a:	af00      	add	r7, sp, #0
    9f7c:	6078      	str	r0, [r7, #4]
	uint16_t *ret_addr = (uint16_t *)esf->basic.pc;
    9f7e:	687b      	ldr	r3, [r7, #4]
    9f80:	699b      	ldr	r3, [r3, #24]
    9f82:	60fb      	str	r3, [r7, #12]
	uint16_t fault_insn = *(ret_addr - 1);
    9f84:	68fb      	ldr	r3, [r7, #12]
    9f86:	f833 3c02 	ldrh.w	r3, [r3, #-2]
    9f8a:	817b      	strh	r3, [r7, #10]
	if (((fault_insn & 0xff00) == _SVC_OPCODE) &&
    9f8c:	897b      	ldrh	r3, [r7, #10]
    9f8e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    9f92:	f5b3 4f5f 	cmp.w	r3, #57088	; 0xdf00
    9f96:	d105      	bne.n	9fa4 <z_arm_is_synchronous_svc+0x2e>
		((fault_insn & 0x00ff) == _SVC_CALL_RUNTIME_EXCEPT)) {
    9f98:	897b      	ldrh	r3, [r7, #10]
    9f9a:	b2db      	uxtb	r3, r3
	if (((fault_insn & 0xff00) == _SVC_OPCODE) &&
    9f9c:	2b02      	cmp	r3, #2
    9f9e:	d101      	bne.n	9fa4 <z_arm_is_synchronous_svc+0x2e>
		return true;
    9fa0:	2301      	movs	r3, #1
    9fa2:	e000      	b.n	9fa6 <z_arm_is_synchronous_svc+0x30>
	return false;
    9fa4:	2300      	movs	r3, #0
}
    9fa6:	4618      	mov	r0, r3
    9fa8:	3714      	adds	r7, #20
    9faa:	46bd      	mov	sp, r7
    9fac:	bc80      	pop	{r7}
    9fae:	4770      	bx	lr

00009fb0 <z_arm_interrupt_init>:
 * interrupt locking via BASEPRI works as expected.
 *
 */

void z_arm_interrupt_init(void)
{
    9fb0:	b580      	push	{r7, lr}
    9fb2:	b082      	sub	sp, #8
    9fb4:	af00      	add	r7, sp, #0
	int irq = 0;
    9fb6:	2300      	movs	r3, #0
    9fb8:	607b      	str	r3, [r7, #4]

	for (; irq < CONFIG_NUM_IRQS; irq++) {
    9fba:	e008      	b.n	9fce <z_arm_interrupt_init+0x1e>
		NVIC_SetPriority((IRQn_Type)irq, _IRQ_PRIO_OFFSET);
    9fbc:	687b      	ldr	r3, [r7, #4]
    9fbe:	b25b      	sxtb	r3, r3
    9fc0:	2101      	movs	r1, #1
    9fc2:	4618      	mov	r0, r3
    9fc4:	f7fa fb90 	bl	46e8 <__NVIC_SetPriority>
	for (; irq < CONFIG_NUM_IRQS; irq++) {
    9fc8:	687b      	ldr	r3, [r7, #4]
    9fca:	3301      	adds	r3, #1
    9fcc:	607b      	str	r3, [r7, #4]
    9fce:	687b      	ldr	r3, [r7, #4]
    9fd0:	2b2a      	cmp	r3, #42	; 0x2a
    9fd2:	ddf3      	ble.n	9fbc <z_arm_interrupt_init+0xc>
	}
}
    9fd4:	bf00      	nop
    9fd6:	bf00      	nop
    9fd8:	3708      	adds	r7, #8
    9fda:	46bd      	mov	sp, r7
    9fdc:	bd80      	pop	{r7, pc}

00009fde <strlen>:
 *
 * @return number of bytes in string <s>
 */

size_t strlen(const char *s)
{
    9fde:	b480      	push	{r7}
    9fe0:	b085      	sub	sp, #20
    9fe2:	af00      	add	r7, sp, #0
    9fe4:	6078      	str	r0, [r7, #4]
	size_t n = 0;
    9fe6:	2300      	movs	r3, #0
    9fe8:	60fb      	str	r3, [r7, #12]

	while (*s != '\0') {
    9fea:	e005      	b.n	9ff8 <strlen+0x1a>
		s++;
    9fec:	687b      	ldr	r3, [r7, #4]
    9fee:	3301      	adds	r3, #1
    9ff0:	607b      	str	r3, [r7, #4]
		n++;
    9ff2:	68fb      	ldr	r3, [r7, #12]
    9ff4:	3301      	adds	r3, #1
    9ff6:	60fb      	str	r3, [r7, #12]
	while (*s != '\0') {
    9ff8:	687b      	ldr	r3, [r7, #4]
    9ffa:	781b      	ldrb	r3, [r3, #0]
    9ffc:	2b00      	cmp	r3, #0
    9ffe:	d1f5      	bne.n	9fec <strlen+0xe>
	}

	return n;
    a000:	68fb      	ldr	r3, [r7, #12]
}
    a002:	4618      	mov	r0, r3
    a004:	3714      	adds	r7, #20
    a006:	46bd      	mov	sp, r7
    a008:	bc80      	pop	{r7}
    a00a:	4770      	bx	lr

0000a00c <strnlen>:
 *
 * @return number of bytes in fixed-size string <s>
 */

size_t strnlen(const char *s, size_t maxlen)
{
    a00c:	b480      	push	{r7}
    a00e:	b085      	sub	sp, #20
    a010:	af00      	add	r7, sp, #0
    a012:	6078      	str	r0, [r7, #4]
    a014:	6039      	str	r1, [r7, #0]
	size_t n = 0;
    a016:	2300      	movs	r3, #0
    a018:	60fb      	str	r3, [r7, #12]

	while (*s != '\0' && n < maxlen) {
    a01a:	e005      	b.n	a028 <strnlen+0x1c>
		s++;
    a01c:	687b      	ldr	r3, [r7, #4]
    a01e:	3301      	adds	r3, #1
    a020:	607b      	str	r3, [r7, #4]
		n++;
    a022:	68fb      	ldr	r3, [r7, #12]
    a024:	3301      	adds	r3, #1
    a026:	60fb      	str	r3, [r7, #12]
	while (*s != '\0' && n < maxlen) {
    a028:	687b      	ldr	r3, [r7, #4]
    a02a:	781b      	ldrb	r3, [r3, #0]
    a02c:	2b00      	cmp	r3, #0
    a02e:	d003      	beq.n	a038 <strnlen+0x2c>
    a030:	68fa      	ldr	r2, [r7, #12]
    a032:	683b      	ldr	r3, [r7, #0]
    a034:	429a      	cmp	r2, r3
    a036:	d3f1      	bcc.n	a01c <strnlen+0x10>
	}

	return n;
    a038:	68fb      	ldr	r3, [r7, #12]
}
    a03a:	4618      	mov	r0, r3
    a03c:	3714      	adds	r7, #20
    a03e:	46bd      	mov	sp, r7
    a040:	bc80      	pop	{r7}
    a042:	4770      	bx	lr

0000a044 <memcpy>:
 *
 * @return pointer to start of destination buffer
 */

void *memcpy(void *ZRESTRICT d, const void *ZRESTRICT s, size_t n)
{
    a044:	b480      	push	{r7}
    a046:	b08b      	sub	sp, #44	; 0x2c
    a048:	af00      	add	r7, sp, #0
    a04a:	60f8      	str	r0, [r7, #12]
    a04c:	60b9      	str	r1, [r7, #8]
    a04e:	607a      	str	r2, [r7, #4]
	/* attempt word-sized copying only if buffers have identical alignment */

	unsigned char *d_byte = (unsigned char *)d;
    a050:	68fb      	ldr	r3, [r7, #12]
    a052:	627b      	str	r3, [r7, #36]	; 0x24
	const unsigned char *s_byte = (const unsigned char *)s;
    a054:	68bb      	ldr	r3, [r7, #8]
    a056:	623b      	str	r3, [r7, #32]

#if !defined(CONFIG_MINIMAL_LIBC_OPTIMIZE_STRING_FOR_SIZE)
	const uintptr_t mask = sizeof(mem_word_t) - 1;
    a058:	2303      	movs	r3, #3
    a05a:	617b      	str	r3, [r7, #20]

	if ((((uintptr_t)d ^ (uintptr_t)s_byte) & mask) == 0) {
    a05c:	68fa      	ldr	r2, [r7, #12]
    a05e:	6a3b      	ldr	r3, [r7, #32]
    a060:	405a      	eors	r2, r3
    a062:	697b      	ldr	r3, [r7, #20]
    a064:	4013      	ands	r3, r2
    a066:	2b00      	cmp	r3, #0
    a068:	d138      	bne.n	a0dc <memcpy+0x98>

		/* do byte-sized copying until word-aligned or finished */

		while (((uintptr_t)d_byte) & mask) {
    a06a:	e00f      	b.n	a08c <memcpy+0x48>
			if (n == 0) {
    a06c:	687b      	ldr	r3, [r7, #4]
    a06e:	2b00      	cmp	r3, #0
    a070:	d101      	bne.n	a076 <memcpy+0x32>
				return d;
    a072:	68fb      	ldr	r3, [r7, #12]
    a074:	e036      	b.n	a0e4 <memcpy+0xa0>
			}
			*(d_byte++) = *(s_byte++);
    a076:	6a3a      	ldr	r2, [r7, #32]
    a078:	1c53      	adds	r3, r2, #1
    a07a:	623b      	str	r3, [r7, #32]
    a07c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    a07e:	1c59      	adds	r1, r3, #1
    a080:	6279      	str	r1, [r7, #36]	; 0x24
    a082:	7812      	ldrb	r2, [r2, #0]
    a084:	701a      	strb	r2, [r3, #0]
			n--;
    a086:	687b      	ldr	r3, [r7, #4]
    a088:	3b01      	subs	r3, #1
    a08a:	607b      	str	r3, [r7, #4]
		while (((uintptr_t)d_byte) & mask) {
    a08c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    a08e:	697b      	ldr	r3, [r7, #20]
    a090:	4013      	ands	r3, r2
    a092:	2b00      	cmp	r3, #0
    a094:	d1ea      	bne.n	a06c <memcpy+0x28>
		}

		/* do word-sized copying as long as possible */

		mem_word_t *d_word = (mem_word_t *)d_byte;
    a096:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    a098:	61fb      	str	r3, [r7, #28]
		const mem_word_t *s_word = (const mem_word_t *)s_byte;
    a09a:	6a3b      	ldr	r3, [r7, #32]
    a09c:	61bb      	str	r3, [r7, #24]

		while (n >= sizeof(mem_word_t)) {
    a09e:	e00a      	b.n	a0b6 <memcpy+0x72>
			*(d_word++) = *(s_word++);
    a0a0:	69ba      	ldr	r2, [r7, #24]
    a0a2:	1d13      	adds	r3, r2, #4
    a0a4:	61bb      	str	r3, [r7, #24]
    a0a6:	69fb      	ldr	r3, [r7, #28]
    a0a8:	1d19      	adds	r1, r3, #4
    a0aa:	61f9      	str	r1, [r7, #28]
    a0ac:	6812      	ldr	r2, [r2, #0]
    a0ae:	601a      	str	r2, [r3, #0]
			n -= sizeof(mem_word_t);
    a0b0:	687b      	ldr	r3, [r7, #4]
    a0b2:	3b04      	subs	r3, #4
    a0b4:	607b      	str	r3, [r7, #4]
		while (n >= sizeof(mem_word_t)) {
    a0b6:	687b      	ldr	r3, [r7, #4]
    a0b8:	2b03      	cmp	r3, #3
    a0ba:	d8f1      	bhi.n	a0a0 <memcpy+0x5c>
		}

		d_byte = (unsigned char *)d_word;
    a0bc:	69fb      	ldr	r3, [r7, #28]
    a0be:	627b      	str	r3, [r7, #36]	; 0x24
		s_byte = (unsigned char *)s_word;
    a0c0:	69bb      	ldr	r3, [r7, #24]
    a0c2:	623b      	str	r3, [r7, #32]
	}
#endif

	/* do byte-sized copying until finished */

	while (n > 0) {
    a0c4:	e00a      	b.n	a0dc <memcpy+0x98>
		*(d_byte++) = *(s_byte++);
    a0c6:	6a3a      	ldr	r2, [r7, #32]
    a0c8:	1c53      	adds	r3, r2, #1
    a0ca:	623b      	str	r3, [r7, #32]
    a0cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    a0ce:	1c59      	adds	r1, r3, #1
    a0d0:	6279      	str	r1, [r7, #36]	; 0x24
    a0d2:	7812      	ldrb	r2, [r2, #0]
    a0d4:	701a      	strb	r2, [r3, #0]
		n--;
    a0d6:	687b      	ldr	r3, [r7, #4]
    a0d8:	3b01      	subs	r3, #1
    a0da:	607b      	str	r3, [r7, #4]
	while (n > 0) {
    a0dc:	687b      	ldr	r3, [r7, #4]
    a0de:	2b00      	cmp	r3, #0
    a0e0:	d1f1      	bne.n	a0c6 <memcpy+0x82>
	}

	return d;
    a0e2:	68fb      	ldr	r3, [r7, #12]
}
    a0e4:	4618      	mov	r0, r3
    a0e6:	372c      	adds	r7, #44	; 0x2c
    a0e8:	46bd      	mov	sp, r7
    a0ea:	bc80      	pop	{r7}
    a0ec:	4770      	bx	lr

0000a0ee <memset>:
 *
 * @return pointer to start of buffer
 */

void *memset(void *buf, int c, size_t n)
{
    a0ee:	b480      	push	{r7}
    a0f0:	b089      	sub	sp, #36	; 0x24
    a0f2:	af00      	add	r7, sp, #0
    a0f4:	60f8      	str	r0, [r7, #12]
    a0f6:	60b9      	str	r1, [r7, #8]
    a0f8:	607a      	str	r2, [r7, #4]
	/* do byte-sized initialization until word-aligned or finished */

	unsigned char *d_byte = (unsigned char *)buf;
    a0fa:	68fb      	ldr	r3, [r7, #12]
    a0fc:	61fb      	str	r3, [r7, #28]
	unsigned char c_byte = (unsigned char)c;
    a0fe:	68bb      	ldr	r3, [r7, #8]
    a100:	75fb      	strb	r3, [r7, #23]

#if !defined(CONFIG_MINIMAL_LIBC_OPTIMIZE_STRING_FOR_SIZE)
	while (((uintptr_t)d_byte) & (sizeof(mem_word_t) - 1)) {
    a102:	e00c      	b.n	a11e <memset+0x30>
		if (n == 0) {
    a104:	687b      	ldr	r3, [r7, #4]
    a106:	2b00      	cmp	r3, #0
    a108:	d101      	bne.n	a10e <memset+0x20>
			return buf;
    a10a:	68fb      	ldr	r3, [r7, #12]
    a10c:	e035      	b.n	a17a <memset+0x8c>
		}
		*(d_byte++) = c_byte;
    a10e:	69fb      	ldr	r3, [r7, #28]
    a110:	1c5a      	adds	r2, r3, #1
    a112:	61fa      	str	r2, [r7, #28]
    a114:	7dfa      	ldrb	r2, [r7, #23]
    a116:	701a      	strb	r2, [r3, #0]
		n--;
    a118:	687b      	ldr	r3, [r7, #4]
    a11a:	3b01      	subs	r3, #1
    a11c:	607b      	str	r3, [r7, #4]
	while (((uintptr_t)d_byte) & (sizeof(mem_word_t) - 1)) {
    a11e:	69fb      	ldr	r3, [r7, #28]
    a120:	f003 0303 	and.w	r3, r3, #3
    a124:	2b00      	cmp	r3, #0
    a126:	d1ed      	bne.n	a104 <memset+0x16>
	}

	/* do word-sized initialization as long as possible */

	mem_word_t *d_word = (mem_word_t *)d_byte;
    a128:	69fb      	ldr	r3, [r7, #28]
    a12a:	61bb      	str	r3, [r7, #24]
	mem_word_t c_word = (mem_word_t)c_byte;
    a12c:	7dfb      	ldrb	r3, [r7, #23]
    a12e:	613b      	str	r3, [r7, #16]

	c_word |= c_word << 8;
    a130:	693b      	ldr	r3, [r7, #16]
    a132:	021b      	lsls	r3, r3, #8
    a134:	693a      	ldr	r2, [r7, #16]
    a136:	4313      	orrs	r3, r2
    a138:	613b      	str	r3, [r7, #16]
	c_word |= c_word << 16;
    a13a:	693b      	ldr	r3, [r7, #16]
    a13c:	041b      	lsls	r3, r3, #16
    a13e:	693a      	ldr	r2, [r7, #16]
    a140:	4313      	orrs	r3, r2
    a142:	613b      	str	r3, [r7, #16]
#if Z_MEM_WORD_T_WIDTH > 32
	c_word |= c_word << 32;
#endif

	while (n >= sizeof(mem_word_t)) {
    a144:	e007      	b.n	a156 <memset+0x68>
		*(d_word++) = c_word;
    a146:	69bb      	ldr	r3, [r7, #24]
    a148:	1d1a      	adds	r2, r3, #4
    a14a:	61ba      	str	r2, [r7, #24]
    a14c:	693a      	ldr	r2, [r7, #16]
    a14e:	601a      	str	r2, [r3, #0]
		n -= sizeof(mem_word_t);
    a150:	687b      	ldr	r3, [r7, #4]
    a152:	3b04      	subs	r3, #4
    a154:	607b      	str	r3, [r7, #4]
	while (n >= sizeof(mem_word_t)) {
    a156:	687b      	ldr	r3, [r7, #4]
    a158:	2b03      	cmp	r3, #3
    a15a:	d8f4      	bhi.n	a146 <memset+0x58>
	}

	/* do byte-sized initialization until finished */

	d_byte = (unsigned char *)d_word;
    a15c:	69bb      	ldr	r3, [r7, #24]
    a15e:	61fb      	str	r3, [r7, #28]
#endif

	while (n > 0) {
    a160:	e007      	b.n	a172 <memset+0x84>
		*(d_byte++) = c_byte;
    a162:	69fb      	ldr	r3, [r7, #28]
    a164:	1c5a      	adds	r2, r3, #1
    a166:	61fa      	str	r2, [r7, #28]
    a168:	7dfa      	ldrb	r2, [r7, #23]
    a16a:	701a      	strb	r2, [r3, #0]
		n--;
    a16c:	687b      	ldr	r3, [r7, #4]
    a16e:	3b01      	subs	r3, #1
    a170:	607b      	str	r3, [r7, #4]
	while (n > 0) {
    a172:	687b      	ldr	r3, [r7, #4]
    a174:	2b00      	cmp	r3, #0
    a176:	d1f4      	bne.n	a162 <memset+0x74>
	}

	return buf;
    a178:	68fb      	ldr	r3, [r7, #12]
}
    a17a:	4618      	mov	r0, r3
    a17c:	3724      	adds	r7, #36	; 0x24
    a17e:	46bd      	mov	sp, r7
    a180:	bc80      	pop	{r7}
    a182:	4770      	bx	lr

0000a184 <_stdout_hook_default>:
{
    a184:	b480      	push	{r7}
    a186:	b083      	sub	sp, #12
    a188:	af00      	add	r7, sp, #0
    a18a:	6078      	str	r0, [r7, #4]
	return EOF;
    a18c:	f04f 33ff 	mov.w	r3, #4294967295
}
    a190:	4618      	mov	r0, r3
    a192:	370c      	adds	r7, #12
    a194:	46bd      	mov	sp, r7
    a196:	bc80      	pop	{r7}
    a198:	4770      	bx	lr

0000a19a <ti_lm3s6965_init>:
 *
 * @return 0
 */

static int ti_lm3s6965_init(const struct device *arg)
{
    a19a:	b480      	push	{r7}
    a19c:	b083      	sub	sp, #12
    a19e:	af00      	add	r7, sp, #0
    a1a0:	6078      	str	r0, [r7, #4]

	/* Install default handler that simply resets the CPU
	 * if configured in the kernel, NOP otherwise
	 */
	NMI_INIT();
	return 0;
    a1a2:	2300      	movs	r3, #0
}
    a1a4:	4618      	mov	r0, r3
    a1a6:	370c      	adds	r7, #12
    a1a8:	46bd      	mov	sp, r7
    a1aa:	bc80      	pop	{r7}
    a1ac:	4770      	bx	lr

0000a1ae <z_impl_device_is_ready>:
 * is passed as argument.
 */
__syscall bool device_is_ready(const struct device *dev);

static inline bool z_impl_device_is_ready(const struct device *dev)
{
    a1ae:	b580      	push	{r7, lr}
    a1b0:	b082      	sub	sp, #8
    a1b2:	af00      	add	r7, sp, #0
    a1b4:	6078      	str	r0, [r7, #4]
	return z_device_is_ready(dev);
    a1b6:	6878      	ldr	r0, [r7, #4]
    a1b8:	f000 f920 	bl	a3fc <z_device_is_ready>
    a1bc:	4603      	mov	r3, r0
}
    a1be:	4618      	mov	r0, r3
    a1c0:	3708      	adds	r7, #8
    a1c2:	46bd      	mov	sp, r7
    a1c4:	bd80      	pop	{r7, pc}

0000a1c6 <device_is_ready>:

extern bool z_impl_device_is_ready(const struct device * dev);

__pinned_func
static inline bool device_is_ready(const struct device * dev)
{
    a1c6:	b580      	push	{r7, lr}
    a1c8:	b082      	sub	sp, #8
    a1ca:	af00      	add	r7, sp, #0
    a1cc:	6078      	str	r0, [r7, #4]
		union { uintptr_t x; const struct device * val; } parm0 = { .val = dev };
		return (bool) arch_syscall_invoke1(parm0.x, K_SYSCALL_DEVICE_IS_READY);
	}
#endif
	compiler_barrier();
	return z_impl_device_is_ready(dev);
    a1ce:	6878      	ldr	r0, [r7, #4]
    a1d0:	f7ff ffed 	bl	a1ae <z_impl_device_is_ready>
    a1d4:	4603      	mov	r3, r0
}
    a1d6:	4618      	mov	r0, r3
    a1d8:	3708      	adds	r7, #8
    a1da:	46bd      	mov	sp, r7
    a1dc:	bd80      	pop	{r7, pc}

0000a1de <z_impl_uart_poll_out>:
{
    a1de:	b580      	push	{r7, lr}
    a1e0:	b084      	sub	sp, #16
    a1e2:	af00      	add	r7, sp, #0
    a1e4:	6078      	str	r0, [r7, #4]
    a1e6:	460b      	mov	r3, r1
    a1e8:	70fb      	strb	r3, [r7, #3]
	const struct uart_driver_api *api =
    a1ea:	687b      	ldr	r3, [r7, #4]
    a1ec:	689b      	ldr	r3, [r3, #8]
    a1ee:	60fb      	str	r3, [r7, #12]
	api->poll_out(dev, out_char);
    a1f0:	68fb      	ldr	r3, [r7, #12]
    a1f2:	685b      	ldr	r3, [r3, #4]
    a1f4:	78fa      	ldrb	r2, [r7, #3]
    a1f6:	4611      	mov	r1, r2
    a1f8:	6878      	ldr	r0, [r7, #4]
    a1fa:	4798      	blx	r3
}
    a1fc:	bf00      	nop
    a1fe:	3710      	adds	r7, #16
    a200:	46bd      	mov	sp, r7
    a202:	bd80      	pop	{r7, pc}

0000a204 <uart_poll_out>:
{
    a204:	b580      	push	{r7, lr}
    a206:	b082      	sub	sp, #8
    a208:	af00      	add	r7, sp, #0
    a20a:	6078      	str	r0, [r7, #4]
    a20c:	460b      	mov	r3, r1
    a20e:	70fb      	strb	r3, [r7, #3]
	z_impl_uart_poll_out(dev, out_char);
    a210:	78fb      	ldrb	r3, [r7, #3]
    a212:	4619      	mov	r1, r3
    a214:	6878      	ldr	r0, [r7, #4]
    a216:	f7ff ffe2 	bl	a1de <z_impl_uart_poll_out>
}
    a21a:	bf00      	nop
    a21c:	3708      	adds	r7, #8
    a21e:	46bd      	mov	sp, r7
    a220:	bd80      	pop	{r7, pc}

0000a222 <baudrate_set>:
 * @param baudrate Baud rate
 * @param sys_clk_freq_hz System clock frequency in Hz
 */
static void baudrate_set(const struct device *dev,
			 uint32_t baudrate, uint32_t sys_clk_freq_hz)
{
    a222:	b480      	push	{r7}
    a224:	b08b      	sub	sp, #44	; 0x2c
    a226:	af00      	add	r7, sp, #0
    a228:	60f8      	str	r0, [r7, #12]
    a22a:	60b9      	str	r1, [r7, #8]
    a22c:	607a      	str	r2, [r7, #4]
	const struct uart_stellaris_config *config = dev->config;
    a22e:	68fb      	ldr	r3, [r7, #12]
    a230:	685b      	ldr	r3, [r3, #4]
    a232:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t brdi, brdf, div, rem;

	/* upon reset, the system clock uses the internal OSC @ 12MHz */

	div = (baudrate * 16U);
    a234:	68bb      	ldr	r3, [r7, #8]
    a236:	011b      	lsls	r3, r3, #4
    a238:	623b      	str	r3, [r7, #32]
	rem = sys_clk_freq_hz % div;
    a23a:	687b      	ldr	r3, [r7, #4]
    a23c:	6a3a      	ldr	r2, [r7, #32]
    a23e:	fbb3 f2f2 	udiv	r2, r3, r2
    a242:	6a39      	ldr	r1, [r7, #32]
    a244:	fb01 f202 	mul.w	r2, r1, r2
    a248:	1a9b      	subs	r3, r3, r2
    a24a:	61fb      	str	r3, [r7, #28]

	/*
	 * floating part of baud rate (LM3S6965 p.433), equivalent to
	 * [float part of (SYSCLK / div)] * 64 + 0.5
	 */
	brdf = ((((rem * 64U) << 1) / div) + 1) >> 1;
    a24c:	69fb      	ldr	r3, [r7, #28]
    a24e:	019b      	lsls	r3, r3, #6
    a250:	005a      	lsls	r2, r3, #1
    a252:	6a3b      	ldr	r3, [r7, #32]
    a254:	fbb2 f3f3 	udiv	r3, r2, r3
    a258:	3301      	adds	r3, #1
    a25a:	085b      	lsrs	r3, r3, #1
    a25c:	61bb      	str	r3, [r7, #24]

	/* integer part of baud rate (LM3S6965 p.433) */
	brdi = sys_clk_freq_hz / div;
    a25e:	687a      	ldr	r2, [r7, #4]
    a260:	6a3b      	ldr	r3, [r7, #32]
    a262:	fbb2 f3f3 	udiv	r3, r2, r3
    a266:	617b      	str	r3, [r7, #20]

	/*
	 * those registers are 32-bit, but the reserved bits should be
	 * preserved
	 */
	config->uart->ibrd = (uint16_t)(brdi & 0xffff); /* 16 bits */
    a268:	697b      	ldr	r3, [r7, #20]
    a26a:	b29a      	uxth	r2, r3
    a26c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    a26e:	681b      	ldr	r3, [r3, #0]
    a270:	625a      	str	r2, [r3, #36]	; 0x24
	config->uart->fbrd = (uint8_t)(brdf & 0x3f);    /* 6 bits */
    a272:	69bb      	ldr	r3, [r7, #24]
    a274:	b2db      	uxtb	r3, r3
    a276:	461a      	mov	r2, r3
    a278:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    a27a:	681b      	ldr	r3, [r3, #0]
    a27c:	f002 023f 	and.w	r2, r2, #63	; 0x3f
    a280:	629a      	str	r2, [r3, #40]	; 0x28
}
    a282:	bf00      	nop
    a284:	372c      	adds	r7, #44	; 0x2c
    a286:	46bd      	mov	sp, r7
    a288:	bc80      	pop	{r7}
    a28a:	4770      	bx	lr

0000a28c <enable>:
 * This routine enables the given UART.
 *
 * @param dev UART device struct
 */
static inline void enable(const struct device *dev)
{
    a28c:	b480      	push	{r7}
    a28e:	b085      	sub	sp, #20
    a290:	af00      	add	r7, sp, #0
    a292:	6078      	str	r0, [r7, #4]
	const struct uart_stellaris_config *config = dev->config;
    a294:	687b      	ldr	r3, [r7, #4]
    a296:	685b      	ldr	r3, [r3, #4]
    a298:	60fb      	str	r3, [r7, #12]

	config->uart->ctl |= UARTCTL_UARTEN;
    a29a:	68fb      	ldr	r3, [r7, #12]
    a29c:	681b      	ldr	r3, [r3, #0]
    a29e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
    a2a0:	68fb      	ldr	r3, [r7, #12]
    a2a2:	681b      	ldr	r3, [r3, #0]
    a2a4:	f042 0201 	orr.w	r2, r2, #1
    a2a8:	631a      	str	r2, [r3, #48]	; 0x30
}
    a2aa:	bf00      	nop
    a2ac:	3714      	adds	r7, #20
    a2ae:	46bd      	mov	sp, r7
    a2b0:	bc80      	pop	{r7}
    a2b2:	4770      	bx	lr

0000a2b4 <disable>:
 * This routine disables the given UART.
 *
 * @param dev UART device struct
 */
static inline void disable(const struct device *dev)
{
    a2b4:	b480      	push	{r7}
    a2b6:	b085      	sub	sp, #20
    a2b8:	af00      	add	r7, sp, #0
    a2ba:	6078      	str	r0, [r7, #4]
	const struct uart_stellaris_config *config = dev->config;
    a2bc:	687b      	ldr	r3, [r7, #4]
    a2be:	685b      	ldr	r3, [r3, #4]
    a2c0:	60fb      	str	r3, [r7, #12]

	config->uart->ctl &= ~UARTCTL_UARTEN;
    a2c2:	68fb      	ldr	r3, [r7, #12]
    a2c4:	681b      	ldr	r3, [r3, #0]
    a2c6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
    a2c8:	68fb      	ldr	r3, [r7, #12]
    a2ca:	681b      	ldr	r3, [r3, #0]
    a2cc:	f022 0201 	bic.w	r2, r2, #1
    a2d0:	631a      	str	r2, [r3, #48]	; 0x30

	/* ensure transmissions are complete */
	while (config->uart->fr & UARTFR_BUSY) {
    a2d2:	bf00      	nop
    a2d4:	68fb      	ldr	r3, [r7, #12]
    a2d6:	681b      	ldr	r3, [r3, #0]
    a2d8:	699b      	ldr	r3, [r3, #24]
    a2da:	f003 0308 	and.w	r3, r3, #8
    a2de:	2b00      	cmp	r3, #0
    a2e0:	d1f8      	bne.n	a2d4 <disable+0x20>
	}

	/* flush the FIFOs by disabling them */
	config->uart->lcrh &= ~UARTLCRH_FEN;
    a2e2:	68fb      	ldr	r3, [r7, #12]
    a2e4:	681b      	ldr	r3, [r3, #0]
    a2e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    a2e8:	68fb      	ldr	r3, [r7, #12]
    a2ea:	681b      	ldr	r3, [r3, #0]
    a2ec:	f022 0210 	bic.w	r2, r2, #16
    a2f0:	62da      	str	r2, [r3, #44]	; 0x2c
}
    a2f2:	bf00      	nop
    a2f4:	3714      	adds	r7, #20
    a2f6:	46bd      	mov	sp, r7
    a2f8:	bc80      	pop	{r7}
    a2fa:	4770      	bx	lr

0000a2fc <line_control_defaults_set>:
 * This routine sets the given UART's line controls to their default settings.
 *
 * @param dev UART device struct
 */
static inline void line_control_defaults_set(const struct device *dev)
{
    a2fc:	b480      	push	{r7}
    a2fe:	b085      	sub	sp, #20
    a300:	af00      	add	r7, sp, #0
    a302:	6078      	str	r0, [r7, #4]
	const struct uart_stellaris_config *config = dev->config;
    a304:	687b      	ldr	r3, [r7, #4]
    a306:	685b      	ldr	r3, [r3, #4]
    a308:	60fb      	str	r3, [r7, #12]

	config->uart->lcrh = LINE_CONTROL_DEFAULTS;
    a30a:	68fb      	ldr	r3, [r7, #12]
    a30c:	681b      	ldr	r3, [r3, #0]
    a30e:	2260      	movs	r2, #96	; 0x60
    a310:	62da      	str	r2, [r3, #44]	; 0x2c
}
    a312:	bf00      	nop
    a314:	3714      	adds	r7, #20
    a316:	46bd      	mov	sp, r7
    a318:	bc80      	pop	{r7}
    a31a:	4770      	bx	lr

0000a31c <uart_stellaris_init>:
 * @param dev UART device struct
 *
 * @return 0
 */
static int uart_stellaris_init(const struct device *dev)
{
    a31c:	b580      	push	{r7, lr}
    a31e:	b084      	sub	sp, #16
    a320:	af00      	add	r7, sp, #0
    a322:	6078      	str	r0, [r7, #4]
	struct uart_stellaris_dev_data_t *data = dev->data;
    a324:	687b      	ldr	r3, [r7, #4]
    a326:	691b      	ldr	r3, [r3, #16]
    a328:	60fb      	str	r3, [r7, #12]
	const struct uart_stellaris_config *config = dev->config;
    a32a:	687b      	ldr	r3, [r7, #4]
    a32c:	685b      	ldr	r3, [r3, #4]
    a32e:	60bb      	str	r3, [r7, #8]
	disable(dev);
    a330:	6878      	ldr	r0, [r7, #4]
    a332:	f7ff ffbf 	bl	a2b4 <disable>
	baudrate_set(dev, data->baud_rate,
    a336:	68fb      	ldr	r3, [r7, #12]
    a338:	6819      	ldr	r1, [r3, #0]
    a33a:	68bb      	ldr	r3, [r7, #8]
    a33c:	685b      	ldr	r3, [r3, #4]
    a33e:	461a      	mov	r2, r3
    a340:	6878      	ldr	r0, [r7, #4]
    a342:	f7ff ff6e 	bl	a222 <baudrate_set>
		     config->sys_clk_freq);
	line_control_defaults_set(dev);
    a346:	6878      	ldr	r0, [r7, #4]
    a348:	f7ff ffd8 	bl	a2fc <line_control_defaults_set>
	enable(dev);
    a34c:	6878      	ldr	r0, [r7, #4]
    a34e:	f7ff ff9d 	bl	a28c <enable>

#ifdef CONFIG_UART_INTERRUPT_DRIVEN
	config->irq_config_func(dev);
#endif

	return 0;
    a352:	2300      	movs	r3, #0
}
    a354:	4618      	mov	r0, r3
    a356:	3710      	adds	r7, #16
    a358:	46bd      	mov	sp, r7
    a35a:	bd80      	pop	{r7, pc}

0000a35c <poll_tx_ready>:
 * @param dev UART device struct
 *
 * @return 0 if ready to transmit, 1 otherwise
 */
static int poll_tx_ready(const struct device *dev)
{
    a35c:	b480      	push	{r7}
    a35e:	b085      	sub	sp, #20
    a360:	af00      	add	r7, sp, #0
    a362:	6078      	str	r0, [r7, #4]
	const struct uart_stellaris_config *config = dev->config;
    a364:	687b      	ldr	r3, [r7, #4]
    a366:	685b      	ldr	r3, [r3, #4]
    a368:	60fb      	str	r3, [r7, #12]

	return (config->uart->fr & UARTFR_TXFE);
    a36a:	68fb      	ldr	r3, [r7, #12]
    a36c:	681b      	ldr	r3, [r3, #0]
    a36e:	699b      	ldr	r3, [r3, #24]
    a370:	f003 0380 	and.w	r3, r3, #128	; 0x80
}
    a374:	4618      	mov	r0, r3
    a376:	3714      	adds	r7, #20
    a378:	46bd      	mov	sp, r7
    a37a:	bc80      	pop	{r7}
    a37c:	4770      	bx	lr

0000a37e <uart_stellaris_poll_in>:
 *
 * @return 0 if a character arrived, -1 if the input buffer if empty.
 */

static int uart_stellaris_poll_in(const struct device *dev, unsigned char *c)
{
    a37e:	b480      	push	{r7}
    a380:	b085      	sub	sp, #20
    a382:	af00      	add	r7, sp, #0
    a384:	6078      	str	r0, [r7, #4]
    a386:	6039      	str	r1, [r7, #0]
	const struct uart_stellaris_config *config = dev->config;
    a388:	687b      	ldr	r3, [r7, #4]
    a38a:	685b      	ldr	r3, [r3, #4]
    a38c:	60fb      	str	r3, [r7, #12]

	if (config->uart->fr & UARTFR_RXFE) {
    a38e:	68fb      	ldr	r3, [r7, #12]
    a390:	681b      	ldr	r3, [r3, #0]
    a392:	699b      	ldr	r3, [r3, #24]
    a394:	f003 0310 	and.w	r3, r3, #16
    a398:	2b00      	cmp	r3, #0
    a39a:	d002      	beq.n	a3a2 <uart_stellaris_poll_in+0x24>
		return (-1);
    a39c:	f04f 33ff 	mov.w	r3, #4294967295
    a3a0:	e006      	b.n	a3b0 <uart_stellaris_poll_in+0x32>
	}

	/* got a character */
	*c = (unsigned char)config->uart->dr;
    a3a2:	68fb      	ldr	r3, [r7, #12]
    a3a4:	681b      	ldr	r3, [r3, #0]
    a3a6:	681b      	ldr	r3, [r3, #0]
    a3a8:	b2da      	uxtb	r2, r3
    a3aa:	683b      	ldr	r3, [r7, #0]
    a3ac:	701a      	strb	r2, [r3, #0]

	return 0;
    a3ae:	2300      	movs	r3, #0
}
    a3b0:	4618      	mov	r0, r3
    a3b2:	3714      	adds	r7, #20
    a3b4:	46bd      	mov	sp, r7
    a3b6:	bc80      	pop	{r7}
    a3b8:	4770      	bx	lr

0000a3ba <uart_stellaris_poll_out>:
 * @param dev UART device struct
 * @param c Character to send
 */
static void uart_stellaris_poll_out(const struct device *dev,
					     unsigned char c)
{
    a3ba:	b580      	push	{r7, lr}
    a3bc:	b084      	sub	sp, #16
    a3be:	af00      	add	r7, sp, #0
    a3c0:	6078      	str	r0, [r7, #4]
    a3c2:	460b      	mov	r3, r1
    a3c4:	70fb      	strb	r3, [r7, #3]
	const struct uart_stellaris_config *config = dev->config;
    a3c6:	687b      	ldr	r3, [r7, #4]
    a3c8:	685b      	ldr	r3, [r3, #4]
    a3ca:	60fb      	str	r3, [r7, #12]

	while (!poll_tx_ready(dev)) {
    a3cc:	bf00      	nop
    a3ce:	6878      	ldr	r0, [r7, #4]
    a3d0:	f7ff ffc4 	bl	a35c <poll_tx_ready>
    a3d4:	4603      	mov	r3, r0
    a3d6:	2b00      	cmp	r3, #0
    a3d8:	d0f9      	beq.n	a3ce <uart_stellaris_poll_out+0x14>
	}

	/* send a character */
	config->uart->dr = (uint32_t)c;
    a3da:	68fb      	ldr	r3, [r7, #12]
    a3dc:	681b      	ldr	r3, [r3, #0]
    a3de:	78fa      	ldrb	r2, [r7, #3]
    a3e0:	601a      	str	r2, [r3, #0]
}
    a3e2:	bf00      	nop
    a3e4:	3710      	adds	r7, #16
    a3e6:	46bd      	mov	sp, r7
    a3e8:	bd80      	pop	{r7, pc}

0000a3ea <z_object_init>:

/**
 * @internal
 */
static inline void z_object_init(const void *obj)
{
    a3ea:	b480      	push	{r7}
    a3ec:	b083      	sub	sp, #12
    a3ee:	af00      	add	r7, sp, #0
    a3f0:	6078      	str	r0, [r7, #4]
	ARG_UNUSED(obj);
}
    a3f2:	bf00      	nop
    a3f4:	370c      	adds	r7, #12
    a3f6:	46bd      	mov	sp, r7
    a3f8:	bc80      	pop	{r7}
    a3fa:	4770      	bx	lr

0000a3fc <z_device_is_ready>:
	*devices = __device_start;
	return __device_end - __device_start;
}

bool z_device_is_ready(const struct device *dev)
{
    a3fc:	b480      	push	{r7}
    a3fe:	b083      	sub	sp, #12
    a400:	af00      	add	r7, sp, #0
    a402:	6078      	str	r0, [r7, #4]
	/*
	 * if an invalid device pointer is passed as argument, this call
	 * reports the `device` as not ready for usage.
	 */
	if (dev == NULL) {
    a404:	687b      	ldr	r3, [r7, #4]
    a406:	2b00      	cmp	r3, #0
    a408:	d101      	bne.n	a40e <z_device_is_ready+0x12>
		return false;
    a40a:	2300      	movs	r3, #0
    a40c:	e012      	b.n	a434 <z_device_is_ready+0x38>
	}

	return dev->state->initialized && (dev->state->init_res == 0U);
    a40e:	687b      	ldr	r3, [r7, #4]
    a410:	68db      	ldr	r3, [r3, #12]
    a412:	785b      	ldrb	r3, [r3, #1]
    a414:	f003 0301 	and.w	r3, r3, #1
    a418:	b2db      	uxtb	r3, r3
    a41a:	2b00      	cmp	r3, #0
    a41c:	d006      	beq.n	a42c <z_device_is_ready+0x30>
    a41e:	687b      	ldr	r3, [r7, #4]
    a420:	68db      	ldr	r3, [r3, #12]
    a422:	781b      	ldrb	r3, [r3, #0]
    a424:	2b00      	cmp	r3, #0
    a426:	d101      	bne.n	a42c <z_device_is_ready+0x30>
    a428:	2301      	movs	r3, #1
    a42a:	e000      	b.n	a42e <z_device_is_ready+0x32>
    a42c:	2300      	movs	r3, #0
    a42e:	f003 0301 	and.w	r3, r3, #1
    a432:	b2db      	uxtb	r3, r3
}
    a434:	4618      	mov	r0, r3
    a436:	370c      	adds	r7, #12
    a438:	46bd      	mov	sp, r7
    a43a:	bc80      	pop	{r7}
    a43c:	4770      	bx	lr

0000a43e <k_is_user_context>:
{
    a43e:	b480      	push	{r7}
    a440:	af00      	add	r7, sp, #0
	return false;
    a442:	2300      	movs	r3, #0
}
    a444:	4618      	mov	r0, r3
    a446:	46bd      	mov	sp, r7
    a448:	bc80      	pop	{r7}
    a44a:	4770      	bx	lr

0000a44c <k_current_get>:
{
    a44c:	b580      	push	{r7, lr}
    a44e:	af00      	add	r7, sp, #0
	return z_current_get();
    a450:	f000 f803 	bl	a45a <z_current_get>
    a454:	4603      	mov	r3, r0
}
    a456:	4618      	mov	r0, r3
    a458:	bd80      	pop	{r7, pc}

0000a45a <z_current_get>:
{
    a45a:	b580      	push	{r7, lr}
    a45c:	af00      	add	r7, sp, #0
	return z_impl_z_current_get();
    a45e:	f7fd f9a5 	bl	77ac <z_impl_z_current_get>
    a462:	4603      	mov	r3, r0
}
    a464:	4618      	mov	r0, r3
    a466:	bd80      	pop	{r7, pc}

0000a468 <k_thread_abort>:
{
    a468:	b580      	push	{r7, lr}
    a46a:	b082      	sub	sp, #8
    a46c:	af00      	add	r7, sp, #0
    a46e:	6078      	str	r0, [r7, #4]
	z_impl_k_thread_abort(thread);
    a470:	6878      	ldr	r0, [r7, #4]
    a472:	f7fa f979 	bl	4768 <z_impl_k_thread_abort>
}
    a476:	bf00      	nop
    a478:	3708      	adds	r7, #8
    a47a:	46bd      	mov	sp, r7
    a47c:	bd80      	pop	{r7, pc}

0000a47e <z_log_msg2_runtime_create>:
{
    a47e:	b580      	push	{r7, lr}
    a480:	b08a      	sub	sp, #40	; 0x28
    a482:	af04      	add	r7, sp, #16
    a484:	60b9      	str	r1, [r7, #8]
    a486:	607b      	str	r3, [r7, #4]
    a488:	4603      	mov	r3, r0
    a48a:	73fb      	strb	r3, [r7, #15]
    a48c:	4613      	mov	r3, r2
    a48e:	73bb      	strb	r3, [r7, #14]
	va_start(ap, fmt);
    a490:	f107 032c 	add.w	r3, r7, #44	; 0x2c
    a494:	617b      	str	r3, [r7, #20]
	z_log_msg2_runtime_vcreate(domain_id, source, level,
    a496:	7bba      	ldrb	r2, [r7, #14]
    a498:	7bf8      	ldrb	r0, [r7, #15]
    a49a:	697b      	ldr	r3, [r7, #20]
    a49c:	9303      	str	r3, [sp, #12]
    a49e:	6abb      	ldr	r3, [r7, #40]	; 0x28
    a4a0:	9302      	str	r3, [sp, #8]
    a4a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    a4a4:	9301      	str	r3, [sp, #4]
    a4a6:	6a3b      	ldr	r3, [r7, #32]
    a4a8:	9300      	str	r3, [sp, #0]
    a4aa:	687b      	ldr	r3, [r7, #4]
    a4ac:	68b9      	ldr	r1, [r7, #8]
    a4ae:	f000 f804 	bl	a4ba <z_log_msg2_runtime_vcreate>
}
    a4b2:	bf00      	nop
    a4b4:	3718      	adds	r7, #24
    a4b6:	46bd      	mov	sp, r7
    a4b8:	bd80      	pop	{r7, pc}

0000a4ba <z_log_msg2_runtime_vcreate>:
{
    a4ba:	b580      	push	{r7, lr}
    a4bc:	b088      	sub	sp, #32
    a4be:	af04      	add	r7, sp, #16
    a4c0:	60b9      	str	r1, [r7, #8]
    a4c2:	607b      	str	r3, [r7, #4]
    a4c4:	4603      	mov	r3, r0
    a4c6:	73fb      	strb	r3, [r7, #15]
    a4c8:	4613      	mov	r3, r2
    a4ca:	73bb      	strb	r3, [r7, #14]
	z_impl_z_log_msg2_runtime_vcreate(domain_id, source, level, data, dlen, package_flags, fmt, ap);
    a4cc:	7bba      	ldrb	r2, [r7, #14]
    a4ce:	7bf8      	ldrb	r0, [r7, #15]
    a4d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    a4d2:	9303      	str	r3, [sp, #12]
    a4d4:	6a3b      	ldr	r3, [r7, #32]
    a4d6:	9302      	str	r3, [sp, #8]
    a4d8:	69fb      	ldr	r3, [r7, #28]
    a4da:	9301      	str	r3, [sp, #4]
    a4dc:	69bb      	ldr	r3, [r7, #24]
    a4de:	9300      	str	r3, [sp, #0]
    a4e0:	687b      	ldr	r3, [r7, #4]
    a4e2:	68b9      	ldr	r1, [r7, #8]
    a4e4:	f7ff fb9b 	bl	9c1e <z_impl_z_log_msg2_runtime_vcreate>
}
    a4e8:	bf00      	nop
    a4ea:	3710      	adds	r7, #16
    a4ec:	46bd      	mov	sp, r7
    a4ee:	bd80      	pop	{r7, pc}

0000a4f0 <log_panic>:
{
    a4f0:	b580      	push	{r7, lr}
    a4f2:	af00      	add	r7, sp, #0
	z_impl_log_panic();
    a4f4:	f7f8 fbc4 	bl	2c80 <z_impl_log_panic>
}
    a4f8:	bf00      	nop
    a4fa:	bd80      	pop	{r7, pc}

0000a4fc <log_strdup>:
 *	   a buffer from the pool (see CONFIG_LOG_STRDUP_MAX_STRING). In
 *	   some configurations, the original string pointer is returned.
 */
char *z_log_strdup(const char *str);
static inline char *log_strdup(const char *str)
{
    a4fc:	b480      	push	{r7}
    a4fe:	b083      	sub	sp, #12
    a500:	af00      	add	r7, sp, #0
    a502:	6078      	str	r0, [r7, #4]
	if (IS_ENABLED(CONFIG_LOG_MODE_MINIMAL) ||
	    IS_ENABLED(CONFIG_LOG_FRONTEND) ||
	    IS_ENABLED(CONFIG_LOG2)) {
		return (char *)str;
    a504:	687b      	ldr	r3, [r7, #4]
	}

	return z_log_strdup(str);
}
    a506:	4618      	mov	r0, r3
    a508:	370c      	adds	r7, #12
    a50a:	46bd      	mov	sp, r7
    a50c:	bc80      	pop	{r7}
    a50e:	4770      	bx	lr

0000a510 <coredump>:

#else

void coredump(unsigned int reason, const z_arch_esf_t *esf,
	      struct k_thread *thread)
{
    a510:	b480      	push	{r7}
    a512:	b085      	sub	sp, #20
    a514:	af00      	add	r7, sp, #0
    a516:	60f8      	str	r0, [r7, #12]
    a518:	60b9      	str	r1, [r7, #8]
    a51a:	607a      	str	r2, [r7, #4]
}
    a51c:	bf00      	nop
    a51e:	3714      	adds	r7, #20
    a520:	46bd      	mov	sp, r7
    a522:	bc80      	pop	{r7}
    a524:	4770      	bx	lr

0000a526 <arch_system_halt>:
{
    a526:	b480      	push	{r7}
    a528:	b085      	sub	sp, #20
    a52a:	af00      	add	r7, sp, #0
    a52c:	6078      	str	r0, [r7, #4]
	__asm__ volatile(
    a52e:	f04f 0320 	mov.w	r3, #32
    a532:	f3ef 8211 	mrs	r2, BASEPRI
    a536:	f383 8812 	msr	BASEPRI_MAX, r3
    a53a:	f3bf 8f6f 	isb	sy
    a53e:	60fa      	str	r2, [r7, #12]
    a540:	60bb      	str	r3, [r7, #8]
	for (;;) {
    a542:	e7fe      	b.n	a542 <arch_system_halt+0x1c>

0000a544 <get_cpu>:
{
    a544:	b480      	push	{r7}
    a546:	af00      	add	r7, sp, #0
	return 0;
    a548:	2300      	movs	r3, #0
}
    a54a:	4618      	mov	r0, r3
    a54c:	46bd      	mov	sp, r7
    a54e:	bc80      	pop	{r7}
    a550:	4770      	bx	lr

0000a552 <Z_KERNEL_STACK_BUFFER>:
#define K_KERNEL_STACK_SIZEOF(sym) (sizeof(sym) - K_KERNEL_STACK_RESERVED)

/** @} */

static inline char *Z_KERNEL_STACK_BUFFER(k_thread_stack_t *sym)
{
    a552:	b480      	push	{r7}
    a554:	b083      	sub	sp, #12
    a556:	af00      	add	r7, sp, #0
    a558:	6078      	str	r0, [r7, #4]
	return (char *)sym + K_KERNEL_STACK_RESERVED;
    a55a:	687b      	ldr	r3, [r7, #4]
}
    a55c:	4618      	mov	r0, r3
    a55e:	370c      	adds	r7, #12
    a560:	46bd      	mov	sp, r7
    a562:	bc80      	pop	{r7}
    a564:	4770      	bx	lr

0000a566 <z_mark_thread_as_started>:
{
    a566:	b480      	push	{r7}
    a568:	b083      	sub	sp, #12
    a56a:	af00      	add	r7, sp, #0
    a56c:	6078      	str	r0, [r7, #4]
	thread->base.thread_state &= ~_THREAD_PRESTART;
    a56e:	687b      	ldr	r3, [r7, #4]
    a570:	7b5b      	ldrb	r3, [r3, #13]
    a572:	f023 0304 	bic.w	r3, r3, #4
    a576:	b2da      	uxtb	r2, r3
    a578:	687b      	ldr	r3, [r7, #4]
    a57a:	735a      	strb	r2, [r3, #13]
}
    a57c:	bf00      	nop
    a57e:	370c      	adds	r7, #12
    a580:	46bd      	mov	sp, r7
    a582:	bc80      	pop	{r7}
    a584:	4770      	bx	lr

0000a586 <gcov_static_init>:
#ifdef CONFIG_COVERAGE_GCOV
void gcov_coverage_dump(void);
void gcov_static_init(void);
#else
static inline void gcov_coverage_dump(void) { }
static inline void gcov_static_init(void) { }
    a586:	b480      	push	{r7}
    a588:	af00      	add	r7, sp, #0
    a58a:	bf00      	nop
    a58c:	46bd      	mov	sp, r7
    a58e:	bc80      	pop	{r7}
    a590:	4770      	bx	lr

0000a592 <z_early_memset>:
{
    a592:	b580      	push	{r7, lr}
    a594:	b084      	sub	sp, #16
    a596:	af00      	add	r7, sp, #0
    a598:	60f8      	str	r0, [r7, #12]
    a59a:	60b9      	str	r1, [r7, #8]
    a59c:	607a      	str	r2, [r7, #4]
	(void) memset(dst, c, n);
    a59e:	687a      	ldr	r2, [r7, #4]
    a5a0:	68b9      	ldr	r1, [r7, #8]
    a5a2:	68f8      	ldr	r0, [r7, #12]
    a5a4:	f7ff fda3 	bl	a0ee <memset>
}
    a5a8:	bf00      	nop
    a5aa:	3710      	adds	r7, #16
    a5ac:	46bd      	mov	sp, r7
    a5ae:	bd80      	pop	{r7, pc}

0000a5b0 <z_early_memcpy>:
{
    a5b0:	b580      	push	{r7, lr}
    a5b2:	b084      	sub	sp, #16
    a5b4:	af00      	add	r7, sp, #0
    a5b6:	60f8      	str	r0, [r7, #12]
    a5b8:	60b9      	str	r1, [r7, #8]
    a5ba:	607a      	str	r2, [r7, #4]
	(void) memcpy(dst, src, n);
    a5bc:	687a      	ldr	r2, [r7, #4]
    a5be:	68b9      	ldr	r1, [r7, #8]
    a5c0:	68f8      	ldr	r0, [r7, #12]
    a5c2:	f7ff fd3f 	bl	a044 <memcpy>
}
    a5c6:	bf00      	nop
    a5c8:	3710      	adds	r7, #16
    a5ca:	46bd      	mov	sp, r7
    a5cc:	bd80      	pop	{r7, pc}

0000a5ce <z_object_init>:
{
    a5ce:	b480      	push	{r7}
    a5d0:	b083      	sub	sp, #12
    a5d2:	af00      	add	r7, sp, #0
    a5d4:	6078      	str	r0, [r7, #4]
}
    a5d6:	bf00      	nop
    a5d8:	370c      	adds	r7, #12
    a5da:	46bd      	mov	sp, r7
    a5dc:	bc80      	pop	{r7}
    a5de:	4770      	bx	lr

0000a5e0 <create_free_list>:
{
    a5e0:	b480      	push	{r7}
    a5e2:	b085      	sub	sp, #20
    a5e4:	af00      	add	r7, sp, #0
    a5e6:	6078      	str	r0, [r7, #4]
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
    a5e8:	687b      	ldr	r3, [r7, #4]
    a5ea:	691b      	ldr	r3, [r3, #16]
    a5ec:	687a      	ldr	r2, [r7, #4]
    a5ee:	6952      	ldr	r2, [r2, #20]
    a5f0:	4313      	orrs	r3, r2
    a5f2:	f003 0303 	and.w	r3, r3, #3
    a5f6:	2b00      	cmp	r3, #0
    a5f8:	d002      	beq.n	a600 <create_free_list+0x20>
		return -EINVAL;
    a5fa:	f06f 0315 	mvn.w	r3, #21
    a5fe:	e01d      	b.n	a63c <create_free_list+0x5c>
	slab->free_list = NULL;
    a600:	687b      	ldr	r3, [r7, #4]
    a602:	2200      	movs	r2, #0
    a604:	619a      	str	r2, [r3, #24]
	p = slab->buffer;
    a606:	687b      	ldr	r3, [r7, #4]
    a608:	695b      	ldr	r3, [r3, #20]
    a60a:	60bb      	str	r3, [r7, #8]
	for (j = 0U; j < slab->num_blocks; j++) {
    a60c:	2300      	movs	r3, #0
    a60e:	60fb      	str	r3, [r7, #12]
    a610:	e00e      	b.n	a630 <create_free_list+0x50>
		*(char **)p = slab->free_list;
    a612:	687b      	ldr	r3, [r7, #4]
    a614:	699a      	ldr	r2, [r3, #24]
    a616:	68bb      	ldr	r3, [r7, #8]
    a618:	601a      	str	r2, [r3, #0]
		slab->free_list = p;
    a61a:	687b      	ldr	r3, [r7, #4]
    a61c:	68ba      	ldr	r2, [r7, #8]
    a61e:	619a      	str	r2, [r3, #24]
		p += slab->block_size;
    a620:	687b      	ldr	r3, [r7, #4]
    a622:	691b      	ldr	r3, [r3, #16]
    a624:	68ba      	ldr	r2, [r7, #8]
    a626:	4413      	add	r3, r2
    a628:	60bb      	str	r3, [r7, #8]
	for (j = 0U; j < slab->num_blocks; j++) {
    a62a:	68fb      	ldr	r3, [r7, #12]
    a62c:	3301      	adds	r3, #1
    a62e:	60fb      	str	r3, [r7, #12]
    a630:	687b      	ldr	r3, [r7, #4]
    a632:	68db      	ldr	r3, [r3, #12]
    a634:	68fa      	ldr	r2, [r7, #12]
    a636:	429a      	cmp	r2, r3
    a638:	d3eb      	bcc.n	a612 <create_free_list+0x32>
	return 0;
    a63a:	2300      	movs	r3, #0
}
    a63c:	4618      	mov	r0, r3
    a63e:	3714      	adds	r7, #20
    a640:	46bd      	mov	sp, r7
    a642:	bc80      	pop	{r7}
    a644:	4770      	bx	lr

0000a646 <sys_dlist_init>:
 *
 * @param list the doubly-linked list
 */

static inline void sys_dlist_init(sys_dlist_t *list)
{
    a646:	b480      	push	{r7}
    a648:	b083      	sub	sp, #12
    a64a:	af00      	add	r7, sp, #0
    a64c:	6078      	str	r0, [r7, #4]
	list->head = (sys_dnode_t *)list;
    a64e:	687b      	ldr	r3, [r7, #4]
    a650:	687a      	ldr	r2, [r7, #4]
    a652:	601a      	str	r2, [r3, #0]
	list->tail = (sys_dnode_t *)list;
    a654:	687b      	ldr	r3, [r7, #4]
    a656:	687a      	ldr	r2, [r7, #4]
    a658:	605a      	str	r2, [r3, #4]
}
    a65a:	bf00      	nop
    a65c:	370c      	adds	r7, #12
    a65e:	46bd      	mov	sp, r7
    a660:	bc80      	pop	{r7}
    a662:	4770      	bx	lr

0000a664 <sys_dnode_init>:
 *
 * @param node the node
 */

static inline void sys_dnode_init(sys_dnode_t *node)
{
    a664:	b480      	push	{r7}
    a666:	b083      	sub	sp, #12
    a668:	af00      	add	r7, sp, #0
    a66a:	6078      	str	r0, [r7, #4]
	node->next = NULL;
    a66c:	687b      	ldr	r3, [r7, #4]
    a66e:	2200      	movs	r2, #0
    a670:	601a      	str	r2, [r3, #0]
	node->prev = NULL;
    a672:	687b      	ldr	r3, [r7, #4]
    a674:	2200      	movs	r2, #0
    a676:	605a      	str	r2, [r3, #4]
}
    a678:	bf00      	nop
    a67a:	370c      	adds	r7, #12
    a67c:	46bd      	mov	sp, r7
    a67e:	bc80      	pop	{r7}
    a680:	4770      	bx	lr

0000a682 <k_is_user_context>:
{
    a682:	b480      	push	{r7}
    a684:	af00      	add	r7, sp, #0
	return false;
    a686:	2300      	movs	r3, #0
}
    a688:	4618      	mov	r0, r3
    a68a:	46bd      	mov	sp, r7
    a68c:	bc80      	pop	{r7}
    a68e:	4770      	bx	lr

0000a690 <Z_KERNEL_STACK_BUFFER>:
{
    a690:	b480      	push	{r7}
    a692:	b083      	sub	sp, #12
    a694:	af00      	add	r7, sp, #0
    a696:	6078      	str	r0, [r7, #4]
	return (char *)sym + K_KERNEL_STACK_RESERVED;
    a698:	687b      	ldr	r3, [r7, #4]
}
    a69a:	4618      	mov	r0, r3
    a69c:	370c      	adds	r7, #12
    a69e:	46bd      	mov	sp, r7
    a6a0:	bc80      	pop	{r7}
    a6a2:	4770      	bx	lr

0000a6a4 <k_thread_start>:
{
    a6a4:	b580      	push	{r7, lr}
    a6a6:	b082      	sub	sp, #8
    a6a8:	af00      	add	r7, sp, #0
    a6aa:	6078      	str	r0, [r7, #4]
	z_impl_k_thread_start(thread);
    a6ac:	6878      	ldr	r0, [r7, #4]
    a6ae:	f000 f889 	bl	a7c4 <z_impl_k_thread_start>
}
    a6b2:	bf00      	nop
    a6b4:	3708      	adds	r7, #8
    a6b6:	46bd      	mov	sp, r7
    a6b8:	bd80      	pop	{r7, pc}

0000a6ba <z_init_timeout>:
{
    a6ba:	b580      	push	{r7, lr}
    a6bc:	b082      	sub	sp, #8
    a6be:	af00      	add	r7, sp, #0
    a6c0:	6078      	str	r0, [r7, #4]
	sys_dnode_init(&to->node);
    a6c2:	687b      	ldr	r3, [r7, #4]
    a6c4:	4618      	mov	r0, r3
    a6c6:	f7ff ffcd 	bl	a664 <sys_dnode_init>
}
    a6ca:	bf00      	nop
    a6cc:	3708      	adds	r7, #8
    a6ce:	46bd      	mov	sp, r7
    a6d0:	bd80      	pop	{r7, pc}

0000a6d2 <z_init_thread_timeout>:
{
    a6d2:	b580      	push	{r7, lr}
    a6d4:	b082      	sub	sp, #8
    a6d6:	af00      	add	r7, sp, #0
    a6d8:	6078      	str	r0, [r7, #4]
	z_init_timeout(&thread_base->timeout);
    a6da:	687b      	ldr	r3, [r7, #4]
    a6dc:	3318      	adds	r3, #24
    a6de:	4618      	mov	r0, r3
    a6e0:	f7ff ffeb 	bl	a6ba <z_init_timeout>
}
    a6e4:	bf00      	nop
    a6e6:	3708      	adds	r7, #8
    a6e8:	46bd      	mov	sp, r7
    a6ea:	bd80      	pop	{r7, pc}

0000a6ec <z_waitq_init>:
#define _WAIT_Q_FOR_EACH(wq, thread_ptr) \
	SYS_DLIST_FOR_EACH_CONTAINER(&((wq)->waitq), thread_ptr, \
				     base.qnode_dlist)

static inline void z_waitq_init(_wait_q_t *w)
{
    a6ec:	b580      	push	{r7, lr}
    a6ee:	b082      	sub	sp, #8
    a6f0:	af00      	add	r7, sp, #0
    a6f2:	6078      	str	r0, [r7, #4]
	sys_dlist_init(&w->waitq);
    a6f4:	687b      	ldr	r3, [r7, #4]
    a6f6:	4618      	mov	r0, r3
    a6f8:	f7ff ffa5 	bl	a646 <sys_dlist_init>
}
    a6fc:	bf00      	nop
    a6fe:	3708      	adds	r7, #8
    a700:	46bd      	mov	sp, r7
    a702:	bd80      	pop	{r7, pc}

0000a704 <z_log_msg2_runtime_create>:
{
    a704:	b580      	push	{r7, lr}
    a706:	b08a      	sub	sp, #40	; 0x28
    a708:	af04      	add	r7, sp, #16
    a70a:	60b9      	str	r1, [r7, #8]
    a70c:	607b      	str	r3, [r7, #4]
    a70e:	4603      	mov	r3, r0
    a710:	73fb      	strb	r3, [r7, #15]
    a712:	4613      	mov	r3, r2
    a714:	73bb      	strb	r3, [r7, #14]
	va_start(ap, fmt);
    a716:	f107 032c 	add.w	r3, r7, #44	; 0x2c
    a71a:	617b      	str	r3, [r7, #20]
	z_log_msg2_runtime_vcreate(domain_id, source, level,
    a71c:	7bba      	ldrb	r2, [r7, #14]
    a71e:	7bf8      	ldrb	r0, [r7, #15]
    a720:	697b      	ldr	r3, [r7, #20]
    a722:	9303      	str	r3, [sp, #12]
    a724:	6abb      	ldr	r3, [r7, #40]	; 0x28
    a726:	9302      	str	r3, [sp, #8]
    a728:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    a72a:	9301      	str	r3, [sp, #4]
    a72c:	6a3b      	ldr	r3, [r7, #32]
    a72e:	9300      	str	r3, [sp, #0]
    a730:	687b      	ldr	r3, [r7, #4]
    a732:	68b9      	ldr	r1, [r7, #8]
    a734:	f000 f804 	bl	a740 <z_log_msg2_runtime_vcreate>
}
    a738:	bf00      	nop
    a73a:	3718      	adds	r7, #24
    a73c:	46bd      	mov	sp, r7
    a73e:	bd80      	pop	{r7, pc}

0000a740 <z_log_msg2_runtime_vcreate>:
{
    a740:	b580      	push	{r7, lr}
    a742:	b088      	sub	sp, #32
    a744:	af04      	add	r7, sp, #16
    a746:	60b9      	str	r1, [r7, #8]
    a748:	607b      	str	r3, [r7, #4]
    a74a:	4603      	mov	r3, r0
    a74c:	73fb      	strb	r3, [r7, #15]
    a74e:	4613      	mov	r3, r2
    a750:	73bb      	strb	r3, [r7, #14]
	z_impl_z_log_msg2_runtime_vcreate(domain_id, source, level, data, dlen, package_flags, fmt, ap);
    a752:	7bba      	ldrb	r2, [r7, #14]
    a754:	7bf8      	ldrb	r0, [r7, #15]
    a756:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    a758:	9303      	str	r3, [sp, #12]
    a75a:	6a3b      	ldr	r3, [r7, #32]
    a75c:	9302      	str	r3, [sp, #8]
    a75e:	69fb      	ldr	r3, [r7, #28]
    a760:	9301      	str	r3, [sp, #4]
    a762:	69bb      	ldr	r3, [r7, #24]
    a764:	9300      	str	r3, [sp, #0]
    a766:	687b      	ldr	r3, [r7, #4]
    a768:	68b9      	ldr	r1, [r7, #8]
    a76a:	f7ff fa58 	bl	9c1e <z_impl_z_log_msg2_runtime_vcreate>
}
    a76e:	bf00      	nop
    a770:	3710      	adds	r7, #16
    a772:	46bd      	mov	sp, r7
    a774:	bd80      	pop	{r7, pc}

0000a776 <k_is_in_isr>:
{
    a776:	b480      	push	{r7}
    a778:	b083      	sub	sp, #12
    a77a:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    a77c:	f3ef 8305 	mrs	r3, IPSR
    a780:	607b      	str	r3, [r7, #4]
  return(result);
    a782:	687b      	ldr	r3, [r7, #4]
    a784:	2b00      	cmp	r3, #0
    a786:	bf14      	ite	ne
    a788:	2301      	movne	r3, #1
    a78a:	2300      	moveq	r3, #0
    a78c:	b2db      	uxtb	r3, r3
}
    a78e:	4618      	mov	r0, r3
    a790:	370c      	adds	r7, #12
    a792:	46bd      	mov	sp, r7
    a794:	bc80      	pop	{r7}
    a796:	4770      	bx	lr

0000a798 <z_impl_k_thread_name_set>:
{
    a798:	b480      	push	{r7}
    a79a:	b083      	sub	sp, #12
    a79c:	af00      	add	r7, sp, #0
    a79e:	6078      	str	r0, [r7, #4]
    a7a0:	6039      	str	r1, [r7, #0]
	return -ENOSYS;
    a7a2:	f06f 0357 	mvn.w	r3, #87	; 0x57
}
    a7a6:	4618      	mov	r0, r3
    a7a8:	370c      	adds	r7, #12
    a7aa:	46bd      	mov	sp, r7
    a7ac:	bc80      	pop	{r7}
    a7ae:	4770      	bx	lr

0000a7b0 <k_thread_name_get>:
{
    a7b0:	b480      	push	{r7}
    a7b2:	b083      	sub	sp, #12
    a7b4:	af00      	add	r7, sp, #0
    a7b6:	6078      	str	r0, [r7, #4]
	return NULL;
    a7b8:	2300      	movs	r3, #0
}
    a7ba:	4618      	mov	r0, r3
    a7bc:	370c      	adds	r7, #12
    a7be:	46bd      	mov	sp, r7
    a7c0:	bc80      	pop	{r7}
    a7c2:	4770      	bx	lr

0000a7c4 <z_impl_k_thread_start>:
{
    a7c4:	b580      	push	{r7, lr}
    a7c6:	b082      	sub	sp, #8
    a7c8:	af00      	add	r7, sp, #0
    a7ca:	6078      	str	r0, [r7, #4]
	z_sched_start(thread);
    a7cc:	6878      	ldr	r0, [r7, #4]
    a7ce:	f7fc fb61 	bl	6e94 <z_sched_start>
}
    a7d2:	bf00      	nop
    a7d4:	3708      	adds	r7, #8
    a7d6:	46bd      	mov	sp, r7
    a7d8:	bd80      	pop	{r7, pc}

0000a7da <schedule_new_thread>:
{
    a7da:	b580      	push	{r7, lr}
    a7dc:	b084      	sub	sp, #16
    a7de:	af00      	add	r7, sp, #0
    a7e0:	60f8      	str	r0, [r7, #12]
    a7e2:	e9c7 2300 	strd	r2, r3, [r7]
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
    a7e6:	e9d7 2300 	ldrd	r2, r3, [r7]
    a7ea:	f04f 0000 	mov.w	r0, #0
    a7ee:	f04f 0100 	mov.w	r1, #0
    a7f2:	428b      	cmp	r3, r1
    a7f4:	bf08      	it	eq
    a7f6:	4282      	cmpeq	r2, r0
    a7f8:	d103      	bne.n	a802 <schedule_new_thread+0x28>
		k_thread_start(thread);
    a7fa:	68f8      	ldr	r0, [r7, #12]
    a7fc:	f7ff ff52 	bl	a6a4 <k_thread_start>
    a800:	e004      	b.n	a80c <schedule_new_thread+0x32>
		z_add_thread_timeout(thread, delay);
    a802:	e9d7 2300 	ldrd	r2, r3, [r7]
    a806:	68f8      	ldr	r0, [r7, #12]
    a808:	f7fb f8c0 	bl	598c <z_add_thread_timeout>
}
    a80c:	bf00      	nop
    a80e:	3710      	adds	r7, #16
    a810:	46bd      	mov	sp, r7
    a812:	bd80      	pop	{r7, pc}

0000a814 <z_impl_k_thread_create>:
{
    a814:	b580      	push	{r7, lr}
    a816:	b08a      	sub	sp, #40	; 0x28
    a818:	af06      	add	r7, sp, #24
    a81a:	60f8      	str	r0, [r7, #12]
    a81c:	60b9      	str	r1, [r7, #8]
    a81e:	607a      	str	r2, [r7, #4]
    a820:	603b      	str	r3, [r7, #0]
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
    a822:	2300      	movs	r3, #0
    a824:	9305      	str	r3, [sp, #20]
    a826:	6abb      	ldr	r3, [r7, #40]	; 0x28
    a828:	9304      	str	r3, [sp, #16]
    a82a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    a82c:	9303      	str	r3, [sp, #12]
    a82e:	6a3b      	ldr	r3, [r7, #32]
    a830:	9302      	str	r3, [sp, #8]
    a832:	69fb      	ldr	r3, [r7, #28]
    a834:	9301      	str	r3, [sp, #4]
    a836:	69bb      	ldr	r3, [r7, #24]
    a838:	9300      	str	r3, [sp, #0]
    a83a:	683b      	ldr	r3, [r7, #0]
    a83c:	687a      	ldr	r2, [r7, #4]
    a83e:	68b9      	ldr	r1, [r7, #8]
    a840:	68f8      	ldr	r0, [r7, #12]
    a842:	f7fb f90f 	bl	5a64 <z_setup_new_thread>
	if (!K_TIMEOUT_EQ(delay, K_FOREVER)) {
    a846:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
    a84a:	f04f 30ff 	mov.w	r0, #4294967295
    a84e:	f04f 31ff 	mov.w	r1, #4294967295
    a852:	428b      	cmp	r3, r1
    a854:	bf08      	it	eq
    a856:	4282      	cmpeq	r2, r0
    a858:	d004      	beq.n	a864 <z_impl_k_thread_create+0x50>
		schedule_new_thread(new_thread, delay);
    a85a:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
    a85e:	68f8      	ldr	r0, [r7, #12]
    a860:	f7ff ffbb 	bl	a7da <schedule_new_thread>
	return new_thread;
    a864:	68fb      	ldr	r3, [r7, #12]
}
    a866:	4618      	mov	r0, r3
    a868:	3710      	adds	r7, #16
    a86a:	46bd      	mov	sp, r7
    a86c:	bd80      	pop	{r7, pc}

0000a86e <z_init_thread_base>:
#endif

void z_init_thread_base(struct _thread_base *thread_base, int priority,
		       uint32_t initial_state, unsigned int options)
{
    a86e:	b580      	push	{r7, lr}
    a870:	b084      	sub	sp, #16
    a872:	af00      	add	r7, sp, #0
    a874:	60f8      	str	r0, [r7, #12]
    a876:	60b9      	str	r1, [r7, #8]
    a878:	607a      	str	r2, [r7, #4]
    a87a:	603b      	str	r3, [r7, #0]
	/* k_q_node is initialized upon first insertion in a list */
	thread_base->pended_on = NULL;
    a87c:	68fb      	ldr	r3, [r7, #12]
    a87e:	2200      	movs	r2, #0
    a880:	609a      	str	r2, [r3, #8]
	thread_base->user_options = (uint8_t)options;
    a882:	683b      	ldr	r3, [r7, #0]
    a884:	b2da      	uxtb	r2, r3
    a886:	68fb      	ldr	r3, [r7, #12]
    a888:	731a      	strb	r2, [r3, #12]
	thread_base->thread_state = (uint8_t)initial_state;
    a88a:	687b      	ldr	r3, [r7, #4]
    a88c:	b2da      	uxtb	r2, r3
    a88e:	68fb      	ldr	r3, [r7, #12]
    a890:	735a      	strb	r2, [r3, #13]

	thread_base->prio = priority;
    a892:	68bb      	ldr	r3, [r7, #8]
    a894:	b25a      	sxtb	r2, r3
    a896:	68fb      	ldr	r3, [r7, #12]
    a898:	739a      	strb	r2, [r3, #14]

	thread_base->sched_locked = 0U;
    a89a:	68fb      	ldr	r3, [r7, #12]
    a89c:	2200      	movs	r2, #0
    a89e:	73da      	strb	r2, [r3, #15]
	thread_base->slice_expired = NULL;
#endif

	/* swap_data does not need to be initialized */

	z_init_thread_timeout(thread_base);
    a8a0:	68f8      	ldr	r0, [r7, #12]
    a8a2:	f7ff ff16 	bl	a6d2 <z_init_thread_timeout>
}
    a8a6:	bf00      	nop
    a8a8:	3710      	adds	r7, #16
    a8aa:	46bd      	mov	sp, r7
    a8ac:	bd80      	pop	{r7, pc}

0000a8ae <k_cpu_idle>:
 *
 * @note In some architectures, before returning, the function unmasks interrupts
 * unconditionally.
 */
static inline void k_cpu_idle(void)
{
    a8ae:	b580      	push	{r7, lr}
    a8b0:	af00      	add	r7, sp, #0
	arch_cpu_idle();
    a8b2:	f7f8 ff95 	bl	37e0 <arch_cpu_idle>
}
    a8b6:	bf00      	nop
    a8b8:	bd80      	pop	{r7, pc}

0000a8ba <idle>:
#endif	/* CONFIG_PM */
	sys_clock_idle_exit();
}

void idle(void *unused1, void *unused2, void *unused3)
{
    a8ba:	b580      	push	{r7, lr}
    a8bc:	b086      	sub	sp, #24
    a8be:	af00      	add	r7, sp, #0
    a8c0:	60f8      	str	r0, [r7, #12]
    a8c2:	60b9      	str	r1, [r7, #8]
    a8c4:	607a      	str	r2, [r7, #4]
    a8c6:	f04f 0320 	mov.w	r3, #32
    a8ca:	f3ef 8211 	mrs	r2, BASEPRI
    a8ce:	f383 8812 	msr	BASEPRI_MAX, r3
    a8d2:	f3bf 8f6f 	isb	sy
    a8d6:	617a      	str	r2, [r7, #20]
    a8d8:	613b      	str	r3, [r7, #16]
	return key;
    a8da:	bf00      	nop
		 */
		if (k_is_pre_kernel() || !pm_system_suspend(_kernel.idle)) {
			k_cpu_idle();
		}
#else
		k_cpu_idle();
    a8dc:	f7ff ffe7 	bl	a8ae <k_cpu_idle>
		if (IS_ENABLED(CONFIG_SMP) &&
    a8e0:	e7f1      	b.n	a8c6 <idle+0xc>

0000a8e2 <sys_dlist_init>:
{
    a8e2:	b480      	push	{r7}
    a8e4:	b083      	sub	sp, #12
    a8e6:	af00      	add	r7, sp, #0
    a8e8:	6078      	str	r0, [r7, #4]
	list->head = (sys_dnode_t *)list;
    a8ea:	687b      	ldr	r3, [r7, #4]
    a8ec:	687a      	ldr	r2, [r7, #4]
    a8ee:	601a      	str	r2, [r3, #0]
	list->tail = (sys_dnode_t *)list;
    a8f0:	687b      	ldr	r3, [r7, #4]
    a8f2:	687a      	ldr	r2, [r7, #4]
    a8f4:	605a      	str	r2, [r3, #4]
}
    a8f6:	bf00      	nop
    a8f8:	370c      	adds	r7, #12
    a8fa:	46bd      	mov	sp, r7
    a8fc:	bc80      	pop	{r7}
    a8fe:	4770      	bx	lr

0000a900 <z_object_init>:
{
    a900:	b480      	push	{r7}
    a902:	b083      	sub	sp, #12
    a904:	af00      	add	r7, sp, #0
    a906:	6078      	str	r0, [r7, #4]
}
    a908:	bf00      	nop
    a90a:	370c      	adds	r7, #12
    a90c:	46bd      	mov	sp, r7
    a90e:	bc80      	pop	{r7}
    a910:	4770      	bx	lr

0000a912 <z_waitq_init>:
{
    a912:	b580      	push	{r7, lr}
    a914:	b082      	sub	sp, #8
    a916:	af00      	add	r7, sp, #0
    a918:	6078      	str	r0, [r7, #4]
	sys_dlist_init(&w->waitq);
    a91a:	687b      	ldr	r3, [r7, #4]
    a91c:	4618      	mov	r0, r3
    a91e:	f7ff ffe0 	bl	a8e2 <sys_dlist_init>
}
    a922:	bf00      	nop
    a924:	3708      	adds	r7, #8
    a926:	46bd      	mov	sp, r7
    a928:	bd80      	pop	{r7, pc}

0000a92a <z_impl_k_sem_init>:
{
    a92a:	b580      	push	{r7, lr}
    a92c:	b084      	sub	sp, #16
    a92e:	af00      	add	r7, sp, #0
    a930:	60f8      	str	r0, [r7, #12]
    a932:	60b9      	str	r1, [r7, #8]
    a934:	607a      	str	r2, [r7, #4]
	CHECKIF(limit == 0U || limit > K_SEM_MAX_LIMIT || initial_count > limit) {
    a936:	687b      	ldr	r3, [r7, #4]
    a938:	2b00      	cmp	r3, #0
    a93a:	d003      	beq.n	a944 <z_impl_k_sem_init+0x1a>
    a93c:	68ba      	ldr	r2, [r7, #8]
    a93e:	687b      	ldr	r3, [r7, #4]
    a940:	429a      	cmp	r2, r3
    a942:	d902      	bls.n	a94a <z_impl_k_sem_init+0x20>
		return -EINVAL;
    a944:	f06f 0315 	mvn.w	r3, #21
    a948:	e00d      	b.n	a966 <z_impl_k_sem_init+0x3c>
	sem->count = initial_count;
    a94a:	68fb      	ldr	r3, [r7, #12]
    a94c:	68ba      	ldr	r2, [r7, #8]
    a94e:	609a      	str	r2, [r3, #8]
	sem->limit = limit;
    a950:	68fb      	ldr	r3, [r7, #12]
    a952:	687a      	ldr	r2, [r7, #4]
    a954:	60da      	str	r2, [r3, #12]
	z_waitq_init(&sem->wait_q);
    a956:	68fb      	ldr	r3, [r7, #12]
    a958:	4618      	mov	r0, r3
    a95a:	f7ff ffda 	bl	a912 <z_waitq_init>
	z_object_init(sem);
    a95e:	68f8      	ldr	r0, [r7, #12]
    a960:	f7ff ffce 	bl	a900 <z_object_init>
	return 0;
    a964:	2300      	movs	r3, #0
}
    a966:	4618      	mov	r0, r3
    a968:	3710      	adds	r7, #16
    a96a:	46bd      	mov	sp, r7
    a96c:	bd80      	pop	{r7, pc}

0000a96e <handle_poll_events>:
{
    a96e:	b480      	push	{r7}
    a970:	b083      	sub	sp, #12
    a972:	af00      	add	r7, sp, #0
    a974:	6078      	str	r0, [r7, #4]
}
    a976:	bf00      	nop
    a978:	370c      	adds	r7, #12
    a97a:	46bd      	mov	sp, r7
    a97c:	bc80      	pop	{r7}
    a97e:	4770      	bx	lr

0000a980 <sys_dlist_init>:
{
    a980:	b480      	push	{r7}
    a982:	b083      	sub	sp, #12
    a984:	af00      	add	r7, sp, #0
    a986:	6078      	str	r0, [r7, #4]
	list->head = (sys_dnode_t *)list;
    a988:	687b      	ldr	r3, [r7, #4]
    a98a:	687a      	ldr	r2, [r7, #4]
    a98c:	601a      	str	r2, [r3, #0]
	list->tail = (sys_dnode_t *)list;
    a98e:	687b      	ldr	r3, [r7, #4]
    a990:	687a      	ldr	r2, [r7, #4]
    a992:	605a      	str	r2, [r3, #4]
}
    a994:	bf00      	nop
    a996:	370c      	adds	r7, #12
    a998:	46bd      	mov	sp, r7
    a99a:	bc80      	pop	{r7}
    a99c:	4770      	bx	lr

0000a99e <sys_dnode_init>:
{
    a99e:	b480      	push	{r7}
    a9a0:	b083      	sub	sp, #12
    a9a2:	af00      	add	r7, sp, #0
    a9a4:	6078      	str	r0, [r7, #4]
	node->next = NULL;
    a9a6:	687b      	ldr	r3, [r7, #4]
    a9a8:	2200      	movs	r2, #0
    a9aa:	601a      	str	r2, [r3, #0]
	node->prev = NULL;
    a9ac:	687b      	ldr	r3, [r7, #4]
    a9ae:	2200      	movs	r2, #0
    a9b0:	605a      	str	r2, [r3, #4]
}
    a9b2:	bf00      	nop
    a9b4:	370c      	adds	r7, #12
    a9b6:	46bd      	mov	sp, r7
    a9b8:	bc80      	pop	{r7}
    a9ba:	4770      	bx	lr

0000a9bc <sys_dnode_is_linked>:
 *
 * @return true if node is linked into a list, false if it is not
 */

static inline bool sys_dnode_is_linked(const sys_dnode_t *node)
{
    a9bc:	b480      	push	{r7}
    a9be:	b083      	sub	sp, #12
    a9c0:	af00      	add	r7, sp, #0
    a9c2:	6078      	str	r0, [r7, #4]
	return node->next != NULL;
    a9c4:	687b      	ldr	r3, [r7, #4]
    a9c6:	681b      	ldr	r3, [r3, #0]
    a9c8:	2b00      	cmp	r3, #0
    a9ca:	bf14      	ite	ne
    a9cc:	2301      	movne	r3, #1
    a9ce:	2300      	moveq	r3, #0
    a9d0:	b2db      	uxtb	r3, r3
}
    a9d2:	4618      	mov	r0, r3
    a9d4:	370c      	adds	r7, #12
    a9d6:	46bd      	mov	sp, r7
    a9d8:	bc80      	pop	{r7}
    a9da:	4770      	bx	lr

0000a9dc <sys_dlist_is_empty>:
 *
 * @return true if empty, false otherwise
 */

static inline bool sys_dlist_is_empty(sys_dlist_t *list)
{
    a9dc:	b480      	push	{r7}
    a9de:	b083      	sub	sp, #12
    a9e0:	af00      	add	r7, sp, #0
    a9e2:	6078      	str	r0, [r7, #4]
	return list->head == list;
    a9e4:	687b      	ldr	r3, [r7, #4]
    a9e6:	681b      	ldr	r3, [r3, #0]
    a9e8:	687a      	ldr	r2, [r7, #4]
    a9ea:	429a      	cmp	r2, r3
    a9ec:	bf0c      	ite	eq
    a9ee:	2301      	moveq	r3, #1
    a9f0:	2300      	movne	r3, #0
    a9f2:	b2db      	uxtb	r3, r3
}
    a9f4:	4618      	mov	r0, r3
    a9f6:	370c      	adds	r7, #12
    a9f8:	46bd      	mov	sp, r7
    a9fa:	bc80      	pop	{r7}
    a9fc:	4770      	bx	lr

0000a9fe <sys_dlist_peek_head>:
 *
 * @return a pointer to the head element, NULL if list is empty
 */

static inline sys_dnode_t *sys_dlist_peek_head(sys_dlist_t *list)
{
    a9fe:	b580      	push	{r7, lr}
    aa00:	b082      	sub	sp, #8
    aa02:	af00      	add	r7, sp, #0
    aa04:	6078      	str	r0, [r7, #4]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    aa06:	6878      	ldr	r0, [r7, #4]
    aa08:	f7ff ffe8 	bl	a9dc <sys_dlist_is_empty>
    aa0c:	4603      	mov	r3, r0
    aa0e:	2b00      	cmp	r3, #0
    aa10:	d102      	bne.n	aa18 <sys_dlist_peek_head+0x1a>
    aa12:	687b      	ldr	r3, [r7, #4]
    aa14:	681b      	ldr	r3, [r3, #0]
    aa16:	e000      	b.n	aa1a <sys_dlist_peek_head+0x1c>
    aa18:	2300      	movs	r3, #0
}
    aa1a:	4618      	mov	r0, r3
    aa1c:	3708      	adds	r7, #8
    aa1e:	46bd      	mov	sp, r7
    aa20:	bd80      	pop	{r7, pc}

0000aa22 <sys_dlist_peek_next_no_check>:
 * @return a pointer to the next element from a node, NULL if node is the tail
 */

static inline sys_dnode_t *sys_dlist_peek_next_no_check(sys_dlist_t *list,
							sys_dnode_t *node)
{
    aa22:	b480      	push	{r7}
    aa24:	b083      	sub	sp, #12
    aa26:	af00      	add	r7, sp, #0
    aa28:	6078      	str	r0, [r7, #4]
    aa2a:	6039      	str	r1, [r7, #0]
	return (node == list->tail) ? NULL : node->next;
    aa2c:	687b      	ldr	r3, [r7, #4]
    aa2e:	685b      	ldr	r3, [r3, #4]
    aa30:	683a      	ldr	r2, [r7, #0]
    aa32:	429a      	cmp	r2, r3
    aa34:	d002      	beq.n	aa3c <sys_dlist_peek_next_no_check+0x1a>
    aa36:	683b      	ldr	r3, [r7, #0]
    aa38:	681b      	ldr	r3, [r3, #0]
    aa3a:	e000      	b.n	aa3e <sys_dlist_peek_next_no_check+0x1c>
    aa3c:	2300      	movs	r3, #0
}
    aa3e:	4618      	mov	r0, r3
    aa40:	370c      	adds	r7, #12
    aa42:	46bd      	mov	sp, r7
    aa44:	bc80      	pop	{r7}
    aa46:	4770      	bx	lr

0000aa48 <sys_dlist_peek_next>:
 * or NULL (when node comes from reading the head of an empty list).
 */

static inline sys_dnode_t *sys_dlist_peek_next(sys_dlist_t *list,
					       sys_dnode_t *node)
{
    aa48:	b580      	push	{r7, lr}
    aa4a:	b082      	sub	sp, #8
    aa4c:	af00      	add	r7, sp, #0
    aa4e:	6078      	str	r0, [r7, #4]
    aa50:	6039      	str	r1, [r7, #0]
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    aa52:	683b      	ldr	r3, [r7, #0]
    aa54:	2b00      	cmp	r3, #0
    aa56:	d005      	beq.n	aa64 <sys_dlist_peek_next+0x1c>
    aa58:	6839      	ldr	r1, [r7, #0]
    aa5a:	6878      	ldr	r0, [r7, #4]
    aa5c:	f7ff ffe1 	bl	aa22 <sys_dlist_peek_next_no_check>
    aa60:	4603      	mov	r3, r0
    aa62:	e000      	b.n	aa66 <sys_dlist_peek_next+0x1e>
    aa64:	2300      	movs	r3, #0
}
    aa66:	4618      	mov	r0, r3
    aa68:	3708      	adds	r7, #8
    aa6a:	46bd      	mov	sp, r7
    aa6c:	bd80      	pop	{r7, pc}

0000aa6e <sys_dlist_append>:
 * @param list the doubly-linked list to operate on
 * @param node the element to append
 */

static inline void sys_dlist_append(sys_dlist_t *list, sys_dnode_t *node)
{
    aa6e:	b480      	push	{r7}
    aa70:	b085      	sub	sp, #20
    aa72:	af00      	add	r7, sp, #0
    aa74:	6078      	str	r0, [r7, #4]
    aa76:	6039      	str	r1, [r7, #0]
	sys_dnode_t *const tail = list->tail;
    aa78:	687b      	ldr	r3, [r7, #4]
    aa7a:	685b      	ldr	r3, [r3, #4]
    aa7c:	60fb      	str	r3, [r7, #12]

	node->next = list;
    aa7e:	683b      	ldr	r3, [r7, #0]
    aa80:	687a      	ldr	r2, [r7, #4]
    aa82:	601a      	str	r2, [r3, #0]
	node->prev = tail;
    aa84:	683b      	ldr	r3, [r7, #0]
    aa86:	68fa      	ldr	r2, [r7, #12]
    aa88:	605a      	str	r2, [r3, #4]

	tail->next = node;
    aa8a:	68fb      	ldr	r3, [r7, #12]
    aa8c:	683a      	ldr	r2, [r7, #0]
    aa8e:	601a      	str	r2, [r3, #0]
	list->tail = node;
    aa90:	687b      	ldr	r3, [r7, #4]
    aa92:	683a      	ldr	r2, [r7, #0]
    aa94:	605a      	str	r2, [r3, #4]
}
    aa96:	bf00      	nop
    aa98:	3714      	adds	r7, #20
    aa9a:	46bd      	mov	sp, r7
    aa9c:	bc80      	pop	{r7}
    aa9e:	4770      	bx	lr

0000aaa0 <sys_dlist_insert>:
 *
 * @param successor the position before which "node" will be inserted
 * @param node the element to insert
 */
static inline void sys_dlist_insert(sys_dnode_t *successor, sys_dnode_t *node)
{
    aaa0:	b480      	push	{r7}
    aaa2:	b085      	sub	sp, #20
    aaa4:	af00      	add	r7, sp, #0
    aaa6:	6078      	str	r0, [r7, #4]
    aaa8:	6039      	str	r1, [r7, #0]
	sys_dnode_t *const prev = successor->prev;
    aaaa:	687b      	ldr	r3, [r7, #4]
    aaac:	685b      	ldr	r3, [r3, #4]
    aaae:	60fb      	str	r3, [r7, #12]

	node->prev = prev;
    aab0:	683b      	ldr	r3, [r7, #0]
    aab2:	68fa      	ldr	r2, [r7, #12]
    aab4:	605a      	str	r2, [r3, #4]
	node->next = successor;
    aab6:	683b      	ldr	r3, [r7, #0]
    aab8:	687a      	ldr	r2, [r7, #4]
    aaba:	601a      	str	r2, [r3, #0]
	prev->next = node;
    aabc:	68fb      	ldr	r3, [r7, #12]
    aabe:	683a      	ldr	r2, [r7, #0]
    aac0:	601a      	str	r2, [r3, #0]
	successor->prev = node;
    aac2:	687b      	ldr	r3, [r7, #4]
    aac4:	683a      	ldr	r2, [r7, #0]
    aac6:	605a      	str	r2, [r3, #4]
}
    aac8:	bf00      	nop
    aaca:	3714      	adds	r7, #20
    aacc:	46bd      	mov	sp, r7
    aace:	bc80      	pop	{r7}
    aad0:	4770      	bx	lr

0000aad2 <sys_dlist_remove>:
 *
 * @param node the node to remove
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
    aad2:	b580      	push	{r7, lr}
    aad4:	b084      	sub	sp, #16
    aad6:	af00      	add	r7, sp, #0
    aad8:	6078      	str	r0, [r7, #4]
	sys_dnode_t *const prev = node->prev;
    aada:	687b      	ldr	r3, [r7, #4]
    aadc:	685b      	ldr	r3, [r3, #4]
    aade:	60fb      	str	r3, [r7, #12]
	sys_dnode_t *const next = node->next;
    aae0:	687b      	ldr	r3, [r7, #4]
    aae2:	681b      	ldr	r3, [r3, #0]
    aae4:	60bb      	str	r3, [r7, #8]

	prev->next = next;
    aae6:	68fb      	ldr	r3, [r7, #12]
    aae8:	68ba      	ldr	r2, [r7, #8]
    aaea:	601a      	str	r2, [r3, #0]
	next->prev = prev;
    aaec:	68bb      	ldr	r3, [r7, #8]
    aaee:	68fa      	ldr	r2, [r7, #12]
    aaf0:	605a      	str	r2, [r3, #4]
	sys_dnode_init(node);
    aaf2:	6878      	ldr	r0, [r7, #4]
    aaf4:	f7ff ff53 	bl	a99e <sys_dnode_init>
}
    aaf8:	bf00      	nop
    aafa:	3710      	adds	r7, #16
    aafc:	46bd      	mov	sp, r7
    aafe:	bd80      	pop	{r7, pc}

0000ab00 <k_is_user_context>:
{
    ab00:	b480      	push	{r7}
    ab02:	af00      	add	r7, sp, #0
	return false;
    ab04:	2300      	movs	r3, #0
}
    ab06:	4618      	mov	r0, r3
    ab08:	46bd      	mov	sp, r7
    ab0a:	bc80      	pop	{r7}
    ab0c:	4770      	bx	lr

0000ab0e <arch_cohere_stacks>:
 */
#ifndef CONFIG_KERNEL_COHERENCE
static inline void arch_cohere_stacks(struct k_thread *old_thread,
				      void *old_switch_handle,
				      struct k_thread *new_thread)
{
    ab0e:	b480      	push	{r7}
    ab10:	b085      	sub	sp, #20
    ab12:	af00      	add	r7, sp, #0
    ab14:	60f8      	str	r0, [r7, #12]
    ab16:	60b9      	str	r1, [r7, #8]
    ab18:	607a      	str	r2, [r7, #4]
	ARG_UNUSED(old_thread);
	ARG_UNUSED(old_switch_handle);
	ARG_UNUSED(new_thread);
}
    ab1a:	bf00      	nop
    ab1c:	3714      	adds	r7, #20
    ab1e:	46bd      	mov	sp, r7
    ab20:	bc80      	pop	{r7}
    ab22:	4770      	bx	lr

0000ab24 <k_yield>:
{
    ab24:	b580      	push	{r7, lr}
    ab26:	af00      	add	r7, sp, #0
	z_impl_k_yield();
    ab28:	f7fc fcfe 	bl	7528 <z_impl_k_yield>
}
    ab2c:	bf00      	nop
    ab2e:	bd80      	pop	{r7, pc}

0000ab30 <k_thread_suspend>:
{
    ab30:	b580      	push	{r7, lr}
    ab32:	b082      	sub	sp, #8
    ab34:	af00      	add	r7, sp, #0
    ab36:	6078      	str	r0, [r7, #4]
	z_impl_k_thread_suspend(thread);
    ab38:	6878      	ldr	r0, [r7, #4]
    ab3a:	f7fc f9e1 	bl	6f00 <z_impl_k_thread_suspend>
}
    ab3e:	bf00      	nop
    ab40:	3708      	adds	r7, #8
    ab42:	46bd      	mov	sp, r7
    ab44:	bd80      	pop	{r7, pc}

0000ab46 <z_is_inactive_timeout>:
{
    ab46:	b580      	push	{r7, lr}
    ab48:	b082      	sub	sp, #8
    ab4a:	af00      	add	r7, sp, #0
    ab4c:	6078      	str	r0, [r7, #4]
	return !sys_dnode_is_linked(&to->node);
    ab4e:	687b      	ldr	r3, [r7, #4]
    ab50:	4618      	mov	r0, r3
    ab52:	f7ff ff33 	bl	a9bc <sys_dnode_is_linked>
    ab56:	4603      	mov	r3, r0
    ab58:	2b00      	cmp	r3, #0
    ab5a:	bf14      	ite	ne
    ab5c:	2301      	movne	r3, #1
    ab5e:	2300      	moveq	r3, #0
    ab60:	b2db      	uxtb	r3, r3
    ab62:	f083 0301 	eor.w	r3, r3, #1
    ab66:	b2db      	uxtb	r3, r3
    ab68:	f003 0301 	and.w	r3, r3, #1
    ab6c:	b2db      	uxtb	r3, r3
}
    ab6e:	4618      	mov	r0, r3
    ab70:	3708      	adds	r7, #8
    ab72:	46bd      	mov	sp, r7
    ab74:	bd80      	pop	{r7, pc}

0000ab76 <z_abort_thread_timeout>:

static inline int z_abort_thread_timeout(struct k_thread *thread)
{
    ab76:	b580      	push	{r7, lr}
    ab78:	b082      	sub	sp, #8
    ab7a:	af00      	add	r7, sp, #0
    ab7c:	6078      	str	r0, [r7, #4]
	return z_abort_timeout(&thread->base.timeout);
    ab7e:	687b      	ldr	r3, [r7, #4]
    ab80:	3318      	adds	r3, #24
    ab82:	4618      	mov	r0, r3
    ab84:	f7fd f892 	bl	7cac <z_abort_timeout>
    ab88:	4603      	mov	r3, r0
}
    ab8a:	4618      	mov	r0, r3
    ab8c:	3708      	adds	r7, #8
    ab8e:	46bd      	mov	sp, r7
    ab90:	bd80      	pop	{r7, pc}

0000ab92 <z_reschedule_unlocked>:
{
    ab92:	b580      	push	{r7, lr}
    ab94:	b082      	sub	sp, #8
    ab96:	af00      	add	r7, sp, #0
	__asm__ volatile(
    ab98:	f04f 0320 	mov.w	r3, #32
    ab9c:	f3ef 8211 	mrs	r2, BASEPRI
    aba0:	f383 8812 	msr	BASEPRI_MAX, r3
    aba4:	f3bf 8f6f 	isb	sy
    aba8:	607a      	str	r2, [r7, #4]
    abaa:	603b      	str	r3, [r7, #0]
	return key;
    abac:	687b      	ldr	r3, [r7, #4]
	(void) z_reschedule_irqlock(arch_irq_lock());
    abae:	4618      	mov	r0, r3
    abb0:	f000 fa88 	bl	b0c4 <z_reschedule_irqlock>
}
    abb4:	bf00      	nop
    abb6:	3708      	adds	r7, #8
    abb8:	46bd      	mov	sp, r7
    abba:	bd80      	pop	{r7, pc}

0000abbc <z_is_thread_prevented_from_running>:
{
    abbc:	b480      	push	{r7}
    abbe:	b085      	sub	sp, #20
    abc0:	af00      	add	r7, sp, #0
    abc2:	6078      	str	r0, [r7, #4]
	uint8_t state = thread->base.thread_state;
    abc4:	687b      	ldr	r3, [r7, #4]
    abc6:	7b5b      	ldrb	r3, [r3, #13]
    abc8:	73fb      	strb	r3, [r7, #15]
	return (state & (_THREAD_PENDING | _THREAD_PRESTART | _THREAD_DEAD |
    abca:	7bfb      	ldrb	r3, [r7, #15]
    abcc:	f003 031f 	and.w	r3, r3, #31
			 _THREAD_DUMMY | _THREAD_SUSPENDED)) != 0U;
    abd0:	2b00      	cmp	r3, #0
    abd2:	bf14      	ite	ne
    abd4:	2301      	movne	r3, #1
    abd6:	2300      	moveq	r3, #0
    abd8:	b2db      	uxtb	r3, r3
}
    abda:	4618      	mov	r0, r3
    abdc:	3714      	adds	r7, #20
    abde:	46bd      	mov	sp, r7
    abe0:	bc80      	pop	{r7}
    abe2:	4770      	bx	lr

0000abe4 <z_is_thread_timeout_active>:
{
    abe4:	b580      	push	{r7, lr}
    abe6:	b082      	sub	sp, #8
    abe8:	af00      	add	r7, sp, #0
    abea:	6078      	str	r0, [r7, #4]
	return !z_is_inactive_timeout(&thread->base.timeout);
    abec:	687b      	ldr	r3, [r7, #4]
    abee:	3318      	adds	r3, #24
    abf0:	4618      	mov	r0, r3
    abf2:	f7ff ffa8 	bl	ab46 <z_is_inactive_timeout>
    abf6:	4603      	mov	r3, r0
    abf8:	2b00      	cmp	r3, #0
    abfa:	bf14      	ite	ne
    abfc:	2301      	movne	r3, #1
    abfe:	2300      	moveq	r3, #0
    ac00:	b2db      	uxtb	r3, r3
    ac02:	f083 0301 	eor.w	r3, r3, #1
    ac06:	b2db      	uxtb	r3, r3
    ac08:	f003 0301 	and.w	r3, r3, #1
    ac0c:	b2db      	uxtb	r3, r3
}
    ac0e:	4618      	mov	r0, r3
    ac10:	3708      	adds	r7, #8
    ac12:	46bd      	mov	sp, r7
    ac14:	bd80      	pop	{r7, pc}

0000ac16 <z_is_thread_ready>:
{
    ac16:	b580      	push	{r7, lr}
    ac18:	b082      	sub	sp, #8
    ac1a:	af00      	add	r7, sp, #0
    ac1c:	6078      	str	r0, [r7, #4]
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
    ac1e:	6878      	ldr	r0, [r7, #4]
    ac20:	f7ff ffcc 	bl	abbc <z_is_thread_prevented_from_running>
    ac24:	4603      	mov	r3, r0
    ac26:	f083 0301 	eor.w	r3, r3, #1
    ac2a:	b2db      	uxtb	r3, r3
    ac2c:	2b00      	cmp	r3, #0
    ac2e:	d00a      	beq.n	ac46 <z_is_thread_ready+0x30>
		 z_is_thread_timeout_active(thread));
    ac30:	6878      	ldr	r0, [r7, #4]
    ac32:	f7ff ffd7 	bl	abe4 <z_is_thread_timeout_active>
    ac36:	4603      	mov	r3, r0
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
    ac38:	f083 0301 	eor.w	r3, r3, #1
    ac3c:	b2db      	uxtb	r3, r3
    ac3e:	2b00      	cmp	r3, #0
    ac40:	d001      	beq.n	ac46 <z_is_thread_ready+0x30>
    ac42:	2301      	movs	r3, #1
    ac44:	e000      	b.n	ac48 <z_is_thread_ready+0x32>
    ac46:	2300      	movs	r3, #0
    ac48:	f003 0301 	and.w	r3, r3, #1
    ac4c:	b2db      	uxtb	r3, r3
}
    ac4e:	4618      	mov	r0, r3
    ac50:	3708      	adds	r7, #8
    ac52:	46bd      	mov	sp, r7
    ac54:	bd80      	pop	{r7, pc}

0000ac56 <z_has_thread_started>:
{
    ac56:	b480      	push	{r7}
    ac58:	b083      	sub	sp, #12
    ac5a:	af00      	add	r7, sp, #0
    ac5c:	6078      	str	r0, [r7, #4]
	return (thread->base.thread_state & _THREAD_PRESTART) == 0U;
    ac5e:	687b      	ldr	r3, [r7, #4]
    ac60:	7b5b      	ldrb	r3, [r3, #13]
    ac62:	f003 0304 	and.w	r3, r3, #4
    ac66:	2b00      	cmp	r3, #0
    ac68:	bf0c      	ite	eq
    ac6a:	2301      	moveq	r3, #1
    ac6c:	2300      	movne	r3, #0
    ac6e:	b2db      	uxtb	r3, r3
}
    ac70:	4618      	mov	r0, r3
    ac72:	370c      	adds	r7, #12
    ac74:	46bd      	mov	sp, r7
    ac76:	bc80      	pop	{r7}
    ac78:	4770      	bx	lr

0000ac7a <z_is_thread_state_set>:
{
    ac7a:	b480      	push	{r7}
    ac7c:	b083      	sub	sp, #12
    ac7e:	af00      	add	r7, sp, #0
    ac80:	6078      	str	r0, [r7, #4]
    ac82:	6039      	str	r1, [r7, #0]
	return (thread->base.thread_state & state) != 0U;
    ac84:	687b      	ldr	r3, [r7, #4]
    ac86:	7b5b      	ldrb	r3, [r3, #13]
    ac88:	461a      	mov	r2, r3
    ac8a:	683b      	ldr	r3, [r7, #0]
    ac8c:	4013      	ands	r3, r2
    ac8e:	2b00      	cmp	r3, #0
    ac90:	bf14      	ite	ne
    ac92:	2301      	movne	r3, #1
    ac94:	2300      	moveq	r3, #0
    ac96:	b2db      	uxtb	r3, r3
}
    ac98:	4618      	mov	r0, r3
    ac9a:	370c      	adds	r7, #12
    ac9c:	46bd      	mov	sp, r7
    ac9e:	bc80      	pop	{r7}
    aca0:	4770      	bx	lr

0000aca2 <z_is_thread_queued>:
{
    aca2:	b580      	push	{r7, lr}
    aca4:	b082      	sub	sp, #8
    aca6:	af00      	add	r7, sp, #0
    aca8:	6078      	str	r0, [r7, #4]
	return z_is_thread_state_set(thread, _THREAD_QUEUED);
    acaa:	2180      	movs	r1, #128	; 0x80
    acac:	6878      	ldr	r0, [r7, #4]
    acae:	f7ff ffe4 	bl	ac7a <z_is_thread_state_set>
    acb2:	4603      	mov	r3, r0
}
    acb4:	4618      	mov	r0, r3
    acb6:	3708      	adds	r7, #8
    acb8:	46bd      	mov	sp, r7
    acba:	bd80      	pop	{r7, pc}

0000acbc <z_mark_thread_as_suspended>:
{
    acbc:	b480      	push	{r7}
    acbe:	b083      	sub	sp, #12
    acc0:	af00      	add	r7, sp, #0
    acc2:	6078      	str	r0, [r7, #4]
	thread->base.thread_state |= _THREAD_SUSPENDED;
    acc4:	687b      	ldr	r3, [r7, #4]
    acc6:	7b5b      	ldrb	r3, [r3, #13]
    acc8:	f043 0310 	orr.w	r3, r3, #16
    accc:	b2da      	uxtb	r2, r3
    acce:	687b      	ldr	r3, [r7, #4]
    acd0:	735a      	strb	r2, [r3, #13]
}
    acd2:	bf00      	nop
    acd4:	370c      	adds	r7, #12
    acd6:	46bd      	mov	sp, r7
    acd8:	bc80      	pop	{r7}
    acda:	4770      	bx	lr

0000acdc <z_mark_thread_as_not_suspended>:
{
    acdc:	b480      	push	{r7}
    acde:	b083      	sub	sp, #12
    ace0:	af00      	add	r7, sp, #0
    ace2:	6078      	str	r0, [r7, #4]
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
    ace4:	687b      	ldr	r3, [r7, #4]
    ace6:	7b5b      	ldrb	r3, [r3, #13]
    ace8:	f023 0310 	bic.w	r3, r3, #16
    acec:	b2da      	uxtb	r2, r3
    acee:	687b      	ldr	r3, [r7, #4]
    acf0:	735a      	strb	r2, [r3, #13]
}
    acf2:	bf00      	nop
    acf4:	370c      	adds	r7, #12
    acf6:	46bd      	mov	sp, r7
    acf8:	bc80      	pop	{r7}
    acfa:	4770      	bx	lr

0000acfc <z_mark_thread_as_started>:
{
    acfc:	b480      	push	{r7}
    acfe:	b083      	sub	sp, #12
    ad00:	af00      	add	r7, sp, #0
    ad02:	6078      	str	r0, [r7, #4]
	thread->base.thread_state &= ~_THREAD_PRESTART;
    ad04:	687b      	ldr	r3, [r7, #4]
    ad06:	7b5b      	ldrb	r3, [r3, #13]
    ad08:	f023 0304 	bic.w	r3, r3, #4
    ad0c:	b2da      	uxtb	r2, r3
    ad0e:	687b      	ldr	r3, [r7, #4]
    ad10:	735a      	strb	r2, [r3, #13]
}
    ad12:	bf00      	nop
    ad14:	370c      	adds	r7, #12
    ad16:	46bd      	mov	sp, r7
    ad18:	bc80      	pop	{r7}
    ad1a:	4770      	bx	lr

0000ad1c <z_mark_thread_as_pending>:
{
    ad1c:	b480      	push	{r7}
    ad1e:	b083      	sub	sp, #12
    ad20:	af00      	add	r7, sp, #0
    ad22:	6078      	str	r0, [r7, #4]
	thread->base.thread_state |= _THREAD_PENDING;
    ad24:	687b      	ldr	r3, [r7, #4]
    ad26:	7b5b      	ldrb	r3, [r3, #13]
    ad28:	f043 0302 	orr.w	r3, r3, #2
    ad2c:	b2da      	uxtb	r2, r3
    ad2e:	687b      	ldr	r3, [r7, #4]
    ad30:	735a      	strb	r2, [r3, #13]
}
    ad32:	bf00      	nop
    ad34:	370c      	adds	r7, #12
    ad36:	46bd      	mov	sp, r7
    ad38:	bc80      	pop	{r7}
    ad3a:	4770      	bx	lr

0000ad3c <z_mark_thread_as_not_pending>:
{
    ad3c:	b480      	push	{r7}
    ad3e:	b083      	sub	sp, #12
    ad40:	af00      	add	r7, sp, #0
    ad42:	6078      	str	r0, [r7, #4]
	thread->base.thread_state &= ~_THREAD_PENDING;
    ad44:	687b      	ldr	r3, [r7, #4]
    ad46:	7b5b      	ldrb	r3, [r3, #13]
    ad48:	f023 0302 	bic.w	r3, r3, #2
    ad4c:	b2da      	uxtb	r2, r3
    ad4e:	687b      	ldr	r3, [r7, #4]
    ad50:	735a      	strb	r2, [r3, #13]
}
    ad52:	bf00      	nop
    ad54:	370c      	adds	r7, #12
    ad56:	46bd      	mov	sp, r7
    ad58:	bc80      	pop	{r7}
    ad5a:	4770      	bx	lr

0000ad5c <z_is_prio1_higher_than_prio2>:
{
    ad5c:	b480      	push	{r7}
    ad5e:	b083      	sub	sp, #12
    ad60:	af00      	add	r7, sp, #0
    ad62:	6078      	str	r0, [r7, #4]
    ad64:	6039      	str	r1, [r7, #0]
	return prio1 < prio2;
    ad66:	687a      	ldr	r2, [r7, #4]
    ad68:	683b      	ldr	r3, [r7, #0]
    ad6a:	429a      	cmp	r2, r3
    ad6c:	bfb4      	ite	lt
    ad6e:	2301      	movlt	r3, #1
    ad70:	2300      	movge	r3, #0
    ad72:	b2db      	uxtb	r3, r3
}
    ad74:	4618      	mov	r0, r3
    ad76:	370c      	adds	r7, #12
    ad78:	46bd      	mov	sp, r7
    ad7a:	bc80      	pop	{r7}
    ad7c:	4770      	bx	lr

0000ad7e <z_is_prio_higher>:
{
    ad7e:	b580      	push	{r7, lr}
    ad80:	b082      	sub	sp, #8
    ad82:	af00      	add	r7, sp, #0
    ad84:	6078      	str	r0, [r7, #4]
    ad86:	6039      	str	r1, [r7, #0]
	return z_is_prio1_higher_than_prio2(prio, test_prio);
    ad88:	6839      	ldr	r1, [r7, #0]
    ad8a:	6878      	ldr	r0, [r7, #4]
    ad8c:	f7ff ffe6 	bl	ad5c <z_is_prio1_higher_than_prio2>
    ad90:	4603      	mov	r3, r0
}
    ad92:	4618      	mov	r0, r3
    ad94:	3708      	adds	r7, #8
    ad96:	46bd      	mov	sp, r7
    ad98:	bd80      	pop	{r7, pc}

0000ad9a <z_sched_usage_switch>:
 */
void z_sched_thread_usage(struct k_thread *thread,
			  struct k_thread_runtime_stats *stats);

static inline void z_sched_usage_switch(struct k_thread *thread)
{
    ad9a:	b480      	push	{r7}
    ad9c:	b083      	sub	sp, #12
    ad9e:	af00      	add	r7, sp, #0
    ada0:	6078      	str	r0, [r7, #4]
	ARG_UNUSED(thread);
#ifdef CONFIG_SCHED_THREAD_USAGE
	z_sched_usage_stop();
	z_sched_usage_start(thread);
#endif
}
    ada2:	bf00      	nop
    ada4:	370c      	adds	r7, #12
    ada6:	46bd      	mov	sp, r7
    ada8:	bc80      	pop	{r7}
    adaa:	4770      	bx	lr

0000adac <z_waitq_head>:

static inline struct k_thread *z_waitq_head(_wait_q_t *w)
{
    adac:	b580      	push	{r7, lr}
    adae:	b082      	sub	sp, #8
    adb0:	af00      	add	r7, sp, #0
    adb2:	6078      	str	r0, [r7, #4]
	return (struct k_thread *)sys_dlist_peek_head(&w->waitq);
    adb4:	687b      	ldr	r3, [r7, #4]
    adb6:	4618      	mov	r0, r3
    adb8:	f7ff fe21 	bl	a9fe <sys_dlist_peek_head>
    adbc:	4603      	mov	r3, r0
}
    adbe:	4618      	mov	r0, r3
    adc0:	3708      	adds	r7, #8
    adc2:	46bd      	mov	sp, r7
    adc4:	bd80      	pop	{r7, pc}

0000adc6 <wait_for_switch>:
{
    adc6:	b480      	push	{r7}
    adc8:	b083      	sub	sp, #12
    adca:	af00      	add	r7, sp, #0
    adcc:	6078      	str	r0, [r7, #4]
}
    adce:	bf00      	nop
    add0:	370c      	adds	r7, #12
    add2:	46bd      	mov	sp, r7
    add4:	bc80      	pop	{r7}
    add6:	4770      	bx	lr

0000add8 <z_log_msg2_runtime_create>:
{
    add8:	b580      	push	{r7, lr}
    adda:	b08a      	sub	sp, #40	; 0x28
    addc:	af04      	add	r7, sp, #16
    adde:	60b9      	str	r1, [r7, #8]
    ade0:	607b      	str	r3, [r7, #4]
    ade2:	4603      	mov	r3, r0
    ade4:	73fb      	strb	r3, [r7, #15]
    ade6:	4613      	mov	r3, r2
    ade8:	73bb      	strb	r3, [r7, #14]
	va_start(ap, fmt);
    adea:	f107 032c 	add.w	r3, r7, #44	; 0x2c
    adee:	617b      	str	r3, [r7, #20]
	z_log_msg2_runtime_vcreate(domain_id, source, level,
    adf0:	7bba      	ldrb	r2, [r7, #14]
    adf2:	7bf8      	ldrb	r0, [r7, #15]
    adf4:	697b      	ldr	r3, [r7, #20]
    adf6:	9303      	str	r3, [sp, #12]
    adf8:	6abb      	ldr	r3, [r7, #40]	; 0x28
    adfa:	9302      	str	r3, [sp, #8]
    adfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    adfe:	9301      	str	r3, [sp, #4]
    ae00:	6a3b      	ldr	r3, [r7, #32]
    ae02:	9300      	str	r3, [sp, #0]
    ae04:	687b      	ldr	r3, [r7, #4]
    ae06:	68b9      	ldr	r1, [r7, #8]
    ae08:	f000 f804 	bl	ae14 <z_log_msg2_runtime_vcreate>
}
    ae0c:	bf00      	nop
    ae0e:	3718      	adds	r7, #24
    ae10:	46bd      	mov	sp, r7
    ae12:	bd80      	pop	{r7, pc}

0000ae14 <z_log_msg2_runtime_vcreate>:
{
    ae14:	b580      	push	{r7, lr}
    ae16:	b088      	sub	sp, #32
    ae18:	af04      	add	r7, sp, #16
    ae1a:	60b9      	str	r1, [r7, #8]
    ae1c:	607b      	str	r3, [r7, #4]
    ae1e:	4603      	mov	r3, r0
    ae20:	73fb      	strb	r3, [r7, #15]
    ae22:	4613      	mov	r3, r2
    ae24:	73bb      	strb	r3, [r7, #14]
	z_impl_z_log_msg2_runtime_vcreate(domain_id, source, level, data, dlen, package_flags, fmt, ap);
    ae26:	7bba      	ldrb	r2, [r7, #14]
    ae28:	7bf8      	ldrb	r0, [r7, #15]
    ae2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    ae2c:	9303      	str	r3, [sp, #12]
    ae2e:	6a3b      	ldr	r3, [r7, #32]
    ae30:	9302      	str	r3, [sp, #8]
    ae32:	69fb      	ldr	r3, [r7, #28]
    ae34:	9301      	str	r3, [sp, #4]
    ae36:	69bb      	ldr	r3, [r7, #24]
    ae38:	9300      	str	r3, [sp, #0]
    ae3a:	687b      	ldr	r3, [r7, #4]
    ae3c:	68b9      	ldr	r1, [r7, #8]
    ae3e:	f7fe feee 	bl	9c1e <z_impl_z_log_msg2_runtime_vcreate>
}
    ae42:	bf00      	nop
    ae44:	3710      	adds	r7, #16
    ae46:	46bd      	mov	sp, r7
    ae48:	bd80      	pop	{r7, pc}

0000ae4a <is_preempt>:
{
    ae4a:	b480      	push	{r7}
    ae4c:	b083      	sub	sp, #12
    ae4e:	af00      	add	r7, sp, #0
    ae50:	6078      	str	r0, [r7, #4]
	return thread->base.preempt <= _PREEMPT_THRESHOLD;
    ae52:	687b      	ldr	r3, [r7, #4]
    ae54:	89db      	ldrh	r3, [r3, #14]
    ae56:	2b7f      	cmp	r3, #127	; 0x7f
    ae58:	bf94      	ite	ls
    ae5a:	2301      	movls	r3, #1
    ae5c:	2300      	movhi	r3, #0
    ae5e:	b2db      	uxtb	r3, r3
}
    ae60:	4618      	mov	r0, r3
    ae62:	370c      	adds	r7, #12
    ae64:	46bd      	mov	sp, r7
    ae66:	bc80      	pop	{r7}
    ae68:	4770      	bx	lr

0000ae6a <is_metairq>:
{
    ae6a:	b480      	push	{r7}
    ae6c:	b083      	sub	sp, #12
    ae6e:	af00      	add	r7, sp, #0
    ae70:	6078      	str	r0, [r7, #4]
	return 0;
    ae72:	2300      	movs	r3, #0
}
    ae74:	4618      	mov	r0, r3
    ae76:	370c      	adds	r7, #12
    ae78:	46bd      	mov	sp, r7
    ae7a:	bc80      	pop	{r7}
    ae7c:	4770      	bx	lr

0000ae7e <z_sched_prio_cmp>:
{
    ae7e:	b480      	push	{r7}
    ae80:	b085      	sub	sp, #20
    ae82:	af00      	add	r7, sp, #0
    ae84:	6078      	str	r0, [r7, #4]
    ae86:	6039      	str	r1, [r7, #0]
	int32_t b1 = thread_1->base.prio;
    ae88:	687b      	ldr	r3, [r7, #4]
    ae8a:	f993 300e 	ldrsb.w	r3, [r3, #14]
    ae8e:	60fb      	str	r3, [r7, #12]
	int32_t b2 = thread_2->base.prio;
    ae90:	683b      	ldr	r3, [r7, #0]
    ae92:	f993 300e 	ldrsb.w	r3, [r3, #14]
    ae96:	60bb      	str	r3, [r7, #8]
	if (b1 != b2) {
    ae98:	68fa      	ldr	r2, [r7, #12]
    ae9a:	68bb      	ldr	r3, [r7, #8]
    ae9c:	429a      	cmp	r2, r3
    ae9e:	d003      	beq.n	aea8 <z_sched_prio_cmp+0x2a>
		return b2 - b1;
    aea0:	68ba      	ldr	r2, [r7, #8]
    aea2:	68fb      	ldr	r3, [r7, #12]
    aea4:	1ad3      	subs	r3, r2, r3
    aea6:	e000      	b.n	aeaa <z_sched_prio_cmp+0x2c>
	return 0;
    aea8:	2300      	movs	r3, #0
}
    aeaa:	4618      	mov	r0, r3
    aeac:	3714      	adds	r7, #20
    aeae:	46bd      	mov	sp, r7
    aeb0:	bc80      	pop	{r7}
    aeb2:	4770      	bx	lr

0000aeb4 <should_queue_thread>:
{
    aeb4:	b480      	push	{r7}
    aeb6:	b083      	sub	sp, #12
    aeb8:	af00      	add	r7, sp, #0
    aeba:	6078      	str	r0, [r7, #4]
	return !IS_ENABLED(CONFIG_SMP) || th != _current;
    aebc:	2301      	movs	r3, #1
}
    aebe:	4618      	mov	r0, r3
    aec0:	370c      	adds	r7, #12
    aec2:	46bd      	mov	sp, r7
    aec4:	bc80      	pop	{r7}
    aec6:	4770      	bx	lr

0000aec8 <signal_pending_ipi>:
{
    aec8:	b480      	push	{r7}
    aeca:	af00      	add	r7, sp, #0
}
    aecc:	bf00      	nop
    aece:	46bd      	mov	sp, r7
    aed0:	bc80      	pop	{r7}
    aed2:	4770      	bx	lr

0000aed4 <update_metairq_preempt>:
{
    aed4:	b480      	push	{r7}
    aed6:	b083      	sub	sp, #12
    aed8:	af00      	add	r7, sp, #0
    aeda:	6078      	str	r0, [r7, #4]
}
    aedc:	bf00      	nop
    aede:	370c      	adds	r7, #12
    aee0:	46bd      	mov	sp, r7
    aee2:	bc80      	pop	{r7}
    aee4:	4770      	bx	lr

0000aee6 <thread_active_elsewhere>:
{
    aee6:	b480      	push	{r7}
    aee8:	b083      	sub	sp, #12
    aeea:	af00      	add	r7, sp, #0
    aeec:	6078      	str	r0, [r7, #4]
	return false;
    aeee:	2300      	movs	r3, #0
}
    aef0:	4618      	mov	r0, r3
    aef2:	370c      	adds	r7, #12
    aef4:	46bd      	mov	sp, r7
    aef6:	bc80      	pop	{r7}
    aef8:	4770      	bx	lr

0000aefa <flag_ipi>:
{
    aefa:	b480      	push	{r7}
    aefc:	af00      	add	r7, sp, #0
}
    aefe:	bf00      	nop
    af00:	46bd      	mov	sp, r7
    af02:	bc80      	pop	{r7}
    af04:	4770      	bx	lr

0000af06 <pended_on_thread>:
{
    af06:	b480      	push	{r7}
    af08:	b083      	sub	sp, #12
    af0a:	af00      	add	r7, sp, #0
    af0c:	6078      	str	r0, [r7, #4]
	return thread->base.pended_on;
    af0e:	687b      	ldr	r3, [r7, #4]
    af10:	689b      	ldr	r3, [r3, #8]
}
    af12:	4618      	mov	r0, r3
    af14:	370c      	adds	r7, #12
    af16:	46bd      	mov	sp, r7
    af18:	bc80      	pop	{r7}
    af1a:	4770      	bx	lr

0000af1c <add_to_waitq_locked>:
{
    af1c:	b580      	push	{r7, lr}
    af1e:	b086      	sub	sp, #24
    af20:	af00      	add	r7, sp, #0
    af22:	6078      	str	r0, [r7, #4]
    af24:	6039      	str	r1, [r7, #0]
	unready_thread(thread);
    af26:	6878      	ldr	r0, [r7, #4]
    af28:	f7fc f874 	bl	7014 <unready_thread>
	z_mark_thread_as_pending(thread);
    af2c:	6878      	ldr	r0, [r7, #4]
    af2e:	f7ff fef5 	bl	ad1c <z_mark_thread_as_pending>
	if (wait_q != NULL) {
    af32:	683b      	ldr	r3, [r7, #0]
    af34:	2b00      	cmp	r3, #0
    af36:	d041      	beq.n	afbc <add_to_waitq_locked+0xa0>
		thread->base.pended_on = wait_q;
    af38:	687b      	ldr	r3, [r7, #4]
    af3a:	683a      	ldr	r2, [r7, #0]
    af3c:	609a      	str	r2, [r3, #8]
		z_priq_wait_add(&wait_q->waitq, thread);
    af3e:	683b      	ldr	r3, [r7, #0]
    af40:	617b      	str	r3, [r7, #20]
    af42:	687b      	ldr	r3, [r7, #4]
    af44:	613b      	str	r3, [r7, #16]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    af46:	6978      	ldr	r0, [r7, #20]
    af48:	f7ff fd59 	bl	a9fe <sys_dlist_peek_head>
    af4c:	4603      	mov	r3, r0
    af4e:	2b00      	cmp	r3, #0
    af50:	d004      	beq.n	af5c <add_to_waitq_locked+0x40>
    af52:	6978      	ldr	r0, [r7, #20]
    af54:	f7ff fd53 	bl	a9fe <sys_dlist_peek_head>
    af58:	4603      	mov	r3, r0
    af5a:	e000      	b.n	af5e <add_to_waitq_locked+0x42>
    af5c:	2300      	movs	r3, #0
    af5e:	60fb      	str	r3, [r7, #12]
    af60:	e024      	b.n	afac <add_to_waitq_locked+0x90>
		if (z_sched_prio_cmp(thread, t) > 0) {
    af62:	68f9      	ldr	r1, [r7, #12]
    af64:	6938      	ldr	r0, [r7, #16]
    af66:	f7ff ff8a 	bl	ae7e <z_sched_prio_cmp>
    af6a:	4603      	mov	r3, r0
    af6c:	2b00      	cmp	r3, #0
    af6e:	dd07      	ble.n	af80 <add_to_waitq_locked+0x64>
			sys_dlist_insert(&t->base.qnode_dlist,
    af70:	68fb      	ldr	r3, [r7, #12]
    af72:	693a      	ldr	r2, [r7, #16]
    af74:	4611      	mov	r1, r2
    af76:	4618      	mov	r0, r3
    af78:	f7ff fd92 	bl	aaa0 <sys_dlist_insert>
			return;
    af7c:	bf00      	nop
}
    af7e:	e01d      	b.n	afbc <add_to_waitq_locked+0xa0>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    af80:	68fb      	ldr	r3, [r7, #12]
    af82:	2b00      	cmp	r3, #0
    af84:	d010      	beq.n	afa8 <add_to_waitq_locked+0x8c>
    af86:	68fb      	ldr	r3, [r7, #12]
    af88:	4619      	mov	r1, r3
    af8a:	6978      	ldr	r0, [r7, #20]
    af8c:	f7ff fd5c 	bl	aa48 <sys_dlist_peek_next>
    af90:	4603      	mov	r3, r0
    af92:	2b00      	cmp	r3, #0
    af94:	d006      	beq.n	afa4 <add_to_waitq_locked+0x88>
    af96:	68fb      	ldr	r3, [r7, #12]
    af98:	4619      	mov	r1, r3
    af9a:	6978      	ldr	r0, [r7, #20]
    af9c:	f7ff fd54 	bl	aa48 <sys_dlist_peek_next>
    afa0:	4603      	mov	r3, r0
    afa2:	e002      	b.n	afaa <add_to_waitq_locked+0x8e>
    afa4:	2300      	movs	r3, #0
    afa6:	e000      	b.n	afaa <add_to_waitq_locked+0x8e>
    afa8:	2300      	movs	r3, #0
    afaa:	60fb      	str	r3, [r7, #12]
    afac:	68fb      	ldr	r3, [r7, #12]
    afae:	2b00      	cmp	r3, #0
    afb0:	d1d7      	bne.n	af62 <add_to_waitq_locked+0x46>
	sys_dlist_append(pq, &thread->base.qnode_dlist);
    afb2:	693b      	ldr	r3, [r7, #16]
    afb4:	4619      	mov	r1, r3
    afb6:	6978      	ldr	r0, [r7, #20]
    afb8:	f7ff fd59 	bl	aa6e <sys_dlist_append>
}
    afbc:	bf00      	nop
    afbe:	3718      	adds	r7, #24
    afc0:	46bd      	mov	sp, r7
    afc2:	bd80      	pop	{r7, pc}

0000afc4 <add_thread_timeout>:
{
    afc4:	b580      	push	{r7, lr}
    afc6:	b084      	sub	sp, #16
    afc8:	af00      	add	r7, sp, #0
    afca:	60f8      	str	r0, [r7, #12]
    afcc:	e9c7 2300 	strd	r2, r3, [r7]
	if (!K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    afd0:	e9d7 2300 	ldrd	r2, r3, [r7]
    afd4:	f04f 30ff 	mov.w	r0, #4294967295
    afd8:	f04f 31ff 	mov.w	r1, #4294967295
    afdc:	428b      	cmp	r3, r1
    afde:	bf08      	it	eq
    afe0:	4282      	cmpeq	r2, r0
    afe2:	d004      	beq.n	afee <add_thread_timeout+0x2a>
		z_add_thread_timeout(thread, timeout);
    afe4:	e9d7 2300 	ldrd	r2, r3, [r7]
    afe8:	68f8      	ldr	r0, [r7, #12]
    afea:	f7fb fb69 	bl	66c0 <z_add_thread_timeout>
}
    afee:	bf00      	nop
    aff0:	3710      	adds	r7, #16
    aff2:	46bd      	mov	sp, r7
    aff4:	bd80      	pop	{r7, pc}

0000aff6 <unpend_thread_no_timeout>:
{
    aff6:	b580      	push	{r7, lr}
    aff8:	b082      	sub	sp, #8
    affa:	af00      	add	r7, sp, #0
    affc:	6078      	str	r0, [r7, #4]
	_priq_wait_remove(&pended_on_thread(thread)->waitq, thread);
    affe:	6878      	ldr	r0, [r7, #4]
    b000:	f7ff ff81 	bl	af06 <pended_on_thread>
    b004:	4603      	mov	r3, r0
    b006:	6879      	ldr	r1, [r7, #4]
    b008:	4618      	mov	r0, r3
    b00a:	f000 f877 	bl	b0fc <z_priq_dumb_remove>
	z_mark_thread_as_not_pending(thread);
    b00e:	6878      	ldr	r0, [r7, #4]
    b010:	f7ff fe94 	bl	ad3c <z_mark_thread_as_not_pending>
	thread->base.pended_on = NULL;
    b014:	687b      	ldr	r3, [r7, #4]
    b016:	2200      	movs	r2, #0
    b018:	609a      	str	r2, [r3, #8]
}
    b01a:	bf00      	nop
    b01c:	3708      	adds	r7, #8
    b01e:	46bd      	mov	sp, r7
    b020:	bd80      	pop	{r7, pc}

0000b022 <resched>:
{
    b022:	b480      	push	{r7}
    b024:	b085      	sub	sp, #20
    b026:	af00      	add	r7, sp, #0
    b028:	6078      	str	r0, [r7, #4]
    b02a:	687b      	ldr	r3, [r7, #4]
    b02c:	60fb      	str	r3, [r7, #12]

static ALWAYS_INLINE bool arch_irq_unlocked(unsigned int key)
{
	/* This convention works for both PRIMASK and BASEPRI */
	return key == 0U;
    b02e:	68fb      	ldr	r3, [r7, #12]
    b030:	2b00      	cmp	r3, #0
    b032:	bf0c      	ite	eq
    b034:	2301      	moveq	r3, #1
    b036:	2300      	movne	r3, #0
    b038:	b2db      	uxtb	r3, r3
	return arch_irq_unlocked(key) && !arch_is_in_isr();
    b03a:	2b00      	cmp	r3, #0
    b03c:	d00f      	beq.n	b05e <resched+0x3c>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    b03e:	f3ef 8305 	mrs	r3, IPSR
    b042:	60bb      	str	r3, [r7, #8]
  return(result);
    b044:	68bb      	ldr	r3, [r7, #8]
    b046:	2b00      	cmp	r3, #0
    b048:	bf14      	ite	ne
    b04a:	2301      	movne	r3, #1
    b04c:	2300      	moveq	r3, #0
    b04e:	b2db      	uxtb	r3, r3
    b050:	f083 0301 	eor.w	r3, r3, #1
    b054:	b2db      	uxtb	r3, r3
    b056:	2b00      	cmp	r3, #0
    b058:	d001      	beq.n	b05e <resched+0x3c>
    b05a:	2301      	movs	r3, #1
    b05c:	e000      	b.n	b060 <resched+0x3e>
    b05e:	2300      	movs	r3, #0
    b060:	f003 0301 	and.w	r3, r3, #1
    b064:	b2db      	uxtb	r3, r3
}
    b066:	4618      	mov	r0, r3
    b068:	3714      	adds	r7, #20
    b06a:	46bd      	mov	sp, r7
    b06c:	bc80      	pop	{r7}
    b06e:	4770      	bx	lr

0000b070 <z_reschedule>:
{
    b070:	b580      	push	{r7, lr}
    b072:	b086      	sub	sp, #24
    b074:	af00      	add	r7, sp, #0
    b076:	6078      	str	r0, [r7, #4]
    b078:	6039      	str	r1, [r7, #0]
	if (resched(key.key) && need_swap()) {
    b07a:	683b      	ldr	r3, [r7, #0]
    b07c:	4618      	mov	r0, r3
    b07e:	f7ff ffd0 	bl	b022 <resched>
    b082:	4603      	mov	r3, r0
    b084:	2b00      	cmp	r3, #0
    b086:	d009      	beq.n	b09c <z_reschedule+0x2c>
    b088:	f7fc f988 	bl	739c <need_swap>
    b08c:	4603      	mov	r3, r0
    b08e:	2b00      	cmp	r3, #0
    b090:	d004      	beq.n	b09c <z_reschedule+0x2c>
		z_swap(lock, key);
    b092:	6839      	ldr	r1, [r7, #0]
    b094:	6878      	ldr	r0, [r7, #4]
    b096:	f7fb fbc1 	bl	681c <z_swap>
    b09a:	e00f      	b.n	b0bc <z_reschedule+0x4c>
    b09c:	687b      	ldr	r3, [r7, #4]
    b09e:	617b      	str	r3, [r7, #20]
    b0a0:	683b      	ldr	r3, [r7, #0]
    b0a2:	60fb      	str	r3, [r7, #12]
	arch_irq_unlock(key.key);
    b0a4:	68fb      	ldr	r3, [r7, #12]
    b0a6:	613b      	str	r3, [r7, #16]
	__asm__ volatile(
    b0a8:	693b      	ldr	r3, [r7, #16]
    b0aa:	f383 8811 	msr	BASEPRI, r3
    b0ae:	f3bf 8f6f 	isb	sy
}
    b0b2:	bf00      	nop
}
    b0b4:	bf00      	nop
		signal_pending_ipi();
    b0b6:	f7ff ff07 	bl	aec8 <signal_pending_ipi>
}
    b0ba:	bf00      	nop
    b0bc:	bf00      	nop
    b0be:	3718      	adds	r7, #24
    b0c0:	46bd      	mov	sp, r7
    b0c2:	bd80      	pop	{r7, pc}

0000b0c4 <z_reschedule_irqlock>:
{
    b0c4:	b580      	push	{r7, lr}
    b0c6:	b084      	sub	sp, #16
    b0c8:	af00      	add	r7, sp, #0
    b0ca:	6078      	str	r0, [r7, #4]
	if (resched(key)) {
    b0cc:	6878      	ldr	r0, [r7, #4]
    b0ce:	f7ff ffa8 	bl	b022 <resched>
    b0d2:	4603      	mov	r3, r0
    b0d4:	2b00      	cmp	r3, #0
    b0d6:	d003      	beq.n	b0e0 <z_reschedule_irqlock+0x1c>
		z_swap_irqlock(key);
    b0d8:	6878      	ldr	r0, [r7, #4]
    b0da:	f7fb fb25 	bl	6728 <z_swap_irqlock>
}
    b0de:	e009      	b.n	b0f4 <z_reschedule_irqlock+0x30>
    b0e0:	687b      	ldr	r3, [r7, #4]
    b0e2:	60fb      	str	r3, [r7, #12]
	__asm__ volatile(
    b0e4:	68fb      	ldr	r3, [r7, #12]
    b0e6:	f383 8811 	msr	BASEPRI, r3
    b0ea:	f3bf 8f6f 	isb	sy
}
    b0ee:	bf00      	nop
		signal_pending_ipi();
    b0f0:	f7ff feea 	bl	aec8 <signal_pending_ipi>
}
    b0f4:	bf00      	nop
    b0f6:	3710      	adds	r7, #16
    b0f8:	46bd      	mov	sp, r7
    b0fa:	bd80      	pop	{r7, pc}

0000b0fc <z_priq_dumb_remove>:
{
    b0fc:	b580      	push	{r7, lr}
    b0fe:	b082      	sub	sp, #8
    b100:	af00      	add	r7, sp, #0
    b102:	6078      	str	r0, [r7, #4]
    b104:	6039      	str	r1, [r7, #0]
	sys_dlist_remove(&thread->base.qnode_dlist);
    b106:	683b      	ldr	r3, [r7, #0]
    b108:	4618      	mov	r0, r3
    b10a:	f7ff fce2 	bl	aad2 <sys_dlist_remove>
}
    b10e:	bf00      	nop
    b110:	3708      	adds	r7, #8
    b112:	46bd      	mov	sp, r7
    b114:	bd80      	pop	{r7, pc}

0000b116 <z_priq_dumb_best>:
{
    b116:	b580      	push	{r7, lr}
    b118:	b084      	sub	sp, #16
    b11a:	af00      	add	r7, sp, #0
    b11c:	6078      	str	r0, [r7, #4]
	struct k_thread *thread = NULL;
    b11e:	2300      	movs	r3, #0
    b120:	60fb      	str	r3, [r7, #12]
	sys_dnode_t *n = sys_dlist_peek_head(pq);
    b122:	6878      	ldr	r0, [r7, #4]
    b124:	f7ff fc6b 	bl	a9fe <sys_dlist_peek_head>
    b128:	60b8      	str	r0, [r7, #8]
	if (n != NULL) {
    b12a:	68bb      	ldr	r3, [r7, #8]
    b12c:	2b00      	cmp	r3, #0
    b12e:	d001      	beq.n	b134 <z_priq_dumb_best+0x1e>
		thread = CONTAINER_OF(n, struct k_thread, base.qnode_dlist);
    b130:	68bb      	ldr	r3, [r7, #8]
    b132:	60fb      	str	r3, [r7, #12]
	return thread;
    b134:	68fb      	ldr	r3, [r7, #12]
}
    b136:	4618      	mov	r0, r3
    b138:	3710      	adds	r7, #16
    b13a:	46bd      	mov	sp, r7
    b13c:	bd80      	pop	{r7, pc}

0000b13e <z_priq_mq_best>:
{
    b13e:	b580      	push	{r7, lr}
    b140:	b086      	sub	sp, #24
    b142:	af00      	add	r7, sp, #0
    b144:	6078      	str	r0, [r7, #4]
	if (!pq->bitmask) {
    b146:	687b      	ldr	r3, [r7, #4]
    b148:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
    b14c:	2b00      	cmp	r3, #0
    b14e:	d101      	bne.n	b154 <z_priq_mq_best+0x16>
		return NULL;
    b150:	2300      	movs	r3, #0
    b152:	e016      	b.n	b182 <z_priq_mq_best+0x44>
	struct k_thread *thread = NULL;
    b154:	2300      	movs	r3, #0
    b156:	617b      	str	r3, [r7, #20]
	sys_dlist_t *l = &pq->queues[__builtin_ctz(pq->bitmask)];
    b158:	687b      	ldr	r3, [r7, #4]
    b15a:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
    b15e:	fa93 f3a3 	rbit	r3, r3
    b162:	fab3 f383 	clz	r3, r3
    b166:	00db      	lsls	r3, r3, #3
    b168:	687a      	ldr	r2, [r7, #4]
    b16a:	4413      	add	r3, r2
    b16c:	613b      	str	r3, [r7, #16]
	sys_dnode_t *n = sys_dlist_peek_head(l);
    b16e:	6938      	ldr	r0, [r7, #16]
    b170:	f7ff fc45 	bl	a9fe <sys_dlist_peek_head>
    b174:	60f8      	str	r0, [r7, #12]
	if (n != NULL) {
    b176:	68fb      	ldr	r3, [r7, #12]
    b178:	2b00      	cmp	r3, #0
    b17a:	d001      	beq.n	b180 <z_priq_mq_best+0x42>
		thread = CONTAINER_OF(n, struct k_thread, base.qnode_dlist);
    b17c:	68fb      	ldr	r3, [r7, #12]
    b17e:	617b      	str	r3, [r7, #20]
	return thread;
    b180:	697b      	ldr	r3, [r7, #20]
}
    b182:	4618      	mov	r0, r3
    b184:	3718      	adds	r7, #24
    b186:	46bd      	mov	sp, r7
    b188:	bd80      	pop	{r7, pc}

0000b18a <init_ready_q>:
{
    b18a:	b580      	push	{r7, lr}
    b18c:	b084      	sub	sp, #16
    b18e:	af00      	add	r7, sp, #0
    b190:	6078      	str	r0, [r7, #4]
	for (int i = 0; i < ARRAY_SIZE(_kernel.ready_q.runq.queues); i++) {
    b192:	2300      	movs	r3, #0
    b194:	60fb      	str	r3, [r7, #12]
    b196:	e00a      	b.n	b1ae <init_ready_q+0x24>
		sys_dlist_init(&rq->runq.queues[i]);
    b198:	68fb      	ldr	r3, [r7, #12]
    b19a:	00db      	lsls	r3, r3, #3
    b19c:	687a      	ldr	r2, [r7, #4]
    b19e:	4413      	add	r3, r2
    b1a0:	3304      	adds	r3, #4
    b1a2:	4618      	mov	r0, r3
    b1a4:	f7ff fbec 	bl	a980 <sys_dlist_init>
	for (int i = 0; i < ARRAY_SIZE(_kernel.ready_q.runq.queues); i++) {
    b1a8:	68fb      	ldr	r3, [r7, #12]
    b1aa:	3301      	adds	r3, #1
    b1ac:	60fb      	str	r3, [r7, #12]
    b1ae:	68fb      	ldr	r3, [r7, #12]
    b1b0:	2b1f      	cmp	r3, #31
    b1b2:	d9f1      	bls.n	b198 <init_ready_q+0xe>
}
    b1b4:	bf00      	nop
    b1b6:	bf00      	nop
    b1b8:	3710      	adds	r7, #16
    b1ba:	46bd      	mov	sp, r7
    b1bc:	bd80      	pop	{r7, pc}

0000b1be <unpend_all>:
{
    b1be:	b580      	push	{r7, lr}
    b1c0:	b086      	sub	sp, #24
    b1c2:	af00      	add	r7, sp, #0
    b1c4:	6078      	str	r0, [r7, #4]
	while ((thread = z_waitq_head(wait_q)) != NULL) {
    b1c6:	e010      	b.n	b1ea <unpend_all+0x2c>
		unpend_thread_no_timeout(thread);
    b1c8:	6978      	ldr	r0, [r7, #20]
    b1ca:	f7ff ff14 	bl	aff6 <unpend_thread_no_timeout>
		(void)z_abort_thread_timeout(thread);
    b1ce:	6978      	ldr	r0, [r7, #20]
    b1d0:	f7ff fcd1 	bl	ab76 <z_abort_thread_timeout>
    b1d4:	697b      	ldr	r3, [r7, #20]
    b1d6:	613b      	str	r3, [r7, #16]
    b1d8:	2300      	movs	r3, #0
    b1da:	60fb      	str	r3, [r7, #12]
	thread->swap_retval = value;
    b1dc:	68fa      	ldr	r2, [r7, #12]
    b1de:	693b      	ldr	r3, [r7, #16]
    b1e0:	665a      	str	r2, [r3, #100]	; 0x64
}
    b1e2:	bf00      	nop
		ready_thread(thread);
    b1e4:	6978      	ldr	r0, [r7, #20]
    b1e6:	f7fb fdc7 	bl	6d78 <ready_thread>
	while ((thread = z_waitq_head(wait_q)) != NULL) {
    b1ea:	6878      	ldr	r0, [r7, #4]
    b1ec:	f7ff fdde 	bl	adac <z_waitq_head>
    b1f0:	6178      	str	r0, [r7, #20]
    b1f2:	697b      	ldr	r3, [r7, #20]
    b1f4:	2b00      	cmp	r3, #0
    b1f6:	d1e7      	bne.n	b1c8 <unpend_all+0xa>
}
    b1f8:	bf00      	nop
    b1fa:	bf00      	nop
    b1fc:	3718      	adds	r7, #24
    b1fe:	46bd      	mov	sp, r7
    b200:	bd80      	pop	{r7, pc}

0000b202 <sys_dnode_init>:
{
    b202:	b480      	push	{r7}
    b204:	b083      	sub	sp, #12
    b206:	af00      	add	r7, sp, #0
    b208:	6078      	str	r0, [r7, #4]
	node->next = NULL;
    b20a:	687b      	ldr	r3, [r7, #4]
    b20c:	2200      	movs	r2, #0
    b20e:	601a      	str	r2, [r3, #0]
	node->prev = NULL;
    b210:	687b      	ldr	r3, [r7, #4]
    b212:	2200      	movs	r2, #0
    b214:	605a      	str	r2, [r3, #4]
}
    b216:	bf00      	nop
    b218:	370c      	adds	r7, #12
    b21a:	46bd      	mov	sp, r7
    b21c:	bc80      	pop	{r7}
    b21e:	4770      	bx	lr

0000b220 <sys_dnode_is_linked>:
{
    b220:	b480      	push	{r7}
    b222:	b083      	sub	sp, #12
    b224:	af00      	add	r7, sp, #0
    b226:	6078      	str	r0, [r7, #4]
	return node->next != NULL;
    b228:	687b      	ldr	r3, [r7, #4]
    b22a:	681b      	ldr	r3, [r3, #0]
    b22c:	2b00      	cmp	r3, #0
    b22e:	bf14      	ite	ne
    b230:	2301      	movne	r3, #1
    b232:	2300      	moveq	r3, #0
    b234:	b2db      	uxtb	r3, r3
}
    b236:	4618      	mov	r0, r3
    b238:	370c      	adds	r7, #12
    b23a:	46bd      	mov	sp, r7
    b23c:	bc80      	pop	{r7}
    b23e:	4770      	bx	lr

0000b240 <sys_dlist_is_empty>:
{
    b240:	b480      	push	{r7}
    b242:	b083      	sub	sp, #12
    b244:	af00      	add	r7, sp, #0
    b246:	6078      	str	r0, [r7, #4]
	return list->head == list;
    b248:	687b      	ldr	r3, [r7, #4]
    b24a:	681b      	ldr	r3, [r3, #0]
    b24c:	687a      	ldr	r2, [r7, #4]
    b24e:	429a      	cmp	r2, r3
    b250:	bf0c      	ite	eq
    b252:	2301      	moveq	r3, #1
    b254:	2300      	movne	r3, #0
    b256:	b2db      	uxtb	r3, r3
}
    b258:	4618      	mov	r0, r3
    b25a:	370c      	adds	r7, #12
    b25c:	46bd      	mov	sp, r7
    b25e:	bc80      	pop	{r7}
    b260:	4770      	bx	lr

0000b262 <sys_dlist_peek_head>:
{
    b262:	b580      	push	{r7, lr}
    b264:	b082      	sub	sp, #8
    b266:	af00      	add	r7, sp, #0
    b268:	6078      	str	r0, [r7, #4]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    b26a:	6878      	ldr	r0, [r7, #4]
    b26c:	f7ff ffe8 	bl	b240 <sys_dlist_is_empty>
    b270:	4603      	mov	r3, r0
    b272:	2b00      	cmp	r3, #0
    b274:	d102      	bne.n	b27c <sys_dlist_peek_head+0x1a>
    b276:	687b      	ldr	r3, [r7, #4]
    b278:	681b      	ldr	r3, [r3, #0]
    b27a:	e000      	b.n	b27e <sys_dlist_peek_head+0x1c>
    b27c:	2300      	movs	r3, #0
}
    b27e:	4618      	mov	r0, r3
    b280:	3708      	adds	r7, #8
    b282:	46bd      	mov	sp, r7
    b284:	bd80      	pop	{r7, pc}

0000b286 <sys_dlist_peek_next_no_check>:
{
    b286:	b480      	push	{r7}
    b288:	b083      	sub	sp, #12
    b28a:	af00      	add	r7, sp, #0
    b28c:	6078      	str	r0, [r7, #4]
    b28e:	6039      	str	r1, [r7, #0]
	return (node == list->tail) ? NULL : node->next;
    b290:	687b      	ldr	r3, [r7, #4]
    b292:	685b      	ldr	r3, [r3, #4]
    b294:	683a      	ldr	r2, [r7, #0]
    b296:	429a      	cmp	r2, r3
    b298:	d002      	beq.n	b2a0 <sys_dlist_peek_next_no_check+0x1a>
    b29a:	683b      	ldr	r3, [r7, #0]
    b29c:	681b      	ldr	r3, [r3, #0]
    b29e:	e000      	b.n	b2a2 <sys_dlist_peek_next_no_check+0x1c>
    b2a0:	2300      	movs	r3, #0
}
    b2a2:	4618      	mov	r0, r3
    b2a4:	370c      	adds	r7, #12
    b2a6:	46bd      	mov	sp, r7
    b2a8:	bc80      	pop	{r7}
    b2aa:	4770      	bx	lr

0000b2ac <sys_dlist_peek_next>:
{
    b2ac:	b580      	push	{r7, lr}
    b2ae:	b082      	sub	sp, #8
    b2b0:	af00      	add	r7, sp, #0
    b2b2:	6078      	str	r0, [r7, #4]
    b2b4:	6039      	str	r1, [r7, #0]
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    b2b6:	683b      	ldr	r3, [r7, #0]
    b2b8:	2b00      	cmp	r3, #0
    b2ba:	d005      	beq.n	b2c8 <sys_dlist_peek_next+0x1c>
    b2bc:	6839      	ldr	r1, [r7, #0]
    b2be:	6878      	ldr	r0, [r7, #4]
    b2c0:	f7ff ffe1 	bl	b286 <sys_dlist_peek_next_no_check>
    b2c4:	4603      	mov	r3, r0
    b2c6:	e000      	b.n	b2ca <sys_dlist_peek_next+0x1e>
    b2c8:	2300      	movs	r3, #0
}
    b2ca:	4618      	mov	r0, r3
    b2cc:	3708      	adds	r7, #8
    b2ce:	46bd      	mov	sp, r7
    b2d0:	bd80      	pop	{r7, pc}

0000b2d2 <sys_dlist_append>:
{
    b2d2:	b480      	push	{r7}
    b2d4:	b085      	sub	sp, #20
    b2d6:	af00      	add	r7, sp, #0
    b2d8:	6078      	str	r0, [r7, #4]
    b2da:	6039      	str	r1, [r7, #0]
	sys_dnode_t *const tail = list->tail;
    b2dc:	687b      	ldr	r3, [r7, #4]
    b2de:	685b      	ldr	r3, [r3, #4]
    b2e0:	60fb      	str	r3, [r7, #12]
	node->next = list;
    b2e2:	683b      	ldr	r3, [r7, #0]
    b2e4:	687a      	ldr	r2, [r7, #4]
    b2e6:	601a      	str	r2, [r3, #0]
	node->prev = tail;
    b2e8:	683b      	ldr	r3, [r7, #0]
    b2ea:	68fa      	ldr	r2, [r7, #12]
    b2ec:	605a      	str	r2, [r3, #4]
	tail->next = node;
    b2ee:	68fb      	ldr	r3, [r7, #12]
    b2f0:	683a      	ldr	r2, [r7, #0]
    b2f2:	601a      	str	r2, [r3, #0]
	list->tail = node;
    b2f4:	687b      	ldr	r3, [r7, #4]
    b2f6:	683a      	ldr	r2, [r7, #0]
    b2f8:	605a      	str	r2, [r3, #4]
}
    b2fa:	bf00      	nop
    b2fc:	3714      	adds	r7, #20
    b2fe:	46bd      	mov	sp, r7
    b300:	bc80      	pop	{r7}
    b302:	4770      	bx	lr

0000b304 <sys_dlist_insert>:
{
    b304:	b480      	push	{r7}
    b306:	b085      	sub	sp, #20
    b308:	af00      	add	r7, sp, #0
    b30a:	6078      	str	r0, [r7, #4]
    b30c:	6039      	str	r1, [r7, #0]
	sys_dnode_t *const prev = successor->prev;
    b30e:	687b      	ldr	r3, [r7, #4]
    b310:	685b      	ldr	r3, [r3, #4]
    b312:	60fb      	str	r3, [r7, #12]
	node->prev = prev;
    b314:	683b      	ldr	r3, [r7, #0]
    b316:	68fa      	ldr	r2, [r7, #12]
    b318:	605a      	str	r2, [r3, #4]
	node->next = successor;
    b31a:	683b      	ldr	r3, [r7, #0]
    b31c:	687a      	ldr	r2, [r7, #4]
    b31e:	601a      	str	r2, [r3, #0]
	prev->next = node;
    b320:	68fb      	ldr	r3, [r7, #12]
    b322:	683a      	ldr	r2, [r7, #0]
    b324:	601a      	str	r2, [r3, #0]
	successor->prev = node;
    b326:	687b      	ldr	r3, [r7, #4]
    b328:	683a      	ldr	r2, [r7, #0]
    b32a:	605a      	str	r2, [r3, #4]
}
    b32c:	bf00      	nop
    b32e:	3714      	adds	r7, #20
    b330:	46bd      	mov	sp, r7
    b332:	bc80      	pop	{r7}
    b334:	4770      	bx	lr

0000b336 <sys_dlist_remove>:
{
    b336:	b580      	push	{r7, lr}
    b338:	b084      	sub	sp, #16
    b33a:	af00      	add	r7, sp, #0
    b33c:	6078      	str	r0, [r7, #4]
	sys_dnode_t *const prev = node->prev;
    b33e:	687b      	ldr	r3, [r7, #4]
    b340:	685b      	ldr	r3, [r3, #4]
    b342:	60fb      	str	r3, [r7, #12]
	sys_dnode_t *const next = node->next;
    b344:	687b      	ldr	r3, [r7, #4]
    b346:	681b      	ldr	r3, [r3, #0]
    b348:	60bb      	str	r3, [r7, #8]
	prev->next = next;
    b34a:	68fb      	ldr	r3, [r7, #12]
    b34c:	68ba      	ldr	r2, [r7, #8]
    b34e:	601a      	str	r2, [r3, #0]
	next->prev = prev;
    b350:	68bb      	ldr	r3, [r7, #8]
    b352:	68fa      	ldr	r2, [r7, #12]
    b354:	605a      	str	r2, [r3, #4]
	sys_dnode_init(node);
    b356:	6878      	ldr	r0, [r7, #4]
    b358:	f7ff ff53 	bl	b202 <sys_dnode_init>
}
    b35c:	bf00      	nop
    b35e:	3710      	adds	r7, #16
    b360:	46bd      	mov	sp, r7
    b362:	bd80      	pop	{r7, pc}

0000b364 <arch_k_cycle_get_32>:
{
    b364:	b580      	push	{r7, lr}
    b366:	af00      	add	r7, sp, #0
	return sys_clock_cycle_get_32();
    b368:	f7f9 fd02 	bl	4d70 <sys_clock_cycle_get_32>
    b36c:	4603      	mov	r3, r0
}
    b36e:	4618      	mov	r0, r3
    b370:	bd80      	pop	{r7, pc}

0000b372 <k_cycle_get_32>:
{
    b372:	b580      	push	{r7, lr}
    b374:	af00      	add	r7, sp, #0
	return arch_k_cycle_get_32();
    b376:	f7ff fff5 	bl	b364 <arch_k_cycle_get_32>
    b37a:	4603      	mov	r3, r0
}
    b37c:	4618      	mov	r0, r3
    b37e:	bd80      	pop	{r7, pc}

0000b380 <remove_timeout>:
{
    b380:	b5f0      	push	{r4, r5, r6, r7, lr}
    b382:	b083      	sub	sp, #12
    b384:	af00      	add	r7, sp, #0
    b386:	6078      	str	r0, [r7, #4]
	if (next(t) != NULL) {
    b388:	6878      	ldr	r0, [r7, #4]
    b38a:	f7fc fb33 	bl	79f4 <next>
    b38e:	4603      	mov	r3, r0
    b390:	2b00      	cmp	r3, #0
    b392:	d00d      	beq.n	b3b0 <remove_timeout+0x30>
		next(t)->dticks += t->dticks;
    b394:	6878      	ldr	r0, [r7, #4]
    b396:	f7fc fb2d 	bl	79f4 <next>
    b39a:	4606      	mov	r6, r0
    b39c:	e9d6 0104 	ldrd	r0, r1, [r6, #16]
    b3a0:	687b      	ldr	r3, [r7, #4]
    b3a2:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
    b3a6:	1884      	adds	r4, r0, r2
    b3a8:	eb41 0503 	adc.w	r5, r1, r3
    b3ac:	e9c6 4504 	strd	r4, r5, [r6, #16]
	sys_dlist_remove(&t->node);
    b3b0:	687b      	ldr	r3, [r7, #4]
    b3b2:	4618      	mov	r0, r3
    b3b4:	f7ff ffbf 	bl	b336 <sys_dlist_remove>
}
    b3b8:	bf00      	nop
    b3ba:	370c      	adds	r7, #12
    b3bc:	46bd      	mov	sp, r7
    b3be:	bdf0      	pop	{r4, r5, r6, r7, pc}

0000b3c0 <sys_clock_tick_get_32>:
{
    b3c0:	b580      	push	{r7, lr}
    b3c2:	af00      	add	r7, sp, #0
	return (uint32_t)sys_clock_tick_get();
    b3c4:	f7fc fdde 	bl	7f84 <sys_clock_tick_get>
    b3c8:	4602      	mov	r2, r0
    b3ca:	460b      	mov	r3, r1
    b3cc:	4613      	mov	r3, r2
}
    b3ce:	4618      	mov	r0, r3
    b3d0:	bd80      	pop	{r7, pc}

0000b3d2 <z_impl_k_uptime_ticks>:
{
    b3d2:	b580      	push	{r7, lr}
    b3d4:	af00      	add	r7, sp, #0
	return sys_clock_tick_get();
    b3d6:	f7fc fdd5 	bl	7f84 <sys_clock_tick_get>
    b3da:	4602      	mov	r2, r0
    b3dc:	460b      	mov	r3, r1
}
    b3de:	4610      	mov	r0, r2
    b3e0:	4619      	mov	r1, r3
    b3e2:	bd80      	pop	{r7, pc}

0000b3e4 <sys_dlist_init>:
{
    b3e4:	b480      	push	{r7}
    b3e6:	b083      	sub	sp, #12
    b3e8:	af00      	add	r7, sp, #0
    b3ea:	6078      	str	r0, [r7, #4]
	list->head = (sys_dnode_t *)list;
    b3ec:	687b      	ldr	r3, [r7, #4]
    b3ee:	687a      	ldr	r2, [r7, #4]
    b3f0:	601a      	str	r2, [r3, #0]
	list->tail = (sys_dnode_t *)list;
    b3f2:	687b      	ldr	r3, [r7, #4]
    b3f4:	687a      	ldr	r2, [r7, #4]
    b3f6:	605a      	str	r2, [r3, #4]
}
    b3f8:	bf00      	nop
    b3fa:	370c      	adds	r7, #12
    b3fc:	46bd      	mov	sp, r7
    b3fe:	bc80      	pop	{r7}
    b400:	4770      	bx	lr

0000b402 <sys_dnode_init>:
{
    b402:	b480      	push	{r7}
    b404:	b083      	sub	sp, #12
    b406:	af00      	add	r7, sp, #0
    b408:	6078      	str	r0, [r7, #4]
	node->next = NULL;
    b40a:	687b      	ldr	r3, [r7, #4]
    b40c:	2200      	movs	r2, #0
    b40e:	601a      	str	r2, [r3, #0]
	node->prev = NULL;
    b410:	687b      	ldr	r3, [r7, #4]
    b412:	2200      	movs	r2, #0
    b414:	605a      	str	r2, [r3, #4]
}
    b416:	bf00      	nop
    b418:	370c      	adds	r7, #12
    b41a:	46bd      	mov	sp, r7
    b41c:	bc80      	pop	{r7}
    b41e:	4770      	bx	lr

0000b420 <sys_dlist_is_empty>:
{
    b420:	b480      	push	{r7}
    b422:	b083      	sub	sp, #12
    b424:	af00      	add	r7, sp, #0
    b426:	6078      	str	r0, [r7, #4]
	return list->head == list;
    b428:	687b      	ldr	r3, [r7, #4]
    b42a:	681b      	ldr	r3, [r3, #0]
    b42c:	687a      	ldr	r2, [r7, #4]
    b42e:	429a      	cmp	r2, r3
    b430:	bf0c      	ite	eq
    b432:	2301      	moveq	r3, #1
    b434:	2300      	movne	r3, #0
    b436:	b2db      	uxtb	r3, r3
}
    b438:	4618      	mov	r0, r3
    b43a:	370c      	adds	r7, #12
    b43c:	46bd      	mov	sp, r7
    b43e:	bc80      	pop	{r7}
    b440:	4770      	bx	lr

0000b442 <sys_dlist_peek_head>:
{
    b442:	b580      	push	{r7, lr}
    b444:	b082      	sub	sp, #8
    b446:	af00      	add	r7, sp, #0
    b448:	6078      	str	r0, [r7, #4]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    b44a:	6878      	ldr	r0, [r7, #4]
    b44c:	f7ff ffe8 	bl	b420 <sys_dlist_is_empty>
    b450:	4603      	mov	r3, r0
    b452:	2b00      	cmp	r3, #0
    b454:	d102      	bne.n	b45c <sys_dlist_peek_head+0x1a>
    b456:	687b      	ldr	r3, [r7, #4]
    b458:	681b      	ldr	r3, [r3, #0]
    b45a:	e000      	b.n	b45e <sys_dlist_peek_head+0x1c>
    b45c:	2300      	movs	r3, #0
}
    b45e:	4618      	mov	r0, r3
    b460:	3708      	adds	r7, #8
    b462:	46bd      	mov	sp, r7
    b464:	bd80      	pop	{r7, pc}

0000b466 <z_object_init>:
{
    b466:	b480      	push	{r7}
    b468:	b083      	sub	sp, #12
    b46a:	af00      	add	r7, sp, #0
    b46c:	6078      	str	r0, [r7, #4]
}
    b46e:	bf00      	nop
    b470:	370c      	adds	r7, #12
    b472:	46bd      	mov	sp, r7
    b474:	bc80      	pop	{r7}
    b476:	4770      	bx	lr

0000b478 <k_uptime_ticks>:
{
    b478:	b580      	push	{r7, lr}
    b47a:	af00      	add	r7, sp, #0
	return z_impl_k_uptime_ticks();
    b47c:	f7ff ffa9 	bl	b3d2 <z_impl_k_uptime_ticks>
    b480:	4602      	mov	r2, r0
    b482:	460b      	mov	r3, r1
}
    b484:	4610      	mov	r0, r2
    b486:	4619      	mov	r1, r3
    b488:	bd80      	pop	{r7, pc}

0000b48a <z_init_timeout>:
{
    b48a:	b580      	push	{r7, lr}
    b48c:	b082      	sub	sp, #8
    b48e:	af00      	add	r7, sp, #0
    b490:	6078      	str	r0, [r7, #4]
	sys_dnode_init(&to->node);
    b492:	687b      	ldr	r3, [r7, #4]
    b494:	4618      	mov	r0, r3
    b496:	f7ff ffb4 	bl	b402 <sys_dnode_init>
}
    b49a:	bf00      	nop
    b49c:	3708      	adds	r7, #8
    b49e:	46bd      	mov	sp, r7
    b4a0:	bd80      	pop	{r7, pc}

0000b4a2 <z_reschedule_unlocked>:
{
    b4a2:	b580      	push	{r7, lr}
    b4a4:	b082      	sub	sp, #8
    b4a6:	af00      	add	r7, sp, #0
	__asm__ volatile(
    b4a8:	f04f 0320 	mov.w	r3, #32
    b4ac:	f3ef 8211 	mrs	r2, BASEPRI
    b4b0:	f383 8812 	msr	BASEPRI_MAX, r3
    b4b4:	f3bf 8f6f 	isb	sy
    b4b8:	607a      	str	r2, [r7, #4]
    b4ba:	603b      	str	r3, [r7, #0]
	return key;
    b4bc:	687b      	ldr	r3, [r7, #4]
	(void) z_reschedule_irqlock(arch_irq_lock());
    b4be:	4618      	mov	r0, r3
    b4c0:	f7ff fe00 	bl	b0c4 <z_reschedule_irqlock>
}
    b4c4:	bf00      	nop
    b4c6:	3708      	adds	r7, #8
    b4c8:	46bd      	mov	sp, r7
    b4ca:	bd80      	pop	{r7, pc}

0000b4cc <z_waitq_init>:
{
    b4cc:	b580      	push	{r7, lr}
    b4ce:	b082      	sub	sp, #8
    b4d0:	af00      	add	r7, sp, #0
    b4d2:	6078      	str	r0, [r7, #4]
	sys_dlist_init(&w->waitq);
    b4d4:	687b      	ldr	r3, [r7, #4]
    b4d6:	4618      	mov	r0, r3
    b4d8:	f7ff ff84 	bl	b3e4 <sys_dlist_init>
}
    b4dc:	bf00      	nop
    b4de:	3708      	adds	r7, #8
    b4e0:	46bd      	mov	sp, r7
    b4e2:	bd80      	pop	{r7, pc}

0000b4e4 <z_waitq_head>:
{
    b4e4:	b580      	push	{r7, lr}
    b4e6:	b082      	sub	sp, #8
    b4e8:	af00      	add	r7, sp, #0
    b4ea:	6078      	str	r0, [r7, #4]
	return (struct k_thread *)sys_dlist_peek_head(&w->waitq);
    b4ec:	687b      	ldr	r3, [r7, #4]
    b4ee:	4618      	mov	r0, r3
    b4f0:	f7ff ffa7 	bl	b442 <sys_dlist_peek_head>
    b4f4:	4603      	mov	r3, r0
}
    b4f6:	4618      	mov	r0, r3
    b4f8:	3708      	adds	r7, #8
    b4fa:	46bd      	mov	sp, r7
    b4fc:	bd80      	pop	{r7, pc}

0000b4fe <k_timer_init>:
{
    b4fe:	b580      	push	{r7, lr}
    b500:	b084      	sub	sp, #16
    b502:	af00      	add	r7, sp, #0
    b504:	60f8      	str	r0, [r7, #12]
    b506:	60b9      	str	r1, [r7, #8]
    b508:	607a      	str	r2, [r7, #4]
	timer->expiry_fn = expiry_fn;
    b50a:	68fb      	ldr	r3, [r7, #12]
    b50c:	68ba      	ldr	r2, [r7, #8]
    b50e:	621a      	str	r2, [r3, #32]
	timer->stop_fn = stop_fn;
    b510:	68fb      	ldr	r3, [r7, #12]
    b512:	687a      	ldr	r2, [r7, #4]
    b514:	625a      	str	r2, [r3, #36]	; 0x24
	timer->status = 0U;
    b516:	68fb      	ldr	r3, [r7, #12]
    b518:	2200      	movs	r2, #0
    b51a:	631a      	str	r2, [r3, #48]	; 0x30
		z_waitq_init(&timer->wait_q);
    b51c:	68fb      	ldr	r3, [r7, #12]
    b51e:	3318      	adds	r3, #24
    b520:	4618      	mov	r0, r3
    b522:	f7ff ffd3 	bl	b4cc <z_waitq_init>
	z_init_timeout(&timer->timeout);
    b526:	68fb      	ldr	r3, [r7, #12]
    b528:	4618      	mov	r0, r3
    b52a:	f7ff ffae 	bl	b48a <z_init_timeout>
	timer->user_data = NULL;
    b52e:	68fb      	ldr	r3, [r7, #12]
    b530:	2200      	movs	r2, #0
    b532:	635a      	str	r2, [r3, #52]	; 0x34
	z_object_init(timer);
    b534:	68f8      	ldr	r0, [r7, #12]
    b536:	f7ff ff96 	bl	b466 <z_object_init>
}
    b53a:	bf00      	nop
    b53c:	3710      	adds	r7, #16
    b53e:	46bd      	mov	sp, r7
    b540:	bd80      	pop	{r7, pc}

0000b542 <z_impl_k_timer_stop>:
}
#include <syscalls/k_timer_start_mrsh.c>
#endif

void z_impl_k_timer_stop(struct k_timer *timer)
{
    b542:	b580      	push	{r7, lr}
    b544:	b084      	sub	sp, #16
    b546:	af00      	add	r7, sp, #0
    b548:	6078      	str	r0, [r7, #4]
	SYS_PORT_TRACING_OBJ_FUNC(k_timer, stop, timer);

	int inactive = z_abort_timeout(&timer->timeout) != 0;
    b54a:	687b      	ldr	r3, [r7, #4]
    b54c:	4618      	mov	r0, r3
    b54e:	f7fc fbad 	bl	7cac <z_abort_timeout>
    b552:	4603      	mov	r3, r0
    b554:	2b00      	cmp	r3, #0
    b556:	bf14      	ite	ne
    b558:	2301      	movne	r3, #1
    b55a:	2300      	moveq	r3, #0
    b55c:	b2db      	uxtb	r3, r3
    b55e:	60fb      	str	r3, [r7, #12]

	if (inactive) {
    b560:	68fb      	ldr	r3, [r7, #12]
    b562:	2b00      	cmp	r3, #0
    b564:	d116      	bne.n	b594 <z_impl_k_timer_stop+0x52>
		return;
	}

	if (timer->stop_fn != NULL) {
    b566:	687b      	ldr	r3, [r7, #4]
    b568:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    b56a:	2b00      	cmp	r3, #0
    b56c:	d003      	beq.n	b576 <z_impl_k_timer_stop+0x34>
		timer->stop_fn(timer);
    b56e:	687b      	ldr	r3, [r7, #4]
    b570:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    b572:	6878      	ldr	r0, [r7, #4]
    b574:	4798      	blx	r3
	}

	if (IS_ENABLED(CONFIG_MULTITHREADING)) {
		struct k_thread *pending_thread = z_unpend1_no_timeout(&timer->wait_q);
    b576:	687b      	ldr	r3, [r7, #4]
    b578:	3318      	adds	r3, #24
    b57a:	4618      	mov	r0, r3
    b57c:	f7fb fe90 	bl	72a0 <z_unpend1_no_timeout>
    b580:	60b8      	str	r0, [r7, #8]

		if (pending_thread != NULL) {
    b582:	68bb      	ldr	r3, [r7, #8]
    b584:	2b00      	cmp	r3, #0
    b586:	d006      	beq.n	b596 <z_impl_k_timer_stop+0x54>
			z_ready_thread(pending_thread);
    b588:	68b8      	ldr	r0, [r7, #8]
    b58a:	f7fb fc47 	bl	6e1c <z_ready_thread>
			z_reschedule_unlocked();
    b58e:	f7ff ff88 	bl	b4a2 <z_reschedule_unlocked>
    b592:	e000      	b.n	b596 <z_impl_k_timer_stop+0x54>
		return;
    b594:	bf00      	nop
		}
	}
}
    b596:	3710      	adds	r7, #16
    b598:	46bd      	mov	sp, r7
    b59a:	bd80      	pop	{r7, pc}

0000b59c <k_busy_wait>:
{
    b59c:	b580      	push	{r7, lr}
    b59e:	b082      	sub	sp, #8
    b5a0:	af00      	add	r7, sp, #0
    b5a2:	6078      	str	r0, [r7, #4]
	z_impl_k_busy_wait(usec_to_wait);
    b5a4:	6878      	ldr	r0, [r7, #4]
    b5a6:	f7fc fd37 	bl	8018 <z_impl_k_busy_wait>
}
    b5aa:	bf00      	nop
    b5ac:	3708      	adds	r7, #8
    b5ae:	46bd      	mov	sp, r7
    b5b0:	bd80      	pop	{r7, pc}
