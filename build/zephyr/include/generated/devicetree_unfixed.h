/*
 * Generated by gen_defines.py
 *
 * DTS input file:
 *   C:/Users/skall/source/repos/rp2040-test/build/zephyr/zephyr.dts.pre
 *
 * Directories with bindings:
 *   C:/Users/skall/source/repos/zephyr-3.1.0/zephyr/dts/bindings
 *
 * Node dependency ordering (ordinal and path):
 *   0   /
 *   1   /aliases
 *   2   /chosen
 *   3   /memory@20000000
 *   4   /cpus
 *   5   /cpus/cpu@0
 *   6   /soc
 *   7   /soc/interrupt-controller@e000e100
 *   8   /soc/ethernet@40048000
 *   9   /soc/gpio@40004000
 *   10  /soc/gpio@40005000
 *   11  /soc/gpio@40006000
 *   12  /soc/gpio@40007000
 *   13  /soc/gpio@40024000
 *   14  /soc/gpio@40025000
 *   15  /soc/gpio@40026000
 *   16  /soc/timer@e000e010
 *   17  /system-clock
 *   18  /soc/uart@4000c000
 *   19  /soc/uart@4000d000
 *   20  /soc/uart@4000e000
 *   21  /soc/flash-controller@400fd000
 *   22  /soc/flash-controller@400fd000/flash@0
 *
 * Definitions derived from these nodes in dependency order are next,
 * followed by /chosen nodes.
 */

/*
 * Devicetree node: /
 *
 * Node identifier: DT_N
 */

/* Node's full path: */
#define DT_N_PATH "/"

/* Node's name with unit-address: */
#define DT_N_FULL_NAME "/"
#define DT_N_FOREACH_CHILD(fn) fn(DT_N_S_chosen) fn(DT_N_S_aliases) fn(DT_N_S_soc) fn(DT_N_S_cpus) fn(DT_N_S_memory_20000000) fn(DT_N_S_system_clock)
#define DT_N_FOREACH_CHILD_VARGS(fn, ...) fn(DT_N_S_chosen, __VA_ARGS__) fn(DT_N_S_aliases, __VA_ARGS__) fn(DT_N_S_soc, __VA_ARGS__) fn(DT_N_S_cpus, __VA_ARGS__) fn(DT_N_S_memory_20000000, __VA_ARGS__) fn(DT_N_S_system_clock, __VA_ARGS__)
#define DT_N_FOREACH_CHILD_STATUS_OKAY(fn) fn(DT_N_S_chosen) fn(DT_N_S_aliases) fn(DT_N_S_soc) fn(DT_N_S_cpus) fn(DT_N_S_memory_20000000) fn(DT_N_S_system_clock) 
#define DT_N_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) fn(DT_N_S_chosen, __VA_ARGS__) fn(DT_N_S_aliases, __VA_ARGS__) fn(DT_N_S_soc, __VA_ARGS__) fn(DT_N_S_cpus, __VA_ARGS__) fn(DT_N_S_memory_20000000, __VA_ARGS__) fn(DT_N_S_system_clock, __VA_ARGS__) 

/* Node's dependency ordinal: */
#define DT_N_ORD 0

/* Ordinals for what this node depends on directly: */
#define DT_N_REQUIRES_ORDS /* nothing */

/* Ordinals for what depends directly on this node: */
#define DT_N_SUPPORTS_ORDS \
	1, /* /aliases */ \
	2, /* /chosen */ \
	3, /* /memory@20000000 */ \
	4, /* /cpus */ \
	6, /* /soc */ \
	17, /* /system-clock */

/* Existence and alternate IDs: */
#define DT_N_EXISTS 1
#define DT_N_INST_0_ti_lm3s6965evb_qemu DT_N
#define DT_N_INST_0_ti_lm3s6965         DT_N

/* Macros for properties that are special in the specification: */
#define DT_N_REG_NUM 0
#define DT_N_RANGES_NUM 0
#define DT_N_FOREACH_RANGE(fn) 
#define DT_N_IRQ_NUM 0
#define DT_N_COMPAT_MATCHES_ti_lm3s6965evb_qemu 1
#define DT_N_COMPAT_MATCHES_ti_lm3s6965 1
#define DT_N_STATUS_okay 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_PINCTRL_NUM 0

/* Generic property macros: */
#define DT_N_P_compatible {"ti,lm3s6965evb-qemu", "ti,lm3s6965"}
#define DT_N_P_compatible_IDX_0 "ti,lm3s6965evb-qemu"
#define DT_N_P_compatible_IDX_0_EXISTS 1
#define DT_N_P_compatible_IDX_1 "ti,lm3s6965"
#define DT_N_P_compatible_IDX_1_EXISTS 1
#define DT_N_P_compatible_FOREACH_PROP_ELEM(fn) fn(DT_N, compatible, 0) \
	fn(DT_N, compatible, 1)
#define DT_N_P_compatible_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N, compatible, 0, __VA_ARGS__) \
	fn(DT_N, compatible, 1, __VA_ARGS__)
#define DT_N_P_compatible_LEN 2
#define DT_N_P_compatible_EXISTS 1

/*
 * Devicetree node: /aliases
 *
 * Node identifier: DT_N_S_aliases
 */

/* Node's full path: */
#define DT_N_S_aliases_PATH "/aliases"

/* Node's name with unit-address: */
#define DT_N_S_aliases_FULL_NAME "aliases"

/* Node parent (/) identifier: */
#define DT_N_S_aliases_PARENT DT_N

/* Node's index in its parent's list of children: */
#define DT_N_S_aliases_CHILD_IDX 1
#define DT_N_S_aliases_FOREACH_CHILD(fn) 
#define DT_N_S_aliases_FOREACH_CHILD_VARGS(fn, ...) 
#define DT_N_S_aliases_FOREACH_CHILD_STATUS_OKAY(fn) 
#define DT_N_S_aliases_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) 

/* Node's dependency ordinal: */
#define DT_N_S_aliases_ORD 1

/* Ordinals for what this node depends on directly: */
#define DT_N_S_aliases_REQUIRES_ORDS \
	0, /* / */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_aliases_SUPPORTS_ORDS /* nothing */

/* Existence and alternate IDs: */
#define DT_N_S_aliases_EXISTS 1

/* Macros for properties that are special in the specification: */
#define DT_N_S_aliases_REG_NUM 0
#define DT_N_S_aliases_RANGES_NUM 0
#define DT_N_S_aliases_FOREACH_RANGE(fn) 
#define DT_N_S_aliases_IRQ_NUM 0
#define DT_N_S_aliases_STATUS_okay 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_aliases_PINCTRL_NUM 0

/* (No generic property macros) */

/*
 * Devicetree node: /chosen
 *
 * Node identifier: DT_N_S_chosen
 */

/* Node's full path: */
#define DT_N_S_chosen_PATH "/chosen"

/* Node's name with unit-address: */
#define DT_N_S_chosen_FULL_NAME "chosen"

/* Node parent (/) identifier: */
#define DT_N_S_chosen_PARENT DT_N

/* Node's index in its parent's list of children: */
#define DT_N_S_chosen_CHILD_IDX 0
#define DT_N_S_chosen_FOREACH_CHILD(fn) 
#define DT_N_S_chosen_FOREACH_CHILD_VARGS(fn, ...) 
#define DT_N_S_chosen_FOREACH_CHILD_STATUS_OKAY(fn) 
#define DT_N_S_chosen_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) 

/* Node's dependency ordinal: */
#define DT_N_S_chosen_ORD 2

/* Ordinals for what this node depends on directly: */
#define DT_N_S_chosen_REQUIRES_ORDS \
	0, /* / */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_chosen_SUPPORTS_ORDS /* nothing */

/* Existence and alternate IDs: */
#define DT_N_S_chosen_EXISTS 1

/* Macros for properties that are special in the specification: */
#define DT_N_S_chosen_REG_NUM 0
#define DT_N_S_chosen_RANGES_NUM 0
#define DT_N_S_chosen_FOREACH_RANGE(fn) 
#define DT_N_S_chosen_IRQ_NUM 0
#define DT_N_S_chosen_STATUS_okay 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_chosen_PINCTRL_NUM 0

/* (No generic property macros) */

/*
 * Devicetree node: /memory@20000000
 *
 * Node identifier: DT_N_S_memory_20000000
 *
 * Binding (compatible = mmio-sram):
 *   C:/Users/skall/source/repos/zephyr-3.1.0/zephyr/dts/bindings\sram\mmio-sram.yaml
 *
 * (Descriptions have moved to the Devicetree Bindings Index
 * in the documentation.)
 */

/* Node's full path: */
#define DT_N_S_memory_20000000_PATH "/memory@20000000"

/* Node's name with unit-address: */
#define DT_N_S_memory_20000000_FULL_NAME "memory@20000000"

/* Node parent (/) identifier: */
#define DT_N_S_memory_20000000_PARENT DT_N

/* Node's index in its parent's list of children: */
#define DT_N_S_memory_20000000_CHILD_IDX 4
#define DT_N_S_memory_20000000_FOREACH_CHILD(fn) 
#define DT_N_S_memory_20000000_FOREACH_CHILD_VARGS(fn, ...) 
#define DT_N_S_memory_20000000_FOREACH_CHILD_STATUS_OKAY(fn) 
#define DT_N_S_memory_20000000_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) 

/* Node's dependency ordinal: */
#define DT_N_S_memory_20000000_ORD 3

/* Ordinals for what this node depends on directly: */
#define DT_N_S_memory_20000000_REQUIRES_ORDS \
	0, /* / */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_memory_20000000_SUPPORTS_ORDS /* nothing */

/* Existence and alternate IDs: */
#define DT_N_S_memory_20000000_EXISTS 1
#define DT_N_INST_0_mmio_sram DT_N_S_memory_20000000
#define DT_N_NODELABEL_sram0  DT_N_S_memory_20000000

/* Macros for properties that are special in the specification: */
#define DT_N_S_memory_20000000_REG_NUM 1
#define DT_N_S_memory_20000000_REG_IDX_0_EXISTS 1
#define DT_N_S_memory_20000000_REG_IDX_0_VAL_ADDRESS 536870912 /* 0x20000000 */
#define DT_N_S_memory_20000000_REG_IDX_0_VAL_SIZE 65536 /* 0x10000 */
#define DT_N_S_memory_20000000_RANGES_NUM 0
#define DT_N_S_memory_20000000_FOREACH_RANGE(fn) 
#define DT_N_S_memory_20000000_IRQ_NUM 0
#define DT_N_S_memory_20000000_COMPAT_MATCHES_mmio_sram 1
#define DT_N_S_memory_20000000_STATUS_okay 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_memory_20000000_PINCTRL_NUM 0

/* Generic property macros: */
#define DT_N_S_memory_20000000_P_reg {536870912 /* 0x20000000 */, 65536 /* 0x10000 */}
#define DT_N_S_memory_20000000_P_reg_IDX_0 536870912
#define DT_N_S_memory_20000000_P_reg_IDX_0_EXISTS 1
#define DT_N_S_memory_20000000_P_reg_IDX_1 65536
#define DT_N_S_memory_20000000_P_reg_IDX_1_EXISTS 1
#define DT_N_S_memory_20000000_P_reg_FOREACH_PROP_ELEM(fn) fn(DT_N_S_memory_20000000, reg, 0) \
	fn(DT_N_S_memory_20000000, reg, 1)
#define DT_N_S_memory_20000000_P_reg_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_memory_20000000, reg, 0, __VA_ARGS__) \
	fn(DT_N_S_memory_20000000, reg, 1, __VA_ARGS__)
#define DT_N_S_memory_20000000_P_reg_EXISTS 1
#define DT_N_S_memory_20000000_P_compatible {"mmio-sram"}
#define DT_N_S_memory_20000000_P_compatible_IDX_0 "mmio-sram"
#define DT_N_S_memory_20000000_P_compatible_IDX_0_EXISTS 1
#define DT_N_S_memory_20000000_P_compatible_FOREACH_PROP_ELEM(fn) fn(DT_N_S_memory_20000000, compatible, 0)
#define DT_N_S_memory_20000000_P_compatible_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_memory_20000000, compatible, 0, __VA_ARGS__)
#define DT_N_S_memory_20000000_P_compatible_LEN 1
#define DT_N_S_memory_20000000_P_compatible_EXISTS 1
#define DT_N_S_memory_20000000_P_wakeup_source 0
#define DT_N_S_memory_20000000_P_wakeup_source_EXISTS 1

/*
 * Devicetree node: /cpus
 *
 * Node identifier: DT_N_S_cpus
 */

/* Node's full path: */
#define DT_N_S_cpus_PATH "/cpus"

/* Node's name with unit-address: */
#define DT_N_S_cpus_FULL_NAME "cpus"

/* Node parent (/) identifier: */
#define DT_N_S_cpus_PARENT DT_N

/* Node's index in its parent's list of children: */
#define DT_N_S_cpus_CHILD_IDX 3
#define DT_N_S_cpus_FOREACH_CHILD(fn) fn(DT_N_S_cpus_S_cpu_0)
#define DT_N_S_cpus_FOREACH_CHILD_VARGS(fn, ...) fn(DT_N_S_cpus_S_cpu_0, __VA_ARGS__)
#define DT_N_S_cpus_FOREACH_CHILD_STATUS_OKAY(fn) fn(DT_N_S_cpus_S_cpu_0) 
#define DT_N_S_cpus_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) fn(DT_N_S_cpus_S_cpu_0, __VA_ARGS__) 

/* Node's dependency ordinal: */
#define DT_N_S_cpus_ORD 4

/* Ordinals for what this node depends on directly: */
#define DT_N_S_cpus_REQUIRES_ORDS \
	0, /* / */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_cpus_SUPPORTS_ORDS \
	5, /* /cpus/cpu@0 */

/* Existence and alternate IDs: */
#define DT_N_S_cpus_EXISTS 1

/* Macros for properties that are special in the specification: */
#define DT_N_S_cpus_REG_NUM 0
#define DT_N_S_cpus_RANGES_NUM 0
#define DT_N_S_cpus_FOREACH_RANGE(fn) 
#define DT_N_S_cpus_IRQ_NUM 0
#define DT_N_S_cpus_STATUS_okay 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_cpus_PINCTRL_NUM 0

/* (No generic property macros) */

/*
 * Devicetree node: /cpus/cpu@0
 *
 * Node identifier: DT_N_S_cpus_S_cpu_0
 *
 * Binding (compatible = arm,cortex-m3):
 *   C:/Users/skall/source/repos/zephyr-3.1.0/zephyr/dts/bindings\cpu\arm,cortex-m3.yaml
 *
 * (Descriptions have moved to the Devicetree Bindings Index
 * in the documentation.)
 */

/* Node's full path: */
#define DT_N_S_cpus_S_cpu_0_PATH "/cpus/cpu@0"

/* Node's name with unit-address: */
#define DT_N_S_cpus_S_cpu_0_FULL_NAME "cpu@0"

/* Node parent (/cpus) identifier: */
#define DT_N_S_cpus_S_cpu_0_PARENT DT_N_S_cpus

/* Node's index in its parent's list of children: */
#define DT_N_S_cpus_S_cpu_0_CHILD_IDX 0
#define DT_N_S_cpus_S_cpu_0_FOREACH_CHILD(fn) 
#define DT_N_S_cpus_S_cpu_0_FOREACH_CHILD_VARGS(fn, ...) 
#define DT_N_S_cpus_S_cpu_0_FOREACH_CHILD_STATUS_OKAY(fn) 
#define DT_N_S_cpus_S_cpu_0_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) 

/* Node's dependency ordinal: */
#define DT_N_S_cpus_S_cpu_0_ORD 5

/* Ordinals for what this node depends on directly: */
#define DT_N_S_cpus_S_cpu_0_REQUIRES_ORDS \
	4, /* /cpus */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_cpus_S_cpu_0_SUPPORTS_ORDS /* nothing */

/* Existence and alternate IDs: */
#define DT_N_S_cpus_S_cpu_0_EXISTS 1
#define DT_N_INST_0_arm_cortex_m3 DT_N_S_cpus_S_cpu_0

/* Macros for properties that are special in the specification: */
#define DT_N_S_cpus_S_cpu_0_REG_NUM 1
#define DT_N_S_cpus_S_cpu_0_REG_IDX_0_EXISTS 1
#define DT_N_S_cpus_S_cpu_0_REG_IDX_0_VAL_ADDRESS 0 /* 0x0 */
#define DT_N_S_cpus_S_cpu_0_RANGES_NUM 0
#define DT_N_S_cpus_S_cpu_0_FOREACH_RANGE(fn) 
#define DT_N_S_cpus_S_cpu_0_IRQ_NUM 0
#define DT_N_S_cpus_S_cpu_0_COMPAT_MATCHES_arm_cortex_m3 1
#define DT_N_S_cpus_S_cpu_0_STATUS_okay 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_cpus_S_cpu_0_PINCTRL_NUM 0

/* Generic property macros: */
#define DT_N_S_cpus_S_cpu_0_P_compatible {"arm,cortex-m3"}
#define DT_N_S_cpus_S_cpu_0_P_compatible_IDX_0 "arm,cortex-m3"
#define DT_N_S_cpus_S_cpu_0_P_compatible_IDX_0_EXISTS 1
#define DT_N_S_cpus_S_cpu_0_P_compatible_FOREACH_PROP_ELEM(fn) fn(DT_N_S_cpus_S_cpu_0, compatible, 0)
#define DT_N_S_cpus_S_cpu_0_P_compatible_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_cpus_S_cpu_0, compatible, 0, __VA_ARGS__)
#define DT_N_S_cpus_S_cpu_0_P_compatible_LEN 1
#define DT_N_S_cpus_S_cpu_0_P_compatible_EXISTS 1
#define DT_N_S_cpus_S_cpu_0_P_reg {0 /* 0x0 */}
#define DT_N_S_cpus_S_cpu_0_P_reg_IDX_0 0
#define DT_N_S_cpus_S_cpu_0_P_reg_IDX_0_EXISTS 1
#define DT_N_S_cpus_S_cpu_0_P_reg_FOREACH_PROP_ELEM(fn) fn(DT_N_S_cpus_S_cpu_0, reg, 0)
#define DT_N_S_cpus_S_cpu_0_P_reg_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_cpus_S_cpu_0, reg, 0, __VA_ARGS__)
#define DT_N_S_cpus_S_cpu_0_P_reg_EXISTS 1
#define DT_N_S_cpus_S_cpu_0_P_wakeup_source 0
#define DT_N_S_cpus_S_cpu_0_P_wakeup_source_EXISTS 1

/*
 * Devicetree node: /soc
 *
 * Node identifier: DT_N_S_soc
 */

/* Node's full path: */
#define DT_N_S_soc_PATH "/soc"

/* Node's name with unit-address: */
#define DT_N_S_soc_FULL_NAME "soc"

/* Node parent (/) identifier: */
#define DT_N_S_soc_PARENT DT_N

/* Node's index in its parent's list of children: */
#define DT_N_S_soc_CHILD_IDX 2
#define DT_N_S_soc_FOREACH_CHILD(fn) fn(DT_N_S_soc_S_interrupt_controller_e000e100) fn(DT_N_S_soc_S_timer_e000e010) fn(DT_N_S_soc_S_flash_controller_400fd000) fn(DT_N_S_soc_S_uart_4000c000) fn(DT_N_S_soc_S_uart_4000d000) fn(DT_N_S_soc_S_uart_4000e000) fn(DT_N_S_soc_S_ethernet_40048000) fn(DT_N_S_soc_S_gpio_40004000) fn(DT_N_S_soc_S_gpio_40005000) fn(DT_N_S_soc_S_gpio_40006000) fn(DT_N_S_soc_S_gpio_40007000) fn(DT_N_S_soc_S_gpio_40024000) fn(DT_N_S_soc_S_gpio_40025000) fn(DT_N_S_soc_S_gpio_40026000)
#define DT_N_S_soc_FOREACH_CHILD_VARGS(fn, ...) fn(DT_N_S_soc_S_interrupt_controller_e000e100, __VA_ARGS__) fn(DT_N_S_soc_S_timer_e000e010, __VA_ARGS__) fn(DT_N_S_soc_S_flash_controller_400fd000, __VA_ARGS__) fn(DT_N_S_soc_S_uart_4000c000, __VA_ARGS__) fn(DT_N_S_soc_S_uart_4000d000, __VA_ARGS__) fn(DT_N_S_soc_S_uart_4000e000, __VA_ARGS__) fn(DT_N_S_soc_S_ethernet_40048000, __VA_ARGS__) fn(DT_N_S_soc_S_gpio_40004000, __VA_ARGS__) fn(DT_N_S_soc_S_gpio_40005000, __VA_ARGS__) fn(DT_N_S_soc_S_gpio_40006000, __VA_ARGS__) fn(DT_N_S_soc_S_gpio_40007000, __VA_ARGS__) fn(DT_N_S_soc_S_gpio_40024000, __VA_ARGS__) fn(DT_N_S_soc_S_gpio_40025000, __VA_ARGS__) fn(DT_N_S_soc_S_gpio_40026000, __VA_ARGS__)
#define DT_N_S_soc_FOREACH_CHILD_STATUS_OKAY(fn) fn(DT_N_S_soc_S_interrupt_controller_e000e100) fn(DT_N_S_soc_S_timer_e000e010) fn(DT_N_S_soc_S_flash_controller_400fd000) fn(DT_N_S_soc_S_uart_4000c000) fn(DT_N_S_soc_S_uart_4000d000) fn(DT_N_S_soc_S_uart_4000e000) fn(DT_N_S_soc_S_ethernet_40048000) fn(DT_N_S_soc_S_gpio_40004000) fn(DT_N_S_soc_S_gpio_40005000) fn(DT_N_S_soc_S_gpio_40006000) fn(DT_N_S_soc_S_gpio_40007000) fn(DT_N_S_soc_S_gpio_40024000) fn(DT_N_S_soc_S_gpio_40025000) fn(DT_N_S_soc_S_gpio_40026000) 
#define DT_N_S_soc_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) fn(DT_N_S_soc_S_interrupt_controller_e000e100, __VA_ARGS__) fn(DT_N_S_soc_S_timer_e000e010, __VA_ARGS__) fn(DT_N_S_soc_S_flash_controller_400fd000, __VA_ARGS__) fn(DT_N_S_soc_S_uart_4000c000, __VA_ARGS__) fn(DT_N_S_soc_S_uart_4000d000, __VA_ARGS__) fn(DT_N_S_soc_S_uart_4000e000, __VA_ARGS__) fn(DT_N_S_soc_S_ethernet_40048000, __VA_ARGS__) fn(DT_N_S_soc_S_gpio_40004000, __VA_ARGS__) fn(DT_N_S_soc_S_gpio_40005000, __VA_ARGS__) fn(DT_N_S_soc_S_gpio_40006000, __VA_ARGS__) fn(DT_N_S_soc_S_gpio_40007000, __VA_ARGS__) fn(DT_N_S_soc_S_gpio_40024000, __VA_ARGS__) fn(DT_N_S_soc_S_gpio_40025000, __VA_ARGS__) fn(DT_N_S_soc_S_gpio_40026000, __VA_ARGS__) 

/* Node's dependency ordinal: */
#define DT_N_S_soc_ORD 6

/* Ordinals for what this node depends on directly: */
#define DT_N_S_soc_REQUIRES_ORDS \
	0, /* / */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_soc_SUPPORTS_ORDS \
	7, /* /soc/interrupt-controller@e000e100 */ \
	8, /* /soc/ethernet@40048000 */ \
	9, /* /soc/gpio@40004000 */ \
	10, /* /soc/gpio@40005000 */ \
	11, /* /soc/gpio@40006000 */ \
	12, /* /soc/gpio@40007000 */ \
	13, /* /soc/gpio@40024000 */ \
	14, /* /soc/gpio@40025000 */ \
	15, /* /soc/gpio@40026000 */ \
	16, /* /soc/timer@e000e010 */ \
	18, /* /soc/uart@4000c000 */ \
	19, /* /soc/uart@4000d000 */ \
	20, /* /soc/uart@4000e000 */ \
	21, /* /soc/flash-controller@400fd000 */

/* Existence and alternate IDs: */
#define DT_N_S_soc_EXISTS 1
#define DT_N_INST_0_simple_bus DT_N_S_soc

/* Macros for properties that are special in the specification: */
#define DT_N_S_soc_REG_NUM 0
#define DT_N_S_soc_RANGES_NUM 0
#define DT_N_S_soc_FOREACH_RANGE(fn) 
#define DT_N_S_soc_IRQ_NUM 0
#define DT_N_S_soc_COMPAT_MATCHES_simple_bus 1
#define DT_N_S_soc_STATUS_okay 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_soc_PINCTRL_NUM 0

/* Generic property macros: */
#define DT_N_S_soc_P_compatible {"simple-bus"}
#define DT_N_S_soc_P_compatible_IDX_0 "simple-bus"
#define DT_N_S_soc_P_compatible_IDX_0_EXISTS 1
#define DT_N_S_soc_P_compatible_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc, compatible, 0)
#define DT_N_S_soc_P_compatible_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc, compatible, 0, __VA_ARGS__)
#define DT_N_S_soc_P_compatible_LEN 1
#define DT_N_S_soc_P_compatible_EXISTS 1

/*
 * Devicetree node: /soc/interrupt-controller@e000e100
 *
 * Node identifier: DT_N_S_soc_S_interrupt_controller_e000e100
 *
 * Binding (compatible = arm,v7m-nvic):
 *   C:/Users/skall/source/repos/zephyr-3.1.0/zephyr/dts/bindings\interrupt-controller\arm,v7m-nvic.yaml
 *
 * (Descriptions have moved to the Devicetree Bindings Index
 * in the documentation.)
 */

/* Node's full path: */
#define DT_N_S_soc_S_interrupt_controller_e000e100_PATH "/soc/interrupt-controller@e000e100"

/* Node's name with unit-address: */
#define DT_N_S_soc_S_interrupt_controller_e000e100_FULL_NAME "interrupt-controller@e000e100"

/* Node parent (/soc) identifier: */
#define DT_N_S_soc_S_interrupt_controller_e000e100_PARENT DT_N_S_soc

/* Node's index in its parent's list of children: */
#define DT_N_S_soc_S_interrupt_controller_e000e100_CHILD_IDX 0
#define DT_N_S_soc_S_interrupt_controller_e000e100_FOREACH_CHILD(fn) 
#define DT_N_S_soc_S_interrupt_controller_e000e100_FOREACH_CHILD_VARGS(fn, ...) 
#define DT_N_S_soc_S_interrupt_controller_e000e100_FOREACH_CHILD_STATUS_OKAY(fn) 
#define DT_N_S_soc_S_interrupt_controller_e000e100_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) 

/* Node's dependency ordinal: */
#define DT_N_S_soc_S_interrupt_controller_e000e100_ORD 7

/* Ordinals for what this node depends on directly: */
#define DT_N_S_soc_S_interrupt_controller_e000e100_REQUIRES_ORDS \
	6, /* /soc */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_soc_S_interrupt_controller_e000e100_SUPPORTS_ORDS \
	8, /* /soc/ethernet@40048000 */ \
	9, /* /soc/gpio@40004000 */ \
	10, /* /soc/gpio@40005000 */ \
	11, /* /soc/gpio@40006000 */ \
	12, /* /soc/gpio@40007000 */ \
	13, /* /soc/gpio@40024000 */ \
	14, /* /soc/gpio@40025000 */ \
	15, /* /soc/gpio@40026000 */ \
	18, /* /soc/uart@4000c000 */ \
	19, /* /soc/uart@4000d000 */ \
	20, /* /soc/uart@4000e000 */

/* Existence and alternate IDs: */
#define DT_N_S_soc_S_interrupt_controller_e000e100_EXISTS 1
#define DT_N_INST_0_arm_v7m_nvic DT_N_S_soc_S_interrupt_controller_e000e100
#define DT_N_NODELABEL_nvic      DT_N_S_soc_S_interrupt_controller_e000e100

/* Macros for properties that are special in the specification: */
#define DT_N_S_soc_S_interrupt_controller_e000e100_REG_NUM 1
#define DT_N_S_soc_S_interrupt_controller_e000e100_REG_IDX_0_EXISTS 1
#define DT_N_S_soc_S_interrupt_controller_e000e100_REG_IDX_0_VAL_ADDRESS 3758153984 /* 0xe000e100 */
#define DT_N_S_soc_S_interrupt_controller_e000e100_REG_IDX_0_VAL_SIZE 3072 /* 0xc00 */
#define DT_N_S_soc_S_interrupt_controller_e000e100_RANGES_NUM 0
#define DT_N_S_soc_S_interrupt_controller_e000e100_FOREACH_RANGE(fn) 
#define DT_N_S_soc_S_interrupt_controller_e000e100_IRQ_NUM 0
#define DT_N_S_soc_S_interrupt_controller_e000e100_COMPAT_MATCHES_arm_v7m_nvic 1
#define DT_N_S_soc_S_interrupt_controller_e000e100_STATUS_okay 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_soc_S_interrupt_controller_e000e100_PINCTRL_NUM 0

/* Generic property macros: */
#define DT_N_S_soc_S_interrupt_controller_e000e100_P_reg {3758153984 /* 0xe000e100 */, 3072 /* 0xc00 */}
#define DT_N_S_soc_S_interrupt_controller_e000e100_P_reg_IDX_0 3758153984
#define DT_N_S_soc_S_interrupt_controller_e000e100_P_reg_IDX_0_EXISTS 1
#define DT_N_S_soc_S_interrupt_controller_e000e100_P_reg_IDX_1 3072
#define DT_N_S_soc_S_interrupt_controller_e000e100_P_reg_IDX_1_EXISTS 1
#define DT_N_S_soc_S_interrupt_controller_e000e100_P_reg_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_interrupt_controller_e000e100, reg, 0) \
	fn(DT_N_S_soc_S_interrupt_controller_e000e100, reg, 1)
#define DT_N_S_soc_S_interrupt_controller_e000e100_P_reg_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_interrupt_controller_e000e100, reg, 0, __VA_ARGS__) \
	fn(DT_N_S_soc_S_interrupt_controller_e000e100, reg, 1, __VA_ARGS__)
#define DT_N_S_soc_S_interrupt_controller_e000e100_P_reg_EXISTS 1
#define DT_N_S_soc_S_interrupt_controller_e000e100_P_arm_num_irq_priority_bits 3
#define DT_N_S_soc_S_interrupt_controller_e000e100_P_arm_num_irq_priority_bits_EXISTS 1
#define DT_N_S_soc_S_interrupt_controller_e000e100_P_interrupt_controller 1
#define DT_N_S_soc_S_interrupt_controller_e000e100_P_interrupt_controller_EXISTS 1
#define DT_N_S_soc_S_interrupt_controller_e000e100_P_compatible {"arm,v7m-nvic"}
#define DT_N_S_soc_S_interrupt_controller_e000e100_P_compatible_IDX_0 "arm,v7m-nvic"
#define DT_N_S_soc_S_interrupt_controller_e000e100_P_compatible_IDX_0_EXISTS 1
#define DT_N_S_soc_S_interrupt_controller_e000e100_P_compatible_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_interrupt_controller_e000e100, compatible, 0)
#define DT_N_S_soc_S_interrupt_controller_e000e100_P_compatible_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_interrupt_controller_e000e100, compatible, 0, __VA_ARGS__)
#define DT_N_S_soc_S_interrupt_controller_e000e100_P_compatible_LEN 1
#define DT_N_S_soc_S_interrupt_controller_e000e100_P_compatible_EXISTS 1
#define DT_N_S_soc_S_interrupt_controller_e000e100_P_wakeup_source 0
#define DT_N_S_soc_S_interrupt_controller_e000e100_P_wakeup_source_EXISTS 1

/*
 * Devicetree node: /soc/ethernet@40048000
 *
 * Node identifier: DT_N_S_soc_S_ethernet_40048000
 *
 * Binding (compatible = ti,stellaris-ethernet):
 *   C:/Users/skall/source/repos/zephyr-3.1.0/zephyr/dts/bindings\ethernet\ti,stellaris-ethernet.yaml
 *
 * (Descriptions have moved to the Devicetree Bindings Index
 * in the documentation.)
 */

/* Node's full path: */
#define DT_N_S_soc_S_ethernet_40048000_PATH "/soc/ethernet@40048000"

/* Node's name with unit-address: */
#define DT_N_S_soc_S_ethernet_40048000_FULL_NAME "ethernet@40048000"

/* Node parent (/soc) identifier: */
#define DT_N_S_soc_S_ethernet_40048000_PARENT DT_N_S_soc

/* Node's index in its parent's list of children: */
#define DT_N_S_soc_S_ethernet_40048000_CHILD_IDX 6
#define DT_N_S_soc_S_ethernet_40048000_FOREACH_CHILD(fn) 
#define DT_N_S_soc_S_ethernet_40048000_FOREACH_CHILD_VARGS(fn, ...) 
#define DT_N_S_soc_S_ethernet_40048000_FOREACH_CHILD_STATUS_OKAY(fn) 
#define DT_N_S_soc_S_ethernet_40048000_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) 

/* Node's dependency ordinal: */
#define DT_N_S_soc_S_ethernet_40048000_ORD 8

/* Ordinals for what this node depends on directly: */
#define DT_N_S_soc_S_ethernet_40048000_REQUIRES_ORDS \
	6, /* /soc */ \
	7, /* /soc/interrupt-controller@e000e100 */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_soc_S_ethernet_40048000_SUPPORTS_ORDS /* nothing */

/* Existence and alternate IDs: */
#define DT_N_S_soc_S_ethernet_40048000_EXISTS 1
#define DT_N_INST_0_ti_stellaris_ethernet DT_N_S_soc_S_ethernet_40048000
#define DT_N_NODELABEL_eth                DT_N_S_soc_S_ethernet_40048000

/* Macros for properties that are special in the specification: */
#define DT_N_S_soc_S_ethernet_40048000_REG_NUM 1
#define DT_N_S_soc_S_ethernet_40048000_REG_IDX_0_EXISTS 1
#define DT_N_S_soc_S_ethernet_40048000_REG_IDX_0_VAL_ADDRESS 1074036736 /* 0x40048000 */
#define DT_N_S_soc_S_ethernet_40048000_REG_IDX_0_VAL_SIZE 60 /* 0x3c */
#define DT_N_S_soc_S_ethernet_40048000_RANGES_NUM 0
#define DT_N_S_soc_S_ethernet_40048000_FOREACH_RANGE(fn) 
#define DT_N_S_soc_S_ethernet_40048000_IRQ_NUM 1
#define DT_N_S_soc_S_ethernet_40048000_IRQ_IDX_0_EXISTS 1
#define DT_N_S_soc_S_ethernet_40048000_IRQ_IDX_0_VAL_irq 42
#define DT_N_S_soc_S_ethernet_40048000_IRQ_IDX_0_VAL_irq_EXISTS 1
#define DT_N_S_soc_S_ethernet_40048000_IRQ_IDX_0_EXISTS 1
#define DT_N_S_soc_S_ethernet_40048000_IRQ_IDX_0_VAL_priority 0
#define DT_N_S_soc_S_ethernet_40048000_IRQ_IDX_0_VAL_priority_EXISTS 1
#define DT_N_S_soc_S_ethernet_40048000_COMPAT_MATCHES_ti_stellaris_ethernet 1
#define DT_N_S_soc_S_ethernet_40048000_STATUS_okay 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_soc_S_ethernet_40048000_PINCTRL_NUM 0

/* Generic property macros: */
#define DT_N_S_soc_S_ethernet_40048000_P_reg {1074036736 /* 0x40048000 */, 60 /* 0x3c */}
#define DT_N_S_soc_S_ethernet_40048000_P_reg_IDX_0 1074036736
#define DT_N_S_soc_S_ethernet_40048000_P_reg_IDX_0_EXISTS 1
#define DT_N_S_soc_S_ethernet_40048000_P_reg_IDX_1 60
#define DT_N_S_soc_S_ethernet_40048000_P_reg_IDX_1_EXISTS 1
#define DT_N_S_soc_S_ethernet_40048000_P_reg_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_ethernet_40048000, reg, 0) \
	fn(DT_N_S_soc_S_ethernet_40048000, reg, 1)
#define DT_N_S_soc_S_ethernet_40048000_P_reg_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_ethernet_40048000, reg, 0, __VA_ARGS__) \
	fn(DT_N_S_soc_S_ethernet_40048000, reg, 1, __VA_ARGS__)
#define DT_N_S_soc_S_ethernet_40048000_P_reg_EXISTS 1
#define DT_N_S_soc_S_ethernet_40048000_P_interrupts {42 /* 0x2a */, 0 /* 0x0 */}
#define DT_N_S_soc_S_ethernet_40048000_P_interrupts_IDX_0 42
#define DT_N_S_soc_S_ethernet_40048000_P_interrupts_IDX_0_EXISTS 1
#define DT_N_S_soc_S_ethernet_40048000_P_interrupts_IDX_1 0
#define DT_N_S_soc_S_ethernet_40048000_P_interrupts_IDX_1_EXISTS 1
#define DT_N_S_soc_S_ethernet_40048000_P_interrupts_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_ethernet_40048000, interrupts, 0) \
	fn(DT_N_S_soc_S_ethernet_40048000, interrupts, 1)
#define DT_N_S_soc_S_ethernet_40048000_P_interrupts_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_ethernet_40048000, interrupts, 0, __VA_ARGS__) \
	fn(DT_N_S_soc_S_ethernet_40048000, interrupts, 1, __VA_ARGS__)
#define DT_N_S_soc_S_ethernet_40048000_P_interrupts_EXISTS 1
#define DT_N_S_soc_S_ethernet_40048000_P_local_mac_address {0 /* 0x0 */, 0 /* 0x0 */, 148 /* 0x94 */, 0 /* 0x0 */, 131 /* 0x83 */, 0 /* 0x0 */}
#define DT_N_S_soc_S_ethernet_40048000_P_local_mac_address_IDX_0 0
#define DT_N_S_soc_S_ethernet_40048000_P_local_mac_address_IDX_0_EXISTS 1
#define DT_N_S_soc_S_ethernet_40048000_P_local_mac_address_IDX_1 0
#define DT_N_S_soc_S_ethernet_40048000_P_local_mac_address_IDX_1_EXISTS 1
#define DT_N_S_soc_S_ethernet_40048000_P_local_mac_address_IDX_2 148
#define DT_N_S_soc_S_ethernet_40048000_P_local_mac_address_IDX_2_EXISTS 1
#define DT_N_S_soc_S_ethernet_40048000_P_local_mac_address_IDX_3 0
#define DT_N_S_soc_S_ethernet_40048000_P_local_mac_address_IDX_3_EXISTS 1
#define DT_N_S_soc_S_ethernet_40048000_P_local_mac_address_IDX_4 131
#define DT_N_S_soc_S_ethernet_40048000_P_local_mac_address_IDX_4_EXISTS 1
#define DT_N_S_soc_S_ethernet_40048000_P_local_mac_address_IDX_5 0
#define DT_N_S_soc_S_ethernet_40048000_P_local_mac_address_IDX_5_EXISTS 1
#define DT_N_S_soc_S_ethernet_40048000_P_local_mac_address_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_ethernet_40048000, local_mac_address, 0) \
	fn(DT_N_S_soc_S_ethernet_40048000, local_mac_address, 1) \
	fn(DT_N_S_soc_S_ethernet_40048000, local_mac_address, 2) \
	fn(DT_N_S_soc_S_ethernet_40048000, local_mac_address, 3) \
	fn(DT_N_S_soc_S_ethernet_40048000, local_mac_address, 4) \
	fn(DT_N_S_soc_S_ethernet_40048000, local_mac_address, 5)
#define DT_N_S_soc_S_ethernet_40048000_P_local_mac_address_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_ethernet_40048000, local_mac_address, 0, __VA_ARGS__) \
	fn(DT_N_S_soc_S_ethernet_40048000, local_mac_address, 1, __VA_ARGS__) \
	fn(DT_N_S_soc_S_ethernet_40048000, local_mac_address, 2, __VA_ARGS__) \
	fn(DT_N_S_soc_S_ethernet_40048000, local_mac_address, 3, __VA_ARGS__) \
	fn(DT_N_S_soc_S_ethernet_40048000, local_mac_address, 4, __VA_ARGS__) \
	fn(DT_N_S_soc_S_ethernet_40048000, local_mac_address, 5, __VA_ARGS__)
#define DT_N_S_soc_S_ethernet_40048000_P_local_mac_address_LEN 6
#define DT_N_S_soc_S_ethernet_40048000_P_local_mac_address_EXISTS 1
#define DT_N_S_soc_S_ethernet_40048000_P_label "ETH"
#define DT_N_S_soc_S_ethernet_40048000_P_label_STRING_TOKEN ETH
#define DT_N_S_soc_S_ethernet_40048000_P_label_STRING_UPPER_TOKEN ETH
#define DT_N_S_soc_S_ethernet_40048000_P_label_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_ethernet_40048000, label, 0) \
	fn(DT_N_S_soc_S_ethernet_40048000, label, 1) \
	fn(DT_N_S_soc_S_ethernet_40048000, label, 2)
#define DT_N_S_soc_S_ethernet_40048000_P_label_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_ethernet_40048000, label, 0, __VA_ARGS__) \
	fn(DT_N_S_soc_S_ethernet_40048000, label, 1, __VA_ARGS__) \
	fn(DT_N_S_soc_S_ethernet_40048000, label, 2, __VA_ARGS__)
#define DT_N_S_soc_S_ethernet_40048000_P_label_EXISTS 1
#define DT_N_S_soc_S_ethernet_40048000_P_zephyr_random_mac_address 0
#define DT_N_S_soc_S_ethernet_40048000_P_zephyr_random_mac_address_EXISTS 1
#define DT_N_S_soc_S_ethernet_40048000_P_status "okay"
#define DT_N_S_soc_S_ethernet_40048000_P_status_STRING_TOKEN okay
#define DT_N_S_soc_S_ethernet_40048000_P_status_STRING_UPPER_TOKEN OKAY
#define DT_N_S_soc_S_ethernet_40048000_P_status_ENUM_IDX 1
#define DT_N_S_soc_S_ethernet_40048000_P_status_ENUM_TOKEN okay
#define DT_N_S_soc_S_ethernet_40048000_P_status_ENUM_UPPER_TOKEN OKAY
#define DT_N_S_soc_S_ethernet_40048000_P_status_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_ethernet_40048000, status, 0) \
	fn(DT_N_S_soc_S_ethernet_40048000, status, 1) \
	fn(DT_N_S_soc_S_ethernet_40048000, status, 2) \
	fn(DT_N_S_soc_S_ethernet_40048000, status, 3)
#define DT_N_S_soc_S_ethernet_40048000_P_status_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_ethernet_40048000, status, 0, __VA_ARGS__) \
	fn(DT_N_S_soc_S_ethernet_40048000, status, 1, __VA_ARGS__) \
	fn(DT_N_S_soc_S_ethernet_40048000, status, 2, __VA_ARGS__) \
	fn(DT_N_S_soc_S_ethernet_40048000, status, 3, __VA_ARGS__)
#define DT_N_S_soc_S_ethernet_40048000_P_status_EXISTS 1
#define DT_N_S_soc_S_ethernet_40048000_P_compatible {"ti,stellaris-ethernet"}
#define DT_N_S_soc_S_ethernet_40048000_P_compatible_IDX_0 "ti,stellaris-ethernet"
#define DT_N_S_soc_S_ethernet_40048000_P_compatible_IDX_0_EXISTS 1
#define DT_N_S_soc_S_ethernet_40048000_P_compatible_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_ethernet_40048000, compatible, 0)
#define DT_N_S_soc_S_ethernet_40048000_P_compatible_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_ethernet_40048000, compatible, 0, __VA_ARGS__)
#define DT_N_S_soc_S_ethernet_40048000_P_compatible_LEN 1
#define DT_N_S_soc_S_ethernet_40048000_P_compatible_EXISTS 1
#define DT_N_S_soc_S_ethernet_40048000_P_wakeup_source 0
#define DT_N_S_soc_S_ethernet_40048000_P_wakeup_source_EXISTS 1

/*
 * Devicetree node: /soc/gpio@40004000
 *
 * Node identifier: DT_N_S_soc_S_gpio_40004000
 *
 * Binding (compatible = ti,stellaris-gpio):
 *   C:/Users/skall/source/repos/zephyr-3.1.0/zephyr/dts/bindings\gpio\ti,stellaris-gpio.yaml
 *
 * (Descriptions have moved to the Devicetree Bindings Index
 * in the documentation.)
 */

/* Node's full path: */
#define DT_N_S_soc_S_gpio_40004000_PATH "/soc/gpio@40004000"

/* Node's name with unit-address: */
#define DT_N_S_soc_S_gpio_40004000_FULL_NAME "gpio@40004000"

/* Node parent (/soc) identifier: */
#define DT_N_S_soc_S_gpio_40004000_PARENT DT_N_S_soc

/* Node's index in its parent's list of children: */
#define DT_N_S_soc_S_gpio_40004000_CHILD_IDX 7
#define DT_N_S_soc_S_gpio_40004000_FOREACH_CHILD(fn) 
#define DT_N_S_soc_S_gpio_40004000_FOREACH_CHILD_VARGS(fn, ...) 
#define DT_N_S_soc_S_gpio_40004000_FOREACH_CHILD_STATUS_OKAY(fn) 
#define DT_N_S_soc_S_gpio_40004000_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) 

/* Node's dependency ordinal: */
#define DT_N_S_soc_S_gpio_40004000_ORD 9

/* Ordinals for what this node depends on directly: */
#define DT_N_S_soc_S_gpio_40004000_REQUIRES_ORDS \
	6, /* /soc */ \
	7, /* /soc/interrupt-controller@e000e100 */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_soc_S_gpio_40004000_SUPPORTS_ORDS /* nothing */

/* Existence and alternate IDs: */
#define DT_N_S_soc_S_gpio_40004000_EXISTS 1
#define DT_N_INST_0_ti_stellaris_gpio DT_N_S_soc_S_gpio_40004000
#define DT_N_NODELABEL_gpio0          DT_N_S_soc_S_gpio_40004000

/* Macros for properties that are special in the specification: */
#define DT_N_S_soc_S_gpio_40004000_REG_NUM 1
#define DT_N_S_soc_S_gpio_40004000_REG_IDX_0_EXISTS 1
#define DT_N_S_soc_S_gpio_40004000_REG_IDX_0_VAL_ADDRESS 1073758208 /* 0x40004000 */
#define DT_N_S_soc_S_gpio_40004000_REG_IDX_0_VAL_SIZE 4096 /* 0x1000 */
#define DT_N_S_soc_S_gpio_40004000_RANGES_NUM 0
#define DT_N_S_soc_S_gpio_40004000_FOREACH_RANGE(fn) 
#define DT_N_S_soc_S_gpio_40004000_IRQ_NUM 1
#define DT_N_S_soc_S_gpio_40004000_IRQ_IDX_0_EXISTS 1
#define DT_N_S_soc_S_gpio_40004000_IRQ_IDX_0_VAL_irq 0
#define DT_N_S_soc_S_gpio_40004000_IRQ_IDX_0_VAL_irq_EXISTS 1
#define DT_N_S_soc_S_gpio_40004000_IRQ_IDX_0_EXISTS 1
#define DT_N_S_soc_S_gpio_40004000_IRQ_IDX_0_VAL_priority 3
#define DT_N_S_soc_S_gpio_40004000_IRQ_IDX_0_VAL_priority_EXISTS 1
#define DT_N_S_soc_S_gpio_40004000_COMPAT_MATCHES_ti_stellaris_gpio 1
#define DT_N_S_soc_S_gpio_40004000_STATUS_okay 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_soc_S_gpio_40004000_PINCTRL_NUM 0

/* Generic property macros: */
#define DT_N_S_soc_S_gpio_40004000_P_reg {1073758208 /* 0x40004000 */, 4096 /* 0x1000 */}
#define DT_N_S_soc_S_gpio_40004000_P_reg_IDX_0 1073758208
#define DT_N_S_soc_S_gpio_40004000_P_reg_IDX_0_EXISTS 1
#define DT_N_S_soc_S_gpio_40004000_P_reg_IDX_1 4096
#define DT_N_S_soc_S_gpio_40004000_P_reg_IDX_1_EXISTS 1
#define DT_N_S_soc_S_gpio_40004000_P_reg_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_gpio_40004000, reg, 0) \
	fn(DT_N_S_soc_S_gpio_40004000, reg, 1)
#define DT_N_S_soc_S_gpio_40004000_P_reg_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_gpio_40004000, reg, 0, __VA_ARGS__) \
	fn(DT_N_S_soc_S_gpio_40004000, reg, 1, __VA_ARGS__)
#define DT_N_S_soc_S_gpio_40004000_P_reg_EXISTS 1
#define DT_N_S_soc_S_gpio_40004000_P_label "GPIO_A"
#define DT_N_S_soc_S_gpio_40004000_P_label_STRING_TOKEN GPIO_A
#define DT_N_S_soc_S_gpio_40004000_P_label_STRING_UPPER_TOKEN GPIO_A
#define DT_N_S_soc_S_gpio_40004000_P_label_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_gpio_40004000, label, 0) \
	fn(DT_N_S_soc_S_gpio_40004000, label, 1) \
	fn(DT_N_S_soc_S_gpio_40004000, label, 2) \
	fn(DT_N_S_soc_S_gpio_40004000, label, 3) \
	fn(DT_N_S_soc_S_gpio_40004000, label, 4) \
	fn(DT_N_S_soc_S_gpio_40004000, label, 5)
#define DT_N_S_soc_S_gpio_40004000_P_label_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_gpio_40004000, label, 0, __VA_ARGS__) \
	fn(DT_N_S_soc_S_gpio_40004000, label, 1, __VA_ARGS__) \
	fn(DT_N_S_soc_S_gpio_40004000, label, 2, __VA_ARGS__) \
	fn(DT_N_S_soc_S_gpio_40004000, label, 3, __VA_ARGS__) \
	fn(DT_N_S_soc_S_gpio_40004000, label, 4, __VA_ARGS__) \
	fn(DT_N_S_soc_S_gpio_40004000, label, 5, __VA_ARGS__)
#define DT_N_S_soc_S_gpio_40004000_P_label_EXISTS 1
#define DT_N_S_soc_S_gpio_40004000_P_interrupts {0 /* 0x0 */, 3 /* 0x3 */}
#define DT_N_S_soc_S_gpio_40004000_P_interrupts_IDX_0 0
#define DT_N_S_soc_S_gpio_40004000_P_interrupts_IDX_0_EXISTS 1
#define DT_N_S_soc_S_gpio_40004000_P_interrupts_IDX_1 3
#define DT_N_S_soc_S_gpio_40004000_P_interrupts_IDX_1_EXISTS 1
#define DT_N_S_soc_S_gpio_40004000_P_interrupts_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_gpio_40004000, interrupts, 0) \
	fn(DT_N_S_soc_S_gpio_40004000, interrupts, 1)
#define DT_N_S_soc_S_gpio_40004000_P_interrupts_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_gpio_40004000, interrupts, 0, __VA_ARGS__) \
	fn(DT_N_S_soc_S_gpio_40004000, interrupts, 1, __VA_ARGS__)
#define DT_N_S_soc_S_gpio_40004000_P_interrupts_EXISTS 1
#define DT_N_S_soc_S_gpio_40004000_P_gpio_controller 1
#define DT_N_S_soc_S_gpio_40004000_P_gpio_controller_EXISTS 1
#define DT_N_S_soc_S_gpio_40004000_P_ngpios 8
#define DT_N_S_soc_S_gpio_40004000_P_ngpios_EXISTS 1
#define DT_N_S_soc_S_gpio_40004000_P_status "okay"
#define DT_N_S_soc_S_gpio_40004000_P_status_STRING_TOKEN okay
#define DT_N_S_soc_S_gpio_40004000_P_status_STRING_UPPER_TOKEN OKAY
#define DT_N_S_soc_S_gpio_40004000_P_status_ENUM_IDX 1
#define DT_N_S_soc_S_gpio_40004000_P_status_ENUM_TOKEN okay
#define DT_N_S_soc_S_gpio_40004000_P_status_ENUM_UPPER_TOKEN OKAY
#define DT_N_S_soc_S_gpio_40004000_P_status_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_gpio_40004000, status, 0) \
	fn(DT_N_S_soc_S_gpio_40004000, status, 1) \
	fn(DT_N_S_soc_S_gpio_40004000, status, 2) \
	fn(DT_N_S_soc_S_gpio_40004000, status, 3)
#define DT_N_S_soc_S_gpio_40004000_P_status_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_gpio_40004000, status, 0, __VA_ARGS__) \
	fn(DT_N_S_soc_S_gpio_40004000, status, 1, __VA_ARGS__) \
	fn(DT_N_S_soc_S_gpio_40004000, status, 2, __VA_ARGS__) \
	fn(DT_N_S_soc_S_gpio_40004000, status, 3, __VA_ARGS__)
#define DT_N_S_soc_S_gpio_40004000_P_status_EXISTS 1
#define DT_N_S_soc_S_gpio_40004000_P_compatible {"ti,stellaris-gpio"}
#define DT_N_S_soc_S_gpio_40004000_P_compatible_IDX_0 "ti,stellaris-gpio"
#define DT_N_S_soc_S_gpio_40004000_P_compatible_IDX_0_EXISTS 1
#define DT_N_S_soc_S_gpio_40004000_P_compatible_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_gpio_40004000, compatible, 0)
#define DT_N_S_soc_S_gpio_40004000_P_compatible_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_gpio_40004000, compatible, 0, __VA_ARGS__)
#define DT_N_S_soc_S_gpio_40004000_P_compatible_LEN 1
#define DT_N_S_soc_S_gpio_40004000_P_compatible_EXISTS 1
#define DT_N_S_soc_S_gpio_40004000_P_wakeup_source 0
#define DT_N_S_soc_S_gpio_40004000_P_wakeup_source_EXISTS 1

/*
 * Devicetree node: /soc/gpio@40005000
 *
 * Node identifier: DT_N_S_soc_S_gpio_40005000
 *
 * Binding (compatible = ti,stellaris-gpio):
 *   C:/Users/skall/source/repos/zephyr-3.1.0/zephyr/dts/bindings\gpio\ti,stellaris-gpio.yaml
 *
 * (Descriptions have moved to the Devicetree Bindings Index
 * in the documentation.)
 */

/* Node's full path: */
#define DT_N_S_soc_S_gpio_40005000_PATH "/soc/gpio@40005000"

/* Node's name with unit-address: */
#define DT_N_S_soc_S_gpio_40005000_FULL_NAME "gpio@40005000"

/* Node parent (/soc) identifier: */
#define DT_N_S_soc_S_gpio_40005000_PARENT DT_N_S_soc

/* Node's index in its parent's list of children: */
#define DT_N_S_soc_S_gpio_40005000_CHILD_IDX 8
#define DT_N_S_soc_S_gpio_40005000_FOREACH_CHILD(fn) 
#define DT_N_S_soc_S_gpio_40005000_FOREACH_CHILD_VARGS(fn, ...) 
#define DT_N_S_soc_S_gpio_40005000_FOREACH_CHILD_STATUS_OKAY(fn) 
#define DT_N_S_soc_S_gpio_40005000_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) 

/* Node's dependency ordinal: */
#define DT_N_S_soc_S_gpio_40005000_ORD 10

/* Ordinals for what this node depends on directly: */
#define DT_N_S_soc_S_gpio_40005000_REQUIRES_ORDS \
	6, /* /soc */ \
	7, /* /soc/interrupt-controller@e000e100 */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_soc_S_gpio_40005000_SUPPORTS_ORDS /* nothing */

/* Existence and alternate IDs: */
#define DT_N_S_soc_S_gpio_40005000_EXISTS 1
#define DT_N_INST_1_ti_stellaris_gpio DT_N_S_soc_S_gpio_40005000
#define DT_N_NODELABEL_gpio1          DT_N_S_soc_S_gpio_40005000

/* Macros for properties that are special in the specification: */
#define DT_N_S_soc_S_gpio_40005000_REG_NUM 1
#define DT_N_S_soc_S_gpio_40005000_REG_IDX_0_EXISTS 1
#define DT_N_S_soc_S_gpio_40005000_REG_IDX_0_VAL_ADDRESS 1073762304 /* 0x40005000 */
#define DT_N_S_soc_S_gpio_40005000_REG_IDX_0_VAL_SIZE 4096 /* 0x1000 */
#define DT_N_S_soc_S_gpio_40005000_RANGES_NUM 0
#define DT_N_S_soc_S_gpio_40005000_FOREACH_RANGE(fn) 
#define DT_N_S_soc_S_gpio_40005000_IRQ_NUM 1
#define DT_N_S_soc_S_gpio_40005000_IRQ_IDX_0_EXISTS 1
#define DT_N_S_soc_S_gpio_40005000_IRQ_IDX_0_VAL_irq 1
#define DT_N_S_soc_S_gpio_40005000_IRQ_IDX_0_VAL_irq_EXISTS 1
#define DT_N_S_soc_S_gpio_40005000_IRQ_IDX_0_EXISTS 1
#define DT_N_S_soc_S_gpio_40005000_IRQ_IDX_0_VAL_priority 3
#define DT_N_S_soc_S_gpio_40005000_IRQ_IDX_0_VAL_priority_EXISTS 1
#define DT_N_S_soc_S_gpio_40005000_COMPAT_MATCHES_ti_stellaris_gpio 1
#define DT_N_S_soc_S_gpio_40005000_STATUS_okay 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_soc_S_gpio_40005000_PINCTRL_NUM 0

/* Generic property macros: */
#define DT_N_S_soc_S_gpio_40005000_P_reg {1073762304 /* 0x40005000 */, 4096 /* 0x1000 */}
#define DT_N_S_soc_S_gpio_40005000_P_reg_IDX_0 1073762304
#define DT_N_S_soc_S_gpio_40005000_P_reg_IDX_0_EXISTS 1
#define DT_N_S_soc_S_gpio_40005000_P_reg_IDX_1 4096
#define DT_N_S_soc_S_gpio_40005000_P_reg_IDX_1_EXISTS 1
#define DT_N_S_soc_S_gpio_40005000_P_reg_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_gpio_40005000, reg, 0) \
	fn(DT_N_S_soc_S_gpio_40005000, reg, 1)
#define DT_N_S_soc_S_gpio_40005000_P_reg_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_gpio_40005000, reg, 0, __VA_ARGS__) \
	fn(DT_N_S_soc_S_gpio_40005000, reg, 1, __VA_ARGS__)
#define DT_N_S_soc_S_gpio_40005000_P_reg_EXISTS 1
#define DT_N_S_soc_S_gpio_40005000_P_label "GPIO_B"
#define DT_N_S_soc_S_gpio_40005000_P_label_STRING_TOKEN GPIO_B
#define DT_N_S_soc_S_gpio_40005000_P_label_STRING_UPPER_TOKEN GPIO_B
#define DT_N_S_soc_S_gpio_40005000_P_label_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_gpio_40005000, label, 0) \
	fn(DT_N_S_soc_S_gpio_40005000, label, 1) \
	fn(DT_N_S_soc_S_gpio_40005000, label, 2) \
	fn(DT_N_S_soc_S_gpio_40005000, label, 3) \
	fn(DT_N_S_soc_S_gpio_40005000, label, 4) \
	fn(DT_N_S_soc_S_gpio_40005000, label, 5)
#define DT_N_S_soc_S_gpio_40005000_P_label_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_gpio_40005000, label, 0, __VA_ARGS__) \
	fn(DT_N_S_soc_S_gpio_40005000, label, 1, __VA_ARGS__) \
	fn(DT_N_S_soc_S_gpio_40005000, label, 2, __VA_ARGS__) \
	fn(DT_N_S_soc_S_gpio_40005000, label, 3, __VA_ARGS__) \
	fn(DT_N_S_soc_S_gpio_40005000, label, 4, __VA_ARGS__) \
	fn(DT_N_S_soc_S_gpio_40005000, label, 5, __VA_ARGS__)
#define DT_N_S_soc_S_gpio_40005000_P_label_EXISTS 1
#define DT_N_S_soc_S_gpio_40005000_P_interrupts {1 /* 0x1 */, 3 /* 0x3 */}
#define DT_N_S_soc_S_gpio_40005000_P_interrupts_IDX_0 1
#define DT_N_S_soc_S_gpio_40005000_P_interrupts_IDX_0_EXISTS 1
#define DT_N_S_soc_S_gpio_40005000_P_interrupts_IDX_1 3
#define DT_N_S_soc_S_gpio_40005000_P_interrupts_IDX_1_EXISTS 1
#define DT_N_S_soc_S_gpio_40005000_P_interrupts_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_gpio_40005000, interrupts, 0) \
	fn(DT_N_S_soc_S_gpio_40005000, interrupts, 1)
#define DT_N_S_soc_S_gpio_40005000_P_interrupts_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_gpio_40005000, interrupts, 0, __VA_ARGS__) \
	fn(DT_N_S_soc_S_gpio_40005000, interrupts, 1, __VA_ARGS__)
#define DT_N_S_soc_S_gpio_40005000_P_interrupts_EXISTS 1
#define DT_N_S_soc_S_gpio_40005000_P_gpio_controller 1
#define DT_N_S_soc_S_gpio_40005000_P_gpio_controller_EXISTS 1
#define DT_N_S_soc_S_gpio_40005000_P_ngpios 8
#define DT_N_S_soc_S_gpio_40005000_P_ngpios_EXISTS 1
#define DT_N_S_soc_S_gpio_40005000_P_status "okay"
#define DT_N_S_soc_S_gpio_40005000_P_status_STRING_TOKEN okay
#define DT_N_S_soc_S_gpio_40005000_P_status_STRING_UPPER_TOKEN OKAY
#define DT_N_S_soc_S_gpio_40005000_P_status_ENUM_IDX 1
#define DT_N_S_soc_S_gpio_40005000_P_status_ENUM_TOKEN okay
#define DT_N_S_soc_S_gpio_40005000_P_status_ENUM_UPPER_TOKEN OKAY
#define DT_N_S_soc_S_gpio_40005000_P_status_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_gpio_40005000, status, 0) \
	fn(DT_N_S_soc_S_gpio_40005000, status, 1) \
	fn(DT_N_S_soc_S_gpio_40005000, status, 2) \
	fn(DT_N_S_soc_S_gpio_40005000, status, 3)
#define DT_N_S_soc_S_gpio_40005000_P_status_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_gpio_40005000, status, 0, __VA_ARGS__) \
	fn(DT_N_S_soc_S_gpio_40005000, status, 1, __VA_ARGS__) \
	fn(DT_N_S_soc_S_gpio_40005000, status, 2, __VA_ARGS__) \
	fn(DT_N_S_soc_S_gpio_40005000, status, 3, __VA_ARGS__)
#define DT_N_S_soc_S_gpio_40005000_P_status_EXISTS 1
#define DT_N_S_soc_S_gpio_40005000_P_compatible {"ti,stellaris-gpio"}
#define DT_N_S_soc_S_gpio_40005000_P_compatible_IDX_0 "ti,stellaris-gpio"
#define DT_N_S_soc_S_gpio_40005000_P_compatible_IDX_0_EXISTS 1
#define DT_N_S_soc_S_gpio_40005000_P_compatible_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_gpio_40005000, compatible, 0)
#define DT_N_S_soc_S_gpio_40005000_P_compatible_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_gpio_40005000, compatible, 0, __VA_ARGS__)
#define DT_N_S_soc_S_gpio_40005000_P_compatible_LEN 1
#define DT_N_S_soc_S_gpio_40005000_P_compatible_EXISTS 1
#define DT_N_S_soc_S_gpio_40005000_P_wakeup_source 0
#define DT_N_S_soc_S_gpio_40005000_P_wakeup_source_EXISTS 1

/*
 * Devicetree node: /soc/gpio@40006000
 *
 * Node identifier: DT_N_S_soc_S_gpio_40006000
 *
 * Binding (compatible = ti,stellaris-gpio):
 *   C:/Users/skall/source/repos/zephyr-3.1.0/zephyr/dts/bindings\gpio\ti,stellaris-gpio.yaml
 *
 * (Descriptions have moved to the Devicetree Bindings Index
 * in the documentation.)
 */

/* Node's full path: */
#define DT_N_S_soc_S_gpio_40006000_PATH "/soc/gpio@40006000"

/* Node's name with unit-address: */
#define DT_N_S_soc_S_gpio_40006000_FULL_NAME "gpio@40006000"

/* Node parent (/soc) identifier: */
#define DT_N_S_soc_S_gpio_40006000_PARENT DT_N_S_soc

/* Node's index in its parent's list of children: */
#define DT_N_S_soc_S_gpio_40006000_CHILD_IDX 9
#define DT_N_S_soc_S_gpio_40006000_FOREACH_CHILD(fn) 
#define DT_N_S_soc_S_gpio_40006000_FOREACH_CHILD_VARGS(fn, ...) 
#define DT_N_S_soc_S_gpio_40006000_FOREACH_CHILD_STATUS_OKAY(fn) 
#define DT_N_S_soc_S_gpio_40006000_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) 

/* Node's dependency ordinal: */
#define DT_N_S_soc_S_gpio_40006000_ORD 11

/* Ordinals for what this node depends on directly: */
#define DT_N_S_soc_S_gpio_40006000_REQUIRES_ORDS \
	6, /* /soc */ \
	7, /* /soc/interrupt-controller@e000e100 */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_soc_S_gpio_40006000_SUPPORTS_ORDS /* nothing */

/* Existence and alternate IDs: */
#define DT_N_S_soc_S_gpio_40006000_EXISTS 1
#define DT_N_INST_2_ti_stellaris_gpio DT_N_S_soc_S_gpio_40006000
#define DT_N_NODELABEL_gpio2          DT_N_S_soc_S_gpio_40006000

/* Macros for properties that are special in the specification: */
#define DT_N_S_soc_S_gpio_40006000_REG_NUM 1
#define DT_N_S_soc_S_gpio_40006000_REG_IDX_0_EXISTS 1
#define DT_N_S_soc_S_gpio_40006000_REG_IDX_0_VAL_ADDRESS 1073766400 /* 0x40006000 */
#define DT_N_S_soc_S_gpio_40006000_REG_IDX_0_VAL_SIZE 4096 /* 0x1000 */
#define DT_N_S_soc_S_gpio_40006000_RANGES_NUM 0
#define DT_N_S_soc_S_gpio_40006000_FOREACH_RANGE(fn) 
#define DT_N_S_soc_S_gpio_40006000_IRQ_NUM 1
#define DT_N_S_soc_S_gpio_40006000_IRQ_IDX_0_EXISTS 1
#define DT_N_S_soc_S_gpio_40006000_IRQ_IDX_0_VAL_irq 2
#define DT_N_S_soc_S_gpio_40006000_IRQ_IDX_0_VAL_irq_EXISTS 1
#define DT_N_S_soc_S_gpio_40006000_IRQ_IDX_0_EXISTS 1
#define DT_N_S_soc_S_gpio_40006000_IRQ_IDX_0_VAL_priority 3
#define DT_N_S_soc_S_gpio_40006000_IRQ_IDX_0_VAL_priority_EXISTS 1
#define DT_N_S_soc_S_gpio_40006000_COMPAT_MATCHES_ti_stellaris_gpio 1
#define DT_N_S_soc_S_gpio_40006000_STATUS_okay 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_soc_S_gpio_40006000_PINCTRL_NUM 0

/* Generic property macros: */
#define DT_N_S_soc_S_gpio_40006000_P_reg {1073766400 /* 0x40006000 */, 4096 /* 0x1000 */}
#define DT_N_S_soc_S_gpio_40006000_P_reg_IDX_0 1073766400
#define DT_N_S_soc_S_gpio_40006000_P_reg_IDX_0_EXISTS 1
#define DT_N_S_soc_S_gpio_40006000_P_reg_IDX_1 4096
#define DT_N_S_soc_S_gpio_40006000_P_reg_IDX_1_EXISTS 1
#define DT_N_S_soc_S_gpio_40006000_P_reg_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_gpio_40006000, reg, 0) \
	fn(DT_N_S_soc_S_gpio_40006000, reg, 1)
#define DT_N_S_soc_S_gpio_40006000_P_reg_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_gpio_40006000, reg, 0, __VA_ARGS__) \
	fn(DT_N_S_soc_S_gpio_40006000, reg, 1, __VA_ARGS__)
#define DT_N_S_soc_S_gpio_40006000_P_reg_EXISTS 1
#define DT_N_S_soc_S_gpio_40006000_P_label "GPIO_C"
#define DT_N_S_soc_S_gpio_40006000_P_label_STRING_TOKEN GPIO_C
#define DT_N_S_soc_S_gpio_40006000_P_label_STRING_UPPER_TOKEN GPIO_C
#define DT_N_S_soc_S_gpio_40006000_P_label_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_gpio_40006000, label, 0) \
	fn(DT_N_S_soc_S_gpio_40006000, label, 1) \
	fn(DT_N_S_soc_S_gpio_40006000, label, 2) \
	fn(DT_N_S_soc_S_gpio_40006000, label, 3) \
	fn(DT_N_S_soc_S_gpio_40006000, label, 4) \
	fn(DT_N_S_soc_S_gpio_40006000, label, 5)
#define DT_N_S_soc_S_gpio_40006000_P_label_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_gpio_40006000, label, 0, __VA_ARGS__) \
	fn(DT_N_S_soc_S_gpio_40006000, label, 1, __VA_ARGS__) \
	fn(DT_N_S_soc_S_gpio_40006000, label, 2, __VA_ARGS__) \
	fn(DT_N_S_soc_S_gpio_40006000, label, 3, __VA_ARGS__) \
	fn(DT_N_S_soc_S_gpio_40006000, label, 4, __VA_ARGS__) \
	fn(DT_N_S_soc_S_gpio_40006000, label, 5, __VA_ARGS__)
#define DT_N_S_soc_S_gpio_40006000_P_label_EXISTS 1
#define DT_N_S_soc_S_gpio_40006000_P_interrupts {2 /* 0x2 */, 3 /* 0x3 */}
#define DT_N_S_soc_S_gpio_40006000_P_interrupts_IDX_0 2
#define DT_N_S_soc_S_gpio_40006000_P_interrupts_IDX_0_EXISTS 1
#define DT_N_S_soc_S_gpio_40006000_P_interrupts_IDX_1 3
#define DT_N_S_soc_S_gpio_40006000_P_interrupts_IDX_1_EXISTS 1
#define DT_N_S_soc_S_gpio_40006000_P_interrupts_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_gpio_40006000, interrupts, 0) \
	fn(DT_N_S_soc_S_gpio_40006000, interrupts, 1)
#define DT_N_S_soc_S_gpio_40006000_P_interrupts_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_gpio_40006000, interrupts, 0, __VA_ARGS__) \
	fn(DT_N_S_soc_S_gpio_40006000, interrupts, 1, __VA_ARGS__)
#define DT_N_S_soc_S_gpio_40006000_P_interrupts_EXISTS 1
#define DT_N_S_soc_S_gpio_40006000_P_gpio_controller 1
#define DT_N_S_soc_S_gpio_40006000_P_gpio_controller_EXISTS 1
#define DT_N_S_soc_S_gpio_40006000_P_ngpios 8
#define DT_N_S_soc_S_gpio_40006000_P_ngpios_EXISTS 1
#define DT_N_S_soc_S_gpio_40006000_P_status "okay"
#define DT_N_S_soc_S_gpio_40006000_P_status_STRING_TOKEN okay
#define DT_N_S_soc_S_gpio_40006000_P_status_STRING_UPPER_TOKEN OKAY
#define DT_N_S_soc_S_gpio_40006000_P_status_ENUM_IDX 1
#define DT_N_S_soc_S_gpio_40006000_P_status_ENUM_TOKEN okay
#define DT_N_S_soc_S_gpio_40006000_P_status_ENUM_UPPER_TOKEN OKAY
#define DT_N_S_soc_S_gpio_40006000_P_status_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_gpio_40006000, status, 0) \
	fn(DT_N_S_soc_S_gpio_40006000, status, 1) \
	fn(DT_N_S_soc_S_gpio_40006000, status, 2) \
	fn(DT_N_S_soc_S_gpio_40006000, status, 3)
#define DT_N_S_soc_S_gpio_40006000_P_status_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_gpio_40006000, status, 0, __VA_ARGS__) \
	fn(DT_N_S_soc_S_gpio_40006000, status, 1, __VA_ARGS__) \
	fn(DT_N_S_soc_S_gpio_40006000, status, 2, __VA_ARGS__) \
	fn(DT_N_S_soc_S_gpio_40006000, status, 3, __VA_ARGS__)
#define DT_N_S_soc_S_gpio_40006000_P_status_EXISTS 1
#define DT_N_S_soc_S_gpio_40006000_P_compatible {"ti,stellaris-gpio"}
#define DT_N_S_soc_S_gpio_40006000_P_compatible_IDX_0 "ti,stellaris-gpio"
#define DT_N_S_soc_S_gpio_40006000_P_compatible_IDX_0_EXISTS 1
#define DT_N_S_soc_S_gpio_40006000_P_compatible_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_gpio_40006000, compatible, 0)
#define DT_N_S_soc_S_gpio_40006000_P_compatible_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_gpio_40006000, compatible, 0, __VA_ARGS__)
#define DT_N_S_soc_S_gpio_40006000_P_compatible_LEN 1
#define DT_N_S_soc_S_gpio_40006000_P_compatible_EXISTS 1
#define DT_N_S_soc_S_gpio_40006000_P_wakeup_source 0
#define DT_N_S_soc_S_gpio_40006000_P_wakeup_source_EXISTS 1

/*
 * Devicetree node: /soc/gpio@40007000
 *
 * Node identifier: DT_N_S_soc_S_gpio_40007000
 *
 * Binding (compatible = ti,stellaris-gpio):
 *   C:/Users/skall/source/repos/zephyr-3.1.0/zephyr/dts/bindings\gpio\ti,stellaris-gpio.yaml
 *
 * (Descriptions have moved to the Devicetree Bindings Index
 * in the documentation.)
 */

/* Node's full path: */
#define DT_N_S_soc_S_gpio_40007000_PATH "/soc/gpio@40007000"

/* Node's name with unit-address: */
#define DT_N_S_soc_S_gpio_40007000_FULL_NAME "gpio@40007000"

/* Node parent (/soc) identifier: */
#define DT_N_S_soc_S_gpio_40007000_PARENT DT_N_S_soc

/* Node's index in its parent's list of children: */
#define DT_N_S_soc_S_gpio_40007000_CHILD_IDX 10
#define DT_N_S_soc_S_gpio_40007000_FOREACH_CHILD(fn) 
#define DT_N_S_soc_S_gpio_40007000_FOREACH_CHILD_VARGS(fn, ...) 
#define DT_N_S_soc_S_gpio_40007000_FOREACH_CHILD_STATUS_OKAY(fn) 
#define DT_N_S_soc_S_gpio_40007000_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) 

/* Node's dependency ordinal: */
#define DT_N_S_soc_S_gpio_40007000_ORD 12

/* Ordinals for what this node depends on directly: */
#define DT_N_S_soc_S_gpio_40007000_REQUIRES_ORDS \
	6, /* /soc */ \
	7, /* /soc/interrupt-controller@e000e100 */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_soc_S_gpio_40007000_SUPPORTS_ORDS /* nothing */

/* Existence and alternate IDs: */
#define DT_N_S_soc_S_gpio_40007000_EXISTS 1
#define DT_N_INST_3_ti_stellaris_gpio DT_N_S_soc_S_gpio_40007000
#define DT_N_NODELABEL_gpio3          DT_N_S_soc_S_gpio_40007000

/* Macros for properties that are special in the specification: */
#define DT_N_S_soc_S_gpio_40007000_REG_NUM 1
#define DT_N_S_soc_S_gpio_40007000_REG_IDX_0_EXISTS 1
#define DT_N_S_soc_S_gpio_40007000_REG_IDX_0_VAL_ADDRESS 1073770496 /* 0x40007000 */
#define DT_N_S_soc_S_gpio_40007000_REG_IDX_0_VAL_SIZE 4096 /* 0x1000 */
#define DT_N_S_soc_S_gpio_40007000_RANGES_NUM 0
#define DT_N_S_soc_S_gpio_40007000_FOREACH_RANGE(fn) 
#define DT_N_S_soc_S_gpio_40007000_IRQ_NUM 1
#define DT_N_S_soc_S_gpio_40007000_IRQ_IDX_0_EXISTS 1
#define DT_N_S_soc_S_gpio_40007000_IRQ_IDX_0_VAL_irq 3
#define DT_N_S_soc_S_gpio_40007000_IRQ_IDX_0_VAL_irq_EXISTS 1
#define DT_N_S_soc_S_gpio_40007000_IRQ_IDX_0_EXISTS 1
#define DT_N_S_soc_S_gpio_40007000_IRQ_IDX_0_VAL_priority 3
#define DT_N_S_soc_S_gpio_40007000_IRQ_IDX_0_VAL_priority_EXISTS 1
#define DT_N_S_soc_S_gpio_40007000_COMPAT_MATCHES_ti_stellaris_gpio 1
#define DT_N_S_soc_S_gpio_40007000_STATUS_okay 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_soc_S_gpio_40007000_PINCTRL_NUM 0

/* Generic property macros: */
#define DT_N_S_soc_S_gpio_40007000_P_reg {1073770496 /* 0x40007000 */, 4096 /* 0x1000 */}
#define DT_N_S_soc_S_gpio_40007000_P_reg_IDX_0 1073770496
#define DT_N_S_soc_S_gpio_40007000_P_reg_IDX_0_EXISTS 1
#define DT_N_S_soc_S_gpio_40007000_P_reg_IDX_1 4096
#define DT_N_S_soc_S_gpio_40007000_P_reg_IDX_1_EXISTS 1
#define DT_N_S_soc_S_gpio_40007000_P_reg_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_gpio_40007000, reg, 0) \
	fn(DT_N_S_soc_S_gpio_40007000, reg, 1)
#define DT_N_S_soc_S_gpio_40007000_P_reg_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_gpio_40007000, reg, 0, __VA_ARGS__) \
	fn(DT_N_S_soc_S_gpio_40007000, reg, 1, __VA_ARGS__)
#define DT_N_S_soc_S_gpio_40007000_P_reg_EXISTS 1
#define DT_N_S_soc_S_gpio_40007000_P_label "GPIO_D"
#define DT_N_S_soc_S_gpio_40007000_P_label_STRING_TOKEN GPIO_D
#define DT_N_S_soc_S_gpio_40007000_P_label_STRING_UPPER_TOKEN GPIO_D
#define DT_N_S_soc_S_gpio_40007000_P_label_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_gpio_40007000, label, 0) \
	fn(DT_N_S_soc_S_gpio_40007000, label, 1) \
	fn(DT_N_S_soc_S_gpio_40007000, label, 2) \
	fn(DT_N_S_soc_S_gpio_40007000, label, 3) \
	fn(DT_N_S_soc_S_gpio_40007000, label, 4) \
	fn(DT_N_S_soc_S_gpio_40007000, label, 5)
#define DT_N_S_soc_S_gpio_40007000_P_label_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_gpio_40007000, label, 0, __VA_ARGS__) \
	fn(DT_N_S_soc_S_gpio_40007000, label, 1, __VA_ARGS__) \
	fn(DT_N_S_soc_S_gpio_40007000, label, 2, __VA_ARGS__) \
	fn(DT_N_S_soc_S_gpio_40007000, label, 3, __VA_ARGS__) \
	fn(DT_N_S_soc_S_gpio_40007000, label, 4, __VA_ARGS__) \
	fn(DT_N_S_soc_S_gpio_40007000, label, 5, __VA_ARGS__)
#define DT_N_S_soc_S_gpio_40007000_P_label_EXISTS 1
#define DT_N_S_soc_S_gpio_40007000_P_interrupts {3 /* 0x3 */, 3 /* 0x3 */}
#define DT_N_S_soc_S_gpio_40007000_P_interrupts_IDX_0 3
#define DT_N_S_soc_S_gpio_40007000_P_interrupts_IDX_0_EXISTS 1
#define DT_N_S_soc_S_gpio_40007000_P_interrupts_IDX_1 3
#define DT_N_S_soc_S_gpio_40007000_P_interrupts_IDX_1_EXISTS 1
#define DT_N_S_soc_S_gpio_40007000_P_interrupts_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_gpio_40007000, interrupts, 0) \
	fn(DT_N_S_soc_S_gpio_40007000, interrupts, 1)
#define DT_N_S_soc_S_gpio_40007000_P_interrupts_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_gpio_40007000, interrupts, 0, __VA_ARGS__) \
	fn(DT_N_S_soc_S_gpio_40007000, interrupts, 1, __VA_ARGS__)
#define DT_N_S_soc_S_gpio_40007000_P_interrupts_EXISTS 1
#define DT_N_S_soc_S_gpio_40007000_P_gpio_controller 1
#define DT_N_S_soc_S_gpio_40007000_P_gpio_controller_EXISTS 1
#define DT_N_S_soc_S_gpio_40007000_P_ngpios 8
#define DT_N_S_soc_S_gpio_40007000_P_ngpios_EXISTS 1
#define DT_N_S_soc_S_gpio_40007000_P_status "okay"
#define DT_N_S_soc_S_gpio_40007000_P_status_STRING_TOKEN okay
#define DT_N_S_soc_S_gpio_40007000_P_status_STRING_UPPER_TOKEN OKAY
#define DT_N_S_soc_S_gpio_40007000_P_status_ENUM_IDX 1
#define DT_N_S_soc_S_gpio_40007000_P_status_ENUM_TOKEN okay
#define DT_N_S_soc_S_gpio_40007000_P_status_ENUM_UPPER_TOKEN OKAY
#define DT_N_S_soc_S_gpio_40007000_P_status_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_gpio_40007000, status, 0) \
	fn(DT_N_S_soc_S_gpio_40007000, status, 1) \
	fn(DT_N_S_soc_S_gpio_40007000, status, 2) \
	fn(DT_N_S_soc_S_gpio_40007000, status, 3)
#define DT_N_S_soc_S_gpio_40007000_P_status_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_gpio_40007000, status, 0, __VA_ARGS__) \
	fn(DT_N_S_soc_S_gpio_40007000, status, 1, __VA_ARGS__) \
	fn(DT_N_S_soc_S_gpio_40007000, status, 2, __VA_ARGS__) \
	fn(DT_N_S_soc_S_gpio_40007000, status, 3, __VA_ARGS__)
#define DT_N_S_soc_S_gpio_40007000_P_status_EXISTS 1
#define DT_N_S_soc_S_gpio_40007000_P_compatible {"ti,stellaris-gpio"}
#define DT_N_S_soc_S_gpio_40007000_P_compatible_IDX_0 "ti,stellaris-gpio"
#define DT_N_S_soc_S_gpio_40007000_P_compatible_IDX_0_EXISTS 1
#define DT_N_S_soc_S_gpio_40007000_P_compatible_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_gpio_40007000, compatible, 0)
#define DT_N_S_soc_S_gpio_40007000_P_compatible_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_gpio_40007000, compatible, 0, __VA_ARGS__)
#define DT_N_S_soc_S_gpio_40007000_P_compatible_LEN 1
#define DT_N_S_soc_S_gpio_40007000_P_compatible_EXISTS 1
#define DT_N_S_soc_S_gpio_40007000_P_wakeup_source 0
#define DT_N_S_soc_S_gpio_40007000_P_wakeup_source_EXISTS 1

/*
 * Devicetree node: /soc/gpio@40024000
 *
 * Node identifier: DT_N_S_soc_S_gpio_40024000
 *
 * Binding (compatible = ti,stellaris-gpio):
 *   C:/Users/skall/source/repos/zephyr-3.1.0/zephyr/dts/bindings\gpio\ti,stellaris-gpio.yaml
 *
 * (Descriptions have moved to the Devicetree Bindings Index
 * in the documentation.)
 */

/* Node's full path: */
#define DT_N_S_soc_S_gpio_40024000_PATH "/soc/gpio@40024000"

/* Node's name with unit-address: */
#define DT_N_S_soc_S_gpio_40024000_FULL_NAME "gpio@40024000"

/* Node parent (/soc) identifier: */
#define DT_N_S_soc_S_gpio_40024000_PARENT DT_N_S_soc

/* Node's index in its parent's list of children: */
#define DT_N_S_soc_S_gpio_40024000_CHILD_IDX 11
#define DT_N_S_soc_S_gpio_40024000_FOREACH_CHILD(fn) 
#define DT_N_S_soc_S_gpio_40024000_FOREACH_CHILD_VARGS(fn, ...) 
#define DT_N_S_soc_S_gpio_40024000_FOREACH_CHILD_STATUS_OKAY(fn) 
#define DT_N_S_soc_S_gpio_40024000_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) 

/* Node's dependency ordinal: */
#define DT_N_S_soc_S_gpio_40024000_ORD 13

/* Ordinals for what this node depends on directly: */
#define DT_N_S_soc_S_gpio_40024000_REQUIRES_ORDS \
	6, /* /soc */ \
	7, /* /soc/interrupt-controller@e000e100 */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_soc_S_gpio_40024000_SUPPORTS_ORDS /* nothing */

/* Existence and alternate IDs: */
#define DT_N_S_soc_S_gpio_40024000_EXISTS 1
#define DT_N_INST_4_ti_stellaris_gpio DT_N_S_soc_S_gpio_40024000
#define DT_N_NODELABEL_gpio4          DT_N_S_soc_S_gpio_40024000

/* Macros for properties that are special in the specification: */
#define DT_N_S_soc_S_gpio_40024000_REG_NUM 1
#define DT_N_S_soc_S_gpio_40024000_REG_IDX_0_EXISTS 1
#define DT_N_S_soc_S_gpio_40024000_REG_IDX_0_VAL_ADDRESS 1073889280 /* 0x40024000 */
#define DT_N_S_soc_S_gpio_40024000_REG_IDX_0_VAL_SIZE 4096 /* 0x1000 */
#define DT_N_S_soc_S_gpio_40024000_RANGES_NUM 0
#define DT_N_S_soc_S_gpio_40024000_FOREACH_RANGE(fn) 
#define DT_N_S_soc_S_gpio_40024000_IRQ_NUM 1
#define DT_N_S_soc_S_gpio_40024000_IRQ_IDX_0_EXISTS 1
#define DT_N_S_soc_S_gpio_40024000_IRQ_IDX_0_VAL_irq 4
#define DT_N_S_soc_S_gpio_40024000_IRQ_IDX_0_VAL_irq_EXISTS 1
#define DT_N_S_soc_S_gpio_40024000_IRQ_IDX_0_EXISTS 1
#define DT_N_S_soc_S_gpio_40024000_IRQ_IDX_0_VAL_priority 3
#define DT_N_S_soc_S_gpio_40024000_IRQ_IDX_0_VAL_priority_EXISTS 1
#define DT_N_S_soc_S_gpio_40024000_COMPAT_MATCHES_ti_stellaris_gpio 1
#define DT_N_S_soc_S_gpio_40024000_STATUS_okay 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_soc_S_gpio_40024000_PINCTRL_NUM 0

/* Generic property macros: */
#define DT_N_S_soc_S_gpio_40024000_P_reg {1073889280 /* 0x40024000 */, 4096 /* 0x1000 */}
#define DT_N_S_soc_S_gpio_40024000_P_reg_IDX_0 1073889280
#define DT_N_S_soc_S_gpio_40024000_P_reg_IDX_0_EXISTS 1
#define DT_N_S_soc_S_gpio_40024000_P_reg_IDX_1 4096
#define DT_N_S_soc_S_gpio_40024000_P_reg_IDX_1_EXISTS 1
#define DT_N_S_soc_S_gpio_40024000_P_reg_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_gpio_40024000, reg, 0) \
	fn(DT_N_S_soc_S_gpio_40024000, reg, 1)
#define DT_N_S_soc_S_gpio_40024000_P_reg_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_gpio_40024000, reg, 0, __VA_ARGS__) \
	fn(DT_N_S_soc_S_gpio_40024000, reg, 1, __VA_ARGS__)
#define DT_N_S_soc_S_gpio_40024000_P_reg_EXISTS 1
#define DT_N_S_soc_S_gpio_40024000_P_label "GPIO_E"
#define DT_N_S_soc_S_gpio_40024000_P_label_STRING_TOKEN GPIO_E
#define DT_N_S_soc_S_gpio_40024000_P_label_STRING_UPPER_TOKEN GPIO_E
#define DT_N_S_soc_S_gpio_40024000_P_label_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_gpio_40024000, label, 0) \
	fn(DT_N_S_soc_S_gpio_40024000, label, 1) \
	fn(DT_N_S_soc_S_gpio_40024000, label, 2) \
	fn(DT_N_S_soc_S_gpio_40024000, label, 3) \
	fn(DT_N_S_soc_S_gpio_40024000, label, 4) \
	fn(DT_N_S_soc_S_gpio_40024000, label, 5)
#define DT_N_S_soc_S_gpio_40024000_P_label_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_gpio_40024000, label, 0, __VA_ARGS__) \
	fn(DT_N_S_soc_S_gpio_40024000, label, 1, __VA_ARGS__) \
	fn(DT_N_S_soc_S_gpio_40024000, label, 2, __VA_ARGS__) \
	fn(DT_N_S_soc_S_gpio_40024000, label, 3, __VA_ARGS__) \
	fn(DT_N_S_soc_S_gpio_40024000, label, 4, __VA_ARGS__) \
	fn(DT_N_S_soc_S_gpio_40024000, label, 5, __VA_ARGS__)
#define DT_N_S_soc_S_gpio_40024000_P_label_EXISTS 1
#define DT_N_S_soc_S_gpio_40024000_P_interrupts {4 /* 0x4 */, 3 /* 0x3 */}
#define DT_N_S_soc_S_gpio_40024000_P_interrupts_IDX_0 4
#define DT_N_S_soc_S_gpio_40024000_P_interrupts_IDX_0_EXISTS 1
#define DT_N_S_soc_S_gpio_40024000_P_interrupts_IDX_1 3
#define DT_N_S_soc_S_gpio_40024000_P_interrupts_IDX_1_EXISTS 1
#define DT_N_S_soc_S_gpio_40024000_P_interrupts_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_gpio_40024000, interrupts, 0) \
	fn(DT_N_S_soc_S_gpio_40024000, interrupts, 1)
#define DT_N_S_soc_S_gpio_40024000_P_interrupts_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_gpio_40024000, interrupts, 0, __VA_ARGS__) \
	fn(DT_N_S_soc_S_gpio_40024000, interrupts, 1, __VA_ARGS__)
#define DT_N_S_soc_S_gpio_40024000_P_interrupts_EXISTS 1
#define DT_N_S_soc_S_gpio_40024000_P_gpio_controller 1
#define DT_N_S_soc_S_gpio_40024000_P_gpio_controller_EXISTS 1
#define DT_N_S_soc_S_gpio_40024000_P_ngpios 4
#define DT_N_S_soc_S_gpio_40024000_P_ngpios_EXISTS 1
#define DT_N_S_soc_S_gpio_40024000_P_status "okay"
#define DT_N_S_soc_S_gpio_40024000_P_status_STRING_TOKEN okay
#define DT_N_S_soc_S_gpio_40024000_P_status_STRING_UPPER_TOKEN OKAY
#define DT_N_S_soc_S_gpio_40024000_P_status_ENUM_IDX 1
#define DT_N_S_soc_S_gpio_40024000_P_status_ENUM_TOKEN okay
#define DT_N_S_soc_S_gpio_40024000_P_status_ENUM_UPPER_TOKEN OKAY
#define DT_N_S_soc_S_gpio_40024000_P_status_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_gpio_40024000, status, 0) \
	fn(DT_N_S_soc_S_gpio_40024000, status, 1) \
	fn(DT_N_S_soc_S_gpio_40024000, status, 2) \
	fn(DT_N_S_soc_S_gpio_40024000, status, 3)
#define DT_N_S_soc_S_gpio_40024000_P_status_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_gpio_40024000, status, 0, __VA_ARGS__) \
	fn(DT_N_S_soc_S_gpio_40024000, status, 1, __VA_ARGS__) \
	fn(DT_N_S_soc_S_gpio_40024000, status, 2, __VA_ARGS__) \
	fn(DT_N_S_soc_S_gpio_40024000, status, 3, __VA_ARGS__)
#define DT_N_S_soc_S_gpio_40024000_P_status_EXISTS 1
#define DT_N_S_soc_S_gpio_40024000_P_compatible {"ti,stellaris-gpio"}
#define DT_N_S_soc_S_gpio_40024000_P_compatible_IDX_0 "ti,stellaris-gpio"
#define DT_N_S_soc_S_gpio_40024000_P_compatible_IDX_0_EXISTS 1
#define DT_N_S_soc_S_gpio_40024000_P_compatible_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_gpio_40024000, compatible, 0)
#define DT_N_S_soc_S_gpio_40024000_P_compatible_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_gpio_40024000, compatible, 0, __VA_ARGS__)
#define DT_N_S_soc_S_gpio_40024000_P_compatible_LEN 1
#define DT_N_S_soc_S_gpio_40024000_P_compatible_EXISTS 1
#define DT_N_S_soc_S_gpio_40024000_P_wakeup_source 0
#define DT_N_S_soc_S_gpio_40024000_P_wakeup_source_EXISTS 1

/*
 * Devicetree node: /soc/gpio@40025000
 *
 * Node identifier: DT_N_S_soc_S_gpio_40025000
 *
 * Binding (compatible = ti,stellaris-gpio):
 *   C:/Users/skall/source/repos/zephyr-3.1.0/zephyr/dts/bindings\gpio\ti,stellaris-gpio.yaml
 *
 * (Descriptions have moved to the Devicetree Bindings Index
 * in the documentation.)
 */

/* Node's full path: */
#define DT_N_S_soc_S_gpio_40025000_PATH "/soc/gpio@40025000"

/* Node's name with unit-address: */
#define DT_N_S_soc_S_gpio_40025000_FULL_NAME "gpio@40025000"

/* Node parent (/soc) identifier: */
#define DT_N_S_soc_S_gpio_40025000_PARENT DT_N_S_soc

/* Node's index in its parent's list of children: */
#define DT_N_S_soc_S_gpio_40025000_CHILD_IDX 12
#define DT_N_S_soc_S_gpio_40025000_FOREACH_CHILD(fn) 
#define DT_N_S_soc_S_gpio_40025000_FOREACH_CHILD_VARGS(fn, ...) 
#define DT_N_S_soc_S_gpio_40025000_FOREACH_CHILD_STATUS_OKAY(fn) 
#define DT_N_S_soc_S_gpio_40025000_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) 

/* Node's dependency ordinal: */
#define DT_N_S_soc_S_gpio_40025000_ORD 14

/* Ordinals for what this node depends on directly: */
#define DT_N_S_soc_S_gpio_40025000_REQUIRES_ORDS \
	6, /* /soc */ \
	7, /* /soc/interrupt-controller@e000e100 */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_soc_S_gpio_40025000_SUPPORTS_ORDS /* nothing */

/* Existence and alternate IDs: */
#define DT_N_S_soc_S_gpio_40025000_EXISTS 1
#define DT_N_INST_5_ti_stellaris_gpio DT_N_S_soc_S_gpio_40025000
#define DT_N_NODELABEL_gpio5          DT_N_S_soc_S_gpio_40025000

/* Macros for properties that are special in the specification: */
#define DT_N_S_soc_S_gpio_40025000_REG_NUM 1
#define DT_N_S_soc_S_gpio_40025000_REG_IDX_0_EXISTS 1
#define DT_N_S_soc_S_gpio_40025000_REG_IDX_0_VAL_ADDRESS 1073893376 /* 0x40025000 */
#define DT_N_S_soc_S_gpio_40025000_REG_IDX_0_VAL_SIZE 4096 /* 0x1000 */
#define DT_N_S_soc_S_gpio_40025000_RANGES_NUM 0
#define DT_N_S_soc_S_gpio_40025000_FOREACH_RANGE(fn) 
#define DT_N_S_soc_S_gpio_40025000_IRQ_NUM 1
#define DT_N_S_soc_S_gpio_40025000_IRQ_IDX_0_EXISTS 1
#define DT_N_S_soc_S_gpio_40025000_IRQ_IDX_0_VAL_irq 30
#define DT_N_S_soc_S_gpio_40025000_IRQ_IDX_0_VAL_irq_EXISTS 1
#define DT_N_S_soc_S_gpio_40025000_IRQ_IDX_0_EXISTS 1
#define DT_N_S_soc_S_gpio_40025000_IRQ_IDX_0_VAL_priority 3
#define DT_N_S_soc_S_gpio_40025000_IRQ_IDX_0_VAL_priority_EXISTS 1
#define DT_N_S_soc_S_gpio_40025000_COMPAT_MATCHES_ti_stellaris_gpio 1
#define DT_N_S_soc_S_gpio_40025000_STATUS_okay 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_soc_S_gpio_40025000_PINCTRL_NUM 0

/* Generic property macros: */
#define DT_N_S_soc_S_gpio_40025000_P_reg {1073893376 /* 0x40025000 */, 4096 /* 0x1000 */}
#define DT_N_S_soc_S_gpio_40025000_P_reg_IDX_0 1073893376
#define DT_N_S_soc_S_gpio_40025000_P_reg_IDX_0_EXISTS 1
#define DT_N_S_soc_S_gpio_40025000_P_reg_IDX_1 4096
#define DT_N_S_soc_S_gpio_40025000_P_reg_IDX_1_EXISTS 1
#define DT_N_S_soc_S_gpio_40025000_P_reg_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_gpio_40025000, reg, 0) \
	fn(DT_N_S_soc_S_gpio_40025000, reg, 1)
#define DT_N_S_soc_S_gpio_40025000_P_reg_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_gpio_40025000, reg, 0, __VA_ARGS__) \
	fn(DT_N_S_soc_S_gpio_40025000, reg, 1, __VA_ARGS__)
#define DT_N_S_soc_S_gpio_40025000_P_reg_EXISTS 1
#define DT_N_S_soc_S_gpio_40025000_P_label "GPIO_F"
#define DT_N_S_soc_S_gpio_40025000_P_label_STRING_TOKEN GPIO_F
#define DT_N_S_soc_S_gpio_40025000_P_label_STRING_UPPER_TOKEN GPIO_F
#define DT_N_S_soc_S_gpio_40025000_P_label_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_gpio_40025000, label, 0) \
	fn(DT_N_S_soc_S_gpio_40025000, label, 1) \
	fn(DT_N_S_soc_S_gpio_40025000, label, 2) \
	fn(DT_N_S_soc_S_gpio_40025000, label, 3) \
	fn(DT_N_S_soc_S_gpio_40025000, label, 4) \
	fn(DT_N_S_soc_S_gpio_40025000, label, 5)
#define DT_N_S_soc_S_gpio_40025000_P_label_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_gpio_40025000, label, 0, __VA_ARGS__) \
	fn(DT_N_S_soc_S_gpio_40025000, label, 1, __VA_ARGS__) \
	fn(DT_N_S_soc_S_gpio_40025000, label, 2, __VA_ARGS__) \
	fn(DT_N_S_soc_S_gpio_40025000, label, 3, __VA_ARGS__) \
	fn(DT_N_S_soc_S_gpio_40025000, label, 4, __VA_ARGS__) \
	fn(DT_N_S_soc_S_gpio_40025000, label, 5, __VA_ARGS__)
#define DT_N_S_soc_S_gpio_40025000_P_label_EXISTS 1
#define DT_N_S_soc_S_gpio_40025000_P_interrupts {30 /* 0x1e */, 3 /* 0x3 */}
#define DT_N_S_soc_S_gpio_40025000_P_interrupts_IDX_0 30
#define DT_N_S_soc_S_gpio_40025000_P_interrupts_IDX_0_EXISTS 1
#define DT_N_S_soc_S_gpio_40025000_P_interrupts_IDX_1 3
#define DT_N_S_soc_S_gpio_40025000_P_interrupts_IDX_1_EXISTS 1
#define DT_N_S_soc_S_gpio_40025000_P_interrupts_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_gpio_40025000, interrupts, 0) \
	fn(DT_N_S_soc_S_gpio_40025000, interrupts, 1)
#define DT_N_S_soc_S_gpio_40025000_P_interrupts_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_gpio_40025000, interrupts, 0, __VA_ARGS__) \
	fn(DT_N_S_soc_S_gpio_40025000, interrupts, 1, __VA_ARGS__)
#define DT_N_S_soc_S_gpio_40025000_P_interrupts_EXISTS 1
#define DT_N_S_soc_S_gpio_40025000_P_gpio_controller 1
#define DT_N_S_soc_S_gpio_40025000_P_gpio_controller_EXISTS 1
#define DT_N_S_soc_S_gpio_40025000_P_ngpios 4
#define DT_N_S_soc_S_gpio_40025000_P_ngpios_EXISTS 1
#define DT_N_S_soc_S_gpio_40025000_P_status "okay"
#define DT_N_S_soc_S_gpio_40025000_P_status_STRING_TOKEN okay
#define DT_N_S_soc_S_gpio_40025000_P_status_STRING_UPPER_TOKEN OKAY
#define DT_N_S_soc_S_gpio_40025000_P_status_ENUM_IDX 1
#define DT_N_S_soc_S_gpio_40025000_P_status_ENUM_TOKEN okay
#define DT_N_S_soc_S_gpio_40025000_P_status_ENUM_UPPER_TOKEN OKAY
#define DT_N_S_soc_S_gpio_40025000_P_status_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_gpio_40025000, status, 0) \
	fn(DT_N_S_soc_S_gpio_40025000, status, 1) \
	fn(DT_N_S_soc_S_gpio_40025000, status, 2) \
	fn(DT_N_S_soc_S_gpio_40025000, status, 3)
#define DT_N_S_soc_S_gpio_40025000_P_status_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_gpio_40025000, status, 0, __VA_ARGS__) \
	fn(DT_N_S_soc_S_gpio_40025000, status, 1, __VA_ARGS__) \
	fn(DT_N_S_soc_S_gpio_40025000, status, 2, __VA_ARGS__) \
	fn(DT_N_S_soc_S_gpio_40025000, status, 3, __VA_ARGS__)
#define DT_N_S_soc_S_gpio_40025000_P_status_EXISTS 1
#define DT_N_S_soc_S_gpio_40025000_P_compatible {"ti,stellaris-gpio"}
#define DT_N_S_soc_S_gpio_40025000_P_compatible_IDX_0 "ti,stellaris-gpio"
#define DT_N_S_soc_S_gpio_40025000_P_compatible_IDX_0_EXISTS 1
#define DT_N_S_soc_S_gpio_40025000_P_compatible_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_gpio_40025000, compatible, 0)
#define DT_N_S_soc_S_gpio_40025000_P_compatible_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_gpio_40025000, compatible, 0, __VA_ARGS__)
#define DT_N_S_soc_S_gpio_40025000_P_compatible_LEN 1
#define DT_N_S_soc_S_gpio_40025000_P_compatible_EXISTS 1
#define DT_N_S_soc_S_gpio_40025000_P_wakeup_source 0
#define DT_N_S_soc_S_gpio_40025000_P_wakeup_source_EXISTS 1

/*
 * Devicetree node: /soc/gpio@40026000
 *
 * Node identifier: DT_N_S_soc_S_gpio_40026000
 *
 * Binding (compatible = ti,stellaris-gpio):
 *   C:/Users/skall/source/repos/zephyr-3.1.0/zephyr/dts/bindings\gpio\ti,stellaris-gpio.yaml
 *
 * (Descriptions have moved to the Devicetree Bindings Index
 * in the documentation.)
 */

/* Node's full path: */
#define DT_N_S_soc_S_gpio_40026000_PATH "/soc/gpio@40026000"

/* Node's name with unit-address: */
#define DT_N_S_soc_S_gpio_40026000_FULL_NAME "gpio@40026000"

/* Node parent (/soc) identifier: */
#define DT_N_S_soc_S_gpio_40026000_PARENT DT_N_S_soc

/* Node's index in its parent's list of children: */
#define DT_N_S_soc_S_gpio_40026000_CHILD_IDX 13
#define DT_N_S_soc_S_gpio_40026000_FOREACH_CHILD(fn) 
#define DT_N_S_soc_S_gpio_40026000_FOREACH_CHILD_VARGS(fn, ...) 
#define DT_N_S_soc_S_gpio_40026000_FOREACH_CHILD_STATUS_OKAY(fn) 
#define DT_N_S_soc_S_gpio_40026000_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) 

/* Node's dependency ordinal: */
#define DT_N_S_soc_S_gpio_40026000_ORD 15

/* Ordinals for what this node depends on directly: */
#define DT_N_S_soc_S_gpio_40026000_REQUIRES_ORDS \
	6, /* /soc */ \
	7, /* /soc/interrupt-controller@e000e100 */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_soc_S_gpio_40026000_SUPPORTS_ORDS /* nothing */

/* Existence and alternate IDs: */
#define DT_N_S_soc_S_gpio_40026000_EXISTS 1
#define DT_N_INST_6_ti_stellaris_gpio DT_N_S_soc_S_gpio_40026000
#define DT_N_NODELABEL_gpio6          DT_N_S_soc_S_gpio_40026000

/* Macros for properties that are special in the specification: */
#define DT_N_S_soc_S_gpio_40026000_REG_NUM 1
#define DT_N_S_soc_S_gpio_40026000_REG_IDX_0_EXISTS 1
#define DT_N_S_soc_S_gpio_40026000_REG_IDX_0_VAL_ADDRESS 1073897472 /* 0x40026000 */
#define DT_N_S_soc_S_gpio_40026000_REG_IDX_0_VAL_SIZE 4096 /* 0x1000 */
#define DT_N_S_soc_S_gpio_40026000_RANGES_NUM 0
#define DT_N_S_soc_S_gpio_40026000_FOREACH_RANGE(fn) 
#define DT_N_S_soc_S_gpio_40026000_IRQ_NUM 1
#define DT_N_S_soc_S_gpio_40026000_IRQ_IDX_0_EXISTS 1
#define DT_N_S_soc_S_gpio_40026000_IRQ_IDX_0_VAL_irq 31
#define DT_N_S_soc_S_gpio_40026000_IRQ_IDX_0_VAL_irq_EXISTS 1
#define DT_N_S_soc_S_gpio_40026000_IRQ_IDX_0_EXISTS 1
#define DT_N_S_soc_S_gpio_40026000_IRQ_IDX_0_VAL_priority 3
#define DT_N_S_soc_S_gpio_40026000_IRQ_IDX_0_VAL_priority_EXISTS 1
#define DT_N_S_soc_S_gpio_40026000_COMPAT_MATCHES_ti_stellaris_gpio 1
#define DT_N_S_soc_S_gpio_40026000_STATUS_okay 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_soc_S_gpio_40026000_PINCTRL_NUM 0

/* Generic property macros: */
#define DT_N_S_soc_S_gpio_40026000_P_reg {1073897472 /* 0x40026000 */, 4096 /* 0x1000 */}
#define DT_N_S_soc_S_gpio_40026000_P_reg_IDX_0 1073897472
#define DT_N_S_soc_S_gpio_40026000_P_reg_IDX_0_EXISTS 1
#define DT_N_S_soc_S_gpio_40026000_P_reg_IDX_1 4096
#define DT_N_S_soc_S_gpio_40026000_P_reg_IDX_1_EXISTS 1
#define DT_N_S_soc_S_gpio_40026000_P_reg_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_gpio_40026000, reg, 0) \
	fn(DT_N_S_soc_S_gpio_40026000, reg, 1)
#define DT_N_S_soc_S_gpio_40026000_P_reg_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_gpio_40026000, reg, 0, __VA_ARGS__) \
	fn(DT_N_S_soc_S_gpio_40026000, reg, 1, __VA_ARGS__)
#define DT_N_S_soc_S_gpio_40026000_P_reg_EXISTS 1
#define DT_N_S_soc_S_gpio_40026000_P_label "GPIO_G"
#define DT_N_S_soc_S_gpio_40026000_P_label_STRING_TOKEN GPIO_G
#define DT_N_S_soc_S_gpio_40026000_P_label_STRING_UPPER_TOKEN GPIO_G
#define DT_N_S_soc_S_gpio_40026000_P_label_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_gpio_40026000, label, 0) \
	fn(DT_N_S_soc_S_gpio_40026000, label, 1) \
	fn(DT_N_S_soc_S_gpio_40026000, label, 2) \
	fn(DT_N_S_soc_S_gpio_40026000, label, 3) \
	fn(DT_N_S_soc_S_gpio_40026000, label, 4) \
	fn(DT_N_S_soc_S_gpio_40026000, label, 5)
#define DT_N_S_soc_S_gpio_40026000_P_label_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_gpio_40026000, label, 0, __VA_ARGS__) \
	fn(DT_N_S_soc_S_gpio_40026000, label, 1, __VA_ARGS__) \
	fn(DT_N_S_soc_S_gpio_40026000, label, 2, __VA_ARGS__) \
	fn(DT_N_S_soc_S_gpio_40026000, label, 3, __VA_ARGS__) \
	fn(DT_N_S_soc_S_gpio_40026000, label, 4, __VA_ARGS__) \
	fn(DT_N_S_soc_S_gpio_40026000, label, 5, __VA_ARGS__)
#define DT_N_S_soc_S_gpio_40026000_P_label_EXISTS 1
#define DT_N_S_soc_S_gpio_40026000_P_interrupts {31 /* 0x1f */, 3 /* 0x3 */}
#define DT_N_S_soc_S_gpio_40026000_P_interrupts_IDX_0 31
#define DT_N_S_soc_S_gpio_40026000_P_interrupts_IDX_0_EXISTS 1
#define DT_N_S_soc_S_gpio_40026000_P_interrupts_IDX_1 3
#define DT_N_S_soc_S_gpio_40026000_P_interrupts_IDX_1_EXISTS 1
#define DT_N_S_soc_S_gpio_40026000_P_interrupts_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_gpio_40026000, interrupts, 0) \
	fn(DT_N_S_soc_S_gpio_40026000, interrupts, 1)
#define DT_N_S_soc_S_gpio_40026000_P_interrupts_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_gpio_40026000, interrupts, 0, __VA_ARGS__) \
	fn(DT_N_S_soc_S_gpio_40026000, interrupts, 1, __VA_ARGS__)
#define DT_N_S_soc_S_gpio_40026000_P_interrupts_EXISTS 1
#define DT_N_S_soc_S_gpio_40026000_P_gpio_controller 1
#define DT_N_S_soc_S_gpio_40026000_P_gpio_controller_EXISTS 1
#define DT_N_S_soc_S_gpio_40026000_P_ngpios 2
#define DT_N_S_soc_S_gpio_40026000_P_ngpios_EXISTS 1
#define DT_N_S_soc_S_gpio_40026000_P_status "okay"
#define DT_N_S_soc_S_gpio_40026000_P_status_STRING_TOKEN okay
#define DT_N_S_soc_S_gpio_40026000_P_status_STRING_UPPER_TOKEN OKAY
#define DT_N_S_soc_S_gpio_40026000_P_status_ENUM_IDX 1
#define DT_N_S_soc_S_gpio_40026000_P_status_ENUM_TOKEN okay
#define DT_N_S_soc_S_gpio_40026000_P_status_ENUM_UPPER_TOKEN OKAY
#define DT_N_S_soc_S_gpio_40026000_P_status_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_gpio_40026000, status, 0) \
	fn(DT_N_S_soc_S_gpio_40026000, status, 1) \
	fn(DT_N_S_soc_S_gpio_40026000, status, 2) \
	fn(DT_N_S_soc_S_gpio_40026000, status, 3)
#define DT_N_S_soc_S_gpio_40026000_P_status_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_gpio_40026000, status, 0, __VA_ARGS__) \
	fn(DT_N_S_soc_S_gpio_40026000, status, 1, __VA_ARGS__) \
	fn(DT_N_S_soc_S_gpio_40026000, status, 2, __VA_ARGS__) \
	fn(DT_N_S_soc_S_gpio_40026000, status, 3, __VA_ARGS__)
#define DT_N_S_soc_S_gpio_40026000_P_status_EXISTS 1
#define DT_N_S_soc_S_gpio_40026000_P_compatible {"ti,stellaris-gpio"}
#define DT_N_S_soc_S_gpio_40026000_P_compatible_IDX_0 "ti,stellaris-gpio"
#define DT_N_S_soc_S_gpio_40026000_P_compatible_IDX_0_EXISTS 1
#define DT_N_S_soc_S_gpio_40026000_P_compatible_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_gpio_40026000, compatible, 0)
#define DT_N_S_soc_S_gpio_40026000_P_compatible_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_gpio_40026000, compatible, 0, __VA_ARGS__)
#define DT_N_S_soc_S_gpio_40026000_P_compatible_LEN 1
#define DT_N_S_soc_S_gpio_40026000_P_compatible_EXISTS 1
#define DT_N_S_soc_S_gpio_40026000_P_wakeup_source 0
#define DT_N_S_soc_S_gpio_40026000_P_wakeup_source_EXISTS 1

/*
 * Devicetree node: /soc/timer@e000e010
 *
 * Node identifier: DT_N_S_soc_S_timer_e000e010
 */

/* Node's full path: */
#define DT_N_S_soc_S_timer_e000e010_PATH "/soc/timer@e000e010"

/* Node's name with unit-address: */
#define DT_N_S_soc_S_timer_e000e010_FULL_NAME "timer@e000e010"

/* Node parent (/soc) identifier: */
#define DT_N_S_soc_S_timer_e000e010_PARENT DT_N_S_soc

/* Node's index in its parent's list of children: */
#define DT_N_S_soc_S_timer_e000e010_CHILD_IDX 1
#define DT_N_S_soc_S_timer_e000e010_FOREACH_CHILD(fn) 
#define DT_N_S_soc_S_timer_e000e010_FOREACH_CHILD_VARGS(fn, ...) 
#define DT_N_S_soc_S_timer_e000e010_FOREACH_CHILD_STATUS_OKAY(fn) 
#define DT_N_S_soc_S_timer_e000e010_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) 

/* Node's dependency ordinal: */
#define DT_N_S_soc_S_timer_e000e010_ORD 16

/* Ordinals for what this node depends on directly: */
#define DT_N_S_soc_S_timer_e000e010_REQUIRES_ORDS \
	6, /* /soc */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_soc_S_timer_e000e010_SUPPORTS_ORDS /* nothing */

/* Existence and alternate IDs: */
#define DT_N_S_soc_S_timer_e000e010_EXISTS 1
#define DT_N_INST_0_arm_armv7m_systick DT_N_S_soc_S_timer_e000e010
#define DT_N_NODELABEL_systick         DT_N_S_soc_S_timer_e000e010

/* Macros for properties that are special in the specification: */
#define DT_N_S_soc_S_timer_e000e010_REG_NUM 1
#define DT_N_S_soc_S_timer_e000e010_REG_IDX_0_EXISTS 1
#define DT_N_S_soc_S_timer_e000e010_REG_IDX_0_VAL_ADDRESS 3758153744 /* 0xe000e010 */
#define DT_N_S_soc_S_timer_e000e010_REG_IDX_0_VAL_SIZE 16 /* 0x10 */
#define DT_N_S_soc_S_timer_e000e010_RANGES_NUM 0
#define DT_N_S_soc_S_timer_e000e010_FOREACH_RANGE(fn) 
#define DT_N_S_soc_S_timer_e000e010_IRQ_NUM 0
#define DT_N_S_soc_S_timer_e000e010_COMPAT_MATCHES_arm_armv7m_systick 1
#define DT_N_S_soc_S_timer_e000e010_STATUS_okay 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_soc_S_timer_e000e010_PINCTRL_NUM 0

/* Generic property macros: */
#define DT_N_S_soc_S_timer_e000e010_P_compatible {"arm,armv7m-systick"}
#define DT_N_S_soc_S_timer_e000e010_P_compatible_IDX_0 "arm,armv7m-systick"
#define DT_N_S_soc_S_timer_e000e010_P_compatible_IDX_0_EXISTS 1
#define DT_N_S_soc_S_timer_e000e010_P_compatible_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_timer_e000e010, compatible, 0)
#define DT_N_S_soc_S_timer_e000e010_P_compatible_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_timer_e000e010, compatible, 0, __VA_ARGS__)
#define DT_N_S_soc_S_timer_e000e010_P_compatible_LEN 1
#define DT_N_S_soc_S_timer_e000e010_P_compatible_EXISTS 1
#define DT_N_S_soc_S_timer_e000e010_P_reg {3758153744 /* 0xe000e010 */, 16 /* 0x10 */}
#define DT_N_S_soc_S_timer_e000e010_P_reg_IDX_0 3758153744
#define DT_N_S_soc_S_timer_e000e010_P_reg_IDX_0_EXISTS 1
#define DT_N_S_soc_S_timer_e000e010_P_reg_IDX_1 16
#define DT_N_S_soc_S_timer_e000e010_P_reg_IDX_1_EXISTS 1
#define DT_N_S_soc_S_timer_e000e010_P_reg_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_timer_e000e010, reg, 0) \
	fn(DT_N_S_soc_S_timer_e000e010, reg, 1)
#define DT_N_S_soc_S_timer_e000e010_P_reg_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_timer_e000e010, reg, 0, __VA_ARGS__) \
	fn(DT_N_S_soc_S_timer_e000e010, reg, 1, __VA_ARGS__)
#define DT_N_S_soc_S_timer_e000e010_P_reg_EXISTS 1

/*
 * Devicetree node: /system-clock
 *
 * Node identifier: DT_N_S_system_clock
 *
 * Binding (compatible = fixed-clock):
 *   C:/Users/skall/source/repos/zephyr-3.1.0/zephyr/dts/bindings\clock\fixed-clock.yaml
 *
 * (Descriptions have moved to the Devicetree Bindings Index
 * in the documentation.)
 */

/* Node's full path: */
#define DT_N_S_system_clock_PATH "/system-clock"

/* Node's name with unit-address: */
#define DT_N_S_system_clock_FULL_NAME "system-clock"

/* Node parent (/) identifier: */
#define DT_N_S_system_clock_PARENT DT_N

/* Node's index in its parent's list of children: */
#define DT_N_S_system_clock_CHILD_IDX 5
#define DT_N_S_system_clock_FOREACH_CHILD(fn) 
#define DT_N_S_system_clock_FOREACH_CHILD_VARGS(fn, ...) 
#define DT_N_S_system_clock_FOREACH_CHILD_STATUS_OKAY(fn) 
#define DT_N_S_system_clock_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) 

/* Node's dependency ordinal: */
#define DT_N_S_system_clock_ORD 17

/* Ordinals for what this node depends on directly: */
#define DT_N_S_system_clock_REQUIRES_ORDS \
	0, /* / */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_system_clock_SUPPORTS_ORDS \
	18, /* /soc/uart@4000c000 */ \
	19, /* /soc/uart@4000d000 */ \
	20, /* /soc/uart@4000e000 */

/* Existence and alternate IDs: */
#define DT_N_S_system_clock_EXISTS 1
#define DT_N_INST_0_fixed_clock DT_N_S_system_clock
#define DT_N_NODELABEL_sysclk   DT_N_S_system_clock

/* Macros for properties that are special in the specification: */
#define DT_N_S_system_clock_REG_NUM 0
#define DT_N_S_system_clock_RANGES_NUM 0
#define DT_N_S_system_clock_FOREACH_RANGE(fn) 
#define DT_N_S_system_clock_IRQ_NUM 0
#define DT_N_S_system_clock_COMPAT_MATCHES_fixed_clock 1
#define DT_N_S_system_clock_STATUS_okay 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_system_clock_PINCTRL_NUM 0

/* Generic property macros: */
#define DT_N_S_system_clock_P_clock_frequency 12000000
#define DT_N_S_system_clock_P_clock_frequency_EXISTS 1

/*
 * Devicetree node: /soc/uart@4000c000
 *
 * Node identifier: DT_N_S_soc_S_uart_4000c000
 *
 * Binding (compatible = ti,stellaris-uart):
 *   C:/Users/skall/source/repos/zephyr-3.1.0/zephyr/dts/bindings\serial\ti,stellaris-uart.yaml
 *
 * (Descriptions have moved to the Devicetree Bindings Index
 * in the documentation.)
 */

/* Node's full path: */
#define DT_N_S_soc_S_uart_4000c000_PATH "/soc/uart@4000c000"

/* Node's name with unit-address: */
#define DT_N_S_soc_S_uart_4000c000_FULL_NAME "uart@4000c000"

/* Node parent (/soc) identifier: */
#define DT_N_S_soc_S_uart_4000c000_PARENT DT_N_S_soc

/* Node's index in its parent's list of children: */
#define DT_N_S_soc_S_uart_4000c000_CHILD_IDX 3
#define DT_N_S_soc_S_uart_4000c000_FOREACH_CHILD(fn) 
#define DT_N_S_soc_S_uart_4000c000_FOREACH_CHILD_VARGS(fn, ...) 
#define DT_N_S_soc_S_uart_4000c000_FOREACH_CHILD_STATUS_OKAY(fn) 
#define DT_N_S_soc_S_uart_4000c000_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) 

/* Node's dependency ordinal: */
#define DT_N_S_soc_S_uart_4000c000_ORD 18

/* Ordinals for what this node depends on directly: */
#define DT_N_S_soc_S_uart_4000c000_REQUIRES_ORDS \
	6, /* /soc */ \
	7, /* /soc/interrupt-controller@e000e100 */ \
	17, /* /system-clock */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_soc_S_uart_4000c000_SUPPORTS_ORDS /* nothing */

/* Existence and alternate IDs: */
#define DT_N_S_soc_S_uart_4000c000_EXISTS 1
#define DT_N_ALIAS_uart_0             DT_N_S_soc_S_uart_4000c000
#define DT_N_INST_0_ti_stellaris_uart DT_N_S_soc_S_uart_4000c000
#define DT_N_NODELABEL_uart0          DT_N_S_soc_S_uart_4000c000

/* Macros for properties that are special in the specification: */
#define DT_N_S_soc_S_uart_4000c000_REG_NUM 1
#define DT_N_S_soc_S_uart_4000c000_REG_IDX_0_EXISTS 1
#define DT_N_S_soc_S_uart_4000c000_REG_IDX_0_VAL_ADDRESS 1073790976 /* 0x4000c000 */
#define DT_N_S_soc_S_uart_4000c000_REG_IDX_0_VAL_SIZE 76 /* 0x4c */
#define DT_N_S_soc_S_uart_4000c000_RANGES_NUM 0
#define DT_N_S_soc_S_uart_4000c000_FOREACH_RANGE(fn) 
#define DT_N_S_soc_S_uart_4000c000_IRQ_NUM 1
#define DT_N_S_soc_S_uart_4000c000_IRQ_IDX_0_EXISTS 1
#define DT_N_S_soc_S_uart_4000c000_IRQ_IDX_0_VAL_irq 5
#define DT_N_S_soc_S_uart_4000c000_IRQ_IDX_0_VAL_irq_EXISTS 1
#define DT_N_S_soc_S_uart_4000c000_IRQ_IDX_0_EXISTS 1
#define DT_N_S_soc_S_uart_4000c000_IRQ_IDX_0_VAL_priority 3
#define DT_N_S_soc_S_uart_4000c000_IRQ_IDX_0_VAL_priority_EXISTS 1
#define DT_N_S_soc_S_uart_4000c000_COMPAT_MATCHES_ti_stellaris_uart 1
#define DT_N_S_soc_S_uart_4000c000_STATUS_okay 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_soc_S_uart_4000c000_PINCTRL_NUM 0

/* Generic property macros: */
#define DT_N_S_soc_S_uart_4000c000_P_reg {1073790976 /* 0x4000c000 */, 76 /* 0x4c */}
#define DT_N_S_soc_S_uart_4000c000_P_reg_IDX_0 1073790976
#define DT_N_S_soc_S_uart_4000c000_P_reg_IDX_0_EXISTS 1
#define DT_N_S_soc_S_uart_4000c000_P_reg_IDX_1 76
#define DT_N_S_soc_S_uart_4000c000_P_reg_IDX_1_EXISTS 1
#define DT_N_S_soc_S_uart_4000c000_P_reg_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_uart_4000c000, reg, 0) \
	fn(DT_N_S_soc_S_uart_4000c000, reg, 1)
#define DT_N_S_soc_S_uart_4000c000_P_reg_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_uart_4000c000, reg, 0, __VA_ARGS__) \
	fn(DT_N_S_soc_S_uart_4000c000, reg, 1, __VA_ARGS__)
#define DT_N_S_soc_S_uart_4000c000_P_reg_EXISTS 1
#define DT_N_S_soc_S_uart_4000c000_P_interrupts {5 /* 0x5 */, 3 /* 0x3 */}
#define DT_N_S_soc_S_uart_4000c000_P_interrupts_IDX_0 5
#define DT_N_S_soc_S_uart_4000c000_P_interrupts_IDX_0_EXISTS 1
#define DT_N_S_soc_S_uart_4000c000_P_interrupts_IDX_1 3
#define DT_N_S_soc_S_uart_4000c000_P_interrupts_IDX_1_EXISTS 1
#define DT_N_S_soc_S_uart_4000c000_P_interrupts_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_uart_4000c000, interrupts, 0) \
	fn(DT_N_S_soc_S_uart_4000c000, interrupts, 1)
#define DT_N_S_soc_S_uart_4000c000_P_interrupts_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_uart_4000c000, interrupts, 0, __VA_ARGS__) \
	fn(DT_N_S_soc_S_uart_4000c000, interrupts, 1, __VA_ARGS__)
#define DT_N_S_soc_S_uart_4000c000_P_interrupts_EXISTS 1
#define DT_N_S_soc_S_uart_4000c000_P_current_speed 115200
#define DT_N_S_soc_S_uart_4000c000_P_current_speed_EXISTS 1
#define DT_N_S_soc_S_uart_4000c000_P_label "UART_0"
#define DT_N_S_soc_S_uart_4000c000_P_label_STRING_TOKEN UART_0
#define DT_N_S_soc_S_uart_4000c000_P_label_STRING_UPPER_TOKEN UART_0
#define DT_N_S_soc_S_uart_4000c000_P_label_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_uart_4000c000, label, 0) \
	fn(DT_N_S_soc_S_uart_4000c000, label, 1) \
	fn(DT_N_S_soc_S_uart_4000c000, label, 2) \
	fn(DT_N_S_soc_S_uart_4000c000, label, 3) \
	fn(DT_N_S_soc_S_uart_4000c000, label, 4) \
	fn(DT_N_S_soc_S_uart_4000c000, label, 5)
#define DT_N_S_soc_S_uart_4000c000_P_label_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_uart_4000c000, label, 0, __VA_ARGS__) \
	fn(DT_N_S_soc_S_uart_4000c000, label, 1, __VA_ARGS__) \
	fn(DT_N_S_soc_S_uart_4000c000, label, 2, __VA_ARGS__) \
	fn(DT_N_S_soc_S_uart_4000c000, label, 3, __VA_ARGS__) \
	fn(DT_N_S_soc_S_uart_4000c000, label, 4, __VA_ARGS__) \
	fn(DT_N_S_soc_S_uart_4000c000, label, 5, __VA_ARGS__)
#define DT_N_S_soc_S_uart_4000c000_P_label_EXISTS 1
#define DT_N_S_soc_S_uart_4000c000_P_hw_flow_control 0
#define DT_N_S_soc_S_uart_4000c000_P_hw_flow_control_EXISTS 1
#define DT_N_S_soc_S_uart_4000c000_P_status "okay"
#define DT_N_S_soc_S_uart_4000c000_P_status_STRING_TOKEN okay
#define DT_N_S_soc_S_uart_4000c000_P_status_STRING_UPPER_TOKEN OKAY
#define DT_N_S_soc_S_uart_4000c000_P_status_ENUM_IDX 1
#define DT_N_S_soc_S_uart_4000c000_P_status_ENUM_TOKEN okay
#define DT_N_S_soc_S_uart_4000c000_P_status_ENUM_UPPER_TOKEN OKAY
#define DT_N_S_soc_S_uart_4000c000_P_status_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_uart_4000c000, status, 0) \
	fn(DT_N_S_soc_S_uart_4000c000, status, 1) \
	fn(DT_N_S_soc_S_uart_4000c000, status, 2) \
	fn(DT_N_S_soc_S_uart_4000c000, status, 3)
#define DT_N_S_soc_S_uart_4000c000_P_status_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_uart_4000c000, status, 0, __VA_ARGS__) \
	fn(DT_N_S_soc_S_uart_4000c000, status, 1, __VA_ARGS__) \
	fn(DT_N_S_soc_S_uart_4000c000, status, 2, __VA_ARGS__) \
	fn(DT_N_S_soc_S_uart_4000c000, status, 3, __VA_ARGS__)
#define DT_N_S_soc_S_uart_4000c000_P_status_EXISTS 1
#define DT_N_S_soc_S_uart_4000c000_P_compatible {"ti,stellaris-uart"}
#define DT_N_S_soc_S_uart_4000c000_P_compatible_IDX_0 "ti,stellaris-uart"
#define DT_N_S_soc_S_uart_4000c000_P_compatible_IDX_0_EXISTS 1
#define DT_N_S_soc_S_uart_4000c000_P_compatible_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_uart_4000c000, compatible, 0)
#define DT_N_S_soc_S_uart_4000c000_P_compatible_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_uart_4000c000, compatible, 0, __VA_ARGS__)
#define DT_N_S_soc_S_uart_4000c000_P_compatible_LEN 1
#define DT_N_S_soc_S_uart_4000c000_P_compatible_EXISTS 1
#define DT_N_S_soc_S_uart_4000c000_P_clocks_IDX_0_EXISTS 1
#define DT_N_S_soc_S_uart_4000c000_P_clocks_IDX_0_PH DT_N_S_system_clock
#define DT_N_S_soc_S_uart_4000c000_P_clocks_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_uart_4000c000, clocks, 0)
#define DT_N_S_soc_S_uart_4000c000_P_clocks_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_uart_4000c000, clocks, 0, __VA_ARGS__)
#define DT_N_S_soc_S_uart_4000c000_P_clocks_LEN 1
#define DT_N_S_soc_S_uart_4000c000_P_clocks_EXISTS 1
#define DT_N_S_soc_S_uart_4000c000_P_wakeup_source 0
#define DT_N_S_soc_S_uart_4000c000_P_wakeup_source_EXISTS 1

/*
 * Devicetree node: /soc/uart@4000d000
 *
 * Node identifier: DT_N_S_soc_S_uart_4000d000
 *
 * Binding (compatible = ti,stellaris-uart):
 *   C:/Users/skall/source/repos/zephyr-3.1.0/zephyr/dts/bindings\serial\ti,stellaris-uart.yaml
 *
 * (Descriptions have moved to the Devicetree Bindings Index
 * in the documentation.)
 */

/* Node's full path: */
#define DT_N_S_soc_S_uart_4000d000_PATH "/soc/uart@4000d000"

/* Node's name with unit-address: */
#define DT_N_S_soc_S_uart_4000d000_FULL_NAME "uart@4000d000"

/* Node parent (/soc) identifier: */
#define DT_N_S_soc_S_uart_4000d000_PARENT DT_N_S_soc

/* Node's index in its parent's list of children: */
#define DT_N_S_soc_S_uart_4000d000_CHILD_IDX 4
#define DT_N_S_soc_S_uart_4000d000_FOREACH_CHILD(fn) 
#define DT_N_S_soc_S_uart_4000d000_FOREACH_CHILD_VARGS(fn, ...) 
#define DT_N_S_soc_S_uart_4000d000_FOREACH_CHILD_STATUS_OKAY(fn) 
#define DT_N_S_soc_S_uart_4000d000_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) 

/* Node's dependency ordinal: */
#define DT_N_S_soc_S_uart_4000d000_ORD 19

/* Ordinals for what this node depends on directly: */
#define DT_N_S_soc_S_uart_4000d000_REQUIRES_ORDS \
	6, /* /soc */ \
	7, /* /soc/interrupt-controller@e000e100 */ \
	17, /* /system-clock */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_soc_S_uart_4000d000_SUPPORTS_ORDS /* nothing */

/* Existence and alternate IDs: */
#define DT_N_S_soc_S_uart_4000d000_EXISTS 1
#define DT_N_ALIAS_uart_1             DT_N_S_soc_S_uart_4000d000
#define DT_N_INST_1_ti_stellaris_uart DT_N_S_soc_S_uart_4000d000
#define DT_N_NODELABEL_uart1          DT_N_S_soc_S_uart_4000d000

/* Macros for properties that are special in the specification: */
#define DT_N_S_soc_S_uart_4000d000_REG_NUM 1
#define DT_N_S_soc_S_uart_4000d000_REG_IDX_0_EXISTS 1
#define DT_N_S_soc_S_uart_4000d000_REG_IDX_0_VAL_ADDRESS 1073795072 /* 0x4000d000 */
#define DT_N_S_soc_S_uart_4000d000_REG_IDX_0_VAL_SIZE 76 /* 0x4c */
#define DT_N_S_soc_S_uart_4000d000_RANGES_NUM 0
#define DT_N_S_soc_S_uart_4000d000_FOREACH_RANGE(fn) 
#define DT_N_S_soc_S_uart_4000d000_IRQ_NUM 1
#define DT_N_S_soc_S_uart_4000d000_IRQ_IDX_0_EXISTS 1
#define DT_N_S_soc_S_uart_4000d000_IRQ_IDX_0_VAL_irq 6
#define DT_N_S_soc_S_uart_4000d000_IRQ_IDX_0_VAL_irq_EXISTS 1
#define DT_N_S_soc_S_uart_4000d000_IRQ_IDX_0_EXISTS 1
#define DT_N_S_soc_S_uart_4000d000_IRQ_IDX_0_VAL_priority 3
#define DT_N_S_soc_S_uart_4000d000_IRQ_IDX_0_VAL_priority_EXISTS 1
#define DT_N_S_soc_S_uart_4000d000_COMPAT_MATCHES_ti_stellaris_uart 1
#define DT_N_S_soc_S_uart_4000d000_STATUS_okay 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_soc_S_uart_4000d000_PINCTRL_NUM 0

/* Generic property macros: */
#define DT_N_S_soc_S_uart_4000d000_P_reg {1073795072 /* 0x4000d000 */, 76 /* 0x4c */}
#define DT_N_S_soc_S_uart_4000d000_P_reg_IDX_0 1073795072
#define DT_N_S_soc_S_uart_4000d000_P_reg_IDX_0_EXISTS 1
#define DT_N_S_soc_S_uart_4000d000_P_reg_IDX_1 76
#define DT_N_S_soc_S_uart_4000d000_P_reg_IDX_1_EXISTS 1
#define DT_N_S_soc_S_uart_4000d000_P_reg_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_uart_4000d000, reg, 0) \
	fn(DT_N_S_soc_S_uart_4000d000, reg, 1)
#define DT_N_S_soc_S_uart_4000d000_P_reg_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_uart_4000d000, reg, 0, __VA_ARGS__) \
	fn(DT_N_S_soc_S_uart_4000d000, reg, 1, __VA_ARGS__)
#define DT_N_S_soc_S_uart_4000d000_P_reg_EXISTS 1
#define DT_N_S_soc_S_uart_4000d000_P_interrupts {6 /* 0x6 */, 3 /* 0x3 */}
#define DT_N_S_soc_S_uart_4000d000_P_interrupts_IDX_0 6
#define DT_N_S_soc_S_uart_4000d000_P_interrupts_IDX_0_EXISTS 1
#define DT_N_S_soc_S_uart_4000d000_P_interrupts_IDX_1 3
#define DT_N_S_soc_S_uart_4000d000_P_interrupts_IDX_1_EXISTS 1
#define DT_N_S_soc_S_uart_4000d000_P_interrupts_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_uart_4000d000, interrupts, 0) \
	fn(DT_N_S_soc_S_uart_4000d000, interrupts, 1)
#define DT_N_S_soc_S_uart_4000d000_P_interrupts_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_uart_4000d000, interrupts, 0, __VA_ARGS__) \
	fn(DT_N_S_soc_S_uart_4000d000, interrupts, 1, __VA_ARGS__)
#define DT_N_S_soc_S_uart_4000d000_P_interrupts_EXISTS 1
#define DT_N_S_soc_S_uart_4000d000_P_current_speed 115200
#define DT_N_S_soc_S_uart_4000d000_P_current_speed_EXISTS 1
#define DT_N_S_soc_S_uart_4000d000_P_label "UART_1"
#define DT_N_S_soc_S_uart_4000d000_P_label_STRING_TOKEN UART_1
#define DT_N_S_soc_S_uart_4000d000_P_label_STRING_UPPER_TOKEN UART_1
#define DT_N_S_soc_S_uart_4000d000_P_label_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_uart_4000d000, label, 0) \
	fn(DT_N_S_soc_S_uart_4000d000, label, 1) \
	fn(DT_N_S_soc_S_uart_4000d000, label, 2) \
	fn(DT_N_S_soc_S_uart_4000d000, label, 3) \
	fn(DT_N_S_soc_S_uart_4000d000, label, 4) \
	fn(DT_N_S_soc_S_uart_4000d000, label, 5)
#define DT_N_S_soc_S_uart_4000d000_P_label_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_uart_4000d000, label, 0, __VA_ARGS__) \
	fn(DT_N_S_soc_S_uart_4000d000, label, 1, __VA_ARGS__) \
	fn(DT_N_S_soc_S_uart_4000d000, label, 2, __VA_ARGS__) \
	fn(DT_N_S_soc_S_uart_4000d000, label, 3, __VA_ARGS__) \
	fn(DT_N_S_soc_S_uart_4000d000, label, 4, __VA_ARGS__) \
	fn(DT_N_S_soc_S_uart_4000d000, label, 5, __VA_ARGS__)
#define DT_N_S_soc_S_uart_4000d000_P_label_EXISTS 1
#define DT_N_S_soc_S_uart_4000d000_P_hw_flow_control 0
#define DT_N_S_soc_S_uart_4000d000_P_hw_flow_control_EXISTS 1
#define DT_N_S_soc_S_uart_4000d000_P_status "okay"
#define DT_N_S_soc_S_uart_4000d000_P_status_STRING_TOKEN okay
#define DT_N_S_soc_S_uart_4000d000_P_status_STRING_UPPER_TOKEN OKAY
#define DT_N_S_soc_S_uart_4000d000_P_status_ENUM_IDX 1
#define DT_N_S_soc_S_uart_4000d000_P_status_ENUM_TOKEN okay
#define DT_N_S_soc_S_uart_4000d000_P_status_ENUM_UPPER_TOKEN OKAY
#define DT_N_S_soc_S_uart_4000d000_P_status_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_uart_4000d000, status, 0) \
	fn(DT_N_S_soc_S_uart_4000d000, status, 1) \
	fn(DT_N_S_soc_S_uart_4000d000, status, 2) \
	fn(DT_N_S_soc_S_uart_4000d000, status, 3)
#define DT_N_S_soc_S_uart_4000d000_P_status_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_uart_4000d000, status, 0, __VA_ARGS__) \
	fn(DT_N_S_soc_S_uart_4000d000, status, 1, __VA_ARGS__) \
	fn(DT_N_S_soc_S_uart_4000d000, status, 2, __VA_ARGS__) \
	fn(DT_N_S_soc_S_uart_4000d000, status, 3, __VA_ARGS__)
#define DT_N_S_soc_S_uart_4000d000_P_status_EXISTS 1
#define DT_N_S_soc_S_uart_4000d000_P_compatible {"ti,stellaris-uart"}
#define DT_N_S_soc_S_uart_4000d000_P_compatible_IDX_0 "ti,stellaris-uart"
#define DT_N_S_soc_S_uart_4000d000_P_compatible_IDX_0_EXISTS 1
#define DT_N_S_soc_S_uart_4000d000_P_compatible_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_uart_4000d000, compatible, 0)
#define DT_N_S_soc_S_uart_4000d000_P_compatible_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_uart_4000d000, compatible, 0, __VA_ARGS__)
#define DT_N_S_soc_S_uart_4000d000_P_compatible_LEN 1
#define DT_N_S_soc_S_uart_4000d000_P_compatible_EXISTS 1
#define DT_N_S_soc_S_uart_4000d000_P_clocks_IDX_0_EXISTS 1
#define DT_N_S_soc_S_uart_4000d000_P_clocks_IDX_0_PH DT_N_S_system_clock
#define DT_N_S_soc_S_uart_4000d000_P_clocks_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_uart_4000d000, clocks, 0)
#define DT_N_S_soc_S_uart_4000d000_P_clocks_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_uart_4000d000, clocks, 0, __VA_ARGS__)
#define DT_N_S_soc_S_uart_4000d000_P_clocks_LEN 1
#define DT_N_S_soc_S_uart_4000d000_P_clocks_EXISTS 1
#define DT_N_S_soc_S_uart_4000d000_P_wakeup_source 0
#define DT_N_S_soc_S_uart_4000d000_P_wakeup_source_EXISTS 1

/*
 * Devicetree node: /soc/uart@4000e000
 *
 * Node identifier: DT_N_S_soc_S_uart_4000e000
 *
 * Binding (compatible = ti,stellaris-uart):
 *   C:/Users/skall/source/repos/zephyr-3.1.0/zephyr/dts/bindings\serial\ti,stellaris-uart.yaml
 *
 * (Descriptions have moved to the Devicetree Bindings Index
 * in the documentation.)
 */

/* Node's full path: */
#define DT_N_S_soc_S_uart_4000e000_PATH "/soc/uart@4000e000"

/* Node's name with unit-address: */
#define DT_N_S_soc_S_uart_4000e000_FULL_NAME "uart@4000e000"

/* Node parent (/soc) identifier: */
#define DT_N_S_soc_S_uart_4000e000_PARENT DT_N_S_soc

/* Node's index in its parent's list of children: */
#define DT_N_S_soc_S_uart_4000e000_CHILD_IDX 5
#define DT_N_S_soc_S_uart_4000e000_FOREACH_CHILD(fn) 
#define DT_N_S_soc_S_uart_4000e000_FOREACH_CHILD_VARGS(fn, ...) 
#define DT_N_S_soc_S_uart_4000e000_FOREACH_CHILD_STATUS_OKAY(fn) 
#define DT_N_S_soc_S_uart_4000e000_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) 

/* Node's dependency ordinal: */
#define DT_N_S_soc_S_uart_4000e000_ORD 20

/* Ordinals for what this node depends on directly: */
#define DT_N_S_soc_S_uart_4000e000_REQUIRES_ORDS \
	6, /* /soc */ \
	7, /* /soc/interrupt-controller@e000e100 */ \
	17, /* /system-clock */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_soc_S_uart_4000e000_SUPPORTS_ORDS /* nothing */

/* Existence and alternate IDs: */
#define DT_N_S_soc_S_uart_4000e000_EXISTS 1
#define DT_N_ALIAS_uart_2             DT_N_S_soc_S_uart_4000e000
#define DT_N_INST_2_ti_stellaris_uart DT_N_S_soc_S_uart_4000e000
#define DT_N_NODELABEL_uart2          DT_N_S_soc_S_uart_4000e000

/* Macros for properties that are special in the specification: */
#define DT_N_S_soc_S_uart_4000e000_REG_NUM 1
#define DT_N_S_soc_S_uart_4000e000_REG_IDX_0_EXISTS 1
#define DT_N_S_soc_S_uart_4000e000_REG_IDX_0_VAL_ADDRESS 1073799168 /* 0x4000e000 */
#define DT_N_S_soc_S_uart_4000e000_REG_IDX_0_VAL_SIZE 76 /* 0x4c */
#define DT_N_S_soc_S_uart_4000e000_RANGES_NUM 0
#define DT_N_S_soc_S_uart_4000e000_FOREACH_RANGE(fn) 
#define DT_N_S_soc_S_uart_4000e000_IRQ_NUM 1
#define DT_N_S_soc_S_uart_4000e000_IRQ_IDX_0_EXISTS 1
#define DT_N_S_soc_S_uart_4000e000_IRQ_IDX_0_VAL_irq 33
#define DT_N_S_soc_S_uart_4000e000_IRQ_IDX_0_VAL_irq_EXISTS 1
#define DT_N_S_soc_S_uart_4000e000_IRQ_IDX_0_EXISTS 1
#define DT_N_S_soc_S_uart_4000e000_IRQ_IDX_0_VAL_priority 3
#define DT_N_S_soc_S_uart_4000e000_IRQ_IDX_0_VAL_priority_EXISTS 1
#define DT_N_S_soc_S_uart_4000e000_COMPAT_MATCHES_ti_stellaris_uart 1
#define DT_N_S_soc_S_uart_4000e000_STATUS_okay 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_soc_S_uart_4000e000_PINCTRL_NUM 0

/* Generic property macros: */
#define DT_N_S_soc_S_uart_4000e000_P_reg {1073799168 /* 0x4000e000 */, 76 /* 0x4c */}
#define DT_N_S_soc_S_uart_4000e000_P_reg_IDX_0 1073799168
#define DT_N_S_soc_S_uart_4000e000_P_reg_IDX_0_EXISTS 1
#define DT_N_S_soc_S_uart_4000e000_P_reg_IDX_1 76
#define DT_N_S_soc_S_uart_4000e000_P_reg_IDX_1_EXISTS 1
#define DT_N_S_soc_S_uart_4000e000_P_reg_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_uart_4000e000, reg, 0) \
	fn(DT_N_S_soc_S_uart_4000e000, reg, 1)
#define DT_N_S_soc_S_uart_4000e000_P_reg_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_uart_4000e000, reg, 0, __VA_ARGS__) \
	fn(DT_N_S_soc_S_uart_4000e000, reg, 1, __VA_ARGS__)
#define DT_N_S_soc_S_uart_4000e000_P_reg_EXISTS 1
#define DT_N_S_soc_S_uart_4000e000_P_interrupts {33 /* 0x21 */, 3 /* 0x3 */}
#define DT_N_S_soc_S_uart_4000e000_P_interrupts_IDX_0 33
#define DT_N_S_soc_S_uart_4000e000_P_interrupts_IDX_0_EXISTS 1
#define DT_N_S_soc_S_uart_4000e000_P_interrupts_IDX_1 3
#define DT_N_S_soc_S_uart_4000e000_P_interrupts_IDX_1_EXISTS 1
#define DT_N_S_soc_S_uart_4000e000_P_interrupts_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_uart_4000e000, interrupts, 0) \
	fn(DT_N_S_soc_S_uart_4000e000, interrupts, 1)
#define DT_N_S_soc_S_uart_4000e000_P_interrupts_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_uart_4000e000, interrupts, 0, __VA_ARGS__) \
	fn(DT_N_S_soc_S_uart_4000e000, interrupts, 1, __VA_ARGS__)
#define DT_N_S_soc_S_uart_4000e000_P_interrupts_EXISTS 1
#define DT_N_S_soc_S_uart_4000e000_P_current_speed 115200
#define DT_N_S_soc_S_uart_4000e000_P_current_speed_EXISTS 1
#define DT_N_S_soc_S_uart_4000e000_P_label "UART_2"
#define DT_N_S_soc_S_uart_4000e000_P_label_STRING_TOKEN UART_2
#define DT_N_S_soc_S_uart_4000e000_P_label_STRING_UPPER_TOKEN UART_2
#define DT_N_S_soc_S_uart_4000e000_P_label_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_uart_4000e000, label, 0) \
	fn(DT_N_S_soc_S_uart_4000e000, label, 1) \
	fn(DT_N_S_soc_S_uart_4000e000, label, 2) \
	fn(DT_N_S_soc_S_uart_4000e000, label, 3) \
	fn(DT_N_S_soc_S_uart_4000e000, label, 4) \
	fn(DT_N_S_soc_S_uart_4000e000, label, 5)
#define DT_N_S_soc_S_uart_4000e000_P_label_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_uart_4000e000, label, 0, __VA_ARGS__) \
	fn(DT_N_S_soc_S_uart_4000e000, label, 1, __VA_ARGS__) \
	fn(DT_N_S_soc_S_uart_4000e000, label, 2, __VA_ARGS__) \
	fn(DT_N_S_soc_S_uart_4000e000, label, 3, __VA_ARGS__) \
	fn(DT_N_S_soc_S_uart_4000e000, label, 4, __VA_ARGS__) \
	fn(DT_N_S_soc_S_uart_4000e000, label, 5, __VA_ARGS__)
#define DT_N_S_soc_S_uart_4000e000_P_label_EXISTS 1
#define DT_N_S_soc_S_uart_4000e000_P_hw_flow_control 0
#define DT_N_S_soc_S_uart_4000e000_P_hw_flow_control_EXISTS 1
#define DT_N_S_soc_S_uart_4000e000_P_status "okay"
#define DT_N_S_soc_S_uart_4000e000_P_status_STRING_TOKEN okay
#define DT_N_S_soc_S_uart_4000e000_P_status_STRING_UPPER_TOKEN OKAY
#define DT_N_S_soc_S_uart_4000e000_P_status_ENUM_IDX 1
#define DT_N_S_soc_S_uart_4000e000_P_status_ENUM_TOKEN okay
#define DT_N_S_soc_S_uart_4000e000_P_status_ENUM_UPPER_TOKEN OKAY
#define DT_N_S_soc_S_uart_4000e000_P_status_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_uart_4000e000, status, 0) \
	fn(DT_N_S_soc_S_uart_4000e000, status, 1) \
	fn(DT_N_S_soc_S_uart_4000e000, status, 2) \
	fn(DT_N_S_soc_S_uart_4000e000, status, 3)
#define DT_N_S_soc_S_uart_4000e000_P_status_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_uart_4000e000, status, 0, __VA_ARGS__) \
	fn(DT_N_S_soc_S_uart_4000e000, status, 1, __VA_ARGS__) \
	fn(DT_N_S_soc_S_uart_4000e000, status, 2, __VA_ARGS__) \
	fn(DT_N_S_soc_S_uart_4000e000, status, 3, __VA_ARGS__)
#define DT_N_S_soc_S_uart_4000e000_P_status_EXISTS 1
#define DT_N_S_soc_S_uart_4000e000_P_compatible {"ti,stellaris-uart"}
#define DT_N_S_soc_S_uart_4000e000_P_compatible_IDX_0 "ti,stellaris-uart"
#define DT_N_S_soc_S_uart_4000e000_P_compatible_IDX_0_EXISTS 1
#define DT_N_S_soc_S_uart_4000e000_P_compatible_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_uart_4000e000, compatible, 0)
#define DT_N_S_soc_S_uart_4000e000_P_compatible_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_uart_4000e000, compatible, 0, __VA_ARGS__)
#define DT_N_S_soc_S_uart_4000e000_P_compatible_LEN 1
#define DT_N_S_soc_S_uart_4000e000_P_compatible_EXISTS 1
#define DT_N_S_soc_S_uart_4000e000_P_clocks_IDX_0_EXISTS 1
#define DT_N_S_soc_S_uart_4000e000_P_clocks_IDX_0_PH DT_N_S_system_clock
#define DT_N_S_soc_S_uart_4000e000_P_clocks_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_uart_4000e000, clocks, 0)
#define DT_N_S_soc_S_uart_4000e000_P_clocks_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_uart_4000e000, clocks, 0, __VA_ARGS__)
#define DT_N_S_soc_S_uart_4000e000_P_clocks_LEN 1
#define DT_N_S_soc_S_uart_4000e000_P_clocks_EXISTS 1
#define DT_N_S_soc_S_uart_4000e000_P_wakeup_source 0
#define DT_N_S_soc_S_uart_4000e000_P_wakeup_source_EXISTS 1

/*
 * Devicetree node: /soc/flash-controller@400fd000
 *
 * Node identifier: DT_N_S_soc_S_flash_controller_400fd000
 *
 * Binding (compatible = ti,stellaris-flash-controller):
 *   C:/Users/skall/source/repos/zephyr-3.1.0/zephyr/dts/bindings\flash_controller\ti,stellaris-flash-controller.yaml
 *
 * (Descriptions have moved to the Devicetree Bindings Index
 * in the documentation.)
 */

/* Node's full path: */
#define DT_N_S_soc_S_flash_controller_400fd000_PATH "/soc/flash-controller@400fd000"

/* Node's name with unit-address: */
#define DT_N_S_soc_S_flash_controller_400fd000_FULL_NAME "flash-controller@400fd000"

/* Node parent (/soc) identifier: */
#define DT_N_S_soc_S_flash_controller_400fd000_PARENT DT_N_S_soc

/* Node's index in its parent's list of children: */
#define DT_N_S_soc_S_flash_controller_400fd000_CHILD_IDX 2
#define DT_N_S_soc_S_flash_controller_400fd000_FOREACH_CHILD(fn) fn(DT_N_S_soc_S_flash_controller_400fd000_S_flash_0)
#define DT_N_S_soc_S_flash_controller_400fd000_FOREACH_CHILD_VARGS(fn, ...) fn(DT_N_S_soc_S_flash_controller_400fd000_S_flash_0, __VA_ARGS__)
#define DT_N_S_soc_S_flash_controller_400fd000_FOREACH_CHILD_STATUS_OKAY(fn) fn(DT_N_S_soc_S_flash_controller_400fd000_S_flash_0) 
#define DT_N_S_soc_S_flash_controller_400fd000_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) fn(DT_N_S_soc_S_flash_controller_400fd000_S_flash_0, __VA_ARGS__) 

/* Node's dependency ordinal: */
#define DT_N_S_soc_S_flash_controller_400fd000_ORD 21

/* Ordinals for what this node depends on directly: */
#define DT_N_S_soc_S_flash_controller_400fd000_REQUIRES_ORDS \
	6, /* /soc */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_soc_S_flash_controller_400fd000_SUPPORTS_ORDS \
	22, /* /soc/flash-controller@400fd000/flash@0 */

/* Existence and alternate IDs: */
#define DT_N_S_soc_S_flash_controller_400fd000_EXISTS 1
#define DT_N_INST_0_ti_stellaris_flash_controller DT_N_S_soc_S_flash_controller_400fd000

/* Macros for properties that are special in the specification: */
#define DT_N_S_soc_S_flash_controller_400fd000_REG_NUM 1
#define DT_N_S_soc_S_flash_controller_400fd000_REG_IDX_0_EXISTS 1
#define DT_N_S_soc_S_flash_controller_400fd000_REG_IDX_0_VAL_ADDRESS 1074778112 /* 0x400fd000 */
#define DT_N_S_soc_S_flash_controller_400fd000_REG_IDX_0_VAL_SIZE 4096 /* 0x1000 */
#define DT_N_S_soc_S_flash_controller_400fd000_RANGES_NUM 0
#define DT_N_S_soc_S_flash_controller_400fd000_FOREACH_RANGE(fn) 
#define DT_N_S_soc_S_flash_controller_400fd000_IRQ_NUM 0
#define DT_N_S_soc_S_flash_controller_400fd000_COMPAT_MATCHES_ti_stellaris_flash_controller 1
#define DT_N_S_soc_S_flash_controller_400fd000_STATUS_okay 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_soc_S_flash_controller_400fd000_PINCTRL_NUM 0

/* Generic property macros: */
#define DT_N_S_soc_S_flash_controller_400fd000_P_label "FLASH_CTRL"
#define DT_N_S_soc_S_flash_controller_400fd000_P_label_STRING_TOKEN FLASH_CTRL
#define DT_N_S_soc_S_flash_controller_400fd000_P_label_STRING_UPPER_TOKEN FLASH_CTRL
#define DT_N_S_soc_S_flash_controller_400fd000_P_label_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_flash_controller_400fd000, label, 0) \
	fn(DT_N_S_soc_S_flash_controller_400fd000, label, 1) \
	fn(DT_N_S_soc_S_flash_controller_400fd000, label, 2) \
	fn(DT_N_S_soc_S_flash_controller_400fd000, label, 3) \
	fn(DT_N_S_soc_S_flash_controller_400fd000, label, 4) \
	fn(DT_N_S_soc_S_flash_controller_400fd000, label, 5) \
	fn(DT_N_S_soc_S_flash_controller_400fd000, label, 6) \
	fn(DT_N_S_soc_S_flash_controller_400fd000, label, 7) \
	fn(DT_N_S_soc_S_flash_controller_400fd000, label, 8) \
	fn(DT_N_S_soc_S_flash_controller_400fd000, label, 9)
#define DT_N_S_soc_S_flash_controller_400fd000_P_label_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_flash_controller_400fd000, label, 0, __VA_ARGS__) \
	fn(DT_N_S_soc_S_flash_controller_400fd000, label, 1, __VA_ARGS__) \
	fn(DT_N_S_soc_S_flash_controller_400fd000, label, 2, __VA_ARGS__) \
	fn(DT_N_S_soc_S_flash_controller_400fd000, label, 3, __VA_ARGS__) \
	fn(DT_N_S_soc_S_flash_controller_400fd000, label, 4, __VA_ARGS__) \
	fn(DT_N_S_soc_S_flash_controller_400fd000, label, 5, __VA_ARGS__) \
	fn(DT_N_S_soc_S_flash_controller_400fd000, label, 6, __VA_ARGS__) \
	fn(DT_N_S_soc_S_flash_controller_400fd000, label, 7, __VA_ARGS__) \
	fn(DT_N_S_soc_S_flash_controller_400fd000, label, 8, __VA_ARGS__) \
	fn(DT_N_S_soc_S_flash_controller_400fd000, label, 9, __VA_ARGS__)
#define DT_N_S_soc_S_flash_controller_400fd000_P_label_EXISTS 1
#define DT_N_S_soc_S_flash_controller_400fd000_P_reg {1074778112 /* 0x400fd000 */, 4096 /* 0x1000 */}
#define DT_N_S_soc_S_flash_controller_400fd000_P_reg_IDX_0 1074778112
#define DT_N_S_soc_S_flash_controller_400fd000_P_reg_IDX_0_EXISTS 1
#define DT_N_S_soc_S_flash_controller_400fd000_P_reg_IDX_1 4096
#define DT_N_S_soc_S_flash_controller_400fd000_P_reg_IDX_1_EXISTS 1
#define DT_N_S_soc_S_flash_controller_400fd000_P_reg_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_flash_controller_400fd000, reg, 0) \
	fn(DT_N_S_soc_S_flash_controller_400fd000, reg, 1)
#define DT_N_S_soc_S_flash_controller_400fd000_P_reg_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_flash_controller_400fd000, reg, 0, __VA_ARGS__) \
	fn(DT_N_S_soc_S_flash_controller_400fd000, reg, 1, __VA_ARGS__)
#define DT_N_S_soc_S_flash_controller_400fd000_P_reg_EXISTS 1
#define DT_N_S_soc_S_flash_controller_400fd000_P_compatible {"ti,stellaris-flash-controller"}
#define DT_N_S_soc_S_flash_controller_400fd000_P_compatible_IDX_0 "ti,stellaris-flash-controller"
#define DT_N_S_soc_S_flash_controller_400fd000_P_compatible_IDX_0_EXISTS 1
#define DT_N_S_soc_S_flash_controller_400fd000_P_compatible_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_flash_controller_400fd000, compatible, 0)
#define DT_N_S_soc_S_flash_controller_400fd000_P_compatible_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_flash_controller_400fd000, compatible, 0, __VA_ARGS__)
#define DT_N_S_soc_S_flash_controller_400fd000_P_compatible_LEN 1
#define DT_N_S_soc_S_flash_controller_400fd000_P_compatible_EXISTS 1
#define DT_N_S_soc_S_flash_controller_400fd000_P_wakeup_source 0
#define DT_N_S_soc_S_flash_controller_400fd000_P_wakeup_source_EXISTS 1

/*
 * Devicetree node: /soc/flash-controller@400fd000/flash@0
 *
 * Node identifier: DT_N_S_soc_S_flash_controller_400fd000_S_flash_0
 *
 * Binding (compatible = soc-nv-flash):
 *   C:/Users/skall/source/repos/zephyr-3.1.0/zephyr/dts/bindings\mtd\soc-nv-flash.yaml
 *
 * (Descriptions have moved to the Devicetree Bindings Index
 * in the documentation.)
 */

/* Node's full path: */
#define DT_N_S_soc_S_flash_controller_400fd000_S_flash_0_PATH "/soc/flash-controller@400fd000/flash@0"

/* Node's name with unit-address: */
#define DT_N_S_soc_S_flash_controller_400fd000_S_flash_0_FULL_NAME "flash@0"

/* Node parent (/soc/flash-controller@400fd000) identifier: */
#define DT_N_S_soc_S_flash_controller_400fd000_S_flash_0_PARENT DT_N_S_soc_S_flash_controller_400fd000

/* Node's index in its parent's list of children: */
#define DT_N_S_soc_S_flash_controller_400fd000_S_flash_0_CHILD_IDX 0
#define DT_N_S_soc_S_flash_controller_400fd000_S_flash_0_FOREACH_CHILD(fn) 
#define DT_N_S_soc_S_flash_controller_400fd000_S_flash_0_FOREACH_CHILD_VARGS(fn, ...) 
#define DT_N_S_soc_S_flash_controller_400fd000_S_flash_0_FOREACH_CHILD_STATUS_OKAY(fn) 
#define DT_N_S_soc_S_flash_controller_400fd000_S_flash_0_FOREACH_CHILD_STATUS_OKAY_VARGS(fn, ...) 

/* Node's dependency ordinal: */
#define DT_N_S_soc_S_flash_controller_400fd000_S_flash_0_ORD 22

/* Ordinals for what this node depends on directly: */
#define DT_N_S_soc_S_flash_controller_400fd000_S_flash_0_REQUIRES_ORDS \
	21, /* /soc/flash-controller@400fd000 */

/* Ordinals for what depends directly on this node: */
#define DT_N_S_soc_S_flash_controller_400fd000_S_flash_0_SUPPORTS_ORDS /* nothing */

/* Existence and alternate IDs: */
#define DT_N_S_soc_S_flash_controller_400fd000_S_flash_0_EXISTS 1
#define DT_N_INST_0_soc_nv_flash DT_N_S_soc_S_flash_controller_400fd000_S_flash_0
#define DT_N_NODELABEL_flash0    DT_N_S_soc_S_flash_controller_400fd000_S_flash_0

/* Macros for properties that are special in the specification: */
#define DT_N_S_soc_S_flash_controller_400fd000_S_flash_0_REG_NUM 1
#define DT_N_S_soc_S_flash_controller_400fd000_S_flash_0_REG_IDX_0_EXISTS 1
#define DT_N_S_soc_S_flash_controller_400fd000_S_flash_0_REG_IDX_0_VAL_ADDRESS 0 /* 0x0 */
#define DT_N_S_soc_S_flash_controller_400fd000_S_flash_0_REG_IDX_0_VAL_SIZE 262144 /* 0x40000 */
#define DT_N_S_soc_S_flash_controller_400fd000_S_flash_0_RANGES_NUM 0
#define DT_N_S_soc_S_flash_controller_400fd000_S_flash_0_FOREACH_RANGE(fn) 
#define DT_N_S_soc_S_flash_controller_400fd000_S_flash_0_IRQ_NUM 0
#define DT_N_S_soc_S_flash_controller_400fd000_S_flash_0_COMPAT_MATCHES_soc_nv_flash 1
#define DT_N_S_soc_S_flash_controller_400fd000_S_flash_0_STATUS_okay 1

/* Pin control (pinctrl-<i>, pinctrl-names) properties: */
#define DT_N_S_soc_S_flash_controller_400fd000_S_flash_0_PINCTRL_NUM 0

/* Generic property macros: */
#define DT_N_S_soc_S_flash_controller_400fd000_S_flash_0_P_compatible {"soc-nv-flash"}
#define DT_N_S_soc_S_flash_controller_400fd000_S_flash_0_P_compatible_IDX_0 "soc-nv-flash"
#define DT_N_S_soc_S_flash_controller_400fd000_S_flash_0_P_compatible_IDX_0_EXISTS 1
#define DT_N_S_soc_S_flash_controller_400fd000_S_flash_0_P_compatible_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_flash_controller_400fd000_S_flash_0, compatible, 0)
#define DT_N_S_soc_S_flash_controller_400fd000_S_flash_0_P_compatible_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_flash_controller_400fd000_S_flash_0, compatible, 0, __VA_ARGS__)
#define DT_N_S_soc_S_flash_controller_400fd000_S_flash_0_P_compatible_LEN 1
#define DT_N_S_soc_S_flash_controller_400fd000_S_flash_0_P_compatible_EXISTS 1
#define DT_N_S_soc_S_flash_controller_400fd000_S_flash_0_P_reg {0 /* 0x0 */, 262144 /* 0x40000 */}
#define DT_N_S_soc_S_flash_controller_400fd000_S_flash_0_P_reg_IDX_0 0
#define DT_N_S_soc_S_flash_controller_400fd000_S_flash_0_P_reg_IDX_0_EXISTS 1
#define DT_N_S_soc_S_flash_controller_400fd000_S_flash_0_P_reg_IDX_1 262144
#define DT_N_S_soc_S_flash_controller_400fd000_S_flash_0_P_reg_IDX_1_EXISTS 1
#define DT_N_S_soc_S_flash_controller_400fd000_S_flash_0_P_reg_FOREACH_PROP_ELEM(fn) fn(DT_N_S_soc_S_flash_controller_400fd000_S_flash_0, reg, 0) \
	fn(DT_N_S_soc_S_flash_controller_400fd000_S_flash_0, reg, 1)
#define DT_N_S_soc_S_flash_controller_400fd000_S_flash_0_P_reg_FOREACH_PROP_ELEM_VARGS(fn, ...) fn(DT_N_S_soc_S_flash_controller_400fd000_S_flash_0, reg, 0, __VA_ARGS__) \
	fn(DT_N_S_soc_S_flash_controller_400fd000_S_flash_0, reg, 1, __VA_ARGS__)
#define DT_N_S_soc_S_flash_controller_400fd000_S_flash_0_P_reg_EXISTS 1
#define DT_N_S_soc_S_flash_controller_400fd000_S_flash_0_P_wakeup_source 0
#define DT_N_S_soc_S_flash_controller_400fd000_S_flash_0_P_wakeup_source_EXISTS 1

/*
 * Chosen nodes
 */
#define DT_CHOSEN_zephyr_sram               DT_N_S_memory_20000000
#define DT_CHOSEN_zephyr_sram_EXISTS        1
#define DT_CHOSEN_zephyr_flash              DT_N_S_soc_S_flash_controller_400fd000_S_flash_0
#define DT_CHOSEN_zephyr_flash_EXISTS       1
#define DT_CHOSEN_zephyr_console            DT_N_S_soc_S_uart_4000c000
#define DT_CHOSEN_zephyr_console_EXISTS     1
#define DT_CHOSEN_zephyr_shell_uart         DT_N_S_soc_S_uart_4000c000
#define DT_CHOSEN_zephyr_shell_uart_EXISTS  1
#define DT_CHOSEN_zephyr_bt_uart            DT_N_S_soc_S_uart_4000e000
#define DT_CHOSEN_zephyr_bt_uart_EXISTS     1
#define DT_CHOSEN_zephyr_uart_pipe          DT_N_S_soc_S_uart_4000d000
#define DT_CHOSEN_zephyr_uart_pipe_EXISTS   1
#define DT_CHOSEN_zephyr_bt_mon_uart        DT_N_S_soc_S_uart_4000e000
#define DT_CHOSEN_zephyr_bt_mon_uart_EXISTS 1

/*
 * Macros for compatibles with status "okay" nodes
 */
#define DT_COMPAT_HAS_OKAY_ti_lm3s6965evb_qemu 1
#define DT_COMPAT_HAS_OKAY_ti_lm3s6965 1
#define DT_COMPAT_HAS_OKAY_simple_bus 1
#define DT_COMPAT_HAS_OKAY_arm_v7m_nvic 1
#define DT_COMPAT_HAS_OKAY_arm_armv7m_systick 1
#define DT_COMPAT_HAS_OKAY_ti_stellaris_flash_controller 1
#define DT_COMPAT_HAS_OKAY_soc_nv_flash 1
#define DT_COMPAT_HAS_OKAY_ti_stellaris_uart 1
#define DT_COMPAT_HAS_OKAY_ti_stellaris_ethernet 1
#define DT_COMPAT_HAS_OKAY_ti_stellaris_gpio 1
#define DT_COMPAT_HAS_OKAY_arm_cortex_m3 1
#define DT_COMPAT_HAS_OKAY_mmio_sram 1
#define DT_COMPAT_HAS_OKAY_fixed_clock 1

/*
 * Macros for status "okay" instances of each compatible
 */
#define DT_N_INST_ti_lm3s6965evb_qemu_NUM_OKAY 1
#define DT_N_INST_ti_lm3s6965_NUM_OKAY 1
#define DT_N_INST_simple_bus_NUM_OKAY 1
#define DT_N_INST_arm_v7m_nvic_NUM_OKAY 1
#define DT_N_INST_arm_armv7m_systick_NUM_OKAY 1
#define DT_N_INST_ti_stellaris_flash_controller_NUM_OKAY 1
#define DT_N_INST_soc_nv_flash_NUM_OKAY 1
#define DT_N_INST_ti_stellaris_uart_NUM_OKAY 3
#define DT_N_INST_ti_stellaris_ethernet_NUM_OKAY 1
#define DT_N_INST_ti_stellaris_gpio_NUM_OKAY 7
#define DT_N_INST_arm_cortex_m3_NUM_OKAY 1
#define DT_N_INST_mmio_sram_NUM_OKAY 1
#define DT_N_INST_fixed_clock_NUM_OKAY 1
#define DT_FOREACH_OKAY_ti_lm3s6965evb_qemu(fn) fn(DT_N)
#define DT_FOREACH_OKAY_VARGS_ti_lm3s6965evb_qemu(fn, ...) fn(DT_N, __VA_ARGS__)
#define DT_FOREACH_OKAY_INST_ti_lm3s6965evb_qemu(fn) fn(0)
#define DT_FOREACH_OKAY_INST_VARGS_ti_lm3s6965evb_qemu(fn, ...) fn(0, __VA_ARGS__)
#define DT_FOREACH_OKAY_ti_lm3s6965(fn) fn(DT_N)
#define DT_FOREACH_OKAY_VARGS_ti_lm3s6965(fn, ...) fn(DT_N, __VA_ARGS__)
#define DT_FOREACH_OKAY_INST_ti_lm3s6965(fn) fn(0)
#define DT_FOREACH_OKAY_INST_VARGS_ti_lm3s6965(fn, ...) fn(0, __VA_ARGS__)
#define DT_FOREACH_OKAY_simple_bus(fn) fn(DT_N_S_soc)
#define DT_FOREACH_OKAY_VARGS_simple_bus(fn, ...) fn(DT_N_S_soc, __VA_ARGS__)
#define DT_FOREACH_OKAY_INST_simple_bus(fn) fn(0)
#define DT_FOREACH_OKAY_INST_VARGS_simple_bus(fn, ...) fn(0, __VA_ARGS__)
#define DT_FOREACH_OKAY_arm_v7m_nvic(fn) fn(DT_N_S_soc_S_interrupt_controller_e000e100)
#define DT_FOREACH_OKAY_VARGS_arm_v7m_nvic(fn, ...) fn(DT_N_S_soc_S_interrupt_controller_e000e100, __VA_ARGS__)
#define DT_FOREACH_OKAY_INST_arm_v7m_nvic(fn) fn(0)
#define DT_FOREACH_OKAY_INST_VARGS_arm_v7m_nvic(fn, ...) fn(0, __VA_ARGS__)
#define DT_FOREACH_OKAY_arm_armv7m_systick(fn) fn(DT_N_S_soc_S_timer_e000e010)
#define DT_FOREACH_OKAY_VARGS_arm_armv7m_systick(fn, ...) fn(DT_N_S_soc_S_timer_e000e010, __VA_ARGS__)
#define DT_FOREACH_OKAY_INST_arm_armv7m_systick(fn) fn(0)
#define DT_FOREACH_OKAY_INST_VARGS_arm_armv7m_systick(fn, ...) fn(0, __VA_ARGS__)
#define DT_FOREACH_OKAY_ti_stellaris_flash_controller(fn) fn(DT_N_S_soc_S_flash_controller_400fd000)
#define DT_FOREACH_OKAY_VARGS_ti_stellaris_flash_controller(fn, ...) fn(DT_N_S_soc_S_flash_controller_400fd000, __VA_ARGS__)
#define DT_FOREACH_OKAY_INST_ti_stellaris_flash_controller(fn) fn(0)
#define DT_FOREACH_OKAY_INST_VARGS_ti_stellaris_flash_controller(fn, ...) fn(0, __VA_ARGS__)
#define DT_FOREACH_OKAY_soc_nv_flash(fn) fn(DT_N_S_soc_S_flash_controller_400fd000_S_flash_0)
#define DT_FOREACH_OKAY_VARGS_soc_nv_flash(fn, ...) fn(DT_N_S_soc_S_flash_controller_400fd000_S_flash_0, __VA_ARGS__)
#define DT_FOREACH_OKAY_INST_soc_nv_flash(fn) fn(0)
#define DT_FOREACH_OKAY_INST_VARGS_soc_nv_flash(fn, ...) fn(0, __VA_ARGS__)
#define DT_FOREACH_OKAY_ti_stellaris_uart(fn) fn(DT_N_S_soc_S_uart_4000c000) fn(DT_N_S_soc_S_uart_4000d000) fn(DT_N_S_soc_S_uart_4000e000)
#define DT_FOREACH_OKAY_VARGS_ti_stellaris_uart(fn, ...) fn(DT_N_S_soc_S_uart_4000c000, __VA_ARGS__) fn(DT_N_S_soc_S_uart_4000d000, __VA_ARGS__) fn(DT_N_S_soc_S_uart_4000e000, __VA_ARGS__)
#define DT_FOREACH_OKAY_INST_ti_stellaris_uart(fn) fn(0) fn(1) fn(2)
#define DT_FOREACH_OKAY_INST_VARGS_ti_stellaris_uart(fn, ...) fn(0, __VA_ARGS__) fn(1, __VA_ARGS__) fn(2, __VA_ARGS__)
#define DT_FOREACH_OKAY_ti_stellaris_ethernet(fn) fn(DT_N_S_soc_S_ethernet_40048000)
#define DT_FOREACH_OKAY_VARGS_ti_stellaris_ethernet(fn, ...) fn(DT_N_S_soc_S_ethernet_40048000, __VA_ARGS__)
#define DT_FOREACH_OKAY_INST_ti_stellaris_ethernet(fn) fn(0)
#define DT_FOREACH_OKAY_INST_VARGS_ti_stellaris_ethernet(fn, ...) fn(0, __VA_ARGS__)
#define DT_FOREACH_OKAY_ti_stellaris_gpio(fn) fn(DT_N_S_soc_S_gpio_40004000) fn(DT_N_S_soc_S_gpio_40005000) fn(DT_N_S_soc_S_gpio_40006000) fn(DT_N_S_soc_S_gpio_40007000) fn(DT_N_S_soc_S_gpio_40024000) fn(DT_N_S_soc_S_gpio_40025000) fn(DT_N_S_soc_S_gpio_40026000)
#define DT_FOREACH_OKAY_VARGS_ti_stellaris_gpio(fn, ...) fn(DT_N_S_soc_S_gpio_40004000, __VA_ARGS__) fn(DT_N_S_soc_S_gpio_40005000, __VA_ARGS__) fn(DT_N_S_soc_S_gpio_40006000, __VA_ARGS__) fn(DT_N_S_soc_S_gpio_40007000, __VA_ARGS__) fn(DT_N_S_soc_S_gpio_40024000, __VA_ARGS__) fn(DT_N_S_soc_S_gpio_40025000, __VA_ARGS__) fn(DT_N_S_soc_S_gpio_40026000, __VA_ARGS__)
#define DT_FOREACH_OKAY_INST_ti_stellaris_gpio(fn) fn(0) fn(1) fn(2) fn(3) fn(4) fn(5) fn(6)
#define DT_FOREACH_OKAY_INST_VARGS_ti_stellaris_gpio(fn, ...) fn(0, __VA_ARGS__) fn(1, __VA_ARGS__) fn(2, __VA_ARGS__) fn(3, __VA_ARGS__) fn(4, __VA_ARGS__) fn(5, __VA_ARGS__) fn(6, __VA_ARGS__)
#define DT_FOREACH_OKAY_arm_cortex_m3(fn) fn(DT_N_S_cpus_S_cpu_0)
#define DT_FOREACH_OKAY_VARGS_arm_cortex_m3(fn, ...) fn(DT_N_S_cpus_S_cpu_0, __VA_ARGS__)
#define DT_FOREACH_OKAY_INST_arm_cortex_m3(fn) fn(0)
#define DT_FOREACH_OKAY_INST_VARGS_arm_cortex_m3(fn, ...) fn(0, __VA_ARGS__)
#define DT_FOREACH_OKAY_mmio_sram(fn) fn(DT_N_S_memory_20000000)
#define DT_FOREACH_OKAY_VARGS_mmio_sram(fn, ...) fn(DT_N_S_memory_20000000, __VA_ARGS__)
#define DT_FOREACH_OKAY_INST_mmio_sram(fn) fn(0)
#define DT_FOREACH_OKAY_INST_VARGS_mmio_sram(fn, ...) fn(0, __VA_ARGS__)
#define DT_FOREACH_OKAY_fixed_clock(fn) fn(DT_N_S_system_clock)
#define DT_FOREACH_OKAY_VARGS_fixed_clock(fn, ...) fn(DT_N_S_system_clock, __VA_ARGS__)
#define DT_FOREACH_OKAY_INST_fixed_clock(fn) fn(0)
#define DT_FOREACH_OKAY_INST_VARGS_fixed_clock(fn, ...) fn(0, __VA_ARGS__)

/*
 * Bus information for status "okay" nodes of each compatible
 */
